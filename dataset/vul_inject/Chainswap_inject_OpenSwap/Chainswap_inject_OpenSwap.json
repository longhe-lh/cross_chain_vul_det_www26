{"project": "OpenSwap", "functions": ["function removeLiquidity(address provider, bool direction, uint256 unstake, uint256 afterIndex, uint256 amountOut, uint256 reserveOut, uint256 expire, bool enable) external override lock {\n require(msg.sender == oracleLiquidityProvider || msg.sender == provider, \"Not from router or owner\");\n require(expire > block.timestamp, \"Already expired\");\n uint256 index = providerOfferIndex[provider];\n require(index > 0, \"Provider liquidity not found\");\n Offer storage offer = offers[direction][index];\n uint256 newAmount = offer.amount.sub(amountOut);\n function minLotSize(...) {...}\nrequire(newAmount == 0 || newAmount >= minLotSize(direction), \"Minium lot size not met\");\n uint256 staked = offer.staked.sub(unstake);\n offer.enabled = enable;\n if (amountOut > 0)\n offer.amount = newAmount;\n if (unstake > 0)\n offer.staked = staked;\n offer.reserve = offer.reserve.sub(reserveOut);\n offer.expire = expire;\n if (enable) {\n if (offer.isActive) {\n if (unstake > 0 && (index != afterIndex || offers[direction][offer.next].staked >= staked)) {\n _halfDequeue(direction, index);\n _enqueue(direction, index, staked, afterIndex, newAmount, expire);\n }\n } else {\n _enqueue(direction, index, staked, afterIndex, newAmount, expire);\n }\n } else {\n if (offer.isActive)\n _dequeue(direction, index);\n }\n if (unstake > 0) {\n stakeBalance = stakeBalance.sub(unstake);\n _safeTransfer(govToken, msg.sender, unstake); \n }\n if (amountOut > 0 || reserveOut > 0)\n _safeTransfer(direction ? token1 : token0, msg.sender, amountOut.add(reserveOut)); \n emit RemoveLiquidity(provider, direction, unstake, amountOut, reserveOut, offer.staked, offer.amount, offer.reserve, expire, enable);\n _sync();\n }", "function receive(uint256 fromChainId, address to, uint256 nonce, uint256 volume, Signature[] memory signatures) virtual external payable {\n        _chargeFee();\n        require(received[fromChainId][to][nonce] == 0, 'withdrawn already');\n        uint N = signatures.length;\n        require(N >= MappingTokenFactory(factory).getConfig(_minSignatures_), 'too few signatures');\n        for(uint i=0; i<N; i++) {\n            for(uint j=0; j<i; j++)\n                require(signatures[i].signatory != signatures[j].signatory, 'repetitive signatory');\n            bytes32 structHash = keccak256(abi.encode(RECEIVE_TYPEHASH, fromChainId, to, nonce, volume, signatures[i].signatory));\n            bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", _DOMAIN_SEPARATOR, structHash));\n            address signatory = ecrecover(digest, signatures[i].v, signatures[i].r, signatures[i].s);\n            require(signatory != address(0), \"invalid signature\");\n            require(signatory == signatures[i].signatory, \"unauthorized\");\n            _decreaseAuthQuota(signatures[i].signatory, volume);\n            emit Authorize(fromChainId, to, nonce, volume, signatory);\n        }\n        received[fromChainId][to][nonce] = volume;\n        _receive(to, volume);\n        emit Receive(fromChainId, to, nonce, volume);\n    }"], "label": "Yes", "detail": "The receive function of the Chainswap contract failed to properly validate the signatory field of incoming signatures. By supplying a forged signatory, an attacker was able to bypass the authorization process. Due to the absence of mapping key validation in Solidity, the system calculated an unreasonably high quota for the forged signatory, enabling the attacker to mint and withdraw unauthorized funds. The root cause is improper validation of mapping-based access control. Additionally, the platform had reduced the required number of signatures to 1 prior to the attack, making exploitation easier."}
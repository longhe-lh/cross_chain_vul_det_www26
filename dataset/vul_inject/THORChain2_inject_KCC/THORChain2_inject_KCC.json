{"project": "KCC", "functions": ["function depositNative(string memory _targetAddress, string memory chain) public payable {\n require(msg.value >= swapFee, \"Bridge:insufficient swap fee\");\n if (swapFee != 0) {\n payable(feeTo).transfer(swapFee);\n }\n emit DepositNative(msg.sender, msg.value - swapFee, _targetAddress, chain, swapFee);\n }", "function withdrawNative(address payable to, uint value, string memory proof, bytes32 taskHash) public\n onlyOperator\n whenNotPaused\n positiveValue(value)\n returns (bool)\n {\n require(address(this).balance >= value, \"Bridge:not enough native token\");\n require(taskHash == keccak256((abi.encodePacked(to, value, proof))), \"Bridge:taskHash is wrong\");\n require(!filledTx[taskHash], \"Bridge:tx filled already\");\n uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\n if (status == logic.TASKPROCESSING()) {\n emit WithdrawingNative(to, value, proof);\n } else if (status == logic.TASKDONE()) {\n emit WithdrawingNative(to, value, proof);\n emit WithdrawDoneNative(to, value, proof);\n to.transfer(value);\n filledTx[taskHash] = true;\n logic.removeTask(taskHash);\n }\n return true;\n }", "function deposit(address payable vault, address asset, uint amount, string memory memo) external payable {\n        uint safeAmount;\n        if(asset == address(0)){\n            safeAmount = msg.value;\n            (bool success, bytes memory data) = vault.call{value:safeAmount}(\"\");\n            require(success && (data.length == 0 || abi.decode(data, (bool))));\n        } else if(asset == RUNE) {\n            safeAmount = amount;\n            iRUNE(RUNE).transferTo(address(this), amount);\n            iERC20(RUNE).burn(amount);\n        } else {\n            safeAmount = safeTransferFrom(asset, amount); \n            vaultAllowance[vault][asset] += safeAmount; \n        }\n        emit Deposit(vault, asset, safeAmount, memo);\n    }"], "label": "Yes", "detail": "The attacker invoked the THORChain Router contract's deposit method via a malicious contract, passing an amount of 0. Then, the attacker initiated a transaction to call the malicious contract, setting a non-zero msg.value in the transaction. Due to a flaw in THORChain's code, the system used the msg.value from the transaction instead of the amount parameter in the deposit function when determining the deposit value. This allowed the attacker to fake a deposit and receive assets without actually transferring any real funds."}
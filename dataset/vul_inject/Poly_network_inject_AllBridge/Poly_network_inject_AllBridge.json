{"project": "AllBridge", "functions": ["function sendMessage(bytes32 message) external payable {\n require(\n uint8(message[0]) == chainId,\n \"WormholeMessenger: wrong chainId\"\n );\n require(\n otherChainIds[uint8(message[1])] != 0,\n \"Messenger: wrong destination\"\n );\n bytes32 messageWithSender = message.hashWithSenderAddress(msg.sender);\n uint32 nonce_ = nonce;\n uint64 sequence = wormhole.publishMessage(\n nonce_,\n abi.encodePacked(messageWithSender),\n commitmentLevel\n );\n unchecked {\n nonce = nonce_ + 1;\n }\n require(\n !sentMessages[messageWithSender],\n \"WormholeMessenger: has message\"\n );\n sentMessages[messageWithSender] = true;\n emit MessageSent(messageWithSender, sequence);\n }", "function verifyHeaderAndExecuteTx(bytes memory proof, bytes memory rawHeader, bytes memory headerProof, bytes memory curRawHeader,bytes memory headerSig) whenNotPaused public returns (bool){\n        ECCUtils.Header memory header = ECCUtils.deserializeHeader(rawHeader);\n        \n        IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress);\n        \n        address[] memory polyChainBKs = ECCUtils.deserializeKeepers(eccd.getCurEpochConPubKeyBytes());\n        uint256 curEpochStartHeight = eccd.getCurEpochStartHeight();\n        uint n = polyChainBKs.length;\n        if (header.height >= curEpochStartHeight) {\n            \n            require(ECCUtils.verifySig(rawHeader, headerSig, polyChainBKs, n - ( n - 1) / 3), \"Verify poly chain header signature failed!\");\n        } else {\n            \n            require(ECCUtils.verifySig(curRawHeader, headerSig, polyChainBKs, n - ( n - 1) / 3), \"Verify poly chain current epoch header signature failed!\");\n            \n            ECCUtils.Header memory curHeader = ECCUtils.deserializeHeader(curRawHeader);\n            bytes memory proveValue = ECCUtils.merkleProve(headerProof, curHeader.blockRoot);\n            require(ECCUtils.getHeaderHash(rawHeader) == Utils.bytesToBytes32(proveValue), \"verify header proof failed!\");\n        }\n        \n        bytes memory toMerkleValueBs = ECCUtils.merkleProve(proof, header.crossStatesRoot);\n        \n        ECCUtils.ToMerkleValue memory toMerkleValue = ECCUtils.deserializeMerkleValue(toMerkleValueBs);\n        require(!eccd.checkIfFromChainTxExist(toMerkleValue.fromChainID, Utils.bytesToBytes32(toMerkleValue.txHash)), \"the transaction has been executed!\");\n        require(eccd.markFromChainTxExist(toMerkleValue.fromChainID, Utils.bytesToBytes32(toMerkleValue.txHash)), \"Save crosschain tx exist failed!\");\n        \n        require(toMerkleValue.makeTxParam.toChainId == uint64(2), \"This Tx is not aiming at Ethereum network!\");\n        \n        address toContract = Utils.bytesToAddress(toMerkleValue.makeTxParam.toContract);\n        \n        require(_executeCrossChainTx(toContract, toMerkleValue.makeTxParam.method, toMerkleValue.makeTxParam.args, toMerkleValue.makeTxParam.fromContract, toMerkleValue.fromChainID), \"Execute CrossChain Tx failed!\");\n        \n        \n        emit VerifyHeaderAndExecuteTxEvent(toMerkleValue.fromChainID, toMerkleValue.makeTxParam.toContract, toMerkleValue.txHash, toMerkleValue.makeTxParam.txHash);\n        return true;\n    }"], "label": "Yes", "detail": "The PolyNetwork attack exploited a critical flaw in the EthCrossChainManager contract, which failed to properly validate the `method` string in incoming cross-chain requests. By crafting a transaction from Ontology that appeared legitimate and passed through PolyChain, the attacker called `putCurEpochConPubKeyBytes` on the Ethereum-side EthCrossChainData contract. This replaced the authorized keeper public keys with attacker-controlled keys. Subsequent fake transactions using forged signatures were accepted, leading to unauthorized asset minting and withdrawal across multiple blockchains. The exploit occurred because there was no method whitelist or contract-level access control on cross-chain delegated calls."}
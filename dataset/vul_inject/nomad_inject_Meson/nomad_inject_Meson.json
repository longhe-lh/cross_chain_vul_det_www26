{"project": "Meson", "functions": ["function _checkReleaseSignature(\n uint256 encodedSwap,\n address recipient,\n bytes32 r,\n bytes32 s,\n uint8 v,\n address signer\n ) internal pure {\n require(signer != address(0), \"Signer cannot be empty address\");\n require(v == 27 || v == 28, \"Invalid signature\");\n require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"Invalid signature\");\n bool nonTyped = _signNonTyped(encodedSwap);\n bytes32 digest;\n if (_inChainFrom(encodedSwap) == 0x00c3) {\n digest = keccak256(abi.encodePacked(nonTyped ? TRON_SIGN_HEADER_53 : TRON_SIGN_HEADER, encodedSwap, recipient));\n } else if (nonTyped) {\n digest = keccak256(abi.encodePacked(ETH_SIGN_HEADER_52, encodedSwap, recipient));\n } else {\n bytes32 typehash = _outChainFrom(encodedSwap) == 0x00c3 ? RELEASE_TO_TRON_TYPE_HASH : RELEASE_TYPE_HASH;\n assembly {\n mstore(20, recipient)\n mstore(0, encodedSwap)\n mstore(32, keccak256(0, 52))\n mstore(0, typehash)\n digest := keccak256(0, 64)\n }\n }\n require(signer == ecrecover(digest, v, r, s), \"Invalid signature\");\n }", "function process(bytes memory _message) public returns (bool _success) {\n        \n        bytes29 _m = _message.ref(0);\n        require(_m.destination() == localDomain, \"!destination\");\n        \n        bytes32 _messageHash = _m.keccak();\n        require(acceptableRoot(messages[_messageHash]), \"!proven\");\n        \n        require(entered == 1, \"!reentrant\");\n        entered = 0;\n        \n        messages[_messageHash] = LEGACY_STATUS_PROCESSED;\n        \n        IMessageRecipient(_m.recipientAddress()).handle(\n            _m.origin(),\n            _m.nonce(),\n            _m.sender(),\n            _m.body().clone()\n        );\n        \n        emit Process(_messageHash, true, \"\");\n        \n        entered = 1;\n        \n        return true;\n    }"], "label": "Yes", "detail": "Because confirmAt[bytes32(0)] was initialized to 1, acceptableRoot(bytes32(0)) always returns true, so attackers can submit arbitrary messages without proof and drain funds by calling process()"}
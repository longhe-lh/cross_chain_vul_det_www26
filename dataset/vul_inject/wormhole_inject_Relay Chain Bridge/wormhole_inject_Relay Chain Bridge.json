{"project": "Relay Chain Bridge", "functions": ["function voteProposal(uint8 chainID, uint64 depositNonce, bytes32 resourceID, bytes calldata data) external onlyRelayers whenNotPaused {\n address handler = _resourceIDToHandlerAddress[resourceID];\n bytes32 dataHash = keccak256(abi.encodePacked(handler, data));\n uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID);\n Proposal storage proposal = _proposals[nonceAndID][dataHash];\n require(_resourceIDToHandlerAddress[resourceID] != address(0), \"no handler for resourceID\");\n require(uint(proposal._status) <= 1, \"proposal already executed\");\n require(!_hasVotedOnProposal[nonceAndID][dataHash][msg.sender], \"relayer already voted\");\n if (uint(proposal._status) == 0) {\n ++_totalProposals;\n _proposals[nonceAndID][dataHash] = Proposal({\n _resourceID : resourceID,\n _dataHash : dataHash,\n _yesVotes : new address[](1),\n _noVotes : new address[](0),\n _status : ProposalStatus.Active,\n _proposedBlock : block.number\n });\n proposal._yesVotes[0] = msg.sender;\n emit ProposalEvent(chainID, depositNonce, ProposalStatus.Active, resourceID, dataHash);\n } else {\n require(dataHash == proposal._dataHash, \"datahash mismatch\");\n proposal._yesVotes.push(msg.sender);\n }\n _hasVotedOnProposal[nonceAndID][dataHash][msg.sender] = true;\n emit ProposalVote(chainID, depositNonce, proposal._status, resourceID);\n \n if (proposal._yesVotes.length >= _relayerThreshold) {\n require(dataHash == proposal._dataHash, \"data doesn't match datahash\");\n proposal._status = ProposalStatus.Executed;\n IDepositExecute depositHandler = IDepositExecute(_resourceIDToHandlerAddress[proposal._resourceID]);\n depositHandler.executeProposal(proposal._resourceID, data);\n emit ProposalEvent(chainID, depositNonce, proposal._status, proposal._resourceID, proposal._dataHash);\n }\n }", "function executeProposal(bytes32 resourceID, bytes calldata data) external override onlyBridge {\n uint256 amount;\n bytes memory destinationRecipientAddress;\n assembly {\n amount := calldataload(0x64)\n destinationRecipientAddress := mload(0x40)\n let lenDestinationRecipientAddress := calldataload(0x84)\n mstore(0x40, add(0x20, add(destinationRecipientAddress, lenDestinationRecipientAddress)))\n \n calldatacopy(\n destinationRecipientAddress, \n 0x84, \n sub(calldatasize(), 0x84) \n )\n }\n bytes20 recipientAddress;\n address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\n assembly {\n recipientAddress := mload(add(destinationRecipientAddress, 0x20))\n }\n require(_contractWhitelist[tokenAddress], \"provided tokenAddress is not whitelisted\");\n if (_burnList[tokenAddress]) {\n mintERC20(tokenAddress, address(recipientAddress), amount);\n } else {\n releaseERC20(tokenAddress, address(recipientAddress), amount);\n }\n }", "fn verify_signatures(\n    ctx: &ExecutionContext,\n    accs: &mut VerifySignatures,\n    data: VerifySignaturesData,\n) -> Result<()> {\n    accs.guardian_set\n        .verify_derivation(ctx.program_id, &(&*accs).into())?;\n    let sig_infos: Vec<SigInfo> = data\n        .signers\n        .iter()\n        .enumerate()\n        .filter_map(|(i, p)| {\n            if *p == -1 {\n                return None;\n            }\n            return Some(SigInfo {\n                sig_index: *p as u8,\n                signer_index: i as u8,\n            });\n        })\n        .collect();\n    let current_instruction = solana_program::sysvar::instructions::load_current_index(\n        &accs.instruction_acc.try_borrow_mut_data()?,\n    );\n    if current_instruction == 0 {\n        return Err(InstructionAtWrongIndex.into());\n    }\n    \n    let secp_ix_index = (current_instruction - 1) as u8;\n    let secp_ix = solana_program::sysvar::instructions::load_instruction_at(\n        secp_ix_index as usize,\n        &accs.instruction_acc.try_borrow_mut_data()?,\n    )\n    .map_err(|_| ProgramError::InvalidAccountData)?;\n    \n    if secp_ix.program_id != solana_program::secp256k1_program::id() {\n        return Err(InvalidSecpInstruction.into());\n    }\n    let secp_data_len = secp_ix.data.len();\n    if secp_data_len < 2 {\n        return Err(InvalidSecpInstruction.into());\n    }\n    let sig_len = secp_ix.data[0];\n    let mut index = 1;\n    let mut secp_ixs: Vec<SecpInstructionPart> = Vec::with_capacity(sig_len as usize);\n    for i in 0..sig_len {\n        let _sig_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]) as usize;\n        index += 2;\n        let sig_ix = secp_ix.data[index];\n        index += 1;\n        let address_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]) as usize;\n        index += 2;\n        let address_ix = secp_ix.data[index];\n        index += 1;\n        let msg_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]);\n        index += 2;\n        let msg_size = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]);\n        index += 2;\n        let msg_ix = secp_ix.data[index];\n        index += 1;\n        if address_ix != secp_ix_index || msg_ix != secp_ix_index || sig_ix != secp_ix_index {\n            return Err(InvalidSecpInstruction.into());\n        }\n        let address: &[u8] = &secp_ix.data[address_offset..address_offset + 20];\n        \n        if i > 0 {\n            if msg_offset != secp_ixs[0].msg_offset || msg_size != secp_ixs[0].msg_size {\n                return Err(InvalidSecpInstruction.into());\n            }\n        }\n        secp_ixs.push(SecpInstructionPart {\n            address,\n            msg_offset,\n            msg_size,\n        });\n    }\n    if sig_infos.len() != secp_ixs.len() {\n        return Err(ProgramError::InvalidArgument.into());\n    }\n    \n    if secp_ixs[0].msg_size != 32 {\n        return Err(ProgramError::InvalidArgument.into());\n    }\n    \n    let message = &secp_ix.data\n        [secp_ixs[0].msg_offset as usize..(secp_ixs[0].msg_offset + secp_ixs[0].msg_size) as usize];\n    \n    let mut msg_hash: [u8; 32] = [0u8; 32];\n    msg_hash.copy_from_slice(message);\n    if !accs.signature_set.is_initialized() {\n        accs.signature_set.signatures = vec![false; accs.guardian_set.keys.len()];\n        accs.signature_set.guardian_set_index = accs.guardian_set.index;\n        accs.signature_set.hash = msg_hash;\n        let size = accs.signature_set.size();\n        let ix = solana_program::system_instruction::create_account(\n            accs.payer.key,\n            accs.signature_set.info().key,\n            Exempt.amount(size),\n            size as u64,\n            ctx.program_id,\n        );\n        solana_program::program::invoke(&ix, ctx.accounts)?;\n    } else {\n        \n        if accs.signature_set.guardian_set_index != accs.guardian_set.index {\n            return Err(GuardianSetMismatch.into());\n        }\n        if accs.signature_set.hash != msg_hash {\n            return Err(InvalidHash.into());\n        }\n    }\n    \n    for s in sig_infos {\n        if s.signer_index > accs.guardian_set.num_guardians() {\n            return Err(ProgramError::InvalidArgument.into());\n        }\n        if s.sig_index + 1 > sig_len {\n            return Err(ProgramError::InvalidArgument.into());\n        }\n        let key = accs.guardian_set.keys[s.signer_index as usize];\n        \n        if key != secp_ixs[s.sig_index as usize].address {\n            return Err(ProgramError::InvalidArgument.into());\n        }\n        \n        accs.signature_set.signatures[s.signer_index as usize] = true;\n    }\n    Ok(())\n}"], "label": "Yes", "detail": "The attacker used a forged sysvar account to call the \"verify_signatures\" function. The function \"load_current_index\" used inside did not verify whether the provided sysvar account was the legitimate system sysvar. This allowed the attacker to bypass signature verification, create a malicious VAA claiming to mint 120,000 WETH, and ultimately transfer the minted tokens to Ethereum."}
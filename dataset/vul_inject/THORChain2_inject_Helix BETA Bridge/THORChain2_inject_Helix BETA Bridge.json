{"project": "Helix BETA Bridge", "functions": ["function lockAndRemoteIssuing(\n address token,\n address recipient,\n uint256 amount\n ) external payable whenNotPaused {\n uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n require(\n IERC20(token).transferFrom(msg.sender, address(this), amount),\n \"Backing:transfer tokens failed\"\n );\n uint256 balanceAfter = IERC20(token).balanceOf(address(this));\n require(\n balanceBefore + amount == balanceAfter,\n \"Backing:Transfer amount is invalid\"\n );\n _lockAndRemoteIssuing(token, recipient, amount, msg.value, false);\n }", "function _lockAndRemoteIssuing(\n address token,\n address recipient,\n uint256 amount,\n uint256 prepaid,\n bool isNative\n ) internal {\n bytes memory issueMappingToken = abi.encodeWithSelector(\n IErc20MappingTokenFactory.issueMappingToken.selector,\n token,\n recipient,\n amount\n );\n (uint256 transferId, uint256 fee) = _sendMessage(\n issueMappingToken,\n prepaid\n );\n bytes32 lockMessageHash = hash(\n abi.encodePacked(transferId, token, msg.sender, amount)\n );\n lockedMessages[transferId] = LockedInfo(lockMessageHash, false);\n emit TokenLocked(\n transferId,\n isNative,\n token,\n msg.sender,\n recipient,\n amount,\n fee\n );\n }", "function deposit(address payable vault, address asset, uint amount, string memory memo) external payable {\n        uint safeAmount;\n        if(asset == address(0)){\n            safeAmount = msg.value;\n            (bool success, bytes memory data) = vault.call{value:safeAmount}(\"\");\n            require(success && (data.length == 0 || abi.decode(data, (bool))));\n        } else if(asset == RUNE) {\n            safeAmount = amount;\n            iRUNE(RUNE).transferTo(address(this), amount);\n            iERC20(RUNE).burn(amount);\n        } else {\n            safeAmount = safeTransferFrom(asset, amount); \n            vaultAllowance[vault][asset] += safeAmount; \n        }\n        emit Deposit(vault, asset, safeAmount, memo);\n    }"], "label": "Yes", "detail": "The attacker invoked the THORChain Router contract's deposit method via a malicious contract, passing an amount of 0. Then, the attacker initiated a transaction to call the malicious contract, setting a non-zero msg.value in the transaction. Due to a flaw in THORChain's code, the system used the msg.value from the transaction instead of the amount parameter in the deposit function when determining the deposit value. This allowed the attacker to fake a deposit and receive assets without actually transferring any real funds."}
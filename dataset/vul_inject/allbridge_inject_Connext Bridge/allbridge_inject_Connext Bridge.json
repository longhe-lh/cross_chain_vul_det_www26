{"project": "Connext Bridge", "functions": ["function handleIncomingAsset(address _asset, uint256 _amount) internal {\n \n if (_amount == 0) {\n return;\n }\n \n if (_asset == address(0)) {\n revert AssetLogic__handleIncomingAsset_nativeAssetNotSupported();\n }\n IERC20Metadata asset = IERC20Metadata(_asset);\n \n uint256 starting = asset.balanceOf(address(this));\n \n asset.safeTransferFrom(msg.sender, address(this), _amount);\n \n if (asset.balanceOf(address(this)) - starting != _amount) {\n revert AssetLogic__handleIncomingAsset_feeOnTransferNotSupported();\n }\n }", "function safeTransferFrom(\n IERC20 token,\n address from,\n address to,\n uint256 value\n ) internal {\n _callOptionalReturn(\n token,\n abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n );\n }", "function _callOptionalReturn(IERC20 token, bytes memory data) private {\n \n \n \n bytes memory returndata = address(token).functionCall(\n data,\n \"SafeERC20: low-level call failed\"\n );\n if (returndata.length > 0) {\n \n require(\n abi.decode(returndata, (bool)),\n \"SafeERC20: ERC20 operation did not succeed\"\n );\n }\n }", "function handleOutgoingAsset(\n address _asset,\n address _to,\n uint256 _amount\n ) internal {\n \n if (_amount == 0) {\n return;\n }\n \n if (_asset == address(0))\n revert AssetLogic__handleOutgoingAsset_notNative();\n \n SafeERC20.safeTransfer(IERC20Metadata(_asset), _to, _amount);\n }", "function safeTransfer(IERC20 token, address to, uint256 value) internal {\n _callOptionalReturn(\n token,\n abi.encodeWithSelector(token.transfer.selector, to, value)\n );\n }", "function _callOptionalReturn(IERC20 token, bytes memory data) private {\n \n \n \n bytes memory returndata = address(token).functionCall(\n data,\n \"SafeERC20: low-level call failed\"\n );\n if (returndata.length > 0) {\n \n require(\n abi.decode(returndata, (bool)),\n \"SafeERC20: ERC20 operation did not succeed\"\n );\n }\n }", "function swapToVUsd(address user, uint256 amount) external onlyRouter returns (uint256) {\n        uint256 result; \n        uint256 fee;\n        if (amount > 0) {\n            fee = amount * feeShareBP / BP;\n            uint256 amountIn = toSystemPrecision(amount - fee);\n            \n            fee = amount - fromSystemPrecision(amountIn);\n            tokenBalance += amountIn;\n            uint256 vUsdNewAmount = this.getY(tokenBalance);\n            if (vUsdBalance > vUsdNewAmount) {\n                result = vUsdBalance - vUsdNewAmount;\n            }\n            vUsdBalance = vUsdNewAmount;\n            token.safeTransferFrom(user, address(this), amount);\n            _addRewards(fee);\n        }\n        emit SwappedToVUsd(user, address(token), amount, result, fee);\n        return result;\n    }"], "label": "Yes", "detail": "The attacker took out a 7.5 million BUSD flash loan, then made large deposits and swaps in the BUSD–vUSD and USDT–vUSD pools to manipulate exchange rates. They then swapped assets in the reverse direction to gain profits of approximately 550,000 BUSD before repaying the flash loan."}
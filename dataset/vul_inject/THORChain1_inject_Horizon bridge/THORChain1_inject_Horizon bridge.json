{"project": "Horizon bridge", "functions": ["function lockToken(uint256 amount, address recipient) public {\n require(\n recipient != address(0),\n \"EthManager/recipient is a zero address\"\n );\n require(amount > 0, \"EthManager/zero token locked\");\n uint256 _balanceBefore = link_.balanceOf(msg.sender);\n require(\n link_.transferFrom(msg.sender, address(this), amount),\n \"EthManager/lock failed\"\n );\n uint256 _balanceAfter = link_.balanceOf(msg.sender);\n uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);\n emit Locked(address(link_), msg.sender, _actualAmount, recipient);\n }", "function unlockToken(\n uint256 amount,\n address recipient,\n bytes32 receiptId\n ) public onlyWallet {\n require(\n !usedEvents_[receiptId],\n \"EthManager/The burn event cannot be reused\"\n );\n usedEvents_[receiptId] = true;\n require(link_.transfer(recipient, amount), \"EthManager/unlock failed\");\n emit Unlocked(address(link_), amount, recipient, receiptId);\n }", "func (e *ETHScanner) getAssetFromTokenAddress(token string) (common.Asset, error) {\n\tif IsETH(token) {\n\t\treturn common.ETHAsset, nil\n\t}\n\ttokenMeta, err := e.getTokenMeta(token)\n\tif err != nil {\n\t\treturn common.EmptyAsset, fmt.Errorf(\"fail to get token meta: %w\", err)\n\t}\n\tasset := common.ETHAsset\n\tif tokenMeta.Symbol != common.ETHChain.String() {\n\t\tasset, err = common.NewAsset(fmt.Sprintf(\"ETH.%s-%s\", tokenMeta.Symbol, strings.ToUpper(tokenMeta.Address)))\n\t\tif err != nil {\n\t\t\treturn common.EmptyAsset, fmt.Errorf(\"fail to create asset: %w\", err)\n\t\t}\n\t}\n\treturn asset, nil\n}"], "label": "Yes", "detail": "The getAssetFromTokenAddress function in THORChain's Ethereum scanner fails to properly handle ERC20 tokens with 'ETH' symbol. When processing deposits, it defaults to native ETH asset type if the token metadata isn't found in local storage. An attacker can deploy a malicious ERC20 token with 'ETH' symbol, causing the bridge to incorrectly identify the token as native Ethereum. This allows fake tokens to be treated as genuine ETH in cross-chain transactions."}
{"project": "ICICB Bridge", "functions": ["function transfer(uint[][] memory _args) external override payable onlyAdmin {\n\t\tfor(uint i=0; i<_args.length; i++) {\n\t\t\taddress _token \t\t= address(uint160(_args[i][0]));\n\t\t\taddress _to\t\t\t= address(uint160(_args[i][1]));\n\t\t\tuint _amount \t\t= _args[i][2];\n\t\t\tbytes32 _extra \t\t= bytes32(_args[i][3]);\n\t\t\tbool isPegged = false;\n\t\t\tif (!exists[_extra]) {\n\t\t\t\tif (_token==address(0)) {\n\t\t\t\t\tfunction transfer(...) {...}\npayable(_to).transfer(_amount);\n\t\t\t\t} else {\n\t\t\t\t\tisPegged = tokenIndexes[_token]!=0;\n\t\t\t\t\tif (isPegged) {\n\t\t\t\t\t\tIRC20(_token).mintTo(_to, _amount);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tIRC20(_token).transfer(_to, _amount);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texists[_extra] = true;\n\t\t\t}\n\t\t}\n\t}", "func (e *ETHScanner) getAssetFromTokenAddress(token string) (common.Asset, error) {\n\tif IsETH(token) {\n\t\treturn common.ETHAsset, nil\n\t}\n\ttokenMeta, err := e.getTokenMeta(token)\n\tif err != nil {\n\t\treturn common.EmptyAsset, fmt.Errorf(\"fail to get token meta: %w\", err)\n\t}\n\tasset := common.ETHAsset\n\tif tokenMeta.Symbol != common.ETHChain.String() {\n\t\tasset, err = common.NewAsset(fmt.Sprintf(\"ETH.%s-%s\", tokenMeta.Symbol, strings.ToUpper(tokenMeta.Address)))\n\t\tif err != nil {\n\t\t\treturn common.EmptyAsset, fmt.Errorf(\"fail to create asset: %w\", err)\n\t\t}\n\t}\n\treturn asset, nil\n}"], "label": "Yes", "detail": "The getAssetFromTokenAddress function in THORChain's Ethereum scanner fails to properly handle ERC20 tokens with 'ETH' symbol. When processing deposits, it defaults to native ETH asset type if the token metadata isn't found in local storage. An attacker can deploy a malicious ERC20 token with 'ETH' symbol, causing the bridge to incorrectly identify the token as native Ethereum. This allows fake tokens to be treated as genuine ETH in cross-chain transactions."}
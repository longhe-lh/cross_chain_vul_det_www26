{"project": "Sifchain Bridge", "functions": ["function newProphecyClaim(\n ClaimType _claimType,\n bytes memory _cosmosSender,\n uint256 _cosmosSenderSequence,\n address payable _ethereumReceiver,\n string memory _symbol,\n uint256 _amount\n ) public onlyValidator {\n uint256 _prophecyID = uint256(keccak256(abi.encodePacked(_claimType, _cosmosSender, _cosmosSenderSequence, _ethereumReceiver, _symbol, _amount)));\n (bool prophecyCompleted, , ) = getProphecyThreshold(_prophecyID);\n require(!prophecyCompleted, \"prophecyCompleted\");\n if (oracleClaimValidators[_prophecyID] == 0) {\n string memory symbol;\n if (_claimType == ClaimType.Burn) {\n symbol = BridgeBank(bridgeBank).safeLowerToUpperTokens(_symbol);\n require(\n BridgeBank(bridgeBank).getLockedFunds(symbol) >= _amount,\n \"Not enough locked assets to complete the proposed prophecy\"\n );\n address tokenAddress = BridgeBank(bridgeBank).getLockedTokenAddress(symbol);\n if (tokenAddress == address(0) && uint256(keccak256(abi.encodePacked(symbol))) != uint256(keccak256(\"eth\"))) {\n revert(\"Invalid token address\");\n }\n } else if (_claimType == ClaimType.Lock) {\n symbol = concat(COSMOS_NATIVE_ASSET_PREFIX, _symbol); \n symbol = BridgeBank(bridgeBank).safeLowerToUpperTokens(symbol);\n address bridgeTokenAddress = BridgeBank(bridgeBank).getBridgeToken(symbol);\n if (bridgeTokenAddress == address(0)) {\n \n BridgeBank(bridgeBank).createNewBridgeToken(symbol);\n }\n } else {\n revert(\"Invalid claim type, only burn and lock are supported.\");\n }\n emit LogNewProphecyClaim(\n _prophecyID,\n _claimType,\n _ethereumReceiver,\n symbol,\n _amount\n );\n }\n bool claimComplete = newOracleClaim(_prophecyID, msg.sender);\n if (claimComplete) {\n address tokenAddress;\n if (_claimType == ClaimType.Lock) {\n _symbol = concat(COSMOS_NATIVE_ASSET_PREFIX, _symbol);\n _symbol = BridgeBank(bridgeBank).safeLowerToUpperTokens(_symbol);\n tokenAddress = BridgeBank(bridgeBank).getBridgeToken(_symbol);\n } else {\n _symbol = BridgeBank(bridgeBank).safeLowerToUpperTokens(_symbol);\n tokenAddress = BridgeBank(bridgeBank).getLockedTokenAddress(_symbol);\n }\n completeProphecyClaim(\n _prophecyID,\n tokenAddress,\n _claimType,\n _ethereumReceiver,\n _symbol,\n _amount\n );\n }\n }", "function newOracleClaim(\n uint256 _prophecyID,\n address validatorAddress\n ) internal\n returns (bool)\n {\n \n require(\n !hasMadeClaim[_prophecyID][validatorAddress],\n \"Cannot make duplicate oracle claims from the same address.\"\n );\n hasMadeClaim[_prophecyID][validatorAddress] = true;\n \n oracleClaimValidators[_prophecyID] = oracleClaimValidators[_prophecyID].add(\n this.getValidatorPower(validatorAddress)\n );\n emit LogNewOracleClaim(\n _prophecyID,\n validatorAddress\n );\n \n (bool valid, , ) = getProphecyThreshold(_prophecyID);\n return valid;\n }", "function verifyHeaderAndExecuteTx(bytes memory proof, bytes memory rawHeader, bytes memory headerProof, bytes memory curRawHeader,bytes memory headerSig) whenNotPaused public returns (bool){\n        ECCUtils.Header memory header = ECCUtils.deserializeHeader(rawHeader);\n        \n        IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress);\n        \n        address[] memory polyChainBKs = ECCUtils.deserializeKeepers(eccd.getCurEpochConPubKeyBytes());\n        uint256 curEpochStartHeight = eccd.getCurEpochStartHeight();\n        uint n = polyChainBKs.length;\n        if (header.height >= curEpochStartHeight) {\n            \n            require(ECCUtils.verifySig(rawHeader, headerSig, polyChainBKs, n - ( n - 1) / 3), \"Verify poly chain header signature failed!\");\n        } else {\n            \n            require(ECCUtils.verifySig(curRawHeader, headerSig, polyChainBKs, n - ( n - 1) / 3), \"Verify poly chain current epoch header signature failed!\");\n            \n            ECCUtils.Header memory curHeader = ECCUtils.deserializeHeader(curRawHeader);\n            bytes memory proveValue = ECCUtils.merkleProve(headerProof, curHeader.blockRoot);\n            require(ECCUtils.getHeaderHash(rawHeader) == Utils.bytesToBytes32(proveValue), \"verify header proof failed!\");\n        }\n        \n        bytes memory toMerkleValueBs = ECCUtils.merkleProve(proof, header.crossStatesRoot);\n        \n        ECCUtils.ToMerkleValue memory toMerkleValue = ECCUtils.deserializeMerkleValue(toMerkleValueBs);\n        require(!eccd.checkIfFromChainTxExist(toMerkleValue.fromChainID, Utils.bytesToBytes32(toMerkleValue.txHash)), \"the transaction has been executed!\");\n        require(eccd.markFromChainTxExist(toMerkleValue.fromChainID, Utils.bytesToBytes32(toMerkleValue.txHash)), \"Save crosschain tx exist failed!\");\n        \n        require(toMerkleValue.makeTxParam.toChainId == uint64(2), \"This Tx is not aiming at Ethereum network!\");\n        \n        address toContract = Utils.bytesToAddress(toMerkleValue.makeTxParam.toContract);\n        \n        require(_executeCrossChainTx(toContract, toMerkleValue.makeTxParam.method, toMerkleValue.makeTxParam.args, toMerkleValue.makeTxParam.fromContract, toMerkleValue.fromChainID), \"Execute CrossChain Tx failed!\");\n        \n        \n        emit VerifyHeaderAndExecuteTxEvent(toMerkleValue.fromChainID, toMerkleValue.makeTxParam.toContract, toMerkleValue.txHash, toMerkleValue.makeTxParam.txHash);\n        return true;\n    }"], "label": "Yes", "detail": "The PolyNetwork attack exploited a critical flaw in the EthCrossChainManager contract, which failed to properly validate the `method` string in incoming cross-chain requests. By crafting a transaction from Ontology that appeared legitimate and passed through PolyChain, the attacker called `putCurEpochConPubKeyBytes` on the Ethereum-side EthCrossChainData contract. This replaced the authorized keeper public keys with attacker-controlled keys. Subsequent fake transactions using forged signatures were accepted, leading to unauthorized asset minting and withdrawal across multiple blockchains. The exploit occurred because there was no method whitelist or contract-level access control on cross-chain delegated calls."}
{"project": "Hop.Exchange", "functions": ["function sendToL2(\n uint256 chainId,\n address recipient,\n uint256 amount,\n uint256 amountOutMin,\n uint256 deadline,\n address relayer,\n uint256 relayerFee\n )\n external\n payable\n {\n IMessengerWrapper messengerWrapper = crossDomainMessengerWrappers[chainId];\n require(messengerWrapper != IMessengerWrapper(0), \"L1_BRG: chainId not supported\");\n require(isChainIdPaused[chainId] == false, \"L1_BRG: Sends to this chainId are paused\");\n require(amount > 0, \"L1_BRG: Must transfer a non-zero amount\");\n require(amount >= relayerFee, \"L1_BRG: Relayer fee cannot exceed amount\");\n _transferToBridge(msg.sender, amount);\n bytes memory message = abi.encodeWithSignature(\n \"distribute(address,uint256,uint256,uint256,address,uint256)\",\n recipient,\n amount,\n amountOutMin,\n deadline,\n relayer,\n relayerFee\n );\n chainBalance[chainId] = chainBalance[chainId].add(amount);\n messengerWrapper.sendCrossDomainMessage(message);\n emit TransferSentToL2(\n chainId,\n recipient,\n amount,\n amountOutMin,\n deadline,\n relayer,\n relayerFee\n );\n }", "func (e *ETHScanner) getAssetFromTokenAddress(token string) (common.Asset, error) {\n\tif IsETH(token) {\n\t\treturn common.ETHAsset, nil\n\t}\n\ttokenMeta, err := e.getTokenMeta(token)\n\tif err != nil {\n\t\treturn common.EmptyAsset, fmt.Errorf(\"fail to get token meta: %w\", err)\n\t}\n\tasset := common.ETHAsset\n\tif tokenMeta.Symbol != common.ETHChain.String() {\n\t\tasset, err = common.NewAsset(fmt.Sprintf(\"ETH.%s-%s\", tokenMeta.Symbol, strings.ToUpper(tokenMeta.Address)))\n\t\tif err != nil {\n\t\t\treturn common.EmptyAsset, fmt.Errorf(\"fail to create asset: %w\", err)\n\t\t}\n\t}\n\treturn asset, nil\n}"], "label": "Yes", "detail": "The getAssetFromTokenAddress function in THORChain's Ethereum scanner fails to properly handle ERC20 tokens with 'ETH' symbol. When processing deposits, it defaults to native ETH asset type if the token metadata isn't found in local storage. An attacker can deploy a malicious ERC20 token with 'ETH' symbol, causing the bridge to incorrectly identify the token as native Ethereum. This allows fake tokens to be treated as genuine ETH in cross-chain transactions."}
{"project": "Ronin Bridge", "functions": ["function depositEthFor(address _owner)\n public\n whenNotPaused\n payable\n returns (uint256)\n {\n address _weth = registry.getContract(registry.WETH_TOKEN());\n WETH(_weth).deposit.value(msg.value)();\n return _createDepositEntry(_owner, _weth, 20, msg.value);\n }", "function _createDepositEntry(\n address _owner,\n address _token,\n uint32 _standard,\n uint256 _number\n )\n internal\n onlyMappedToken(_token, _standard)\n returns (uint256 _depositId)\n {\n (,address _sidechainToken, uint32 _tokenStandard) = registry.getMappedToken(_token, true);\n require(_standard == _tokenStandard);\n DepositEntry memory _entry = DepositEntry(\n _owner,\n _token,\n _sidechainToken,\n _standard,\n _number\n );\n deposits.push(_entry);\n _depositId = depositCount++;\n emit TokenDeposited(\n _depositId,\n _owner,\n _token,\n _sidechainToken,\n _standard,\n _number\n );\n }", "function depositERC20For(address _user, address _token, uint256 _amount)\n public\n whenNotPaused\n returns (uint256)\n {\n require(\n IERC20(_token).transferFrom(msg.sender, address(this), _amount),\n \"MainchainGatewayManager: ERC-20 token transfer failed\"\n );\n return _createDepositEntry(_user, _token, 20, _amount);\n }", "function depositERC721For(address _user, address _token, uint256 _tokenId)\n public\n whenNotPaused\n returns (uint256)\n {\n function transferFrom(...) {...}\nfunction _createDepositEntry(...) {...}\nIERC721(_token).transferFrom(msg.sender, address(this), _tokenId);\n return _createDepositEntry(_user, _token, 721, _tokenId);\n }", "function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external {\n require(!claimed[account], 'MerkleDistributor: Already claimed.');\n \n bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n function verify(...) {...}\nrequire(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\n \n claimed[account] = true;\n require(IERC20(token).transfer(account, amount), 'MerkleDistributor: Transfer failed.');\n emit Claimed(index, account, amount);\n }", "function deposit(uint8 destinationChainID, bytes32 resourceID, bytes calldata data) external payable whenNotPaused {\n        uint256 fee = _getFee(destinationChainID);\n        require(msg.value == fee, \"Incorrect fee supplied\");\n        address handler = _resourceIDToHandlerAddress[resourceID];\n        require(handler != address(0), \"resourceID not mapped to handler\");\n        uint64 depositNonce = ++_depositCounts[destinationChainID];\n        _depositRecords[depositNonce][destinationChainID] = data;\n        IDepositExecute depositHandler = IDepositExecute(handler);\n        depositHandler.deposit(resourceID, destinationChainID, depositNonce, msg.sender, data);\n        emit Deposit(destinationChainID, resourceID, depositNonce);\n    }"], "label": "Yes", "detail": "The Meter.io cross-chain bridge exploit occurred because the Bridge contract failed to properly handle deposits of wrapped assets like WBNB when using the deposit() function. Normally, WETH or WBNB should only be deposited via depositETH(), which handles asset wrapping and ensures actual value is transferred. However, deposit() allowed deposits for any resourceID—including those mapped to WBNB—without checking if tokens were truly received or burned. The attacker exploited this by submitting a fake deposit using a crafted resourceID that resolved to the WBNB contract address, but without sending real tokens. Since no validation was enforced and the event was indistinguishable from a legitimate deposit, the relayers propagated the deposit event to target chains (Ethereum, Moonriver), where equivalent tokens were minted and withdrawn by the attacker. This resulted in severe financial loss, as no real assets backed the minted tokens. The root cause lies in inconsistent validation paths between depositETH() and deposit(), and the lack of enforcement for secure asset custody when dealing with wrapped native tokens."}
{"project": "Bridge_7", "functions": ["function burn(\n address _to,\n uint256 _amount,\n uint256 _nonce,\n bytes calldata _signature\n ) external validateProcessedNonce(_nonce) {\n \n configToken.burnToken(msg.sender, _amount);\n emit Transfer(\n msg.sender,\n _to,\n _amount,\n _nonce,\n block.timestamp,\n _signature,\n BridgeSteps.BURN\n );\n }", "function burnToken(address _owner, uint256 _amount) external onlyAdmin {\n _burn(_owner, _amount);\n }", "function mint(\n address _from,\n address _to,\n uint256 _amount,\n uint256 _nonce,\n bytes calldata _signature\n ) external {\n \n bytes32 message = prefixed(\n keccak256(abi.encodePacked(_from, _to, _amount, _nonce))\n );\n \n require(recoverSigner(message, _signature) == _from, \"wrong signature\");\n \n require(\n processedTxNonce[_from][_nonce] == false,\n \"transfer has already been processed\"\n );\n processedTxNonce[_from][_nonce] = true;\n configToken.mintToken(_to, _amount);\n emit Transfer(\n _from,\n _to,\n _amount,\n block.timestamp,\n _nonce,\n _signature,\n BridgeSteps.MINT\n );\n }", "function prefixed(bytes32 _hash) internal pure returns (bytes32) {\n return\n keccak256(\n abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n );\n }", "function splitSignature(\n bytes memory _signature\n ) internal pure returns (uint8, bytes32, bytes32) {\n \n require(_signature.length == 65, \"invalid signature\");\n uint8 v;\n bytes32 r;\n bytes32 s;\n \n assembly {\n \n r := mload(add(_signature, 32))\n \n s := mload(add(_signature, 64))\n \n v := byte(0, mload(add(_signature, 96)))\n }\n return (v, r, s);\n }", "function mintToken(address _to, uint256 _amount) external onlyAdmin {\n _mint(_to, _amount);\n }", "function swap(\n        Swap storage self,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external returns (uint256) {\n        {\n            \n            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\n            require(\n                dx <= tokenFrom.balanceOf(msg.sender),\n                \"Cannot swap more than you own\"\n            );\n            \n            uint256 beforeBalance = tokenFrom.balanceOf(address(this));     \n            tokenFrom.safeTransferFrom(msg.sender, address(this), dx);      \n            \n            dx = tokenFrom.balanceOf(address(this)).sub(beforeBalance);     \n        }\n        uint256 dy; \n        uint256 dyFee;  \n        uint256[] memory balances = self.balances;\n        \n        (dy, dyFee) = _calculateSwap(\n            self,\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx,\n            balances\n        );\n        require(dy >= minDy, \"Swap didn't result in min tokens\");   \n        uint256 dyAdminFee =\n            dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(\n                self.tokenPrecisionMultipliers[tokenIndexTo]\n            );  \n        \n        self.balances[tokenIndexFrom] = balances[tokenIndexFrom].add(dx);\n        \n        self.balances[tokenIndexTo] = balances[tokenIndexTo].sub(dy).sub(\n            dyAdminFee\n        );\n        \n        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\n        \n        emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\n        return dy;\n    }"], "label": "Yes", "detail": "The attack on Nerve's MetaPool was made possible by inconsistent implementations of the getXp() pricing function in two libraries: SwapUtils and MetaSwapUtils. The MetaSwap contract, which was forked from Saddle.Finance (itself a Solidity port of Curve's MetaPool), contained two key swap functions—swap() and swapUnderlying()—used for exchanging between LP tokens and stablecoins. During the attack, swap() underestimated the LP token value due to ignoring the virtual price, while swapUnderlying() calculated it correctly. The attacker repeatedly swapped stablecoins for undervalued LP tokens via swap(), removed liquidity to extract base tokens, and finally used swapUnderlying() to convert base tokens back to more stablecoins at a favorable rate. This loop drained the pool of liquidity. The vulnerability stems from inconsistent logic across forked components and highlights the risk of modifying or porting code without preserving behavioral equivalence. The attacker reportedly profited ~900 BNB. A similar attack had occurred on Synapse’s MetaPool one week earlier, exploiting the same flaw."}
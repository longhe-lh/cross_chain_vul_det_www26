{"project": "Synbiosis", "functions": ["function burnSyntheticToken(\n uint256 _stableBridgingFee,\n address _stoken,\n uint256 _amount,\n address _chain2address,\n address _receiveSide,\n address _oppositeBridge,\n address _revertableAddress,\n uint256 _chainID,\n bytes32 _clientID\n ) external whenNotPaused returns (bytes32 internalID) {\n require(_amount >= tokenThreshold[_stoken], \"Symb: amount under threshold\");\n ISyntFabric(fabric).unsynthesize(_msgSender(), _amount, _stoken);\n if (_revertableAddress == address(0)) {\n _revertableAddress = _chain2address;\n }\n {\n address rtoken = ISyntFabric(fabric).getRealRepresentation(_stoken);\n require(rtoken != address(0), \"Symb: incorrect synt\");\n internalID = keccak256(\n abi.encodePacked(this, requestCount, block.chainid)\n );\n bytes32 externalID = keccak256(abi.encodePacked(internalID, _receiveSide, _revertableAddress, _chainID));\n bytes memory out = abi.encodeWithSelector(\n bytes4(\n keccak256(\n bytes(\"unsynthesize(uint256,bytes32,address,uint256,address)\")\n )\n ),\n _stableBridgingFee,\n externalID,\n rtoken,\n _amount,\n _chain2address\n );\n requests[externalID] = TxState({\n recipient: _msgSender(),\n chain2address: _chain2address,\n token: rtoken,\n stoken: _stoken,\n amount: _amount,\n state: RequestState.Sent\n });\n requestCount++;\n IBridge(bridge).transmitRequestV2(\n out,\n _receiveSide,\n _oppositeBridge,\n _chainID\n );\n }\n emit BurnRequest(internalID, _msgSender(), _chainID, _revertableAddress, _chain2address, _amount, _stoken);\n emit ClientIdLog(internalID, _clientID);\n }", "function unsynthesize(\n uint256 _stableBridgingFee,\n bytes32 _externalID,\n address _token,\n uint256 _amount,\n address _to\n ) external onlyBridge whenNotPaused {\n require(\n unsynthesizeStates[_externalID] == UnsynthesizeState.Default,\n \"Symb: synthetic tokens emergencyUnburn\"\n );\n balanceOf[_token] = balanceOf[_token] - _amount;\n unsynthesizeStates[_externalID] = UnsynthesizeState.Unsynthesized;\n TransferHelper.safeTransfer(_token, _to, _amount - _stableBridgingFee);\n TransferHelper.safeTransfer(_token, bridge, _stableBridgingFee);\n emit BurnCompleted(_externalID, _to, _amount - _stableBridgingFee, _stableBridgingFee, _token);\n }", "function swap(\n        Swap storage self,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external returns (uint256) {\n        {\n            \n            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\n            require(\n                dx <= tokenFrom.balanceOf(msg.sender),\n                \"Cannot swap more than you own\"\n            );\n            \n            uint256 beforeBalance = tokenFrom.balanceOf(address(this));     \n            tokenFrom.safeTransferFrom(msg.sender, address(this), dx);      \n            \n            dx = tokenFrom.balanceOf(address(this)).sub(beforeBalance);     \n        }\n        uint256 dy; \n        uint256 dyFee;  \n        uint256[] memory balances = self.balances;\n        \n        (dy, dyFee) = _calculateSwap(\n            self,\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx,\n            balances\n        );\n        require(dy >= minDy, \"Swap didn't result in min tokens\");   \n        uint256 dyAdminFee =\n            dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(\n                self.tokenPrecisionMultipliers[tokenIndexTo]\n            );  \n        \n        self.balances[tokenIndexFrom] = balances[tokenIndexFrom].add(dx);\n        \n        self.balances[tokenIndexTo] = balances[tokenIndexTo].sub(dy).sub(\n            dyAdminFee\n        );\n        \n        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\n        \n        emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\n        return dy;\n    }"], "label": "Yes", "detail": "The attack on Nerve's MetaPool was made possible by inconsistent implementations of the getXp() pricing function in two libraries: SwapUtils and MetaSwapUtils. The MetaSwap contract, which was forked from Saddle.Finance (itself a Solidity port of Curve's MetaPool), contained two key swap functions—swap() and swapUnderlying()—used for exchanging between LP tokens and stablecoins. During the attack, swap() underestimated the LP token value due to ignoring the virtual price, while swapUnderlying() calculated it correctly. The attacker repeatedly swapped stablecoins for undervalued LP tokens via swap(), removed liquidity to extract base tokens, and finally used swapUnderlying() to convert base tokens back to more stablecoins at a favorable rate. This loop drained the pool of liquidity. The vulnerability stems from inconsistent logic across forked components and highlights the risk of modifying or porting code without preserving behavioral equivalence. The attacker reportedly profited ~900 BNB. A similar attack had occurred on Synapse’s MetaPool one week earlier, exploiting the same flaw."}
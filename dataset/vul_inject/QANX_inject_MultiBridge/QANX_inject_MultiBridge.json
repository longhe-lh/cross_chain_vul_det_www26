{"project": "MultiBridge", "functions": ["function executeMessage(\n address _srcContract,\n uint64 _srcChainId,\n bytes calldata _message,\n address \n ) external payable override onlyMessageBus returns (ExecutionStatus) {\n \n \n if (_srcChainId != senderChain) {\n revert Error.INVALID_SENDER_CHAIN_ID();\n }\n \n if (_srcContract != senderAdapter) {\n revert Error.INVALID_SENDER_ADAPTER();\n }\n \n AdapterPayload memory decodedPayload = abi.decode(_message, (AdapterPayload));\n bytes32 msgId = decodedPayload.msgId;\n \n if (isMessageExecuted[msgId]) {\n revert MessageIdAlreadyExecuted(msgId);\n }\n isMessageExecuted[decodedPayload.msgId] = true;\n \n if (decodedPayload.finalDestination != gac.getMultiMessageReceiver(block.chainid)) {\n revert Error.INVALID_FINAL_DESTINATION();\n }\n MessageLibrary.Message memory _data = abi.decode(decodedPayload.data, (MessageLibrary.Message));\n try IMultiMessageReceiver(decodedPayload.finalDestination).receiveMessage(_data, name) {\n emit MessageIdExecuted(_data.srcChainId, msgId);\n } catch (bytes memory lowLevelData) {\n revert MessageFailure(msgId, lowLevelData);\n }\n return ExecutionStatus.Success;\n }", "function receiveMessage(MessageLibrary.Message calldata _message, string memory _bridgeName)\n external\n override\n onlyReceiverAdapter\n {\n if (_message.dstChainId != block.chainid) {\n revert Error.INVALID_DST_CHAIN();\n }\n if (_message.target == address(0)) {\n revert Error.INVALID_TARGET();\n }\n \n if (_message.srcChainId != 1) {\n revert Error.INVALID_SENDER_CHAIN_ID();\n }\n \n \n bytes32 msgId = MessageLibrary.computeMsgId(_message);\n if (isDuplicateAdapter[msgId][msg.sender]) {\n revert Error.DUPLICATE_MESSAGE_DELIVERY_BY_ADAPTER();\n }\n if (isExecuted[msgId]) {\n revert Error.MSG_ID_ALREADY_EXECUTED();\n }\n isDuplicateAdapter[msgId][msg.sender] = true;\n \n ++messageVotes[msgId];\n \n ExecutionData memory prevStored = msgReceived[msgId];\n \n if (prevStored.target == address(0)) {\n msgReceived[msgId] = ExecutionData(\n _message.target, _message.callData, _message.nativeValue, _message.nonce, _message.expiration\n );\n }\n emit SingleBridgeMsgReceived(msgId, _bridgeName, _message.nonce, msg.sender);\n }", "function verifySignature(bytes32 txid, bytes memory signature, uint256 amount) internal view returns (bool) {\n        \n        bytes32 r;\n        bytes32 vs;\n        \n        assembly {\n            r := mload(add(signature, 32))\n            vs := mload(add(signature, 64))\n        }\n        \n        bytes32 s = vs & 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        uint8 v = 27 + uint8(uint256(vs) >> 255);\n        \n        return amount < signers[ecrecover(txid, v, r, s)];\n    }"], "label": "Yes", "detail": "The attacker cloned the original QANX Bridge contract, modified specific behaviors, and deployed it onto the BSC chain as a 'fake contract.' This fake contract's deposit behavior made it accept any input QANX amount as a parameter while only transferring 1 QANX internally. The fake contract created a transaction hash (`txid`) that looked legitimate and submitted this hash to the real QANX Bridge's signing nodes for authorization. Because the `verifySignature` function did not validate the transaction's `to` field (`tx.to`), the signing nodes failed to differentiate between the fake contract and the legitimate bridge contract, signing the malicious transaction. This allowed the attacker to withdraw 4.5 million QANX tokens from Ethereum, even though only 1 QANX token was legitimately bridged to the BSC chain."}
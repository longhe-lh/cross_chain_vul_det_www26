{"project": "Arbitrum Bridge", "functions": ["function addSequencerL2BatchFromOrigin(\n uint256 sequenceNumber,\n bytes calldata data,\n uint256 afterDelayedMessagesRead,\n IGasRefunder gasRefunder\n ) external refundsGas(gasRefunder) {\n \n if (msg.sender != tx.origin) revert NotOrigin();\n if (!isBatchPoster[msg.sender]) revert NotBatchPoster();\n (bytes32 dataHash, TimeBounds memory timeBounds) = formDataHash(\n data,\n afterDelayedMessagesRead\n );\n (\n uint256 seqMessageIndex,\n bytes32 beforeAcc,\n bytes32 delayedAcc,\n bytes32 afterAcc\n ) = addSequencerL2BatchImpl(\n dataHash,\n afterDelayedMessagesRead,\n data.length\n );\n if (seqMessageIndex != sequenceNumber)\n revert BadSequencerNumber(seqMessageIndex, sequenceNumber);\n emit SequencerBatchDelivered(\n sequenceNumber,\n beforeAcc,\n afterAcc,\n delayedAcc,\n totalDelayedMessagesRead,\n timeBounds,\n BatchDataLocation.TxInput\n );\n }", "function addSequencerL2BatchImpl(\n bytes32 dataHash,\n uint256 afterDelayedMessagesRead,\n uint256 calldataLengthPosted\n )\n internal\n returns (\n uint256 seqMessageIndex,\n bytes32 beforeAcc,\n bytes32 delayedAcc,\n bytes32 acc\n )\n {\n if (afterDelayedMessagesRead < totalDelayedMessagesRead)\n revert DelayedBackwards();\n if (afterDelayedMessagesRead > bridge.delayedMessageCount())\n revert DelayedTooFar();\n (seqMessageIndex, beforeAcc, delayedAcc, acc) = bridge\n .enqueueSequencerMessage(dataHash, afterDelayedMessagesRead);\n totalDelayedMessagesRead = afterDelayedMessagesRead;\n if (calldataLengthPosted > 0) {\n \n \n address batchPoster = msg.sender;\n bytes memory spendingReportMsg = abi.encodePacked(\n block.timestamp,\n batchPoster,\n dataHash,\n seqMessageIndex,\n block.basefee\n );\n uint256 msgNum = bridge.submitBatchSpendingReport(\n batchPoster,\n keccak256(spendingReportMsg)\n );\n \n emit InboxMessageDelivered(msgNum, spendingReportMsg);\n }\n }", "function enqueueSequencerMessage(\n bytes32 dataHash,\n uint256 afterDelayedMessagesRead\n )\n external\n onlySequencerInbox\n returns (\n uint256 seqMessageIndex,\n bytes32 beforeAcc,\n bytes32 delayedAcc,\n bytes32 acc\n )\n {\n seqMessageIndex = sequencerInboxAccs.length;\n if (sequencerInboxAccs.length > 0) {\n beforeAcc = sequencerInboxAccs[sequencerInboxAccs.length - 1];\n }\n if (afterDelayedMessagesRead > 0) {\n delayedAcc = delayedInboxAccs[afterDelayedMessagesRead - 1];\n }\n acc = keccak256(abi.encodePacked(beforeAcc, dataHash, delayedAcc));\n sequencerInboxAccs.push(acc);\n }", "fn verify_signatures(\n    ctx: &ExecutionContext,\n    accs: &mut VerifySignatures,\n    data: VerifySignaturesData,\n) -> Result<()> {\n    accs.guardian_set\n        .verify_derivation(ctx.program_id, &(&*accs).into())?;\n    let sig_infos: Vec<SigInfo> = data\n        .signers\n        .iter()\n        .enumerate()\n        .filter_map(|(i, p)| {\n            if *p == -1 {\n                return None;\n            }\n            return Some(SigInfo {\n                sig_index: *p as u8,\n                signer_index: i as u8,\n            });\n        })\n        .collect();\n    let current_instruction = solana_program::sysvar::instructions::load_current_index(\n        &accs.instruction_acc.try_borrow_mut_data()?,\n    );\n    if current_instruction == 0 {\n        return Err(InstructionAtWrongIndex.into());\n    }\n    \n    let secp_ix_index = (current_instruction - 1) as u8;\n    let secp_ix = solana_program::sysvar::instructions::load_instruction_at(\n        secp_ix_index as usize,\n        &accs.instruction_acc.try_borrow_mut_data()?,\n    )\n    .map_err(|_| ProgramError::InvalidAccountData)?;\n    \n    if secp_ix.program_id != solana_program::secp256k1_program::id() {\n        return Err(InvalidSecpInstruction.into());\n    }\n    let secp_data_len = secp_ix.data.len();\n    if secp_data_len < 2 {\n        return Err(InvalidSecpInstruction.into());\n    }\n    let sig_len = secp_ix.data[0];\n    let mut index = 1;\n    let mut secp_ixs: Vec<SecpInstructionPart> = Vec::with_capacity(sig_len as usize);\n    for i in 0..sig_len {\n        let _sig_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]) as usize;\n        index += 2;\n        let sig_ix = secp_ix.data[index];\n        index += 1;\n        let address_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]) as usize;\n        index += 2;\n        let address_ix = secp_ix.data[index];\n        index += 1;\n        let msg_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]);\n        index += 2;\n        let msg_size = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]);\n        index += 2;\n        let msg_ix = secp_ix.data[index];\n        index += 1;\n        if address_ix != secp_ix_index || msg_ix != secp_ix_index || sig_ix != secp_ix_index {\n            return Err(InvalidSecpInstruction.into());\n        }\n        let address: &[u8] = &secp_ix.data[address_offset..address_offset + 20];\n        \n        if i > 0 {\n            if msg_offset != secp_ixs[0].msg_offset || msg_size != secp_ixs[0].msg_size {\n                return Err(InvalidSecpInstruction.into());\n            }\n        }\n        secp_ixs.push(SecpInstructionPart {\n            address,\n            msg_offset,\n            msg_size,\n        });\n    }\n    if sig_infos.len() != secp_ixs.len() {\n        return Err(ProgramError::InvalidArgument.into());\n    }\n    \n    if secp_ixs[0].msg_size != 32 {\n        return Err(ProgramError::InvalidArgument.into());\n    }\n    \n    let message = &secp_ix.data\n        [secp_ixs[0].msg_offset as usize..(secp_ixs[0].msg_offset + secp_ixs[0].msg_size) as usize];\n    \n    let mut msg_hash: [u8; 32] = [0u8; 32];\n    msg_hash.copy_from_slice(message);\n    if !accs.signature_set.is_initialized() {\n        accs.signature_set.signatures = vec![false; accs.guardian_set.keys.len()];\n        accs.signature_set.guardian_set_index = accs.guardian_set.index;\n        accs.signature_set.hash = msg_hash;\n        let size = accs.signature_set.size();\n        let ix = solana_program::system_instruction::create_account(\n            accs.payer.key,\n            accs.signature_set.info().key,\n            Exempt.amount(size),\n            size as u64,\n            ctx.program_id,\n        );\n        solana_program::program::invoke(&ix, ctx.accounts)?;\n    } else {\n        \n        if accs.signature_set.guardian_set_index != accs.guardian_set.index {\n            return Err(GuardianSetMismatch.into());\n        }\n        if accs.signature_set.hash != msg_hash {\n            return Err(InvalidHash.into());\n        }\n    }\n    \n    for s in sig_infos {\n        if s.signer_index > accs.guardian_set.num_guardians() {\n            return Err(ProgramError::InvalidArgument.into());\n        }\n        if s.sig_index + 1 > sig_len {\n            return Err(ProgramError::InvalidArgument.into());\n        }\n        let key = accs.guardian_set.keys[s.signer_index as usize];\n        \n        if key != secp_ixs[s.sig_index as usize].address {\n            return Err(ProgramError::InvalidArgument.into());\n        }\n        \n        accs.signature_set.signatures[s.signer_index as usize] = true;\n    }\n    Ok(())\n}"], "label": "Yes", "detail": "The attacker used a forged sysvar account to call the \"verify_signatures\" function. The function \"load_current_index\" used inside did not verify whether the provided sysvar account was the legitimate system sysvar. This allowed the attacker to bypass signature verification, create a malicious VAA claiming to mint 120,000 WETH, and ultimately transfer the minted tokens to Ethereum."}
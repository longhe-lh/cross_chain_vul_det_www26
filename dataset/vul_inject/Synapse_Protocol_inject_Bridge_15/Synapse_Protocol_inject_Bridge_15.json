{"project": "Bridge_15", "functions": ["function proposeTransaction(\n address sender,\n address receiver,\n uint amount,\n address[] memory potentialSigners,\n address proposer,\n bytes calldata signature\n ) public {\n \n bytes32 message = prefixed(\n keccak256(abi.encodePacked(sender, receiver, amount))\n );\n require(\n recoverSigner(message, signature) == proposer,\n \"Signature Error: Not Signed by the Proposer\"\n );\n \n require(\n potentialSigners.length == 3,\n \"Three potential signers are required\"\n );\n \n transactions[message] = Transaction(\n potentialSigners,\n new address[](0),\n sender,\n receiver,\n amount\n );\n \n transactions[message].signers.push(msg.sender);\n \n emit Proposed(sender, receiver, amount, proposer, signature);\n }", "function prefixed(bytes32 hash) internal pure returns (bytes32) {\n return\n keccak256(\n abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n );\n }", "function recoverSigner(\n bytes32 message,\n bytes memory sig\n ) internal pure returns (address) {\n uint8 v;\n bytes32 r;\n bytes32 s;\n function splitSignature(...) {...}\n(v, r, s) = splitSignature(sig);\n return ecrecover(message, v, r, s);\n }", "function splitSignature(\n bytes memory sig\n ) internal pure returns (uint8, bytes32, bytes32) {\n require(sig.length == 65);\n bytes32 r;\n bytes32 s;\n uint8 v;\n assembly {\n \n r := mload(add(sig, 32))\n \n s := mload(add(sig, 64))\n \n v := byte(0, mload(add(sig, 96)))\n }\n return (v, r, s);\n }", "function confirmTransaction(\n address sender,\n address receiver,\n uint amount,\n address signer,\n bytes memory signature\n ) public {\n \n \n bytes32 message = prefixed(\n keccak256(abi.encodePacked(sender, receiver, amount))\n );\n require(\n recoverSigner(message, signature) == signer,\n \"Signature Error: Not Signed by the Sender\"\n );\n \n \n require(\n addressExists(transactions[message].potentialSigners, signer),\n \"Provided Address is not a potential signer for this transaction\"\n );\n \n require(\n !addressExists(transactions[message].signers, signer),\n \"Sender has already signed this transaction\"\n );\n \n transactions[message].signers.push(signer);\n \n emit Confirmed(sender, receiver, amount, signer, signature);\n if (transactions[message].signers.length >= 2) {\n Transaction memory trx = transactions[message];\n burn(trx.sender, trx.receiver, trx.amount);\n }\n }", "function addressExists(\n address[] memory _arr,\n address _address\n ) internal view returns (bool) {\n for (uint256 i = 0; i < _arr.length; i++) {\n if (_arr[i] == _address) {\n return true;\n }\n }\n return false;\n }", "function prefixed(bytes32 hash) internal pure returns (bytes32) {\n return\n keccak256(\n abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n );\n }", "function recoverSigner(\n bytes32 message,\n bytes memory sig\n ) internal pure returns (address) {\n uint8 v;\n bytes32 r;\n bytes32 s;\n function splitSignature(...) {...}\n(v, r, s) = splitSignature(sig);\n return ecrecover(message, v, r, s);\n }", "function splitSignature(\n bytes memory sig\n ) internal pure returns (uint8, bytes32, bytes32) {\n require(sig.length == 65);\n bytes32 r;\n bytes32 s;\n uint8 v;\n assembly {\n \n r := mload(add(sig, 32))\n \n s := mload(add(sig, 64))\n \n v := byte(0, mload(add(sig, 96)))\n }\n return (v, r, s);\n }", "function burn(address from, address to, uint256 amount) internal {\n function burn(...) {...}\ntoken.burn(from, amount);\n emit Transfer(from, to, amount, Step.Burn);\n }", "function mint(address from, address to, uint256 amount) external {\n function mint(...) {...}\ntoken.mint(to, amount);\n \n emit Transfer(from, to, amount, Step.Mint);\n }", "function swap(\n        Swap storage self,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external returns (uint256) {\n        {\n            \n            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\n            require(\n                dx <= tokenFrom.balanceOf(msg.sender),\n                \"Cannot swap more than you own\"\n            );\n            \n            uint256 beforeBalance = tokenFrom.balanceOf(address(this));     \n            tokenFrom.safeTransferFrom(msg.sender, address(this), dx);      \n            \n            dx = tokenFrom.balanceOf(address(this)).sub(beforeBalance);     \n        }\n        uint256 dy; \n        uint256 dyFee;  \n        uint256[] memory balances = self.balances;\n        \n        (dy, dyFee) = _calculateSwap(\n            self,\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx,\n            balances\n        );\n        require(dy >= minDy, \"Swap didn't result in min tokens\");   \n        uint256 dyAdminFee =\n            dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(\n                self.tokenPrecisionMultipliers[tokenIndexTo]\n            );  \n        \n        self.balances[tokenIndexFrom] = balances[tokenIndexFrom].add(dx);\n        \n        self.balances[tokenIndexTo] = balances[tokenIndexTo].sub(dy).sub(\n            dyAdminFee\n        );\n        \n        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\n        \n        emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\n        return dy;\n    }"], "label": "Yes", "detail": "The attack on Nerve's MetaPool was made possible by inconsistent implementations of the getXp() pricing function in two libraries: SwapUtils and MetaSwapUtils. The MetaSwap contract, which was forked from Saddle.Finance (itself a Solidity port of Curve's MetaPool), contained two key swap functions—swap() and swapUnderlying()—used for exchanging between LP tokens and stablecoins. During the attack, swap() underestimated the LP token value due to ignoring the virtual price, while swapUnderlying() calculated it correctly. The attacker repeatedly swapped stablecoins for undervalued LP tokens via swap(), removed liquidity to extract base tokens, and finally used swapUnderlying() to convert base tokens back to more stablecoins at a favorable rate. This loop drained the pool of liquidity. The vulnerability stems from inconsistent logic across forked components and highlights the risk of modifying or porting code without preserving behavioral equivalence. The attacker reportedly profited ~900 BNB. A similar attack had occurred on Synapse’s MetaPool one week earlier, exploiting the same flaw."}
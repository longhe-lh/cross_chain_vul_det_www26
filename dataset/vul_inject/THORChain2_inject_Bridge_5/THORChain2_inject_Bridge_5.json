{"project": "Bridge_5", "functions": ["function mint(address from, address to, uint amount, uint nonce, bytes calldata signature) external {\n function prefixed(...) {...}\nfunction recoverSigner(...) {...}\nbytes32 message = prefixed(keccak256(abi.encodePacked(from, to, amount, nonce)));\n require(recoverSigner(message, signature) == from, \"wrong signature\");\n require(processedNonces[from][nonce] == false, 'transfer already processed');\n processedNonces[from][nonce] = true;\n token._mint(to, amount);\n emit Transfer(msg.sender, to, amount, block.timestamp, nonce, signature, Step.Mint);\n }", "function deposit(address payable vault, address asset, uint amount, string memory memo) external payable {\n        uint safeAmount;\n        if(asset == address(0)){\n            safeAmount = msg.value;\n            (bool success, bytes memory data) = vault.call{value:safeAmount}(\"\");\n            require(success && (data.length == 0 || abi.decode(data, (bool))));\n        } else if(asset == RUNE) {\n            safeAmount = amount;\n            iRUNE(RUNE).transferTo(address(this), amount);\n            iERC20(RUNE).burn(amount);\n        } else {\n            safeAmount = safeTransferFrom(asset, amount); \n            vaultAllowance[vault][asset] += safeAmount; \n        }\n        emit Deposit(vault, asset, safeAmount, memo);\n    }"], "label": "Yes", "detail": "The attacker invoked the THORChain Router contract's deposit method via a malicious contract, passing an amount of 0. Then, the attacker initiated a transaction to call the malicious contract, setting a non-zero msg.value in the transaction. Due to a flaw in THORChain's code, the system used the msg.value from the transaction instead of the amount parameter in the deposit function when determining the deposit value. This allowed the attacker to fake a deposit and receive assets without actually transferring any real funds."}
{"project": "OneSwap", "functions": ["function unlock(address from, address to, address token, uint32 unlockTime) public override afterUnlockTime(unlockTime) {\n bytes32 key = _getLockedSendKey(from, to, token, unlockTime);\n uint amount = lockSendInfos[key];\n require(amount != 0, \"LockSend: UNLOCK_AMOUNT_SHOULD_BE_NONZERO\");\n delete lockSendInfos[key];\n function _safeTransfer(...) {...}\n_safeTransfer(token, to, amount);\n emit Unlock(from, to, token, amount, unlockTime);\n }", "function _safeTransfer(address token, address to, uint value) internal {\n \n (bool success, bytes memory data) = token.call(abi.encodeWithSelector(_SELECTOR, to, value));\n require(success && (data.length == 0 || abi.decode(data, (bool))), \"LockSend: TRANSFER_FAILED\");\n }", "function lockSend(address to, uint amount, address token, uint32 unlockTime) public override beforeUnlockTime(unlockTime) {\n require(amount != 0, \"LockSend: LOCKED_AMOUNT_SHOULD_BE_NONZERO\");\n bytes32 key = _getLockedSendKey(msg.sender, to, token, unlockTime);\n function _safeTransferToMe(...) {...}\nfunction add(...) {...}\n_safeTransferToMe(token, msg.sender, amount);\n lockSendInfos[key] = lockSendInfos[key].add(amount);\n emit Locksend(msg.sender, to, token, amount, unlockTime);\n }", "function _safeTransferToMe(address token, address from, uint value) internal {\n \n (bool success, bytes memory data) = token.call(abi.encodeWithSelector(_SELECTOR2, from, address(this), value));\n require(success && (data.length == 0 || abi.decode(data, (bool))), \"LockSend: TRANSFER_TO_ME_FAILED\");\n }", "func (e *ETHScanner) getAssetFromTokenAddress(token string) (common.Asset, error) {\n\tif IsETH(token) {\n\t\treturn common.ETHAsset, nil\n\t}\n\ttokenMeta, err := e.getTokenMeta(token)\n\tif err != nil {\n\t\treturn common.EmptyAsset, fmt.Errorf(\"fail to get token meta: %w\", err)\n\t}\n\tasset := common.ETHAsset\n\tif tokenMeta.Symbol != common.ETHChain.String() {\n\t\tasset, err = common.NewAsset(fmt.Sprintf(\"ETH.%s-%s\", tokenMeta.Symbol, strings.ToUpper(tokenMeta.Address)))\n\t\tif err != nil {\n\t\t\treturn common.EmptyAsset, fmt.Errorf(\"fail to create asset: %w\", err)\n\t\t}\n\t}\n\treturn asset, nil\n}"], "label": "Yes", "detail": "The getAssetFromTokenAddress function in THORChain's Ethereum scanner fails to properly handle ERC20 tokens with 'ETH' symbol. When processing deposits, it defaults to native ETH asset type if the token metadata isn't found in local storage. An attacker can deploy a malicious ERC20 token with 'ETH' symbol, causing the bridge to incorrectly identify the token as native Ethereum. This allows fake tokens to be treated as genuine ETH in cross-chain transactions."}
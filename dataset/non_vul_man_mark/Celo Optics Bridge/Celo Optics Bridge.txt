Folder Structure
--------------------------------------------------
contracts/
    Address.sol
    AddressUpgradeable.sol
    BridgeMessage.sol
    BridgeRouter.sol
    BridgeToken.sol
    Common.sol
    Context.sol
    ContextUpgradeable.sol
    ECDSA.sol
    Encoding.sol
    Enum.sol
    EtherPaymentFallback.sol
    ETHHelper.sol
    Executor.sol
    FallbackManager.sol
    GnosisSafe.sol
    GnosisSafeMath.sol
    GnosisSafeProxy.sol
    GovernanceMessage.sol
    GovernanceRouter.sol
    GuardManager.sol
    Home.sol
    IBridgeToken.sol
    IERC20.sol
    IMessageRecipient.sol
    Initializable.sol
    ISignatureValidator.sol
    IUpdaterManager.sol
    IWeth.sol
    Merkle.sol
    Message.sol
    ModuleManager.sol
    Ownable.sol
    OwnableUpgradeable.sol
    OwnerManager.sol
    OZERC20.sol
    Queue.sol
    Replica.sol
    Router.sol
    SafeERC20.sol
    SafeMath.sol
    SecuredTokenTransfer.sol
    SelfAuthorized.sol
    SignatureDecoder.sol
    Singleton.sol
    StorageAccessible.sol
    TokenRegistry.sol
    TypeCasts.sol
    TypedMemView.sol
    UpdaterManager.sol
    UpgradeBeacon.sol
    UpgradeBeaconController.sol
    UpgradeBeaconProxy.sol
    Version0.sol
    XAppConnectionClient.sol
    XAppConnectionManager.sol


File Contents
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Address.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.2 <0.8.0;



/**

 * @dev Collection of functions related to the address type

 */

library Address {

    /**

     * @dev Returns true if `account` is a contract.

     *

     * [IMPORTANT]

     * ====

     * It is unsafe to assume that an address for which this function returns

     * false is an externally-owned account (EOA) and not a contract.

     *

     * Among others, `isContract` will return false for the following

     * types of addresses:

     *

     *  - an externally-owned account

     *  - a contract in construction

     *  - an address where a contract will be created

     *  - an address where a contract lived, but was destroyed

     * ====

     */

    function isContract(address account) internal view returns (bool) {

        // This method relies on extcodesize, which returns 0 for contracts in

        // construction, since the code is only stored at the end of the

        // constructor execution.



        uint256 size;

        // solhint-disable-next-line no-inline-assembly

        assembly { size := extcodesize(account) }

        return size > 0;

    }



    /**

     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to

     * `recipient`, forwarding all available gas and reverting on errors.

     *

     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost

     * of certain opcodes, possibly making contracts go over the 2300 gas limit

     * imposed by `transfer`, making them unable to receive funds via

     * `transfer`. {sendValue} removes this limitation.

     *

     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].

     *

     * IMPORTANT: because control is transferred to `recipient`, care must be

     * taken to not create reentrancy vulnerabilities. Consider using

     * {ReentrancyGuard} or the

     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].

     */

    function sendValue(address payable recipient, uint256 amount) internal {

        require(address(this).balance >= amount, "Address: insufficient balance");



        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value

        (bool success, ) = recipient.call{ value: amount }("");

        require(success, "Address: unable to send value, recipient may have reverted");

    }



    /**

     * @dev Performs a Solidity function call using a low level `call`. A

     * plain`call` is an unsafe replacement for a function call: use this

     * function instead.

     *

     * If `target` reverts with a revert reason, it is bubbled up by this

     * function (like regular Solidity function calls).

     *

     * Returns the raw returned data. To convert to the expected return value,

     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].

     *

     * Requirements:

     *

     * - `target` must be a contract.

     * - calling `target` with `data` must not revert.

     *

     * _Available since v3.1._

     */

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {

      return functionCall(target, data, "Address: low-level call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with

     * `errorMessage` as a fallback revert reason when `target` reverts.

     *

     * _Available since v3.1._

     */

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        return functionCallWithValue(target, data, 0, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but also transferring `value` wei to `target`.

     *

     * Requirements:

     *

     * - the calling contract must have an ETH balance of at least `value`.

     * - the called Solidity function must be `payable`.

     *

     * _Available since v3.1._

     */

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {

        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");

    }



    /**

     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but

     * with `errorMessage` as a fallback revert reason when `target` reverts.

     *

     * _Available since v3.1._

     */

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {

        require(address(this).balance >= value, "Address: insufficient balance for call");

        require(isContract(target), "Address: call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.call{ value: value }(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but performing a static call.

     *

     * _Available since v3.3._

     */

    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {

        return functionStaticCall(target, data, "Address: low-level static call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],

     * but performing a static call.

     *

     * _Available since v3.3._

     */

    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {

        require(isContract(target), "Address: static call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.staticcall(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but performing a delegate call.

     *

     * _Available since v3.4._

     */

    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {

        return functionDelegateCall(target, data, "Address: low-level delegate call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],

     * but performing a delegate call.

     *

     * _Available since v3.4._

     */

    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        require(isContract(target), "Address: delegate call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.delegatecall(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {

        if (success) {

            return returndata;

        } else {

            // Look for revert reason and bubble it up if present

            if (returndata.length > 0) {

                // The easiest way to bubble the revert reason is using memory via assembly



                // solhint-disable-next-line no-inline-assembly

                assembly {

                    let returndata_size := mload(returndata)

                    revert(add(32, returndata), returndata_size)

                }

            } else {

                revert(errorMessage);

            }

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\AddressUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.2 <0.8.0;



/**

 * @dev Collection of functions related to the address type

 */

library AddressUpgradeable {

    /**

     * @dev Returns true if `account` is a contract.

     *

     * [IMPORTANT]

     * ====

     * It is unsafe to assume that an address for which this function returns

     * false is an externally-owned account (EOA) and not a contract.

     *

     * Among others, `isContract` will return false for the following

     * types of addresses:

     *

     *  - an externally-owned account

     *  - a contract in construction

     *  - an address where a contract will be created

     *  - an address where a contract lived, but was destroyed

     * ====

     */

    function isContract(address account) internal view returns (bool) {

        // This method relies on extcodesize, which returns 0 for contracts in

        // construction, since the code is only stored at the end of the

        // constructor execution.



        uint256 size;

        // solhint-disable-next-line no-inline-assembly

        assembly { size := extcodesize(account) }

        return size > 0;

    }



    /**

     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to

     * `recipient`, forwarding all available gas and reverting on errors.

     *

     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost

     * of certain opcodes, possibly making contracts go over the 2300 gas limit

     * imposed by `transfer`, making them unable to receive funds via

     * `transfer`. {sendValue} removes this limitation.

     *

     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].

     *

     * IMPORTANT: because control is transferred to `recipient`, care must be

     * taken to not create reentrancy vulnerabilities. Consider using

     * {ReentrancyGuard} or the

     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].

     */

    function sendValue(address payable recipient, uint256 amount) internal {

        require(address(this).balance >= amount, "Address: insufficient balance");



        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value

        (bool success, ) = recipient.call{ value: amount }("");

        require(success, "Address: unable to send value, recipient may have reverted");

    }



    /**

     * @dev Performs a Solidity function call using a low level `call`. A

     * plain`call` is an unsafe replacement for a function call: use this

     * function instead.

     *

     * If `target` reverts with a revert reason, it is bubbled up by this

     * function (like regular Solidity function calls).

     *

     * Returns the raw returned data. To convert to the expected return value,

     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].

     *

     * Requirements:

     *

     * - `target` must be a contract.

     * - calling `target` with `data` must not revert.

     *

     * _Available since v3.1._

     */

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {

      return functionCall(target, data, "Address: low-level call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with

     * `errorMessage` as a fallback revert reason when `target` reverts.

     *

     * _Available since v3.1._

     */

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        return functionCallWithValue(target, data, 0, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but also transferring `value` wei to `target`.

     *

     * Requirements:

     *

     * - the calling contract must have an ETH balance of at least `value`.

     * - the called Solidity function must be `payable`.

     *

     * _Available since v3.1._

     */

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {

        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");

    }



    /**

     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but

     * with `errorMessage` as a fallback revert reason when `target` reverts.

     *

     * _Available since v3.1._

     */

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {

        require(address(this).balance >= value, "Address: insufficient balance for call");

        require(isContract(target), "Address: call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.call{ value: value }(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but performing a static call.

     *

     * _Available since v3.3._

     */

    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {

        return functionStaticCall(target, data, "Address: low-level static call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],

     * but performing a static call.

     *

     * _Available since v3.3._

     */

    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {

        require(isContract(target), "Address: static call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.staticcall(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {

        if (success) {

            return returndata;

        } else {

            // Look for revert reason and bubble it up if present

            if (returndata.length > 0) {

                // The easiest way to bubble the revert reason is using memory via assembly



                // solhint-disable-next-line no-inline-assembly

                assembly {

                    let returndata_size := mload(returndata)

                    revert(add(32, returndata), returndata_size)

                }

            } else {

                revert(errorMessage);

            }

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\BridgeMessage.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ External Imports ============

import {TypedMemView} from "@summa-tx/memview-sol/contracts/TypedMemView.sol";



library BridgeMessage {

    // ============ Libraries ============



    using TypedMemView for bytes;

    using TypedMemView for bytes29;



    // ============ Enums ============



    // WARNING: do NOT re-write the numbers / order

    // of message types in an upgrade;

    // will cause in-flight messages to be mis-interpreted

    enum Types {

        Invalid, // 0

        TokenId, // 1

        Message, // 2

        Transfer, // 3

        Details, // 4

        RequestDetails // 5

    }



    // ============ Constants ============



    uint256 private constant TOKEN_ID_LEN = 36; // 4 bytes domain + 32 bytes id

    uint256 private constant IDENTIFIER_LEN = 1;

    uint256 private constant TRANSFER_LEN = 65; // 1 byte identifier + 32 bytes recipient + 32 bytes amount

    uint256 private constant DETAILS_LEN = 66; // 1 byte identifier + 32 bytes name + 32 bytes symbol + 1 byte decimals

    uint256 private constant REQUEST_DETAILS_LEN = 1; // 1 byte identifier



    // ============ Modifiers ============



    /**

     * @notice Asserts a message is of type `_t`

     * @param _view The message

     * @param _t The expected type

     */

    modifier typeAssert(bytes29 _view, Types _t) {

        _view.assertType(uint40(_t));

        _;

    }



    // ============ Internal Functions ============



    /**

     * @notice Checks that Action is valid type

     * @param _action The action

     * @return TRUE if action is valid

     */

    function isValidAction(bytes29 _action) internal pure returns (bool) {

        return

            isDetails(_action) ||

            isRequestDetails(_action) ||

            isTransfer(_action);

    }



    /**

     * @notice Checks that view is a valid message length

     * @param _view The bytes string

     * @return TRUE if message is valid

     */

    function isValidMessageLength(bytes29 _view) internal pure returns (bool) {

        uint256 _len = _view.len();

        return

            _len == TOKEN_ID_LEN + TRANSFER_LEN ||

            _len == TOKEN_ID_LEN + DETAILS_LEN ||

            _len == TOKEN_ID_LEN + REQUEST_DETAILS_LEN;

    }



    /**

     * @notice Formats an action message

     * @param _tokenId The token ID

     * @param _action The action

     * @return The formatted message

     */

    function formatMessage(bytes29 _tokenId, bytes29 _action)

        internal

        view

        typeAssert(_tokenId, Types.TokenId)

        returns (bytes memory)

    {

        require(isValidAction(_action), "!action");

        bytes29[] memory _views = new bytes29[](2);

        _views[0] = _tokenId;

        _views[1] = _action;

        return TypedMemView.join(_views);

    }



    /**

     * @notice Returns the type of the message

     * @param _view The message

     * @return The type of the message

     */

    function messageType(bytes29 _view) internal pure returns (Types) {

        return Types(uint8(_view.typeOf()));

    }



    /**

     * @notice Checks that the message is of type Transfer

     * @param _action The message

     * @return True if the message is of type Transfer

     */

    function isTransfer(bytes29 _action) internal pure returns (bool) {

        return

            actionType(_action) == uint8(Types.Transfer) &&

            messageType(_action) == Types.Transfer;

    }



    /**

     * @notice Checks that the message is of type Details

     * @param _action The message

     * @return True if the message is of type Details

     */

    function isDetails(bytes29 _action) internal pure returns (bool) {

        return

            actionType(_action) == uint8(Types.Details) &&

            messageType(_action) == Types.Details;

    }



    /**

     * @notice Checks that the message is of type Details

     * @param _action The message

     * @return True if the message is of type Details

     */

    function isRequestDetails(bytes29 _action) internal pure returns (bool) {

        return

            actionType(_action) == uint8(Types.RequestDetails) &&

            messageType(_action) == Types.RequestDetails;

    }



    /**

     * @notice Formats Transfer

     * @param _to The recipient address as bytes32

     * @param _amnt The transfer amount

     * @return

     */

    function formatTransfer(bytes32 _to, uint256 _amnt)

        internal

        pure

        returns (bytes29)

    {

        return

            mustBeTransfer(abi.encodePacked(Types.Transfer, _to, _amnt).ref(0));

    }



    /**

     * @notice Formats Details

     * @param _name The name

     * @param _symbol The symbol

     * @param _decimals The decimals

     * @return The Details message

     */

    function formatDetails(

        bytes32 _name,

        bytes32 _symbol,

        uint8 _decimals

    ) internal pure returns (bytes29) {

        return

            mustBeDetails(

                abi.encodePacked(Types.Details, _name, _symbol, _decimals).ref(

                    0

                )

            );

    }



    /**

     * @notice Formats Request Details

     * @return The Request Details message

     */

    function formatRequestDetails() internal pure returns (bytes29) {

        return

            mustBeRequestDetails(abi.encodePacked(Types.RequestDetails).ref(0));

    }



    /**

     * @notice Formats the Token ID

     * @param _domain The domain

     * @param _id The ID

     * @return The formatted Token ID

     */

    function formatTokenId(uint32 _domain, bytes32 _id)

        internal

        pure

        returns (bytes29)

    {

        return mustBeTokenId(abi.encodePacked(_domain, _id).ref(0));

    }



    /**

     * @notice Retrieves the domain from a TokenID

     * @param _tokenId The message

     * @return The domain

     */

    function domain(bytes29 _tokenId)

        internal

        pure

        typeAssert(_tokenId, Types.TokenId)

        returns (uint32)

    {

        return uint32(_tokenId.indexUint(0, 4));

    }



    /**

     * @notice Retrieves the ID from a TokenID

     * @param _tokenId The message

     * @return The ID

     */

    function id(bytes29 _tokenId)

        internal

        pure

        typeAssert(_tokenId, Types.TokenId)

        returns (bytes32)

    {

        // before = 4 bytes domain

        return _tokenId.index(4, 32);

    }



    /**

     * @notice Retrieves the EVM ID

     * @param _tokenId The message

     * @return The EVM ID

     */

    function evmId(bytes29 _tokenId)

        internal

        pure

        typeAssert(_tokenId, Types.TokenId)

        returns (address)

    {

        // before = 4 bytes domain + 12 bytes empty to trim for address

        return _tokenId.indexAddress(16);

    }



    /**

     * @notice Retrieves the action identifier from message

     * @param _message The action

     * @return The message type

     */

    function msgType(bytes29 _message) internal pure returns (uint8) {

        return uint8(_message.indexUint(TOKEN_ID_LEN, 1));

    }



    /**

     * @notice Retrieves the identifier from action

     * @param _action The action

     * @return The action type

     */

    function actionType(bytes29 _action) internal pure returns (uint8) {

        return uint8(_action.indexUint(0, 1));

    }



    /**

     * @notice Retrieves the recipient from a Transfer

     * @param _transferAction The message

     * @return The recipient address as bytes32

     */

    function recipient(bytes29 _transferAction)

        internal

        pure

        typeAssert(_transferAction, Types.Transfer)

        returns (bytes32)

    {

        // before = 1 byte identifier

        return _transferAction.index(1, 32);

    }



    /**

     * @notice Retrieves the EVM Recipient from a Transfer

     * @param _transferAction The message

     * @return The EVM Recipient

     */

    function evmRecipient(bytes29 _transferAction)

        internal

        pure

        typeAssert(_transferAction, Types.Transfer)

        returns (address)

    {

        // before = 1 byte identifier + 12 bytes empty to trim for address

        return _transferAction.indexAddress(13);

    }



    /**

     * @notice Retrieves the amount from a Transfer

     * @param _transferAction The message

     * @return The amount

     */

    function amnt(bytes29 _transferAction)

        internal

        pure

        typeAssert(_transferAction, Types.Transfer)

        returns (uint256)

    {

        // before = 1 byte identifier + 32 bytes ID

        return _transferAction.indexUint(33, 32);

    }



    /**

     * @notice Retrieves the name from Details

     * @param _detailsAction The message

     * @return The name

     */

    function name(bytes29 _detailsAction)

        internal

        pure

        typeAssert(_detailsAction, Types.Details)

        returns (bytes32)

    {

        // before = 1 byte identifier

        return _detailsAction.index(1, 32);

    }



    /**

     * @notice Retrieves the symbol from Details

     * @param _detailsAction The message

     * @return The symbol

     */

    function symbol(bytes29 _detailsAction)

        internal

        pure

        typeAssert(_detailsAction, Types.Details)

        returns (bytes32)

    {

        // before = 1 byte identifier + 32 bytes name

        return _detailsAction.index(33, 32);

    }



    /**

     * @notice Retrieves the decimals from Details

     * @param _detailsAction The message

     * @return The decimals

     */

    function decimals(bytes29 _detailsAction)

        internal

        pure

        typeAssert(_detailsAction, Types.Details)

        returns (uint8)

    {

        // before = 1 byte identifier + 32 bytes name + 32 bytes symbol

        return uint8(_detailsAction.indexUint(65, 1));

    }



    /**

     * @notice Retrieves the token ID from a Message

     * @param _message The message

     * @return The ID

     */

    function tokenId(bytes29 _message)

        internal

        pure

        typeAssert(_message, Types.Message)

        returns (bytes29)

    {

        return _message.slice(0, TOKEN_ID_LEN, uint40(Types.TokenId));

    }



    /**

     * @notice Retrieves the action data from a Message

     * @param _message The message

     * @return The action

     */

    function action(bytes29 _message)

        internal

        pure

        typeAssert(_message, Types.Message)

        returns (bytes29)

    {

        uint256 _actionLen = _message.len() - TOKEN_ID_LEN;

        uint40 _type = uint40(msgType(_message));

        return _message.slice(TOKEN_ID_LEN, _actionLen, _type);

    }



    /**

     * @notice Converts to a Transfer

     * @param _action The message

     * @return The newly typed message

     */

    function tryAsTransfer(bytes29 _action) internal pure returns (bytes29) {

        if (_action.len() == TRANSFER_LEN) {

            return _action.castTo(uint40(Types.Transfer));

        }

        return TypedMemView.nullView();

    }



    /**

     * @notice Converts to a Details

     * @param _action The message

     * @return The newly typed message

     */

    function tryAsDetails(bytes29 _action) internal pure returns (bytes29) {

        if (_action.len() == DETAILS_LEN) {

            return _action.castTo(uint40(Types.Details));

        }

        return TypedMemView.nullView();

    }



    /**

     * @notice Converts to a Details

     * @param _action The message

     * @return The newly typed message

     */

    function tryAsRequestDetails(bytes29 _action)

        internal

        pure

        returns (bytes29)

    {

        if (_action.len() == REQUEST_DETAILS_LEN) {

            return _action.castTo(uint40(Types.RequestDetails));

        }

        return TypedMemView.nullView();

    }



    /**

     * @notice Converts to a TokenID

     * @param _tokenId The message

     * @return The newly typed message

     */

    function tryAsTokenId(bytes29 _tokenId) internal pure returns (bytes29) {

        if (_tokenId.len() == TOKEN_ID_LEN) {

            return _tokenId.castTo(uint40(Types.TokenId));

        }

        return TypedMemView.nullView();

    }



    /**

     * @notice Converts to a Message

     * @param _message The message

     * @return The newly typed message

     */

    function tryAsMessage(bytes29 _message) internal pure returns (bytes29) {

        if (isValidMessageLength(_message)) {

            return _message.castTo(uint40(Types.Message));

        }

        return TypedMemView.nullView();

    }



    /**

     * @notice Asserts that the message is of type Transfer

     * @param _view The message

     * @return The message

     */

    function mustBeTransfer(bytes29 _view) internal pure returns (bytes29) {

        return tryAsTransfer(_view).assertValid();

    }



    /**

     * @notice Asserts that the message is of type Details

     * @param _view The message

     * @return The message

     */

    function mustBeDetails(bytes29 _view) internal pure returns (bytes29) {

        return tryAsDetails(_view).assertValid();

    }



    /**

     * @notice Asserts that the message is of type Details

     * @param _view The message

     * @return The message

     */

    function mustBeRequestDetails(bytes29 _view)

        internal

        pure

        returns (bytes29)

    {

        return tryAsRequestDetails(_view).assertValid();

    }



    /**

     * @notice Asserts that the message is of type TokenID

     * @param _view The message

     * @return The message

     */

    function mustBeTokenId(bytes29 _view) internal pure returns (bytes29) {

        return tryAsTokenId(_view).assertValid();

    }



    /**

     * @notice Asserts that the message is of type Message

     * @param _view The message

     * @return The message

     */

    function mustBeMessage(bytes29 _view) internal pure returns (bytes29) {

        return tryAsMessage(_view).assertValid();

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\BridgeRouter.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {TokenRegistry} from "./TokenRegistry.sol";

import {Router} from "../Router.sol";

import {XAppConnectionClient} from "../XAppConnectionClient.sol";

import {IBridgeToken} from "../../interfaces/bridge/IBridgeToken.sol";

import {BridgeMessage} from "./BridgeMessage.sol";

// ============ External Imports ============

import {Home} from "@celo-org/optics-sol/contracts/Home.sol";

import {Version0} from "@celo-org/optics-sol/contracts/Version0.sol";

import {TypeCasts} from "@celo-org/optics-sol/contracts/XAppConnectionManager.sol";

import {TypedMemView} from "@summa-tx/memview-sol/contracts/TypedMemView.sol";

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";



/**

 * @title BridgeRouter

 */

contract BridgeRouter is Version0, Router, TokenRegistry {

    // ============ Libraries ============



    using TypedMemView for bytes;

    using TypedMemView for bytes29;

    using BridgeMessage for bytes29;

    using SafeERC20 for IERC20;



    // ============ Constants ============



    // 5 bps (0.05%) hardcoded fast liquidity fee. Can be changed by contract upgrade

    uint256 public constant PRE_FILL_FEE_NUMERATOR = 9995;

    uint256 public constant PRE_FILL_FEE_DENOMINATOR = 10000;



    // ============ Public Storage ============



    // token transfer prefill ID => LP that pre-filled message to provide fast liquidity

    mapping(bytes32 => address) public liquidityProvider;



    // ============ Upgrade Gap ============



    // gap for upgrade safety

    uint256[49] private __GAP;



    // ======== Events =========



    /**

     * @notice emitted when tokens are sent from this domain to another domain

     * @param token the address of the token contract

     * @param from the address sending tokens

     * @param toDomain the domain of the chain the tokens are being sent to

     * @param toId the bytes32 address of the recipient of the tokens

     * @param amount the amount of tokens sent

     */

    event Send(

        address indexed token,

        address indexed from,

        uint32 indexed toDomain,

        bytes32 toId,

        uint256 amount

    );



    // ======== Initializer ========



    function initialize(address _tokenBeacon, address _xAppConnectionManager)

        public

        initializer

    {

        __TokenRegistry_initialize(_tokenBeacon);

        __XAppConnectionClient_initialize(_xAppConnectionManager);

    }



    // ======== External: Handle =========



    /**

     * @notice Handles an incoming message

     * @param _origin The origin domain

     * @param _sender The sender address

     * @param _message The message

     */

    function handle(

        uint32 _origin,

        bytes32 _sender,

        bytes memory _message

    ) external override onlyReplica onlyRemoteRouter(_origin, _sender) {

        // parse tokenId and action from message

        bytes29 _msg = _message.ref(0).mustBeMessage();

        bytes29 _tokenId = _msg.tokenId();

        bytes29 _action = _msg.action();

        // handle message based on the intended action

        if (_action.isTransfer()) {

            _handleTransfer(_tokenId, _action);

        } else if (_action.isDetails()) {

            _handleDetails(_tokenId, _action);

        } else if (_action.isRequestDetails()) {

            _handleRequestDetails(_origin, _sender, _tokenId);

        } else {

            require(false, "!valid action");

        }

    }



    // ======== External: Request Token Details =========



    /**

     * @notice Request updated token metadata from another chain

     * @dev This is only owner to prevent abuse and spam. Requesting details

     *  should be done automatically on token instantiation

     * @param _domain The domain where that token is native

     * @param _id The token id on that domain

     */

    function requestDetails(uint32 _domain, bytes32 _id) external onlyOwner {

        bytes29 _tokenId = BridgeMessage.formatTokenId(_domain, _id);

        _requestDetails(_tokenId);

    }



    // ======== External: Send Token =========



    /**

     * @notice Send tokens to a recipient on a remote chain

     * @param _token The token address

     * @param _amount The token amount

     * @param _destination The destination domain

     * @param _recipient The recipient address

     */

    function send(

        address _token,

        uint256 _amount,

        uint32 _destination,

        bytes32 _recipient

    ) external {

        require(_amount > 0, "!amnt");

        require(_recipient != bytes32(0), "!recip");

        // get remote BridgeRouter address; revert if not found

        bytes32 _remote = _mustHaveRemote(_destination);

        // remove tokens from circulation on this chain

        IERC20 _bridgeToken = IERC20(_token);

        if (_isLocalOrigin(_bridgeToken)) {

            // if the token originates on this chain, hold the tokens in escrow

            // in the Router

            _bridgeToken.safeTransferFrom(msg.sender, address(this), _amount);

        } else {

            // if the token originates on a remote chain, burn the

            // representation tokens on this chain

            _downcast(_bridgeToken).burn(msg.sender, _amount);

        }

        // format Transfer Tokens action

        bytes29 _action = BridgeMessage.formatTransfer(_recipient, _amount);

        // send message to remote chain via Optics

        Home(xAppConnectionManager.home()).dispatch(

            _destination,

            _remote,

            BridgeMessage.formatMessage(_formatTokenId(_token), _action)

        );

        // emit Send event to record token sender

        emit Send(

            address(_bridgeToken),

            msg.sender,

            _destination,

            _recipient,

            _amount

        );

    }



    // ======== External: Fast Liquidity =========



    /**

     * @notice Allows a liquidity provider to give an

     * end user fast liquidity by pre-filling an

     * incoming transfer message.

     * Transfers tokens from the liquidity provider to the end recipient, minus the LP fee;

     * Records the liquidity provider, who receives

     * the full token amount when the transfer message is handled.

     * @dev fast liquidity can only be provided for ONE token transfer

     * with the same (recipient, amount) at a time.

     * in the case that multiple token transfers with the same (recipient, amount)

     * @param _message The incoming transfer message to pre-fill

     */

    function preFill(bytes calldata _message) external {

        // parse tokenId and action from message

        bytes29 _msg = _message.ref(0).mustBeMessage();

        bytes29 _tokenId = _msg.tokenId().mustBeTokenId();

        bytes29 _action = _msg.action().mustBeTransfer();

        // calculate prefill ID

        bytes32 _id = _preFillId(_tokenId, _action);

        // require that transfer has not already been pre-filled

        require(liquidityProvider[_id] == address(0), "!unfilled");

        // record liquidity provider

        liquidityProvider[_id] = msg.sender;

        // transfer tokens from liquidity provider to token recipient

        IERC20 _token = _mustHaveToken(_tokenId);

        _token.safeTransferFrom(

            msg.sender,

            _action.evmRecipient(),

            _applyPreFillFee(_action.amnt())

        );

    }



    // ======== External: Custom Tokens =========



    /**

     * @notice Enroll a custom token. This allows projects to work with

     * governance to specify a custom representation.

     * @dev This is done by inserting the custom representation into the token

     * lookup tables. It is permissioned to the owner (governance) and can

     * potentially break token representations. It must be used with extreme

     * caution.

     * After the token is inserted, new mint instructions will be sent to the

     * custom token. The default representation (and old custom representations)

     * may still be burnt. Until all users have explicitly called migrate, both

     * representations will continue to exist.

     * The custom representation MUST be trusted, and MUST allow the router to

     * both mint AND burn tokens at will.

     * @param _id the canonical ID of the Token to enroll, as a byte vector

     * @param _custom the address of the custom implementation to use.

     */

    function enrollCustom(

        uint32 _domain,

        bytes32 _id,

        address _custom

    ) external onlyOwner {

        // Sanity check. Ensures that human error doesn't cause an

        // unpermissioned contract to be enrolled.

        IBridgeToken(_custom).mint(address(this), 1);

        IBridgeToken(_custom).burn(address(this), 1);

        // update mappings with custom token

        bytes29 _tokenId = BridgeMessage.formatTokenId(_domain, _id);

        representationToCanonical[_custom].domain = _tokenId.domain();

        representationToCanonical[_custom].id = _tokenId.id();

        bytes32 _idHash = _tokenId.keccak();

        canonicalToRepresentation[_idHash] = _custom;

    }



    /**

     * @notice Migrate all tokens in a previous representation to the latest

     * custom representation. This works by looking up local mappings and then

     * burning old tokens and minting new tokens.

     * @dev This is explicitly opt-in to allow dapps to decide when and how to

     * upgrade to the new representation.

     * @param _oldRepr The address of the old token to migrate

     */

    function migrate(address _oldRepr) external {

        // get the token ID for the old token contract

        TokenId memory _id = representationToCanonical[_oldRepr];

        require(_id.domain != 0, "!repr");

        // ensure that new token & old token are different

        IBridgeToken _old = IBridgeToken(_oldRepr);

        IBridgeToken _new = _representationForCanonical(_id);

        require(_new != _old, "!different");

        // burn the old tokens & mint the new ones

        uint256 _bal = _old.balanceOf(msg.sender);

        _old.burn(msg.sender, _bal);

        _new.mint(msg.sender, _bal);

    }



    // ============ Internal: Send / UpdateDetails ============



    /**

     * @notice Given a tokenAddress, format the tokenId

     * identifier for the message.

     * @param _token The token address

     * @param _tokenId The bytes-encoded tokenId

     */

    function _formatTokenId(address _token)

        internal

        view

        returns (bytes29 _tokenId)

    {

        TokenId memory _tokId = _tokenIdFor(_token);

        _tokenId = BridgeMessage.formatTokenId(_tokId.domain, _tokId.id);

    }



    // ============ Internal: Handle ============



    /**

     * @notice Handles an incoming Transfer message.

     *

     * If the token is of local origin, the amount is sent from escrow.

     * Otherwise, a representation token is minted.

     *

     * @param _tokenId The token ID

     * @param _action The action

     */

    function _handleTransfer(bytes29 _tokenId, bytes29 _action) internal {

        // get the token contract for the given tokenId on this chain;

        // (if the token is of remote origin and there is

        // no existing representation token contract, the TokenRegistry will

        // deploy a new one)

        IERC20 _token = _ensureToken(_tokenId);

        address _recipient = _action.evmRecipient();

        // If an LP has prefilled this token transfer,

        // send the tokens to the LP instead of the recipient

        bytes32 _id = _preFillId(_tokenId, _action);

        address _lp = liquidityProvider[_id];

        if (_lp != address(0)) {

            _recipient = _lp;

            delete liquidityProvider[_id];

        }

        // send the tokens into circulation on this chain

        if (_isLocalOrigin(_token)) {

            // if the token is of local origin, the tokens have been held in

            // escrow in this contract

            // while they have been circulating on remote chains;

            // transfer the tokens to the recipient

            _token.safeTransfer(_recipient, _action.amnt());

        } else {

            // if the token is of remote origin, mint the tokens to the

            // recipient on this chain

            _downcast(_token).mint(_recipient, _action.amnt());

        }

    }



    /**

     * @notice Handles an incoming Details message.

     * @param _tokenId The token ID

     * @param _action The action

     */

    function _handleDetails(bytes29 _tokenId, bytes29 _action) internal {

        // get the token contract deployed on this chain

        // revert if no token contract exists

        IERC20 _token = _mustHaveToken(_tokenId);

        // require that the token is of remote origin

        // (otherwise, the BridgeRouter did not deploy the token contract,

        // and therefore cannot update its metadata)

        require(!_isLocalOrigin(_token), "!remote origin");

        // update the token metadata

        _downcast(_token).setDetails(

            TypeCasts.coerceString(_action.name()),

            TypeCasts.coerceString(_action.symbol()),

            _action.decimals()

        );

    }



    /**

     * @notice Handles an incoming RequestDetails message by sending an

     *         UpdateDetails message to the remote chain

     * @dev The origin and remote are pre-checked by the handle function

     *      `onlyRemoteRouter` modifier and can be used without additional check

     * @param _messageOrigin The domain from which the message arrived

     * @param _messageRemoteRouter The remote router that sent the message

     * @param _tokenId The token ID

     */

    function _handleRequestDetails(

        uint32 _messageOrigin,

        bytes32 _messageRemoteRouter,

        bytes29 _tokenId

    ) internal {

        // get token & ensure is of local origin

        address _token = _tokenId.evmId();

        require(_isLocalOrigin(_token), "!local origin");

        IBridgeToken _bridgeToken = IBridgeToken(_token);

        // format Update Details message

        bytes29 _updateDetailsAction = BridgeMessage.formatDetails(

            TypeCasts.coerceBytes32(_bridgeToken.name()),

            TypeCasts.coerceBytes32(_bridgeToken.symbol()),

            _bridgeToken.decimals()

        );

        // send message to remote chain via Optics

        Home(xAppConnectionManager.home()).dispatch(

            _messageOrigin,

            _messageRemoteRouter,

            BridgeMessage.formatMessage(_tokenId, _updateDetailsAction)

        );

    }



    // ============ Internal: Transfer ============



    function _ensureToken(bytes29 _tokenId) internal returns (IERC20) {

        address _local = _getTokenAddress(_tokenId);

        if (_local == address(0)) {

            // Representation does not exist yet;

            // deploy representation contract

            _local = _deployToken(_tokenId);

            // message the origin domain

            // to request the token details

            _requestDetails(_tokenId);

        }

        return IERC20(_local);

    }



    // ============ Internal: Request Details ============



    /**

     * @notice Handles an incoming Details message.

     * @param _tokenId The token ID

     */

    function _requestDetails(bytes29 _tokenId) internal {

        uint32 _destination = _tokenId.domain();

        // get remote BridgeRouter address; revert if not found

        bytes32 _remote = remotes[_destination];

        if (_remote == bytes32(0)) {

            return;

        }

        // format Request Details message

        bytes29 _action = BridgeMessage.formatRequestDetails();

        // send message to remote chain via Optics

        Home(xAppConnectionManager.home()).dispatch(

            _destination,

            _remote,

            BridgeMessage.formatMessage(_tokenId, _action)

        );

    }



    // ============ Internal: Fast Liquidity ============



    /**

     * @notice Calculate the token amount after

     * taking a 5 bps (0.05%) liquidity provider fee

     * @param _amnt The token amount before the fee is taken

     * @return _amtAfterFee The token amount after the fee is taken

     */

    function _applyPreFillFee(uint256 _amnt)

        internal

        pure

        returns (uint256 _amtAfterFee)

    {

        // overflow only possible if (2**256 / 9995) tokens sent once

        // in which case, probably not a real token

        _amtAfterFee =

            (_amnt * PRE_FILL_FEE_NUMERATOR) /

            PRE_FILL_FEE_DENOMINATOR;

    }



    /**

     * @notice get the prefillId used to identify

     * fast liquidity provision for incoming token send messages

     * @dev used to identify a token/transfer pair in the prefill LP mapping.

     * NOTE: This approach has a weakness: a user can receive >1 batch of tokens of

     * the same size, but only 1 will be eligible for fast liquidity. The

     * other may only be filled at regular speed. This is because the messages

     * will have identical `tokenId` and `action` fields. This seems fine,

     * tbqh. A delay of a few hours on a corner case is acceptable in v1.

     * @param _tokenId The token ID

     * @param _action The action

     */

    function _preFillId(bytes29 _tokenId, bytes29 _action)

        internal

        view

        returns (bytes32)

    {

        bytes29[] memory _views = new bytes29[](2);

        _views[0] = _tokenId;

        _views[1] = _action;

        return TypedMemView.joinKeccak(_views);

    }



    /**

     * @dev explicit override for compiler inheritance

     * @dev explicit override for compiler inheritance

     * @return domain of chain on which the contract is deployed

     */

    function _localDomain()

        internal

        view

        override(TokenRegistry, XAppConnectionClient)

        returns (uint32)

    {

        return XAppConnectionClient._localDomain();

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\BridgeToken.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {IBridgeToken} from "../../interfaces/bridge/IBridgeToken.sol";

import {ERC20} from "./vendored/OZERC20.sol";

// ============ External Imports ============

import {Version0} from "@celo-org/optics-sol/contracts/Version0.sol";

import {TypeCasts} from "@celo-org/optics-sol/contracts/XAppConnectionManager.sol";

import {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";



contract BridgeToken is Version0, IBridgeToken, OwnableUpgradeable, ERC20 {

    // ============ Immutables ============



    // Immutables used in EIP 712 structured data hashing & signing

    // https://eips.ethereum.org/EIPS/eip-712

    bytes32 public immutable _PERMIT_TYPEHASH =

        keccak256(

            "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"

        );

    bytes32 private immutable _EIP712_STRUCTURED_DATA_VERSION =

        keccak256(bytes("1"));

    uint16 private immutable _EIP712_PREFIX_AND_VERSION = uint16(0x1901);



    // ============ Public Storage ============



    mapping(address => uint256) public nonces;



    // ============ Upgrade Gap ============



    uint256[49] private __GAP; // gap for upgrade safety



    // ============ Initializer ============



    function initialize() public override initializer {

        __Ownable_init();

    }



    // ============ External Functions ============



    /**

     * @notice Destroys `_amnt` tokens from `_from`, reducing the

     * total supply.

     * @dev Emits a {Transfer} event with `to` set to the zero address.

     * Requirements:

     * - `_from` cannot be the zero address.

     * - `_from` must have at least `_amnt` tokens.

     * @param _from The address from which to destroy the tokens

     * @param _amnt The amount of tokens to be destroyed

     */

    function burn(address _from, uint256 _amnt) external override onlyOwner {

        _burn(_from, _amnt);

    }



    /** @notice Creates `_amnt` tokens and assigns them to `_to`, increasing

     * the total supply.

     * @dev Emits a {Transfer} event with `from` set to the zero address.

     * Requirements:

     * - `to` cannot be the zero address.

     * @param _to The destination address

     * @param _amnt The amount of tokens to be minted

     */

    function mint(address _to, uint256 _amnt) external override onlyOwner {

        _mint(_to, _amnt);

    }



    /**

     * @notice Set the details of a token

     * @param _newName The new name

     * @param _newSymbol The new symbol

     * @param _newDecimals The new decimals

     */

    function setDetails(

        string calldata _newName,

        string calldata _newSymbol,

        uint8 _newDecimals

    ) external override onlyOwner {

        // careful with naming convention change here

        token.name = _newName;

        token.symbol = _newSymbol;

        token.decimals = _newDecimals;

    }



    /**

     * @notice Sets approval from owner to spender to value

     * as long as deadline has not passed

     * by submitting a valid signature from owner

     * Uses EIP 712 structured data hashing & signing

     * https://eips.ethereum.org/EIPS/eip-712

     * @param _owner The account setting approval & signing the message

     * @param _spender The account receiving approval to spend owner's tokens

     * @param _value The amount to set approval for

     * @param _deadline The timestamp before which the signature must be submitted

     * @param _v ECDSA signature v

     * @param _r ECDSA signature r

     * @param _s ECDSA signature s

     */

    function permit(

        address _owner,

        address _spender,

        uint256 _value,

        uint256 _deadline,

        uint8 _v,

        bytes32 _r,

        bytes32 _s

    ) external {

        require(block.timestamp <= _deadline, "ERC20Permit: expired deadline");

        require(_owner != address(0), "ERC20Permit: owner zero address");

        uint256 _nonce = nonces[_owner];

        bytes32 _hashStruct = keccak256(

            abi.encode(

                _PERMIT_TYPEHASH,

                _owner,

                _spender,

                _value,

                _nonce,

                _deadline

            )

        );

        bytes32 _digest = keccak256(

            abi.encodePacked(

                _EIP712_PREFIX_AND_VERSION,

                domainSeparator(),

                _hashStruct

            )

        );

        address _signer = ecrecover(_digest, _v, _r, _s);

        require(_signer == _owner, "ERC20Permit: invalid signature");

        nonces[_owner] = _nonce + 1;

        _approve(_owner, _spender, _value);

    }



    // ============ Public Functions ============



    /**

     * @dev silence the compiler being dumb

     */

    function balanceOf(address _account)

        public

        view

        override(IBridgeToken, ERC20)

        returns (uint256)

    {

        return ERC20.balanceOf(_account);

    }



    /**

     * @dev Returns the name of the token.

     */

    function name() public view override returns (string memory) {

        return token.name;

    }



    /**

     * @dev Returns the symbol of the token, usually a shorter version of the

     * name.

     */

    function symbol() public view override returns (string memory) {

        return token.symbol;

    }



    /**

     * @dev Returns the number of decimals used to get its user representation.

     * For example, if `decimals` equals `2`, a balance of `505` tokens should

     * be displayed to a user as `5,05` (`505 / 10 ** 2`).

     * Tokens usually opt for a value of 18, imitating the relationship between

     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is

     * called.

     * NOTE: This information is only used for _display_ purposes: it in

     * no way affects any of the arithmetic of the contract, including

     * {IERC20-balanceOf} and {IERC20-transfer}.

     */

    function decimals() public view override returns (uint8) {

        return token.decimals;

    }



    /**

     * @dev This is ALWAYS calculated at runtime

     * because the token name may change

     */

    function domainSeparator() public view returns (bytes32) {

        uint256 _chainId;

        assembly {

            _chainId := chainid()

        }

        return

            keccak256(

                abi.encode(

                    keccak256(

                        "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"

                    ),

                    keccak256(bytes(token.name)),

                    _EIP712_STRUCTURED_DATA_VERSION,

                    _chainId,

                    address(this)

                )

            );

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Common.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {Message} from "../libs/Message.sol";

// ============ External Imports ============

import {ECDSA} from "@openzeppelin/contracts/cryptography/ECDSA.sol";

import {Initializable} from "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";



/**

 * @title Common

 * @author Celo Labs Inc.

 * @notice Shared utilities between Home and Replica.

 */

abstract contract Common is Initializable {

    // ============ Enums ============



    // States:

    //   0 - UnInitialized - before initialize function is called

    //   note: the contract is initialized at deploy time, so it should never be in this state

    //   1 - Active - as long as the contract has not become fraudulent

    //   2 - Failed - after a valid fraud proof has been submitted;

    //   contract will no longer accept updates or new messages

    enum States {

        UnInitialized,

        Active,

        Failed

    }



    // ============ Immutable Variables ============



    // Domain of chain on which the contract is deployed

    uint32 public immutable localDomain;



    // ============ Public Variables ============



    // Address of bonded Updater

    address public updater;

    // Current state of contract

    States public state;

    // The latest root that has been signed by the Updater

    bytes32 public committedRoot;



    // ============ Upgrade Gap ============



    // gap for upgrade safety

    uint256[47] private __GAP;



    // ============ Events ============



    /**

     * @notice Emitted when update is made on Home

     * or unconfirmed update root is submitted on Replica

     * @param homeDomain Domain of home contract

     * @param oldRoot Old merkle root

     * @param newRoot New merkle root

     * @param signature Updater's signature on `oldRoot` and `newRoot`

     */

    event Update(

        uint32 indexed homeDomain,

        bytes32 indexed oldRoot,

        bytes32 indexed newRoot,

        bytes signature

    );



    /**

     * @notice Emitted when proof of a double update is submitted,

     * which sets the contract to FAILED state

     * @param oldRoot Old root shared between two conflicting updates

     * @param newRoot Array containing two conflicting new roots

     * @param signature Signature on `oldRoot` and `newRoot`[0]

     * @param signature2 Signature on `oldRoot` and `newRoot`[1]

     */

    event DoubleUpdate(

        bytes32 oldRoot,

        bytes32[2] newRoot,

        bytes signature,

        bytes signature2

    );



    // ============ Modifiers ============



    /**

     * @notice Ensures that contract state != FAILED when the function is called

     */

    modifier notFailed() {

        require(state != States.Failed, "failed state");

        _;

    }



    // ============ Constructor ============



    constructor(uint32 _localDomain) {

        localDomain = _localDomain;

    }



    // ============ Initializer ============



    function __Common_initialize(address _updater) internal initializer {

        updater = _updater;

        state = States.Active;

    }



    // ============ External Functions ============



    /**

     * @notice Called by external agent. Checks that signatures on two sets of

     * roots are valid and that the new roots conflict with each other. If both

     * cases hold true, the contract is failed and a `DoubleUpdate` event is

     * emitted.

     * @dev When `fail()` is called on Home, updater is slashed.

     * @param _oldRoot Old root shared between two conflicting updates

     * @param _newRoot Array containing two conflicting new roots

     * @param _signature Signature on `_oldRoot` and `_newRoot`[0]

     * @param _signature2 Signature on `_oldRoot` and `_newRoot`[1]

     */

    function doubleUpdate(

        bytes32 _oldRoot,

        bytes32[2] calldata _newRoot,

        bytes calldata _signature,

        bytes calldata _signature2

    ) external notFailed {

        if (

            Common._isUpdaterSignature(_oldRoot, _newRoot[0], _signature) &&

            Common._isUpdaterSignature(_oldRoot, _newRoot[1], _signature2) &&

            _newRoot[0] != _newRoot[1]

        ) {

            _fail();

            emit DoubleUpdate(_oldRoot, _newRoot, _signature, _signature2);

        }

    }



    // ============ Public Functions ============



    /**

     * @notice Hash of Home domain concatenated with "OPTICS"

     */

    function homeDomainHash() public view virtual returns (bytes32);



    // ============ Internal Functions ============



    /**

     * @notice Hash of Home domain concatenated with "OPTICS"

     * @param _homeDomain the Home domain to hash

     */

    function _homeDomainHash(uint32 _homeDomain)

        internal

        pure

        returns (bytes32)

    {

        return keccak256(abi.encodePacked(_homeDomain, "OPTICS"));

    }



    /**

     * @notice Set contract state to FAILED

     * @dev Called when a valid fraud proof is submitted

     */

    function _setFailed() internal {

        state = States.Failed;

    }



    /**

     * @notice Moves the contract into failed state

     * @dev Called when fraud is proven

     * (Double Update is submitted on Home or Replica,

     * or Improper Update is submitted on Home)

     */

    function _fail() internal virtual;



    /**

     * @notice Checks that signature was signed by Updater

     * @param _oldRoot Old merkle root

     * @param _newRoot New merkle root

     * @param _signature Signature on `_oldRoot` and `_newRoot`

     * @return TRUE iff signature is valid signed by updater

     **/

    function _isUpdaterSignature(

        bytes32 _oldRoot,

        bytes32 _newRoot,

        bytes memory _signature

    ) internal view returns (bool) {

        bytes32 _digest = keccak256(

            abi.encodePacked(homeDomainHash(), _oldRoot, _newRoot)

        );

        _digest = ECDSA.toEthSignedMessageHash(_digest);

        return (ECDSA.recover(_digest, _signature) == updater);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Context.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/*

 * @dev Provides information about the current execution context, including the

 * sender of the transaction and its data. While these are generally available

 * via msg.sender and msg.data, they should not be accessed in such a direct

 * manner, since when dealing with GSN meta-transactions the account sending and

 * paying for execution may not be the actual sender (as far as an application

 * is concerned).

 *

 * This contract is only required for intermediate, library-like contracts.

 */

abstract contract Context {

    function _msgSender() internal view virtual returns (address payable) {

        return msg.sender;

    }



    function _msgData() internal view virtual returns (bytes memory) {

        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691

        return msg.data;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\ContextUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;

import "../proxy/Initializable.sol";



/*

 * @dev Provides information about the current execution context, including the

 * sender of the transaction and its data. While these are generally available

 * via msg.sender and msg.data, they should not be accessed in such a direct

 * manner, since when dealing with GSN meta-transactions the account sending and

 * paying for execution may not be the actual sender (as far as an application

 * is concerned).

 *

 * This contract is only required for intermediate, library-like contracts.

 */

abstract contract ContextUpgradeable is Initializable {

    function __Context_init() internal initializer {

        __Context_init_unchained();

    }



    function __Context_init_unchained() internal initializer {

    }

    function _msgSender() internal view virtual returns (address payable) {

        return msg.sender;

    }



    function _msgData() internal view virtual returns (bytes memory) {

        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691

        return msg.data;

    }

    uint256[50] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\ECDSA.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.

 *

 * These functions can be used to verify that a message was signed by the holder

 * of the private keys of a given address.

 */

library ECDSA {

    /**

     * @dev Returns the address that signed a hashed message (`hash`) with

     * `signature`. This address can then be used for verification purposes.

     *

     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:

     * this function rejects them by requiring the `s` value to be in the lower

     * half order, and the `v` value to be either 27 or 28.

     *

     * IMPORTANT: `hash` _must_ be the result of a hash operation for the

     * verification to be secure: it is possible to craft signatures that

     * recover to arbitrary addresses for non-hashed data. A safe way to ensure

     * this is by receiving a hash of the original message (which may otherwise

     * be too long), and then calling {toEthSignedMessageHash} on it.

     */

    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {

        // Check the signature length

        if (signature.length != 65) {

            revert("ECDSA: invalid signature length");

        }



        // Divide the signature in r, s and v variables

        bytes32 r;

        bytes32 s;

        uint8 v;



        // ecrecover takes the signature parameters, and the only way to get them

        // currently is to use assembly.

        // solhint-disable-next-line no-inline-assembly

        assembly {

            r := mload(add(signature, 0x20))

            s := mload(add(signature, 0x40))

            v := byte(0, mload(add(signature, 0x60)))

        }



        return recover(hash, v, r, s);

    }



    /**

     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,

     * `r` and `s` signature fields separately.

     */

    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {

        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature

        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines

        // the valid range for s in (281): 0 < s < secp256k1n ?? 2 + 1, and for v in (282): v ?? {27, 28}. Most

        // signatures from current libraries generate a unique signature with an s-value in the lower half order.

        //

        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value

        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or

        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept

        // these malleable signatures as well.

        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature 's' value");

        require(v == 27 || v == 28, "ECDSA: invalid signature 'v' value");



        // If the signature is valid (and not malleable), return the signer address

        address signer = ecrecover(hash, v, r, s);

        require(signer != address(0), "ECDSA: invalid signature");



        return signer;

    }



    /**

     * @dev Returns an Ethereum Signed Message, created from a `hash`. This

     * replicates the behavior of the

     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]

     * JSON-RPC method.

     *

     * See {recover}.

     */

    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {

        // 32 is the length in bytes of hash,

        // enforced by the type signature above

        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Encoding.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



library Encoding {

    // ============ Constants ============



    bytes private constant NIBBLE_LOOKUP = "0123456789abcdef";



    // ============ Internal Functions ============



    /**

     * @notice Encode a uint32 in its DECIMAL representation, with leading

     * zeroes.

     * @param _num The number to encode

     * @return _encoded The encoded number, suitable for use in abi.

     * encodePacked

     */

    function decimalUint32(uint32 _num)

        internal

        pure

        returns (uint80 _encoded)

    {

        uint80 ASCII_0 = 0x30;

        // all over/underflows are impossible

        // this will ALWAYS produce 10 decimal characters

        for (uint8 i = 0; i < 10; i += 1) {

            _encoded |= ((_num % 10) + ASCII_0) << (i * 8);

            _num = _num / 10;

        }

    }



    /**

     * @notice Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.

     * `second` contains the encoded lower 16 bytes.

     * @param _bytes The 32 bytes as uint256

     * @return _firstHalf The top 16 bytes

     * @return _secondHalf The bottom 16 bytes

     */

    function encodeHex(uint256 _bytes)

        internal

        pure

        returns (uint256 _firstHalf, uint256 _secondHalf)

    {

        for (uint8 i = 31; i > 15; i -= 1) {

            uint8 _b = uint8(_bytes >> (i * 8));

            _firstHalf |= _byteHex(_b);

            if (i != 16) {

                _firstHalf <<= 16;

            }

        }

        // abusing underflow here =_=

        for (uint8 i = 15; i < 255; i -= 1) {

            uint8 _b = uint8(_bytes >> (i * 8));

            _secondHalf |= _byteHex(_b);

            if (i != 0) {

                _secondHalf <<= 16;

            }

        }

    }



    /**

     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.

     * @param _byte The byte

     * @return _char The encoded hex character

     */

    function _nibbleHex(uint8 _byte) private pure returns (uint8 _char) {

        uint8 _nibble = _byte & 0x0f; // keep bottom 4, 0 top 4

        _char = uint8(NIBBLE_LOOKUP[_nibble]);

    }



    /**

     * @notice Returns a uint16 containing the hex-encoded byte.

     * @param _byte The byte

     * @return _encoded The hex-encoded byte

     */

    function _byteHex(uint8 _byte) private pure returns (uint16 _encoded) {

        _encoded |= _nibbleHex(_byte >> 4); // top 4 bits

        _encoded <<= 8;

        _encoded |= _nibbleHex(_byte); // lower 4 bits

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Enum.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



/// @title Enum - Collection of enums

/// @author Richard Meissner - <richard@gnosis.pm>

contract Enum {

    enum Operation {Call, DelegateCall}

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\EtherPaymentFallback.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments

/// @author Richard Meissner - <richard@gnosis.pm>

contract EtherPaymentFallback {

    event SafeReceived(address indexed sender, uint256 value);



    /// @dev Fallback function accepts Ether transactions.

    receive() external payable {

        emit SafeReceived(msg.sender, msg.value);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\ETHHelper.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {BridgeRouter} from "./BridgeRouter.sol";

import {IWeth} from "../../interfaces/bridge/IWeth.sol";

// ============ External Imports ============

import {TypeCasts} from "@celo-org/optics-sol/contracts/XAppConnectionManager.sol";



contract ETHHelper {

    // ============ Immutables ============



    // wrapped Ether contract

    IWeth public immutable weth;

    // bridge router contract

    BridgeRouter public immutable bridge;



    // ============ Constructor ============



    constructor(address _weth, address _bridge) {

        weth = IWeth(_weth);

        bridge = BridgeRouter(_bridge);

        IWeth(_weth).approve(_bridge, uint256(-1));

    }



    // ============ External Functions ============



    /**

     * @notice Sends ETH over the Optics Bridge. Sends to a full-width Optics

     * identifer on the other side.

     * @dev As with all bridges, improper use may result in loss of funds.

     * @param _domain The domain to send funds to.

     * @param _to The 32-byte identifier of the recipient

     */

    function sendTo(uint32 _domain, bytes32 _to) public payable {

        weth.deposit{value: msg.value}();

        bridge.send(address(weth), msg.value, _domain, _to);

    }



    /**

     * @notice Sends ETH over the Optics Bridge. Sends to the same address on

     * the other side.

     * @dev WARNING: This function should only be used when sending TO an

     * EVM-like domain. As with all bridges, improper use may result in loss of

     * funds.

     * @param _domain The domain to send funds to

     */

    function send(uint32 _domain) external payable {

        sendTo(_domain, TypeCasts.addressToBytes32(msg.sender));

    }



    /**

     * @notice Sends ETH over the Optics Bridge. Sends to a specified EVM

     * address on the other side.

     * @dev This function should only be used when sending TO an EVM-like

     * domain. As with all bridges, improper use may result in loss of funds

     * @param _domain The domain to send funds to.

     * @param _to The EVM address of the recipient

     */

    function sendToEVMLike(uint32 _domain, address _to) external payable {

        sendTo(_domain, TypeCasts.addressToBytes32(_to));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Executor.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;

import "../common/Enum.sol";



/// @title Executor - A contract that can execute transactions

/// @author Richard Meissner - <richard@gnosis.pm>

contract Executor {

    function execute(

        address to,

        uint256 value,

        bytes memory data,

        Enum.Operation operation,

        uint256 txGas

    ) internal returns (bool success) {

        if (operation == Enum.Operation.DelegateCall) {

            // solhint-disable-next-line no-inline-assembly

            assembly {

                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)

            }

        } else {

            // solhint-disable-next-line no-inline-assembly

            assembly {

                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)

            }

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\FallbackManager.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



import "../common/SelfAuthorized.sol";



/// @title Fallback Manager - A contract that manages fallback calls made to this contract

/// @author Richard Meissner - <richard@gnosis.pm>

contract FallbackManager is SelfAuthorized {

    event ChangedFallbackHandler(address handler);



    // keccak256("fallback_manager.handler.address")

    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;



    function internalSetFallbackHandler(address handler) internal {

        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;

        // solhint-disable-next-line no-inline-assembly

        assembly {

            sstore(slot, handler)

        }

    }



    /// @dev Allows to add a contract to handle fallback calls.

    ///      Only fallback calls without value and with data will be forwarded.

    ///      This can only be done via a Safe transaction.

    /// @param handler contract to handle fallbacks calls.

    function setFallbackHandler(address handler) public authorized {

        internalSetFallbackHandler(handler);

        emit ChangedFallbackHandler(handler);

    }



    // solhint-disable-next-line payable-fallback,no-complex-fallback

    fallback() external {

        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;

        // solhint-disable-next-line no-inline-assembly

        assembly {

            let handler := sload(slot)

            if iszero(handler) {

                return(0, 0)

            }

            calldatacopy(0, 0, calldatasize())

            // The msg.sender address is shifted to the left by 12 bytes to remove the padding

            // Then the address without padding is stored right after the calldata

            mstore(calldatasize(), shl(96, caller()))

            // Add 20 bytes for the address appended add the end

            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)

            returndatacopy(0, 0, returndatasize())

            if iszero(success) {

                revert(0, returndatasize())

            }

            return(0, returndatasize())

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\GnosisSafe.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



import "./base/ModuleManager.sol";

import "./base/OwnerManager.sol";

import "./base/FallbackManager.sol";

import "./base/GuardManager.sol";

import "./common/EtherPaymentFallback.sol";

import "./common/Singleton.sol";

import "./common/SignatureDecoder.sol";

import "./common/SecuredTokenTransfer.sol";

import "./common/StorageAccessible.sol";

import "./interfaces/ISignatureValidator.sol";

import "./external/GnosisSafeMath.sol";



/// @title Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.

/// @author Stefan George - <stefan@gnosis.io>

/// @author Richard Meissner - <richard@gnosis.io>

contract GnosisSafe is

    EtherPaymentFallback,

    Singleton,

    ModuleManager,

    OwnerManager,

    SignatureDecoder,

    SecuredTokenTransfer,

    ISignatureValidatorConstants,

    FallbackManager,

    StorageAccessible,

    GuardManager

{

    using GnosisSafeMath for uint256;



    string public constant VERSION = "1.3.0";



    // keccak256(

    //     "EIP712Domain(uint256 chainId,address verifyingContract)"

    // );

    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;



    // keccak256(

    //     "SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)"

    // );

    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;



    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);

    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);

    event SignMsg(bytes32 indexed msgHash);

    event ExecutionFailure(bytes32 txHash, uint256 payment);

    event ExecutionSuccess(bytes32 txHash, uint256 payment);



    uint256 public nonce;

    bytes32 private _deprecatedDomainSeparator;

    // Mapping to keep track of all message hashes that have been approve by ALL REQUIRED owners

    mapping(bytes32 => uint256) public signedMessages;

    // Mapping to keep track of all hashes (message or transaction) that have been approve by ANY owners

    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;



    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts

    constructor() {

        // By setting the threshold it is not possible to call setup anymore,

        // so we create a Safe with 0 owners and threshold 1.

        // This is an unusable Safe, perfect for the singleton

        threshold = 1;

    }



    /// @dev Setup function sets initial storage of contract.

    /// @param _owners List of Safe owners.

    /// @param _threshold Number of required confirmations for a Safe transaction.

    /// @param to Contract address for optional delegate call.

    /// @param data Data payload for optional delegate call.

    /// @param fallbackHandler Handler for fallback calls to this contract

    /// @param paymentToken Token that should be used for the payment (0 is ETH)

    /// @param payment Value that should be paid

    /// @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)

    function setup(

        address[] calldata _owners,

        uint256 _threshold,

        address to,

        bytes calldata data,

        address fallbackHandler,

        address paymentToken,

        uint256 payment,

        address payable paymentReceiver

    ) external {

        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice

        setupOwners(_owners, _threshold);

        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);

        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules

        setupModules(to, data);



        if (payment > 0) {

            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)

            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment

            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);

        }

        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);

    }



    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.

    ///      Note: The fees are always transferred, even if the user transaction fails.

    /// @param to Destination address of Safe transaction.

    /// @param value Ether value of Safe transaction.

    /// @param data Data payload of Safe transaction.

    /// @param operation Operation type of Safe transaction.

    /// @param safeTxGas Gas that should be used for the Safe transaction.

    /// @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)

    /// @param gasPrice Gas price that should be used for the payment calculation.

    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.

    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).

    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})

    function execTransaction(

        address to,

        uint256 value,

        bytes calldata data,

        Enum.Operation operation,

        uint256 safeTxGas,

        uint256 baseGas,

        uint256 gasPrice,

        address gasToken,

        address payable refundReceiver,

        bytes memory signatures

    ) public payable virtual returns (bool success) {

        bytes32 txHash;

        // Use scope here to limit variable lifetime and prevent `stack too deep` errors

        {

            bytes memory txHashData =

                encodeTransactionData(

                    // Transaction info

                    to,

                    value,

                    data,

                    operation,

                    safeTxGas,

                    // Payment info

                    baseGas,

                    gasPrice,

                    gasToken,

                    refundReceiver,

                    // Signature info

                    nonce

                );

            // Increase nonce and execute transaction.

            nonce++;

            txHash = keccak256(txHashData);

            checkSignatures(txHash, txHashData, signatures);

        }

        address guard = getGuard();

        {

            if (guard != address(0)) {

                Guard(guard).checkTransaction(

                    // Transaction info

                    to,

                    value,

                    data,

                    operation,

                    safeTxGas,

                    // Payment info

                    baseGas,

                    gasPrice,

                    gasToken,

                    refundReceiver,

                    // Signature info

                    signatures,

                    msg.sender

                );

            }

        }

        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)

        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150

        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, "GS010");

        // Use scope here to limit variable lifetime and prevent `stack too deep` errors

        {

            uint256 gasUsed = gasleft();

            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)

            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas

            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);

            gasUsed = gasUsed.sub(gasleft());

            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful

            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert

            require(success || safeTxGas != 0 || gasPrice != 0, "GS013");

            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls

            uint256 payment = 0;

            if (gasPrice > 0) {

                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);

            }

            if (success) emit ExecutionSuccess(txHash, payment);

            else emit ExecutionFailure(txHash, payment);

        }

        {

            if (guard != address(0)) {

                Guard(guard).checkAfterExecution(txHash, success);

            }

        }

    }



    function handlePayment(

        uint256 gasUsed,

        uint256 baseGas,

        uint256 gasPrice,

        address gasToken,

        address payable refundReceiver

    ) private returns (uint256 payment) {

        // solhint-disable-next-line avoid-tx-origin

        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;

        if (gasToken == address(0)) {

            // For ETH we will only adjust the gas price to not be higher than the actual used gas price

            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);

            require(receiver.send(payment), "GS011");

        } else {

            payment = gasUsed.add(baseGas).mul(gasPrice);

            require(transferToken(gasToken, receiver, payment), "GS012");

        }

    }



    /**

     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.

     * @param dataHash Hash of the data (could be either a message hash or transaction hash)

     * @param data That should be signed (this is passed to an external validator contract)

     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.

     */

    function checkSignatures(

        bytes32 dataHash,

        bytes memory data,

        bytes memory signatures

    ) public view {

        // Load threshold to avoid multiple storage loads

        uint256 _threshold = threshold;

        // Check that a threshold is set

        require(_threshold > 0, "GS001");

        checkNSignatures(dataHash, data, signatures, _threshold);

    }



    /**

     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.

     * @param dataHash Hash of the data (could be either a message hash or transaction hash)

     * @param data That should be signed (this is passed to an external validator contract)

     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.

     * @param requiredSignatures Amount of required valid signatures.

     */

    function checkNSignatures(

        bytes32 dataHash,

        bytes memory data,

        bytes memory signatures,

        uint256 requiredSignatures

    ) public view {

        // Check that the provided signature data is not too short

        require(signatures.length >= requiredSignatures.mul(65), "GS020");

        // There cannot be an owner with address 0.

        address lastOwner = address(0);

        address currentOwner;

        uint8 v;

        bytes32 r;

        bytes32 s;

        uint256 i;

        for (i = 0; i < requiredSignatures; i++) {

            (v, r, s) = signatureSplit(signatures, i);

            if (v == 0) {

                // If v is 0 then it is a contract signature

                // When handling contract signatures the address of the contract is encoded into r

                currentOwner = address(uint160(uint256(r)));



                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes

                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.

                // Here we only check that the pointer is not pointing inside the part that is being processed

                require(uint256(s) >= requiredSignatures.mul(65), "GS021");



                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)

                require(uint256(s).add(32) <= signatures.length, "GS022");



                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length

                uint256 contractSignatureLen;

                // solhint-disable-next-line no-inline-assembly

                assembly {

                    contractSignatureLen := mload(add(add(signatures, s), 0x20))

                }

                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, "GS023");



                // Check signature

                bytes memory contractSignature;

                // solhint-disable-next-line no-inline-assembly

                assembly {

                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s

                    contractSignature := add(add(signatures, s), 0x20)

                }

                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, "GS024");

            } else if (v == 1) {

                // If v is 1 then it is an approved hash

                // When handling approved hashes the address of the approver is encoded into r

                currentOwner = address(uint160(uint256(r)));

                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction

                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, "GS025");

            } else if (v > 30) {

                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow

                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover

                currentOwner = ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", dataHash)), v - 4, r, s);

            } else {

                // Default is the ecrecover flow with the provided data hash

                // Use ecrecover with the messageHash for EOA signatures

                currentOwner = ecrecover(dataHash, v, r, s);

            }

            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, "GS026");

            lastOwner = currentOwner;

        }

    }



    /// @dev Allows to estimate a Safe transaction.

    ///      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.

    ///      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`

    /// @param to Destination address of Safe transaction.

    /// @param value Ether value of Safe transaction.

    /// @param data Data payload of Safe transaction.

    /// @param operation Operation type of Safe transaction.

    /// @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).

    /// @notice Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.

    function requiredTxGas(

        address to,

        uint256 value,

        bytes calldata data,

        Enum.Operation operation

    ) external returns (uint256) {

        uint256 startGas = gasleft();

        // We don't provide an error message here, as we use it to return the estimate

        require(execute(to, value, data, operation, gasleft()));

        uint256 requiredGas = startGas - gasleft();

        // Convert response to string and return via error message

        revert(string(abi.encodePacked(requiredGas)));

    }



    /**

     * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.

     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.

     */

    function approveHash(bytes32 hashToApprove) external {

        require(owners[msg.sender] != address(0), "GS030");

        approvedHashes[msg.sender][hashToApprove] = 1;

        emit ApproveHash(hashToApprove, msg.sender);

    }



    /// @dev Returns the chain id used by this contract.

    function getChainId() public view returns (uint256) {

        uint256 id;

        // solhint-disable-next-line no-inline-assembly

        assembly {

            id := chainid()

        }

        return id;

    }



    function domainSeparator() public view returns (bytes32) {

        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));

    }



    /// @dev Returns the bytes that are hashed to be signed by owners.

    /// @param to Destination address.

    /// @param value Ether value.

    /// @param data Data payload.

    /// @param operation Operation type.

    /// @param safeTxGas Gas that should be used for the safe transaction.

    /// @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)

    /// @param gasPrice Maximum gas price that should be used for this transaction.

    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.

    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).

    /// @param _nonce Transaction nonce.

    /// @return Transaction hash bytes.

    function encodeTransactionData(

        address to,

        uint256 value,

        bytes calldata data,

        Enum.Operation operation,

        uint256 safeTxGas,

        uint256 baseGas,

        uint256 gasPrice,

        address gasToken,

        address refundReceiver,

        uint256 _nonce

    ) public view returns (bytes memory) {

        bytes32 safeTxHash =

            keccak256(

                abi.encode(

                    SAFE_TX_TYPEHASH,

                    to,

                    value,

                    keccak256(data),

                    operation,

                    safeTxGas,

                    baseGas,

                    gasPrice,

                    gasToken,

                    refundReceiver,

                    _nonce

                )

            );

        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);

    }



    /// @dev Returns hash to be signed by owners.

    /// @param to Destination address.

    /// @param value Ether value.

    /// @param data Data payload.

    /// @param operation Operation type.

    /// @param safeTxGas Fas that should be used for the safe transaction.

    /// @param baseGas Gas costs for data used to trigger the safe transaction.

    /// @param gasPrice Maximum gas price that should be used for this transaction.

    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.

    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).

    /// @param _nonce Transaction nonce.

    /// @return Transaction hash.

    function getTransactionHash(

        address to,

        uint256 value,

        bytes calldata data,

        Enum.Operation operation,

        uint256 safeTxGas,

        uint256 baseGas,

        uint256 gasPrice,

        address gasToken,

        address refundReceiver,

        uint256 _nonce

    ) public view returns (bytes32) {

        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\GnosisSafeMath.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



/**

 * @title GnosisSafeMath

 * @dev Math operations with safety checks that revert on error

 * Renamed from SafeMath to GnosisSafeMath to avoid conflicts

 * TODO: remove once open zeppelin update to solc 0.5.0

 */

library GnosisSafeMath {

    /**

     * @dev Multiplies two numbers, reverts on overflow.

     */

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the

        // benefit is lost if 'b' is also tested.

        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522

        if (a == 0) {

            return 0;

        }



        uint256 c = a * b;

        require(c / a == b);



        return c;

    }



    /**

     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).

     */

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b <= a);

        uint256 c = a - b;



        return c;

    }



    /**

     * @dev Adds two numbers, reverts on overflow.

     */

    function add(uint256 a, uint256 b) internal pure returns (uint256) {

        uint256 c = a + b;

        require(c >= a);



        return c;

    }



    /**

     * @dev Returns the largest of two numbers.

     */

    function max(uint256 a, uint256 b) internal pure returns (uint256) {

        return a >= b ? a : b;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\GnosisSafeProxy.sol
File type: .sol
/**

 *Submitted for verification at Etherscan.io on 2021-07-09

*/



// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain

/// @author Richard Meissner - <richard@gnosis.io>

interface IProxy {

    function masterCopy() external view returns (address);

}



/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.

/// @author Stefan George - <stefan@gnosis.io>

/// @author Richard Meissner - <richard@gnosis.io>

contract GnosisSafeProxy {

    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.

    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`

    address internal singleton;



    /// @dev Constructor function sets address of singleton contract.

    /// @param _singleton Singleton address.

    constructor(address _singleton) {

        require(_singleton != address(0), "Invalid singleton address provided");

        singleton = _singleton;

    }



    /// @dev Fallback function forwards all transactions and returns all received return data.

    fallback() external payable {

        // solhint-disable-next-line no-inline-assembly

        assembly {

            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)

            // 0xa619486e == keccak("masterCopy()"). The value is right padded to 32-bytes with 0s

            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {

                mstore(0, _singleton)

                return(0, 0x20)

            }

            calldatacopy(0, 0, calldatasize())

            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)

            returndatacopy(0, 0, returndatasize())

            if eq(success, 0) {

                revert(0, returndatasize())

            }

            return(0, returndatasize())

        }

    }

}



/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.

/// @author Stefan George - <stefan@gnosis.pm>

contract GnosisSafeProxyFactory {

    event ProxyCreation(GnosisSafeProxy proxy, address singleton);



    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.

    /// @param singleton Address of singleton contract.

    /// @param data Payload for message call sent to new proxy contract.

    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {

        proxy = new GnosisSafeProxy(singleton);

        if (data.length > 0)

            // solhint-disable-next-line no-inline-assembly

            assembly {

                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {

                    revert(0, 0)

                }

            }

        emit ProxyCreation(proxy, singleton);

    }



    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.

    function proxyRuntimeCode() public pure returns (bytes memory) {

        return type(GnosisSafeProxy).runtimeCode;

    }



    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.

    function proxyCreationCode() public pure returns (bytes memory) {

        return type(GnosisSafeProxy).creationCode;

    }



    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.

    ///      This method is only meant as an utility to be called from other methods

    /// @param _singleton Address of singleton contract.

    /// @param initializer Payload for message call sent to new proxy contract.

    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.

    function deployProxyWithNonce(

        address _singleton,

        bytes memory initializer,

        uint256 saltNonce

    ) internal returns (GnosisSafeProxy proxy) {

        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it

        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));

        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));

        // solhint-disable-next-line no-inline-assembly

        assembly {

            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)

        }

        require(address(proxy) != address(0), "Create2 call failed");

    }



    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.

    /// @param _singleton Address of singleton contract.

    /// @param initializer Payload for message call sent to new proxy contract.

    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.

    function createProxyWithNonce(

        address _singleton,

        bytes memory initializer,

        uint256 saltNonce

    ) public returns (GnosisSafeProxy proxy) {

        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);

        if (initializer.length > 0)

            // solhint-disable-next-line no-inline-assembly

            assembly {

                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {

                    revert(0, 0)

                }

            }

        emit ProxyCreation(proxy, _singleton);

    }



    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction

    /// @param _singleton Address of singleton contract.

    /// @param initializer Payload for message call sent to new proxy contract.

    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.

    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.

    function createProxyWithCallback(

        address _singleton,

        bytes memory initializer,

        uint256 saltNonce,

        IProxyCreationCallback callback

    ) public returns (GnosisSafeProxy proxy) {

        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));

        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);

        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);

    }



    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`

    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,

    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.

    /// @param _singleton Address of singleton contract.

    /// @param initializer Payload for message call sent to new proxy contract.

    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.

    function calculateCreateProxyWithNonceAddress(

        address _singleton,

        bytes calldata initializer,

        uint256 saltNonce

    ) external returns (GnosisSafeProxy proxy) {

        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);

        revert(string(abi.encodePacked(proxy)));

    }

}



interface IProxyCreationCallback {

    function proxyCreated(

        GnosisSafeProxy proxy,

        address _singleton,

        bytes calldata initializer,

        uint256 saltNonce

    ) external;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\GovernanceMessage.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;

pragma experimental ABIEncoderV2;



// ============ External Imports ============

import {TypedMemView} from "@summa-tx/memview-sol/contracts/TypedMemView.sol";



library GovernanceMessage {

    using TypedMemView for bytes;

    using TypedMemView for bytes29;



    uint256 private constant CALL_PREFIX_LEN = 64;

    uint256 private constant MSG_PREFIX_NUM_ITEMS = 2;

    uint256 private constant MSG_PREFIX_LEN = 2;

    uint256 private constant GOV_ACTION_LEN = 37;



    enum Types {

        Invalid, // 0

        Call, // 1

        TransferGovernor, // 2

        SetRouter, // 3

        Data // 4

    }



    struct Call {

        bytes32 to;

        bytes data;

    }



    modifier typeAssert(bytes29 _view, Types _t) {

        _view.assertType(uint40(_t));

        _;

    }



    // Types.Call

    function data(bytes29 _view) internal view returns (bytes memory _data) {

        _data = TypedMemView.clone(

            _view.slice(CALL_PREFIX_LEN, dataLen(_view), uint40(Types.Data))

        );

    }



    function formatCalls(Call[] memory _calls)

        internal

        view

        returns (bytes memory _msg)

    {

        uint256 _numCalls = _calls.length;

        bytes29[] memory _encodedCalls = new bytes29[](

            _numCalls + MSG_PREFIX_NUM_ITEMS

        );



        // Add Types.Call identifier

        _encodedCalls[0] = abi.encodePacked(Types.Call).ref(0);

        // Add number of calls

        _encodedCalls[1] = abi.encodePacked(uint8(_numCalls)).ref(0);



        for (uint256 i = 0; i < _numCalls; i++) {

            Call memory _call = _calls[i];

            bytes29 _callMsg = abi

                .encodePacked(_call.to, _call.data.length, _call.data)

                .ref(0);



            _encodedCalls[i + MSG_PREFIX_NUM_ITEMS] = _callMsg;

        }



        _msg = TypedMemView.join(_encodedCalls);

    }



    function formatTransferGovernor(uint32 _domain, bytes32 _governor)

        internal

        view

        returns (bytes memory _msg)

    {

        _msg = TypedMemView.clone(

            mustBeTransferGovernor(

                abi

                    .encodePacked(Types.TransferGovernor, _domain, _governor)

                    .ref(0)

            )

        );

    }



    function formatSetRouter(uint32 _domain, bytes32 _router)

        internal

        view

        returns (bytes memory _msg)

    {

        _msg = TypedMemView.clone(

            mustBeSetRouter(

                abi.encodePacked(Types.SetRouter, _domain, _router).ref(0)

            )

        );

    }



    function getCalls(bytes29 _msg) internal view returns (Call[] memory) {

        uint8 _numCalls = uint8(_msg.indexUint(1, 1));



        // Skip message prefix

        bytes29 _msgPtr = _msg.slice(

            MSG_PREFIX_LEN,

            _msg.len() - MSG_PREFIX_LEN,

            uint40(Types.Call)

        );



        Call[] memory _calls = new Call[](_numCalls);



        uint256 counter = 0;

        while (_msgPtr.len() > 0) {

            _calls[counter].to = to(_msgPtr);

            _calls[counter].data = data(_msgPtr);



            _msgPtr = nextCall(_msgPtr);

            counter++;

        }



        return _calls;

    }



    function nextCall(bytes29 _view)

        internal

        pure

        typeAssert(_view, Types.Call)

        returns (bytes29)

    {

        uint256 lastCallLen = CALL_PREFIX_LEN + dataLen(_view);

        return

            _view.slice(

                lastCallLen,

                _view.len() - lastCallLen,

                uint40(Types.Call)

            );

    }



    function messageType(bytes29 _view) internal pure returns (Types) {

        return Types(uint8(_view.typeOf()));

    }



    /*

        Message fields

    */



    // All Types

    function identifier(bytes29 _view) internal pure returns (uint8) {

        return uint8(_view.indexUint(0, 1));

    }



    // Types.Call

    function to(bytes29 _view) internal pure returns (bytes32) {

        return _view.index(0, 32);

    }



    // Types.Call

    function dataLen(bytes29 _view) internal pure returns (uint256) {

        return uint256(_view.index(32, 32));

    }



    // Types.TransferGovernor & Types.EnrollRemote

    function domain(bytes29 _view) internal pure returns (uint32) {

        return uint32(_view.indexUint(1, 4));

    }



    // Types.EnrollRemote

    function router(bytes29 _view) internal pure returns (bytes32) {

        return _view.index(5, 32);

    }



    // Types.TransferGovernor

    function governor(bytes29 _view) internal pure returns (bytes32) {

        return _view.index(5, 32);

    }



    /*

        Message Type: CALL

        struct Call {

            identifier,     // message ID -- 1 byte

            numCalls,       // number of calls -- 1 byte

            calls[], {

                to,         // address to call -- 32 bytes

                dataLen,    // call data length -- 32 bytes,

                data        // call data -- 0+ bytes (length unknown)

            }

        }

    */



    function isValidCall(bytes29 _view) internal pure returns (bool) {

        return

            identifier(_view) == uint8(Types.Call) &&

            _view.len() >= CALL_PREFIX_LEN;

    }



    function isCall(bytes29 _view) internal pure returns (bool) {

        return isValidCall(_view) && messageType(_view) == Types.Call;

    }



    function tryAsCall(bytes29 _view) internal pure returns (bytes29) {

        if (isValidCall(_view)) {

            return _view.castTo(uint40(Types.Call));

        }

        return TypedMemView.nullView();

    }



    function mustBeCalls(bytes29 _view) internal pure returns (bytes29) {

        return tryAsCall(_view).assertValid();

    }



    /*

        Message Type: TRANSFER GOVERNOR

        struct TransferGovernor {

            identifier, // message ID -- 1 byte

            domain,     // domain of new governor -- 4 bytes

            addr        // address of new governor -- 32 bytes

        }

    */



    function isValidTransferGovernor(bytes29 _view)

        internal

        pure

        returns (bool)

    {

        return

            identifier(_view) == uint8(Types.TransferGovernor) &&

            _view.len() == GOV_ACTION_LEN;

    }



    function isTransferGovernor(bytes29 _view) internal pure returns (bool) {

        return

            isValidTransferGovernor(_view) &&

            messageType(_view) == Types.TransferGovernor;

    }



    function tryAsTransferGovernor(bytes29 _view)

        internal

        pure

        returns (bytes29)

    {

        if (isValidTransferGovernor(_view)) {

            return _view.castTo(uint40(Types.TransferGovernor));

        }

        return TypedMemView.nullView();

    }



    function mustBeTransferGovernor(bytes29 _view)

        internal

        pure

        returns (bytes29)

    {

        return tryAsTransferGovernor(_view).assertValid();

    }



    /*

        Message Type: ENROLL ROUTER

        struct SetRouter {

            identifier, // message ID -- 1 byte

            domain,     // domain of new router -- 4 bytes

            addr        // address of new router -- 32 bytes

        }

    */



    function isValidSetRouter(bytes29 _view) internal pure returns (bool) {

        return

            identifier(_view) == uint8(Types.SetRouter) &&

            _view.len() == GOV_ACTION_LEN;

    }



    function isSetRouter(bytes29 _view) internal pure returns (bool) {

        return isValidSetRouter(_view) && messageType(_view) == Types.SetRouter;

    }



    function tryAsSetRouter(bytes29 _view) internal pure returns (bytes29) {

        if (isValidSetRouter(_view)) {

            return _view.castTo(uint40(Types.SetRouter));

        }

        return TypedMemView.nullView();

    }



    function mustBeSetRouter(bytes29 _view) internal pure returns (bytes29) {

        return tryAsSetRouter(_view).assertValid();

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\GovernanceRouter.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;

pragma experimental ABIEncoderV2;



// ============ Internal Imports ============

import {Home} from "../Home.sol";

import {Version0} from "../Version0.sol";

import {XAppConnectionManager, TypeCasts} from "../XAppConnectionManager.sol";

import {IMessageRecipient} from "../../interfaces/IMessageRecipient.sol";

import {GovernanceMessage} from "./GovernanceMessage.sol";

// ============ External Imports ============

import {Initializable} from "@openzeppelin/contracts/proxy/Initializable.sol";

import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";

import {TypedMemView} from "@summa-tx/memview-sol/contracts/TypedMemView.sol";



contract GovernanceRouter is Version0, Initializable, IMessageRecipient {

    // ============ Libraries ============



    using SafeMath for uint256;

    using TypedMemView for bytes;

    using TypedMemView for bytes29;

    using GovernanceMessage for bytes29;



    // ============ Immutables ============



    uint32 public immutable localDomain;

    // number of seconds before recovery can be activated

    uint256 public immutable recoveryTimelock;



    // ============ Public Storage ============



    // timestamp when recovery timelock expires; 0 if timelock has not been initiated

    uint256 public recoveryActiveAt;

    // the address of the recovery manager multisig

    address public recoveryManager;

    // the local entity empowered to call governance functions, set to 0x0 on non-Governor chains

    address public governor;

    // domain of Governor chain -- for accepting incoming messages from Governor

    uint32 public governorDomain;

    // xAppConnectionManager contract which stores Replica addresses

    XAppConnectionManager public xAppConnectionManager;

    // domain -> remote GovernanceRouter contract address

    mapping(uint32 => bytes32) public routers;

    // array of all domains with registered GovernanceRouter

    uint32[] public domains;



    // ============ Upgrade Gap ============



    // gap for upgrade safety

    uint256[43] private __GAP;



    // ============ Events ============



    /**

     * @notice Emitted a remote GovernanceRouter address is added, removed, or changed

     * @param domain the domain of the remote Router

     * @param previousRouter the previously registered router; 0 if router is being added

     * @param newRouter the new registered router; 0 if router is being removed

     */

    event SetRouter(

        uint32 indexed domain,

        bytes32 previousRouter,

        bytes32 newRouter

    );



    /**

     * @notice Emitted when the Governor role is transferred

     * @param previousGovernorDomain the domain of the previous Governor

     * @param newGovernorDomain the domain of the new Governor

     * @param previousGovernor the address of the previous Governor; 0 if the governor was remote

     * @param newGovernor the address of the new Governor; 0 if the governor is remote

     */

    event TransferGovernor(

        uint32 previousGovernorDomain,

        uint32 newGovernorDomain,

        address indexed previousGovernor,

        address indexed newGovernor

    );



    /**

     * @notice Emitted when the RecoveryManager role is transferred

     * @param previousRecoveryManager the address of the previous RecoveryManager

     * @param newRecoveryManager the address of the new RecoveryManager

     */

    event TransferRecoveryManager(

        address indexed previousRecoveryManager,

        address indexed newRecoveryManager

    );



    /**

     * @notice Emitted when recovery state is initiated by the RecoveryManager

     * @param recoveryManager the address of the current RecoveryManager who initiated the transition

     * @param recoveryActiveAt the block at which recovery state will be active

     */

    event InitiateRecovery(

        address indexed recoveryManager,

        uint256 recoveryActiveAt

    );



    /**

     * @notice Emitted when recovery state is exited by the RecoveryManager

     * @param recoveryManager the address of the current RecoveryManager who initiated the transition

     */

    event ExitRecovery(address recoveryManager);



    modifier typeAssert(bytes29 _view, GovernanceMessage.Types _type) {

        _view.assertType(uint40(_type));

        _;

    }



    // ============ Modifiers ============



    modifier onlyReplica() {

        require(xAppConnectionManager.isReplica(msg.sender), "!replica");

        _;

    }



    modifier onlyGovernorRouter(uint32 _domain, bytes32 _address) {

        require(_isGovernorRouter(_domain, _address), "!governorRouter");

        _;

    }



    modifier onlyGovernor() {

        require(msg.sender == governor, "! called by governor");

        _;

    }



    modifier onlyRecoveryManager() {

        require(msg.sender == recoveryManager, "! called by recovery manager");

        _;

    }



    modifier onlyInRecovery() {

        require(inRecovery(), "! in recovery");

        _;

    }



    modifier onlyNotInRecovery() {

        require(!inRecovery(), "in recovery");

        _;

    }



    modifier onlyGovernorOrRecoveryManager() {

        if (!inRecovery()) {

            require(msg.sender == governor, "! called by governor");

        } else {

            require(

                msg.sender == recoveryManager,

                "! called by recovery manager"

            );

        }

        _;

    }



    // ============ Constructor ============



    constructor(uint32 _localDomain, uint256 _recoveryTimelock) {

        localDomain = _localDomain;

        recoveryTimelock = _recoveryTimelock;

    }



    // ============ Initializer ============



    function initialize(

        address _xAppConnectionManager,

        address _recoveryManager

    ) public initializer {

        // initialize governor

        address _governorAddr = msg.sender;

        bool _isLocalGovernor = true;

        _transferGovernor(localDomain, _governorAddr, _isLocalGovernor);

        // initialize recovery manager

        recoveryManager = _recoveryManager;

        // initialize XAppConnectionManager

        setXAppConnectionManager(_xAppConnectionManager);

        require(

            xAppConnectionManager.localDomain() == localDomain,

            "XAppConnectionManager bad domain"

        );

    }



    // ============ External Functions ============



    /**

     * @notice Handle Optics messages

     * For all non-Governor chains to handle messages

     * sent from the Governor chain via Optics.

     * Governor chain should never receive messages,

     * because non-Governor chains are not able to send them

     * @param _origin The domain (of the Governor Router)

     * @param _sender The message sender (must be the Governor Router)

     * @param _message The message

     */

    function handle(

        uint32 _origin,

        bytes32 _sender,

        bytes memory _message

    ) external override onlyReplica onlyGovernorRouter(_origin, _sender) {

        bytes29 _msg = _message.ref(0);

        if (_msg.isValidCall()) {

            _handleCall(_msg.tryAsCall());

        } else if (_msg.isValidTransferGovernor()) {

            _handleTransferGovernor(_msg.tryAsTransferGovernor());

        } else if (_msg.isValidSetRouter()) {

            _handleSetRouter(_msg.tryAsSetRouter());

        } else {

            require(false, "!valid message type");

        }

    }



    /**

     * @notice Dispatch calls locally

     * @param _calls The calls

     */

    function callLocal(GovernanceMessage.Call[] calldata _calls)

        external

        onlyGovernorOrRecoveryManager

    {

        for (uint256 i = 0; i < _calls.length; i++) {

            _dispatchCall(_calls[i]);

        }

    }



    /**

     * @notice Dispatch calls on a remote chain via the remote GovernanceRouter

     * @param _destination The domain of the remote chain

     * @param _calls The calls

     */

    function callRemote(

        uint32 _destination,

        GovernanceMessage.Call[] calldata _calls

    ) external onlyGovernor onlyNotInRecovery {

        // ensure that destination chain has enrolled router

        bytes32 _router = _mustHaveRouter(_destination);

        // format call message

        bytes memory _msg = GovernanceMessage.formatCalls(_calls);

        // dispatch call message using Optics

        Home(xAppConnectionManager.home()).dispatch(

            _destination,

            _router,

            _msg

        );

    }



    /**

     * @notice Transfer governorship

     * @param _newDomain The domain of the new governor

     * @param _newGovernor The address of the new governor

     */

    function transferGovernor(uint32 _newDomain, address _newGovernor)

        external

        onlyGovernor

        onlyNotInRecovery

    {

        bool _isLocalGovernor = _isLocalDomain(_newDomain);

        // transfer the governor locally

        _transferGovernor(_newDomain, _newGovernor, _isLocalGovernor);

        // if the governor domain is local, we only need to change the governor address locally

        // no need to message remote routers; they should already have the same domain set and governor = bytes32(0)

        if (_isLocalGovernor) {

            return;

        }

        // format transfer governor message

        bytes memory _transferGovernorMessage = GovernanceMessage

            .formatTransferGovernor(

                _newDomain,

                TypeCasts.addressToBytes32(_newGovernor)

            );

        // send transfer governor message to all remote routers

        // note: this assumes that the Router is on the global GovernorDomain;

        // this causes a process error when relinquishing governorship

        // on a newly deployed domain which is not the GovernorDomain

        _sendToAllRemoteRouters(_transferGovernorMessage);

    }



    /**

     * @notice Transfer recovery manager role

     * @dev callable by the recoveryManager at any time to transfer the role

     * @param _newRecoveryManager The address of the new recovery manager

     */

    function transferRecoveryManager(address _newRecoveryManager)

        external

        onlyRecoveryManager

    {

        emit TransferRecoveryManager(recoveryManager, _newRecoveryManager);

        recoveryManager = _newRecoveryManager;

    }



    /**

     * @notice Set the router address for a given domain and

     * dispatch the change to all remote routers

     * @param _domain The domain

     * @param _router The address of the new router

     */

    function setRouter(uint32 _domain, bytes32 _router)

        external

        onlyGovernor

        onlyNotInRecovery

    {

        // set the router locally

        _setRouter(_domain, _router);

        // format message to set the router on all remote routers

        bytes memory _setRouterMessage = GovernanceMessage.formatSetRouter(

            _domain,

            _router

        );



        _sendToAllRemoteRouters(_setRouterMessage);

    }



    /**

     * @notice Set the router address *locally only*

     * for the deployer to setup the router mapping locally

     * before transferring governorship to the "true" governor

     * @dev External helper for contract setup

     * @param _domain The domain

     * @param _router The new router

     */

    function setRouterLocal(uint32 _domain, bytes32 _router)

        external

        onlyGovernorOrRecoveryManager

    {

        // set the router locally

        _setRouter(_domain, _router);

    }



    /**

     * @notice Set the address of the XAppConnectionManager

     * @dev Domain/address validation helper

     * @param _xAppConnectionManager The address of the new xAppConnectionManager

     */

    function setXAppConnectionManager(address _xAppConnectionManager)

        public

        onlyGovernorOrRecoveryManager

    {

        xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);

    }



    /**

     * @notice Initiate the recovery timelock

     * @dev callable by the recovery manager

     */

    function initiateRecoveryTimelock()

        external

        onlyNotInRecovery

        onlyRecoveryManager

    {

        require(recoveryActiveAt == 0, "recovery already initiated");

        // set the time that recovery will be active

        recoveryActiveAt = block.timestamp.add(recoveryTimelock);

        emit InitiateRecovery(recoveryManager, recoveryActiveAt);

    }



    /**

     * @notice Exit recovery mode

     * @dev callable by the recovery manager to end recovery mode

     */

    function exitRecovery() external onlyRecoveryManager {

        require(recoveryActiveAt != 0, "recovery not initiated");

        delete recoveryActiveAt;

        emit ExitRecovery(recoveryManager);

    }



    // ============ Public Functions ============



    /**

     * @notice Check if the contract is in recovery mode currently

     * @return TRUE iff the contract is actively in recovery mode currently

     */

    function inRecovery() public view returns (bool) {

        uint256 _recoveryActiveAt = recoveryActiveAt;

        bool _recoveryInitiated = _recoveryActiveAt != 0;

        bool _recoveryActive = _recoveryActiveAt <= block.timestamp;

        return _recoveryInitiated && _recoveryActive;

    }



    // ============ Internal Functions ============



    /**

     * @notice Handle message dispatching calls locally

     * @param _msg The message

     */

    function _handleCall(bytes29 _msg)

        internal

        typeAssert(_msg, GovernanceMessage.Types.Call)

    {

        GovernanceMessage.Call[] memory _calls = _msg.getCalls();

        for (uint256 i = 0; i < _calls.length; i++) {

            _dispatchCall(_calls[i]);

        }

    }



    /**

     * @notice Handle message transferring governorship to a new Governor

     * @param _msg The message

     */

    function _handleTransferGovernor(bytes29 _msg)

        internal

        typeAssert(_msg, GovernanceMessage.Types.TransferGovernor)

    {

        uint32 _newDomain = _msg.domain();

        address _newGovernor = TypeCasts.bytes32ToAddress(_msg.governor());

        bool _isLocalGovernor = _isLocalDomain(_newDomain);

        _transferGovernor(_newDomain, _newGovernor, _isLocalGovernor);

    }



    /**

     * @notice Handle message setting the router address for a given domain

     * @param _msg The message

     */

    function _handleSetRouter(bytes29 _msg)

        internal

        typeAssert(_msg, GovernanceMessage.Types.SetRouter)

    {

        uint32 _domain = _msg.domain();

        bytes32 _router = _msg.router();

        _setRouter(_domain, _router);

    }



    /**

     * @notice Dispatch message to all remote routers

     * @param _msg The message

     */

    function _sendToAllRemoteRouters(bytes memory _msg) internal {

        Home _home = Home(xAppConnectionManager.home());



        for (uint256 i = 0; i < domains.length; i++) {

            if (domains[i] != uint32(0)) {

                _home.dispatch(domains[i], routers[domains[i]], _msg);

            }

        }

    }



    /**

     * @notice Dispatch call locally

     * @param _call The call

     * @return _ret

     */

    function _dispatchCall(GovernanceMessage.Call memory _call)

        internal

        returns (bytes memory _ret)

    {

        address _toContract = TypeCasts.bytes32ToAddress(_call.to);

        // attempt to dispatch using low-level call

        bool _success;

        (_success, _ret) = _toContract.call(_call.data);

        // revert if the call failed

        require(_success, "call failed");

    }



    /**

     * @notice Transfer governorship within this contract's state

     * @param _newDomain The domain of the new governor

     * @param _newGovernor The address of the new governor

     * @param _isLocalGovernor True if the newDomain is the localDomain

     */

    function _transferGovernor(

        uint32 _newDomain,

        address _newGovernor,

        bool _isLocalGovernor

    ) internal {

        // require that the governor domain has a valid router

        if (!_isLocalGovernor) {

            _mustHaveRouter(_newDomain);

        }

        // Governor is 0x0 unless the governor is local

        address _newGov = _isLocalGovernor ? _newGovernor : address(0);

        // emit event before updating state variables

        emit TransferGovernor(governorDomain, _newDomain, governor, _newGov);

        // update state

        governorDomain = _newDomain;

        governor = _newGov;

    }



    /**

     * @notice Set the router for a given domain

     * @param _domain The domain

     * @param _newRouter The new router

     */

    function _setRouter(uint32 _domain, bytes32 _newRouter) internal {

        bytes32 _previousRouter = routers[_domain];

        // emit event at beginning in case return after remove

        emit SetRouter(_domain, _previousRouter, _newRouter);

        // if the router is being removed, remove the domain

        if (_newRouter == bytes32(0)) {

            _removeDomain(_domain);

            return;

        }

        // if the router is being added, add the domain

        if (_previousRouter == bytes32(0)) {

            _addDomain(_domain);

        }

        // update state with new router

        routers[_domain] = _newRouter;

    }



    /**

     * @notice Add a domain that has a router

     * @param _domain The domain

     */

    function _addDomain(uint32 _domain) internal {

        domains.push(_domain);

    }



    /**

     * @notice Remove a domain and its associated router

     * @param _domain The domain

     */

    function _removeDomain(uint32 _domain) internal {

        delete routers[_domain];

        // find the index of the domain to remove & delete it from domains[]

        for (uint256 i = 0; i < domains.length; i++) {

            if (domains[i] == _domain) {

                delete domains[i];

                return;

            }

        }

    }



    /**

     * @notice Determine if a given domain and address is the Governor Router

     * @param _domain The domain

     * @param _address The address of the domain's router

     * @return _ret True if the given domain/address is the

     * Governor Router.

     */

    function _isGovernorRouter(uint32 _domain, bytes32 _address)

        internal

        view

        returns (bool)

    {

        return _domain == governorDomain && _address == routers[_domain];

    }



    /**

     * @notice Determine if a given domain is the local domain

     * @param _domain The domain

     * @return _ret - True if the given domain is the local domain

     */

    function _isLocalDomain(uint32 _domain) internal view returns (bool) {

        return _domain == localDomain;

    }



    /**

     * @notice Require that a domain has a router and returns the router

     * @param _domain The domain

     * @return _router - The domain's router

     */

    function _mustHaveRouter(uint32 _domain)

        internal

        view

        returns (bytes32 _router)

    {

        _router = routers[_domain];

        require(_router != bytes32(0), "!router");

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\GuardManager.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



import "../common/Enum.sol";

import "../common/SelfAuthorized.sol";



interface Guard {

    function checkTransaction(

        address to,

        uint256 value,

        bytes memory data,

        Enum.Operation operation,

        uint256 safeTxGas,

        uint256 baseGas,

        uint256 gasPrice,

        address gasToken,

        address payable refundReceiver,

        bytes memory signatures,

        address msgSender

    ) external;



    function checkAfterExecution(bytes32 txHash, bool success) external;

}



/// @title Fallback Manager - A contract that manages fallback calls made to this contract

/// @author Richard Meissner - <richard@gnosis.pm>

contract GuardManager is SelfAuthorized {

    event ChangedGuard(address guard);

    // keccak256("guard_manager.guard.address")

    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;



    /// @dev Set a guard that checks transactions before execution

    /// @param guard The address of the guard to be used or the 0 address to disable the guard

    function setGuard(address guard) external authorized {

        bytes32 slot = GUARD_STORAGE_SLOT;

        // solhint-disable-next-line no-inline-assembly

        assembly {

            sstore(slot, guard)

        }

        emit ChangedGuard(guard);

    }



    function getGuard() internal view returns (address guard) {

        bytes32 slot = GUARD_STORAGE_SLOT;

        // solhint-disable-next-line no-inline-assembly

        assembly {

            guard := sload(slot)

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Home.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {Version0} from "./Version0.sol";

import {Common} from "./Common.sol";

import {QueueLib} from "../libs/Queue.sol";

import {MerkleLib} from "../libs/Merkle.sol";

import {Message} from "../libs/Message.sol";

import {MerkleTreeManager} from "./Merkle.sol";

import {QueueManager} from "./Queue.sol";

import {IUpdaterManager} from "../interfaces/IUpdaterManager.sol";

// ============ External Imports ============

import {Address} from "@openzeppelin/contracts/utils/Address.sol";

import {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";



/**

 * @title Home

 * @author Celo Labs Inc.

 * @notice Accepts messages to be dispatched to remote chains,

 * constructs a Merkle tree of the messages,

 * and accepts signatures from a bonded Updater

 * which notarize the Merkle tree roots.

 * Accepts submissions of fraudulent signatures

 * by the Updater and slashes the Updater in this case.

 */

contract Home is

    Version0,

    QueueManager,

    MerkleTreeManager,

    Common,

    OwnableUpgradeable

{

    // ============ Libraries ============



    using QueueLib for QueueLib.Queue;

    using MerkleLib for MerkleLib.Tree;



    // ============ Constants ============



    // Maximum bytes per message = 2 KiB

    // (somewhat arbitrarily set to begin)

    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;



    // ============ Public Storage Variables ============



    // domain => next available nonce for the domain

    mapping(uint32 => uint32) public nonces;

    // contract responsible for Updater bonding, slashing and rotation

    IUpdaterManager public updaterManager;



    // ============ Upgrade Gap ============



    // gap for upgrade safety

    uint256[48] private __GAP;



    // ============ Events ============



    /**

     * @notice Emitted when a new message is dispatched via Optics

     * @param leafIndex Index of message's leaf in merkle tree

     * @param destinationAndNonce Destination and destination-specific

     * nonce combined in single field ((destination << 32) & nonce)

     * @param messageHash Hash of message; the leaf inserted to the Merkle tree for the message

     * @param committedRoot the latest notarized root submitted in the last signed Update

     * @param message Raw bytes of message

     */

    event Dispatch(

        bytes32 indexed messageHash,

        uint256 indexed leafIndex,

        uint64 indexed destinationAndNonce,

        bytes32 committedRoot,

        bytes message

    );



    /**

     * @notice Emitted when proof of an improper update is submitted,

     * which sets the contract to FAILED state

     * @param oldRoot Old root of the improper update

     * @param newRoot New root of the improper update

     * @param signature Signature on `oldRoot` and `newRoot

     */

    event ImproperUpdate(bytes32 oldRoot, bytes32 newRoot, bytes signature);



    /**

     * @notice Emitted when the Updater is slashed

     * (should be paired with ImproperUpdater or DoubleUpdate event)

     * @param updater The address of the updater

     * @param reporter The address of the entity that reported the updater misbehavior

     */

    event UpdaterSlashed(address indexed updater, address indexed reporter);



    /**

     * @notice Emitted when Updater is rotated by the UpdaterManager

     * @param updater The address of the new updater

     */

    event NewUpdater(address updater);



    /**

     * @notice Emitted when the UpdaterManager contract is changed

     * @param updaterManager The address of the new updaterManager

     */

    event NewUpdaterManager(address updaterManager);



    // ============ Constructor ============



    constructor(uint32 _localDomain) Common(_localDomain) {} // solhint-disable-line no-empty-blocks



    // ============ Initializer ============



    function initialize(IUpdaterManager _updaterManager) public initializer {

        // initialize owner & queue

        __Ownable_init();

        __QueueManager_initialize();

        // set Updater Manager contract and initialize Updater

        _setUpdaterManager(_updaterManager);

        address _updater = updaterManager.updater();

        __Common_initialize(_updater);

        emit NewUpdater(_updater);

    }



    // ============ Modifiers ============



    /**

     * @notice Ensures that function is called by the UpdaterManager contract

     */

    modifier onlyUpdaterManager() {

        require(msg.sender == address(updaterManager), "!updaterManager");

        _;

    }



    // ============ External: Updater & UpdaterManager Configuration  ============



    /**

     * @notice Set a new Updater

     * @param _updater the new Updater

     */

    function setUpdater(address _updater) external onlyUpdaterManager {

        _setUpdater(_updater);

    }



    /**

     * @notice Set a new UpdaterManager contract

     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;

     * we will progressively decentralize by swapping the trusted contract with a new implementation

     * that implements Updater bonding & slashing, and rules for Updater selection & rotation

     * @param _updaterManager the new UpdaterManager contract

     */

    function setUpdaterManager(address _updaterManager) external onlyOwner {

        _setUpdaterManager(IUpdaterManager(_updaterManager));

    }



    // ============ External Functions  ============



    /**

     * @notice Dispatch the message it to the destination domain & recipient

     * @dev Format the message, insert its hash into Merkle tree,

     * enqueue the new Merkle root, and emit `Dispatch` event with message information.

     * @param _destinationDomain Domain of destination chain

     * @param _recipientAddress Address of recipient on destination chain as bytes32

     * @param _messageBody Raw bytes content of message

     */

    function dispatch(

        uint32 _destinationDomain,

        bytes32 _recipientAddress,

        bytes memory _messageBody

    ) external notFailed {

        require(_messageBody.length <= MAX_MESSAGE_BODY_BYTES, "msg too long");

        // get the next nonce for the destination domain, then increment it

        uint32 _nonce = nonces[_destinationDomain];

        nonces[_destinationDomain] = _nonce + 1;

        // format the message into packed bytes

        bytes memory _message = Message.formatMessage(

            localDomain,

            bytes32(uint256(uint160(msg.sender))),

            _nonce,

            _destinationDomain,

            _recipientAddress,

            _messageBody

        );

        // insert the hashed message into the Merkle tree

        bytes32 _messageHash = keccak256(_message);

        tree.insert(_messageHash);

        // enqueue the new Merkle root after inserting the message

        queue.enqueue(root());

        // Emit Dispatch event with message information

        // note: leafIndex is count() - 1 since new leaf has already been inserted

        emit Dispatch(

            _messageHash,

            count() - 1,

            _destinationAndNonce(_destinationDomain, _nonce),

            committedRoot,

            _message

        );

    }



    /**

     * @notice Submit a signature from the Updater "notarizing" a root,

     * which updates the Home contract's `committedRoot`,

     * and publishes the signature which will be relayed to Replica contracts

     * @dev emits Update event

     * @dev If _newRoot is not contained in the queue,

     * the Update is a fraudulent Improper Update, so

     * the Updater is slashed & Home is set to FAILED state

     * @param _committedRoot Current updated merkle root which the update is building off of

     * @param _newRoot New merkle root to update the contract state to

     * @param _signature Updater signature on `_committedRoot` and `_newRoot`

     */

    function update(

        bytes32 _committedRoot,

        bytes32 _newRoot,

        bytes memory _signature

    ) external notFailed {

        // check that the update is not fraudulent;

        // if fraud is detected, Updater is slashed & Home is set to FAILED state

        if (improperUpdate(_committedRoot, _newRoot, _signature)) return;

        // clear all of the intermediate roots contained in this update from the queue

        while (true) {

            bytes32 _next = queue.dequeue();

            if (_next == _newRoot) break;

        }

        // update the Home state with the latest signed root & emit event

        committedRoot = _newRoot;

        emit Update(localDomain, _committedRoot, _newRoot, _signature);

    }



    /**

     * @notice Suggest an update for the Updater to sign and submit.

     * @dev If queue is empty, null bytes returned for both

     * (No update is necessary because no messages have been dispatched since the last update)

     * @return _committedRoot Latest root signed by the Updater

     * @return _new Latest enqueued Merkle root

     */

    function suggestUpdate()

        external

        view

        returns (bytes32 _committedRoot, bytes32 _new)

    {

        if (queue.length() != 0) {

            _committedRoot = committedRoot;

            _new = queue.lastItem();

        }

    }



    // ============ Public Functions  ============



    /**

     * @notice Hash of Home domain concatenated with "OPTICS"

     */

    function homeDomainHash() public view override returns (bytes32) {

        return _homeDomainHash(localDomain);

    }



    /**

     * @notice Check if an Update is an Improper Update;

     * if so, slash the Updater and set the contract to FAILED state.

     *

     * An Improper Update is an update building off of the Home's `committedRoot`

     * for which the `_newRoot` does not currently exist in the Home's queue.

     * This would mean that message(s) that were not truly

     * dispatched on Home were falsely included in the signed root.

     *

     * An Improper Update will only be accepted as valid by the Replica

     * If an Improper Update is attempted on Home,

     * the Updater will be slashed immediately.

     * If an Improper Update is submitted to the Replica,

     * it should be relayed to the Home contract using this function

     * in order to slash the Updater with an Improper Update.

     *

     * An Improper Update submitted to the Replica is only valid

     * while the `_oldRoot` is still equal to the `committedRoot` on Home;

     * if the `committedRoot` on Home has already been updated with a valid Update,

     * then the Updater should be slashed with a Double Update.

     * @dev Reverts (and doesn't slash updater) if signature is invalid or

     * update not current

     * @param _oldRoot Old merkle tree root (should equal home's committedRoot)

     * @param _newRoot New merkle tree root

     * @param _signature Updater signature on `_oldRoot` and `_newRoot`

     * @return TRUE if update was an Improper Update (implying Updater was slashed)

     */

    function improperUpdate(

        bytes32 _oldRoot,

        bytes32 _newRoot,

        bytes memory _signature

    ) public notFailed returns (bool) {

        require(

            _isUpdaterSignature(_oldRoot, _newRoot, _signature),

            "!updater sig"

        );

        require(_oldRoot == committedRoot, "not a current update");

        // if the _newRoot is not currently contained in the queue,

        // slash the Updater and set the contract to FAILED state

        if (!queue.contains(_newRoot)) {

            _fail();

            emit ImproperUpdate(_oldRoot, _newRoot, _signature);

            return true;

        }

        // if the _newRoot is contained in the queue,

        // this is not an improper update

        return false;

    }



    // ============ Internal Functions  ============



    /**

     * @notice Set the UpdaterManager

     * @param _updaterManager Address of the UpdaterManager

     */

    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {

        require(

            Address.isContract(address(_updaterManager)),

            "!contract updaterManager"

        );

        updaterManager = IUpdaterManager(_updaterManager);

        emit NewUpdaterManager(address(_updaterManager));

    }



    /**

     * @notice Set the Updater

     * @param _updater Address of the Updater

     */

    function _setUpdater(address _updater) internal {

        updater = _updater;

        emit NewUpdater(_updater);

    }



    /**

     * @notice Slash the Updater and set contract state to FAILED

     * @dev Called when fraud is proven (Improper Update or Double Update)

     */

    function _fail() internal override {

        // set contract to FAILED

        _setFailed();

        // slash Updater

        updaterManager.slashUpdater(msg.sender);

        emit UpdaterSlashed(updater, msg.sender);

    }



    /**

     * @notice Internal utility function that combines

     * `_destination` and `_nonce`.

     * @dev Both destination and nonce should be less than 2^32 - 1

     * @param _destination Domain of destination chain

     * @param _nonce Current nonce for given destination chain

     * @return Returns (`_destination` << 32) & `_nonce`

     */

    function _destinationAndNonce(uint32 _destination, uint32 _nonce)

        internal

        pure

        returns (uint64)

    {

        return (uint64(_destination) << 32) | _nonce;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\IBridgeToken.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



interface IBridgeToken {

    function initialize() external;



    function name() external returns (string memory);



    function balanceOf(address _account) external view returns (uint256);



    function symbol() external view returns (string memory);



    function decimals() external view returns (uint8);



    function burn(address _from, uint256 _amnt) external;



    function mint(address _to, uint256 _amnt) external;



    function setDetails(

        string calldata _name,

        string calldata _symbol,

        uint8 _decimals

    ) external;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\IERC20.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Interface of the ERC20 standard as defined in the EIP.

 */

interface IERC20 {

    /**

     * @dev Returns the amount of tokens in existence.

     */

    function totalSupply() external view returns (uint256);



    /**

     * @dev Returns the amount of tokens owned by `account`.

     */

    function balanceOf(address account) external view returns (uint256);



    /**

     * @dev Moves `amount` tokens from the caller's account to `recipient`.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * Emits a {Transfer} event.

     */

    function transfer(address recipient, uint256 amount) external returns (bool);



    /**

     * @dev Returns the remaining number of tokens that `spender` will be

     * allowed to spend on behalf of `owner` through {transferFrom}. This is

     * zero by default.

     *

     * This value changes when {approve} or {transferFrom} are called.

     */

    function allowance(address owner, address spender) external view returns (uint256);



    /**

     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * IMPORTANT: Beware that changing an allowance with this method brings the risk

     * that someone may use both the old and the new allowance by unfortunate

     * transaction ordering. One possible solution to mitigate this race

     * condition is to first reduce the spender's allowance to 0 and set the

     * desired value afterwards:

     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729

     *

     * Emits an {Approval} event.

     */

    function approve(address spender, uint256 amount) external returns (bool);



    /**

     * @dev Moves `amount` tokens from `sender` to `recipient` using the

     * allowance mechanism. `amount` is then deducted from the caller's

     * allowance.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * Emits a {Transfer} event.

     */

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);



    /**

     * @dev Emitted when `value` tokens are moved from one account (`from`) to

     * another (`to`).

     *

     * Note that `value` may be zero.

     */

    event Transfer(address indexed from, address indexed to, uint256 value);



    /**

     * @dev Emitted when the allowance of a `spender` for an `owner` is set by

     * a call to {approve}. `value` is the new allowance.

     */

    event Approval(address indexed owner, address indexed spender, uint256 value);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\IMessageRecipient.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



interface IMessageRecipient {

    function handle(

        uint32 _origin,

        bytes32 _sender,

        bytes memory _message

    ) external;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Initializable.sol
File type: .sol
// SPDX-License-Identifier: MIT



// solhint-disable-next-line compiler-version

pragma solidity >=0.4.24 <0.8.0;



import "../utils/AddressUpgradeable.sol";



/**

 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed

 * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an

 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer

 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.

 *

 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as

 * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.

 *

 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure

 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.

 */

abstract contract Initializable {



    /**

     * @dev Indicates that the contract has been initialized.

     */

    bool private _initialized;



    /**

     * @dev Indicates that the contract is in the process of being initialized.

     */

    bool private _initializing;



    /**

     * @dev Modifier to protect an initializer function from being invoked twice.

     */

    modifier initializer() {

        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");



        bool isTopLevelCall = !_initializing;

        if (isTopLevelCall) {

            _initializing = true;

            _initialized = true;

        }



        _;



        if (isTopLevelCall) {

            _initializing = false;

        }

    }



    /// @dev Returns true if and only if the function is running in the constructor

    function _isConstructor() private view returns (bool) {

        return !AddressUpgradeable.isContract(address(this));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\ISignatureValidator.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



contract ISignatureValidatorConstants {

    // bytes4(keccak256("isValidSignature(bytes,bytes)")

    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;

}



abstract contract ISignatureValidator is ISignatureValidatorConstants {

    /**

     * @dev Should return whether the signature provided is valid for the provided data

     * @param _data Arbitrary length data signed on the behalf of address(this)

     * @param _signature Signature byte array associated with _data

     *

     * MUST return the bytes4 magic value 0x20c13b0b when function passes.

     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)

     * MUST allow external calls

     */

    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\IUpdaterManager.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



interface IUpdaterManager {

    function slashUpdater(address payable _reporter) external;



    function updater() external view returns (address);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\IWeth.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;

interface IWeth {

    function deposit() external payable;



    function approve(address _who, uint256 _wad) external;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Merkle.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {MerkleLib} from "../libs/Merkle.sol";



/**

 * @title MerkleTreeManager

 * @author Celo Labs Inc.

 * @notice Contains a Merkle tree instance and

 * exposes view functions for the tree.

 */

contract MerkleTreeManager {

    // ============ Libraries ============



    using MerkleLib for MerkleLib.Tree;

    MerkleLib.Tree public tree;



    // ============ Upgrade Gap ============



    // gap for upgrade safety

    uint256[49] private __GAP;



    // ============ Public Functions ============



    /**

     * @notice Calculates and returns tree's current root

     */

    function root() public view returns (bytes32) {

        return tree.root();

    }



    /**

     * @notice Returns the number of inserted leaves in the tree (current index)

     */

    function count() public view returns (uint256) {

        return tree.count;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Message.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



import "@summa-tx/memview-sol/contracts/TypedMemView.sol";



import {

    TypeCasts

} from "./TypeCasts.sol";



/**

 * @title Message Library

 * @author Celo Labs Inc.

 * @notice Library for formatted messages used by Home and Replica.

 **/

library Message {

    using TypedMemView for bytes;

    using TypedMemView for bytes29;



    // Number of bytes in formatted message before `body` field

    uint256 internal constant PREFIX_LENGTH = 76;



    /**

     * @notice Returns formatted (packed) message with provided fields

     * @param _originDomain Domain of home chain

     * @param _sender Address of sender as bytes32

     * @param _nonce Destination-specific nonce

     * @param _destinationDomain Domain of destination chain

     * @param _recipient Address of recipient on destination chain as bytes32

     * @param _messageBody Raw bytes of message body

     * @return Formatted message

     **/

    function formatMessage(

        uint32 _originDomain,

        bytes32 _sender,

        uint32 _nonce,

        uint32 _destinationDomain,

        bytes32 _recipient,

        bytes memory _messageBody

    ) internal pure returns (bytes memory) {

        return

            abi.encodePacked(

                _originDomain,

                _sender,

                _nonce,

                _destinationDomain,

                _recipient,

                _messageBody

            );

    }



    /**

     * @notice Returns leaf of formatted message with provided fields.

     * @param _origin Domain of home chain

     * @param _sender Address of sender as bytes32

     * @param _nonce Destination-specific nonce number

     * @param _destination Domain of destination chain

     * @param _recipient Address of recipient on destination chain as bytes32

     * @param _body Raw bytes of message body

     * @return Leaf (hash) of formatted message

     **/

    function messageHash(

        uint32 _origin,

        bytes32 _sender,

        uint32 _nonce,

        uint32 _destination,

        bytes32 _recipient,

        bytes memory _body

    ) internal pure returns (bytes32) {

        return

            keccak256(

                formatMessage(

                    _origin,

                    _sender,

                    _nonce,

                    _destination,

                    _recipient,

                    _body

                )

            );

    }



    /// @notice Returns message's origin field

    function origin(bytes29 _message) internal pure returns (uint32) {

        return uint32(_message.indexUint(0, 4));

    }



    /// @notice Returns message's sender field

    function sender(bytes29 _message) internal pure returns (bytes32) {

        return _message.index(4, 32);

    }



    /// @notice Returns message's nonce field

    function nonce(bytes29 _message) internal pure returns (uint32) {

        return uint32(_message.indexUint(36, 4));

    }



    /// @notice Returns message's destination field

    function destination(bytes29 _message) internal pure returns (uint32) {

        return uint32(_message.indexUint(40, 4));

    }



    /// @notice Returns message's recipient field as bytes32

    function recipient(bytes29 _message) internal pure returns (bytes32) {

        return _message.index(44, 32);

    }



    /// @notice Returns message's recipient field as an address

    function recipientAddress(bytes29 _message)

        internal

        pure

        returns (address)

    {

        return TypeCasts.bytes32ToAddress(recipient(_message));

    }



    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)

    function body(bytes29 _message) internal pure returns (bytes29) {

        return _message.slice(PREFIX_LENGTH, _message.len() - PREFIX_LENGTH, 0);

    }



    function leaf(bytes29 _message) internal view returns (bytes32) {

        return messageHash(origin(_message), sender(_message), nonce(_message), destination(_message), recipient(_message), TypedMemView.clone(body(_message)));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\ModuleManager.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;

import "../common/Enum.sol";

import "../common/SelfAuthorized.sol";

import "./Executor.sol";



/// @title Module Manager - A contract that manages modules that can execute transactions via this contract

/// @author Stefan George - <stefan@gnosis.pm>

/// @author Richard Meissner - <richard@gnosis.pm>

contract ModuleManager is SelfAuthorized, Executor {

    event EnabledModule(address module);

    event DisabledModule(address module);

    event ExecutionFromModuleSuccess(address indexed module);

    event ExecutionFromModuleFailure(address indexed module);



    address internal constant SENTINEL_MODULES = address(0x1);



    mapping(address => address) internal modules;



    function setupModules(address to, bytes memory data) internal {

        require(modules[SENTINEL_MODULES] == address(0), "GS100");

        modules[SENTINEL_MODULES] = SENTINEL_MODULES;

        if (to != address(0))

            // Setup has to complete successfully or transaction fails.

            require(execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()), "GS000");

    }



    /// @dev Allows to add a module to the whitelist.

    ///      This can only be done via a Safe transaction.

    /// @notice Enables the module `module` for the Safe.

    /// @param module Module to be whitelisted.

    function enableModule(address module) public authorized {

        // Module address cannot be null or sentinel.

        require(module != address(0) && module != SENTINEL_MODULES, "GS101");

        // Module cannot be added twice.

        require(modules[module] == address(0), "GS102");

        modules[module] = modules[SENTINEL_MODULES];

        modules[SENTINEL_MODULES] = module;

        emit EnabledModule(module);

    }



    /// @dev Allows to remove a module from the whitelist.

    ///      This can only be done via a Safe transaction.

    /// @notice Disables the module `module` for the Safe.

    /// @param prevModule Module that pointed to the module to be removed in the linked list

    /// @param module Module to be removed.

    function disableModule(address prevModule, address module) public authorized {

        // Validate module address and check that it corresponds to module index.

        require(module != address(0) && module != SENTINEL_MODULES, "GS101");

        require(modules[prevModule] == module, "GS103");

        modules[prevModule] = modules[module];

        modules[module] = address(0);

        emit DisabledModule(module);

    }



    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.

    /// @param to Destination address of module transaction.

    /// @param value Ether value of module transaction.

    /// @param data Data payload of module transaction.

    /// @param operation Operation type of module transaction.

    function execTransactionFromModule(

        address to,

        uint256 value,

        bytes memory data,

        Enum.Operation operation

    ) public virtual returns (bool success) {

        // Only whitelisted modules are allowed.

        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), "GS104");

        // Execute transaction without further confirmations.

        success = execute(to, value, data, operation, gasleft());

        if (success) emit ExecutionFromModuleSuccess(msg.sender);

        else emit ExecutionFromModuleFailure(msg.sender);

    }



    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data

    /// @param to Destination address of module transaction.

    /// @param value Ether value of module transaction.

    /// @param data Data payload of module transaction.

    /// @param operation Operation type of module transaction.

    function execTransactionFromModuleReturnData(

        address to,

        uint256 value,

        bytes memory data,

        Enum.Operation operation

    ) public returns (bool success, bytes memory returnData) {

        success = execTransactionFromModule(to, value, data, operation);

        // solhint-disable-next-line no-inline-assembly

        assembly {

            // Load free memory location

            let ptr := mload(0x40)

            // We allocate memory for the return data by setting the free memory location to

            // current free memory location + data size + 32 bytes for data size value

            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))

            // Store the size

            mstore(ptr, returndatasize())

            // Store the data

            returndatacopy(add(ptr, 0x20), 0, returndatasize())

            // Point the return data to the correct memory location

            returnData := ptr

        }

    }



    /// @dev Returns if an module is enabled

    /// @return True if the module is enabled

    function isModuleEnabled(address module) public view returns (bool) {

        return SENTINEL_MODULES != module && modules[module] != address(0);

    }



    /// @dev Returns array of modules.

    /// @param start Start of the page.

    /// @param pageSize Maximum number of modules that should be returned.

    /// @return array Array of modules.

    /// @return next Start of the next page.

    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {

        // Init array with max page size

        array = new address[](pageSize);



        // Populate return array

        uint256 moduleCount = 0;

        address currentModule = modules[start];

        while (currentModule != address(0x0) && currentModule != SENTINEL_MODULES && moduleCount < pageSize) {

            array[moduleCount] = currentModule;

            currentModule = modules[currentModule];

            moduleCount++;

        }

        next = currentModule;

        // Set correct size of returned array

        // solhint-disable-next-line no-inline-assembly

        assembly {

            mstore(array, moduleCount)

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Ownable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../utils/Context.sol";

/**

 * @dev Contract module which provides a basic access control mechanism, where

 * there is an account (an owner) that can be granted exclusive access to

 * specific functions.

 *

 * By default, the owner account will be the one that deploys the contract. This

 * can later be changed with {transferOwnership}.

 *

 * This module is used through inheritance. It will make available the modifier

 * `onlyOwner`, which can be applied to your functions to restrict their use to

 * the owner.

 */

abstract contract Ownable is Context {

    address private _owner;



    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);



    /**

     * @dev Initializes the contract setting the deployer as the initial owner.

     */

    constructor () internal {

        address msgSender = _msgSender();

        _owner = msgSender;

        emit OwnershipTransferred(address(0), msgSender);

    }



    /**

     * @dev Returns the address of the current owner.

     */

    function owner() public view virtual returns (address) {

        return _owner;

    }



    /**

     * @dev Throws if called by any account other than the owner.

     */

    modifier onlyOwner() {

        require(owner() == _msgSender(), "Ownable: caller is not the owner");

        _;

    }



    /**

     * @dev Leaves the contract without owner. It will not be possible to call

     * `onlyOwner` functions anymore. Can only be called by the current owner.

     *

     * NOTE: Renouncing ownership will leave the contract without an owner,

     * thereby removing any functionality that is only available to the owner.

     */

    function renounceOwnership() public virtual onlyOwner {

        emit OwnershipTransferred(_owner, address(0));

        _owner = address(0);

    }



    /**

     * @dev Transfers ownership of the contract to a new account (`newOwner`).

     * Can only be called by the current owner.

     */

    function transferOwnership(address newOwner) public virtual onlyOwner {

        require(newOwner != address(0), "Ownable: new owner is the zero address");

        emit OwnershipTransferred(_owner, newOwner);

        _owner = newOwner;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\OwnableUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../utils/ContextUpgradeable.sol";

import "../proxy/Initializable.sol";

/**

 * @dev Contract module which provides a basic access control mechanism, where

 * there is an account (an owner) that can be granted exclusive access to

 * specific functions.

 *

 * By default, the owner account will be the one that deploys the contract. This

 * can later be changed with {transferOwnership}.

 *

 * This module is used through inheritance. It will make available the modifier

 * `onlyOwner`, which can be applied to your functions to restrict their use to

 * the owner.

 */

abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {

    address private _owner;



    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);



    /**

     * @dev Initializes the contract setting the deployer as the initial owner.

     */

    function __Ownable_init() internal initializer {

        __Context_init_unchained();

        __Ownable_init_unchained();

    }



    function __Ownable_init_unchained() internal initializer {

        address msgSender = _msgSender();

        _owner = msgSender;

        emit OwnershipTransferred(address(0), msgSender);

    }



    /**

     * @dev Returns the address of the current owner.

     */

    function owner() public view virtual returns (address) {

        return _owner;

    }



    /**

     * @dev Throws if called by any account other than the owner.

     */

    modifier onlyOwner() {

        require(owner() == _msgSender(), "Ownable: caller is not the owner");

        _;

    }



    /**

     * @dev Leaves the contract without owner. It will not be possible to call

     * `onlyOwner` functions anymore. Can only be called by the current owner.

     *

     * NOTE: Renouncing ownership will leave the contract without an owner,

     * thereby removing any functionality that is only available to the owner.

     */

    function renounceOwnership() public virtual onlyOwner {

        emit OwnershipTransferred(_owner, address(0));

        _owner = address(0);

    }



    /**

     * @dev Transfers ownership of the contract to a new account (`newOwner`).

     * Can only be called by the current owner.

     */

    function transferOwnership(address newOwner) public virtual onlyOwner {

        require(newOwner != address(0), "Ownable: new owner is the zero address");

        emit OwnershipTransferred(_owner, newOwner);

        _owner = newOwner;

    }

    uint256[49] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\OwnerManager.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;

import "../common/SelfAuthorized.sol";



/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.

/// @author Stefan George - <stefan@gnosis.pm>

/// @author Richard Meissner - <richard@gnosis.pm>

contract OwnerManager is SelfAuthorized {

    event AddedOwner(address owner);

    event RemovedOwner(address owner);

    event ChangedThreshold(uint256 threshold);



    address internal constant SENTINEL_OWNERS = address(0x1);



    mapping(address => address) internal owners;

    uint256 internal ownerCount;

    uint256 internal threshold;



    /// @dev Setup function sets initial storage of contract.

    /// @param _owners List of Safe owners.

    /// @param _threshold Number of required confirmations for a Safe transaction.

    function setupOwners(address[] memory _owners, uint256 _threshold) internal {

        // Threshold can only be 0 at initialization.

        // Check ensures that setup function can only be called once.

        require(threshold == 0, "GS200");

        // Validate that threshold is smaller than number of added owners.

        require(_threshold <= _owners.length, "GS201");

        // There has to be at least one Safe owner.

        require(_threshold >= 1, "GS202");

        // Initializing Safe owners.

        address currentOwner = SENTINEL_OWNERS;

        for (uint256 i = 0; i < _owners.length; i++) {

            // Owner address cannot be null.

            address owner = _owners[i];

            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, "GS203");

            // No duplicate owners allowed.

            require(owners[owner] == address(0), "GS204");

            owners[currentOwner] = owner;

            currentOwner = owner;

        }

        owners[currentOwner] = SENTINEL_OWNERS;

        ownerCount = _owners.length;

        threshold = _threshold;

    }



    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.

    ///      This can only be done via a Safe transaction.

    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.

    /// @param owner New owner address.

    /// @param _threshold New threshold.

    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {

        // Owner address cannot be null, the sentinel or the Safe itself.

        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), "GS203");

        // No duplicate owners allowed.

        require(owners[owner] == address(0), "GS204");

        owners[owner] = owners[SENTINEL_OWNERS];

        owners[SENTINEL_OWNERS] = owner;

        ownerCount++;

        emit AddedOwner(owner);

        // Change threshold if threshold was changed.

        if (threshold != _threshold) changeThreshold(_threshold);

    }



    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.

    ///      This can only be done via a Safe transaction.

    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.

    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list

    /// @param owner Owner address to be removed.

    /// @param _threshold New threshold.

    function removeOwner(

        address prevOwner,

        address owner,

        uint256 _threshold

    ) public authorized {

        // Only allow to remove an owner, if threshold can still be reached.

        require(ownerCount - 1 >= _threshold, "GS201");

        // Validate owner address and check that it corresponds to owner index.

        require(owner != address(0) && owner != SENTINEL_OWNERS, "GS203");

        require(owners[prevOwner] == owner, "GS205");

        owners[prevOwner] = owners[owner];

        owners[owner] = address(0);

        ownerCount--;

        emit RemovedOwner(owner);

        // Change threshold if threshold was changed.

        if (threshold != _threshold) changeThreshold(_threshold);

    }



    /// @dev Allows to swap/replace an owner from the Safe with another address.

    ///      This can only be done via a Safe transaction.

    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.

    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list

    /// @param oldOwner Owner address to be replaced.

    /// @param newOwner New owner address.

    function swapOwner(

        address prevOwner,

        address oldOwner,

        address newOwner

    ) public authorized {

        // Owner address cannot be null, the sentinel or the Safe itself.

        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), "GS203");

        // No duplicate owners allowed.

        require(owners[newOwner] == address(0), "GS204");

        // Validate oldOwner address and check that it corresponds to owner index.

        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, "GS203");

        require(owners[prevOwner] == oldOwner, "GS205");

        owners[newOwner] = owners[oldOwner];

        owners[prevOwner] = newOwner;

        owners[oldOwner] = address(0);

        emit RemovedOwner(oldOwner);

        emit AddedOwner(newOwner);

    }



    /// @dev Allows to update the number of required confirmations by Safe owners.

    ///      This can only be done via a Safe transaction.

    /// @notice Changes the threshold of the Safe to `_threshold`.

    /// @param _threshold New threshold.

    function changeThreshold(uint256 _threshold) public authorized {

        // Validate that threshold is smaller than number of owners.

        require(_threshold <= ownerCount, "GS201");

        // There has to be at least one Safe owner.

        require(_threshold >= 1, "GS202");

        threshold = _threshold;

        emit ChangedThreshold(threshold);

    }



    function getThreshold() public view returns (uint256) {

        return threshold;

    }



    function isOwner(address owner) public view returns (bool) {

        return owner != SENTINEL_OWNERS && owners[owner] != address(0);

    }



    /// @dev Returns array of owners.

    /// @return Array of Safe owners.

    function getOwners() public view returns (address[] memory) {

        address[] memory array = new address[](ownerCount);



        // populate return array

        uint256 index = 0;

        address currentOwner = owners[SENTINEL_OWNERS];

        while (currentOwner != SENTINEL_OWNERS) {

            array[index] = currentOwner;

            currentOwner = owners[currentOwner];

            index++;

        }

        return array;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\OZERC20.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



// This is modified from "@openzeppelin/contracts/token/ERC20/IERC20.sol"

// Modifications were made to make the tokenName, tokenSymbol, and

// tokenDecimals fields internal instead of private. Getters for them were

// removed to silence solidity inheritance issues



import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import "@openzeppelin/contracts/math/SafeMath.sol";



/**

 * @dev Implementation of the {IERC20} interface.

 *

 * This implementation is agnostic to the way tokens are created. This means

 * that a supply mechanism has to be added in a derived contract using {_mint}.

 * For a generic mechanism see {ERC20PresetMinterPauser}.

 *

 * TIP: For a detailed writeup see our guide

 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How

 * to implement supply mechanisms].

 *

 * We have followed general OpenZeppelin guidelines: functions revert instead

 * of returning `false` on failure. This behavior is nonetheless conventional

 * and does not conflict with the expectations of ERC20 applications.

 *

 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.

 * This allows applications to reconstruct the allowance for all accounts just

 * by listening to said events. Other implementations of the EIP may not emit

 * these events, as it isn't required by the specification.

 *

 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}

 * functions have been added to mitigate the well-known issues around setting

 * allowances. See {IERC20-approve}.

 */

contract ERC20 is IERC20 {

    using SafeMath for uint256;



    mapping(address => uint256) private balances;



    mapping(address => mapping(address => uint256)) private allowances;



    uint256 private supply;



    struct Token {

        string name;

        string symbol;

        uint8 decimals;

    }



    Token internal token;



    /**

     * @dev See {IERC20-transfer}.

     *

     * Requirements:

     *

     * - `_recipient` cannot be the zero address.

     * - the caller must have a balance of at least `_amount`.

     */

    function transfer(address _recipient, uint256 _amount)

        public

        virtual

        override

        returns (bool)

    {

        _transfer(msg.sender, _recipient, _amount);

        return true;

    }



    /**

     * @dev See {IERC20-approve}.

     *

     * Requirements:

     *

     * - `_spender` cannot be the zero address.

     */

    function approve(address _spender, uint256 _amount)

        public

        virtual

        override

        returns (bool)

    {

        _approve(msg.sender, _spender, _amount);

        return true;

    }



    /**

     * @dev See {IERC20-transferFrom}.

     *

     * Emits an {Approval} event indicating the updated allowance. This is not

     * required by the EIP. See the note at the beginning of {ERC20}.

     *

     * Requirements:

     *

     * - `_sender` and `recipient` cannot be the zero address.

     * - `_sender` must have a balance of at least `amount`.

     * - the caller must have allowance for ``_sender``'s tokens of at least

     * `amount`.

     */

    function transferFrom(

        address _sender,

        address _recipient,

        uint256 _amount

    ) public virtual override returns (bool) {

        _transfer(_sender, _recipient, _amount);

        _approve(

            _sender,

            msg.sender,

            allowances[_sender][msg.sender].sub(

                _amount,

                "ERC20: transfer amount exceeds allowance"

            )

        );

        return true;

    }



    /**

     * @dev Atomically increases the allowance granted to `spender` by the caller.

     *

     * This is an alternative to {approve} that can be used as a mitigation for

     * problems described in {IERC20-approve}.

     *

     * Emits an {Approval} event indicating the updated allowance.

     *

     * Requirements:

     *

     * - `_spender` cannot be the zero address.

     */

    function increaseAllowance(address _spender, uint256 _addedValue)

        public

        virtual

        returns (bool)

    {

        _approve(

            msg.sender,

            _spender,

            allowances[msg.sender][_spender].add(_addedValue)

        );

        return true;

    }



    /**

     * @dev Atomically decreases the allowance granted to `spender` by the caller.

     *

     * This is an alternative to {approve} that can be used as a mitigation for

     * problems described in {IERC20-approve}.

     *

     * Emits an {Approval} event indicating the updated allowance.

     *

     * Requirements:

     *

     * - `_spender` cannot be the zero address.

     * - `_spender` must have allowance for the caller of at least

     * `_subtractedValue`.

     */

    function decreaseAllowance(address _spender, uint256 _subtractedValue)

        public

        virtual

        returns (bool)

    {

        _approve(

            msg.sender,

            _spender,

            allowances[msg.sender][_spender].sub(

                _subtractedValue,

                "ERC20: decreased allowance below zero"

            )

        );

        return true;

    }



    /**

     * @dev See {IERC20-totalSupply}.

     */

    function totalSupply() public view override returns (uint256) {

        return supply;

    }



    /**

     * @dev See {IERC20-balanceOf}.

     */

    function balanceOf(address _account)

        public

        view

        virtual

        override

        returns (uint256)

    {

        return balances[_account];

    }



    /**

     * @dev See {IERC20-allowance}.

     */

    function allowance(address _owner, address _spender)

        public

        view

        virtual

        override

        returns (uint256)

    {

        return allowances[_owner][_spender];

    }



    /**

     * @dev Moves tokens `amount` from `_sender` to `_recipient`.

     *

     * This is internal function is equivalent to {transfer}, and can be used to

     * e.g. implement automatic token fees, slashing mechanisms, etc.

     *

     * Emits a {Transfer} event.

     *

     * Requirements:

     *

     * - `_sender` cannot be the zero address.

     * - `_recipient` cannot be the zero address.

     * - `_sender` must have a balance of at least `amount`.

     */

    function _transfer(

        address _sender,

        address _recipient,

        uint256 amount

    ) internal virtual {

        require(_sender != address(0), "ERC20: transfer from the zero address");

        require(

            _recipient != address(0),

            "ERC20: transfer to the zero address"

        );



        _beforeTokenTransfer(_sender, _recipient, amount);



        balances[_sender] = balances[_sender].sub(

            amount,

            "ERC20: transfer amount exceeds balance"

        );

        balances[_recipient] = balances[_recipient].add(amount);

        emit Transfer(_sender, _recipient, amount);

    }



    /** @dev Creates `_amount` tokens and assigns them to `_account`, increasing

     * the total supply.

     *

     * Emits a {Transfer} event with `from` set to the zero address.

     *

     * Requirements:

     *

     * - `to` cannot be the zero address.

     */

    function _mint(address _account, uint256 _amount) internal virtual {

        require(_account != address(0), "ERC20: mint to the zero address");



        _beforeTokenTransfer(address(0), _account, _amount);



        supply = supply.add(_amount);

        balances[_account] = balances[_account].add(_amount);

        emit Transfer(address(0), _account, _amount);

    }



    /**

     * @dev Destroys `_amount` tokens from `_account`, reducing the

     * total supply.

     *

     * Emits a {Transfer} event with `to` set to the zero address.

     *

     * Requirements:

     *

     * - `_account` cannot be the zero address.

     * - `_account` must have at least `_amount` tokens.

     */

    function _burn(address _account, uint256 _amount) internal virtual {

        require(_account != address(0), "ERC20: burn from the zero address");



        _beforeTokenTransfer(_account, address(0), _amount);



        balances[_account] = balances[_account].sub(

            _amount,

            "ERC20: burn amount exceeds balance"

        );

        supply = supply.sub(_amount);

        emit Transfer(_account, address(0), _amount);

    }



    /**

     * @dev Sets `_amount` as the allowance of `_spender` over the `_owner` s tokens.

     *

     * This internal function is equivalent to `approve`, and can be used to

     * e.g. set automatic allowances for certain subsystems, etc.

     *

     * Emits an {Approval} event.

     *

     * Requirements:

     *

     * - `_owner` cannot be the zero address.

     * - `_spender` cannot be the zero address.

     */

    function _approve(

        address _owner,

        address _spender,

        uint256 _amount

    ) internal virtual {

        require(_owner != address(0), "ERC20: approve from the zero address");

        require(_spender != address(0), "ERC20: approve to the zero address");



        allowances[_owner][_spender] = _amount;

        emit Approval(_owner, _spender, _amount);

    }



    /**

     * @dev Sets {decimals_} to a value other than the default one of 18.

     *

     * WARNING: This function should only be called from the constructor. Most

     * applications that interact with token contracts will not expect

     * {decimals_} to ever change, and may work incorrectly if it does.

     */

    function _setupDecimals(uint8 decimals_) internal {

        token.decimals = decimals_;

    }



    /**

     * @dev Hook that is called before any transfer of tokens. This includes

     * minting and burning.

     *

     * Calling conditions:

     *

     * - when `_from` and `_to` are both non-zero, `_amount` of ``_from``'s tokens

     * will be to transferred to `_to`.

     * - when `_from` is zero, `_amount` tokens will be minted for `_to`.

     * - when `_to` is zero, `_amount` of ``_from``'s tokens will be burned.

     * - `_from` and `_to` are never both zero.

     *

     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].

     */

    function _beforeTokenTransfer(

        address _from,

        address _to,

        uint256 _amount

    ) internal virtual {}

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Queue.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {QueueLib} from "../libs/Queue.sol";

// ============ External Imports ============

import {Initializable} from "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";



/**

 * @title QueueManager

 * @author Celo Labs Inc.

 * @notice Contains a queue instance and

 * exposes view functions for the queue.

 **/

contract QueueManager is Initializable {

    // ============ Libraries ============



    using QueueLib for QueueLib.Queue;

    QueueLib.Queue internal queue;



    // ============ Upgrade Gap ============



    // gap for upgrade safety

    uint256[49] private __GAP;



    // ============ Initializer ============



    function __QueueManager_initialize() internal initializer {

        queue.initialize();

    }



    // ============ Public Functions ============



    /**

     * @notice Returns number of elements in queue

     */

    function queueLength() external view returns (uint256) {

        return queue.length();

    }



    /**

     * @notice Returns TRUE iff `_item` is in the queue

     */

    function queueContains(bytes32 _item) external view returns (bool) {

        return queue.contains(_item);

    }



    /**

     * @notice Returns last item enqueued to the queue

     */

    function queueEnd() external view returns (bytes32) {

        return queue.lastItem();

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Replica.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {Version0} from "./Version0.sol";

import {Common} from "./Common.sol";

import {MerkleLib} from "../libs/Merkle.sol";

import {Message} from "../libs/Message.sol";

import {IMessageRecipient} from "../interfaces/IMessageRecipient.sol";

// ============ External Imports ============

import {TypedMemView} from "@summa-tx/memview-sol/contracts/TypedMemView.sol";



/**

 * @title Replica

 * @author Celo Labs Inc.

 * @notice Track root updates on Home,

 * prove and dispatch messages to end recipients.

 */

contract Replica is Version0, Common {

    // ============ Libraries ============



    using MerkleLib for MerkleLib.Tree;

    using TypedMemView for bytes;

    using TypedMemView for bytes29;

    using Message for bytes29;



    // ============ Enums ============



    // Status of Message:

    //   0 - None - message has not been proven or processed

    //   1 - Proven - message inclusion proof has been validated

    //   2 - Processed - message has been dispatched to recipient

    enum MessageStatus {

        None,

        Proven,

        Processed

    }



    // ============ Immutables ============



    // Minimum gas for message processing

    uint256 public immutable PROCESS_GAS;

    // Reserved gas (to ensure tx completes in case message processing runs out)

    uint256 public immutable RESERVE_GAS;



    // ============ Public Storage ============



    // Domain of home chain

    uint32 public remoteDomain;

    // Number of seconds to wait before root becomes confirmable

    uint256 public optimisticSeconds;

    // re-entrancy guard

    uint8 private entered;

    // Mapping of roots to allowable confirmation times

    mapping(bytes32 => uint256) public confirmAt;

    // Mapping of message leaves to MessageStatus

    mapping(bytes32 => MessageStatus) public messages;



    // ============ Upgrade Gap ============



    // gap for upgrade safety

    uint256[44] private __GAP;



    // ============ Events ============



    /**

     * @notice Emitted when message is processed

     * @param messageHash Hash of message that failed to process

     * @param success TRUE if the call was executed successfully, FALSE if the call reverted

     * @param returnData the return data from the external call

     */

    event Process(

        bytes32 indexed messageHash,

        bool indexed success,

        bytes indexed returnData

    );



    // ============ Constructor ============



    // solhint-disable-next-line no-empty-blocks

    constructor(

        uint32 _localDomain,

        uint256 _processGas,

        uint256 _reserveGas

    ) Common(_localDomain) {

        require(_processGas >= 850_000, "!process gas");

        require(_reserveGas >= 15_000, "!reserve gas");

        PROCESS_GAS = _processGas;

        RESERVE_GAS = _reserveGas;

    }



    // ============ Initializer ============



    function initialize(

        uint32 _remoteDomain,

        address _updater,

        bytes32 _committedRoot,

        uint256 _optimisticSeconds

    ) public initializer {

        __Common_initialize(_updater);

        entered = 1;

        remoteDomain = _remoteDomain;

        committedRoot = _committedRoot;

        confirmAt[_committedRoot] = 1;

        optimisticSeconds = _optimisticSeconds;

    }



    // ============ External Functions ============



    /**

     * @notice Called by external agent. Submits the signed update's new root,

     * marks root's allowable confirmation time, and emits an `Update` event.

     * @dev Reverts if update doesn't build off latest committedRoot

     * or if signature is invalid.

     * @param _oldRoot Old merkle root

     * @param _newRoot New merkle root

     * @param _signature Updater's signature on `_oldRoot` and `_newRoot`

     */

    function update(

        bytes32 _oldRoot,

        bytes32 _newRoot,

        bytes memory _signature

    ) external notFailed {

        // ensure that update is building off the last submitted root

        require(_oldRoot == committedRoot, "not current update");

        // validate updater signature

        require(

            _isUpdaterSignature(_oldRoot, _newRoot, _signature),

            "!updater sig"

        );

        // Hook for future use

        _beforeUpdate();

        // set the new root's confirmation timer

        confirmAt[_newRoot] = block.timestamp + optimisticSeconds;

        // update committedRoot

        committedRoot = _newRoot;

        emit Update(remoteDomain, _oldRoot, _newRoot, _signature);

    }



    /**

     * @notice First attempts to prove the validity of provided formatted

     * `message`. If the message is successfully proven, then tries to process

     * message.

     * @dev Reverts if `prove` call returns false

     * @param _message Formatted message (refer to Common.sol Message library)

     * @param _proof Merkle proof of inclusion for message's leaf

     * @param _index Index of leaf in home's merkle tree

     */

    function proveAndProcess(

        bytes memory _message,

        bytes32[32] calldata _proof,

        uint256 _index

    ) external {

        require(prove(keccak256(_message), _proof, _index), "!prove");

        process(_message);

    }



    /**

     * @notice Given formatted message, attempts to dispatch

     * message payload to end recipient.

     * @dev Recipient must implement a `handle` method (refer to IMessageRecipient.sol)

     * Reverts if formatted message's destination domain is not the Replica's domain,

     * if message has not been proven,

     * or if not enough gas is provided for the dispatch transaction.

     * @param _message Formatted message

     * @return _success TRUE iff dispatch transaction succeeded

     */

    function process(bytes memory _message) public returns (bool _success) {

        bytes29 _m = _message.ref(0);

        // ensure message was meant for this domain

        require(_m.destination() == localDomain, "!destination");

        // ensure message has been proven

        bytes32 _messageHash = _m.keccak();

        require(messages[_messageHash] == MessageStatus.Proven, "!proven");

        // check re-entrancy guard

        require(entered == 1, "!reentrant");

        entered = 0;

        // update message status as processed

        messages[_messageHash] = MessageStatus.Processed;

        // A call running out of gas TYPICALLY errors the whole tx. We want to

        // a) ensure the call has a sufficient amount of gas to make a

        //    meaningful state change.

        // b) ensure that if the subcall runs out of gas, that the tx as a whole

        //    does not revert (i.e. we still mark the message processed)

        // To do this, we require that we have enough gas to process

        // and still return. We then delegate only the minimum processing gas.

        require(gasleft() >= PROCESS_GAS + RESERVE_GAS, "!gas");

        // get the message recipient

        address _recipient = _m.recipientAddress();

        // set up for assembly call

        uint256 _toCopy;

        uint256 _maxCopy = 256;

        uint256 _gas = PROCESS_GAS;

        // allocate memory for returndata

        bytes memory _returnData = new bytes(_maxCopy);

        bytes memory _calldata = abi.encodeWithSignature(

            "handle(uint32,bytes32,bytes)",

            _m.origin(),

            _m.sender(),

            _m.body().clone()

        );

        // dispatch message to recipient

        // by assembly calling "handle" function

        // we call via assembly to avoid memcopying a very large returndata

        // returned by a malicious contract

        assembly {

            _success := call(

                _gas, // gas

                _recipient, // recipient

                0, // ether value

                add(_calldata, 0x20), // inloc

                mload(_calldata), // inlen

                0, // outloc

                0 // outlen

            )

            // limit our copy to 256 bytes

            _toCopy := returndatasize()

            if gt(_toCopy, _maxCopy) {

                _toCopy := _maxCopy

            }

            // Store the length of the copied bytes

            mstore(_returnData, _toCopy)

            // copy the bytes from returndata[0:_toCopy]

            returndatacopy(add(_returnData, 0x20), 0, _toCopy)

        }

        // emit process results

        emit Process(_messageHash, _success, _returnData);

        // reset re-entrancy guard

        entered = 1;

    }



    // ============ Public Functions ============



    /**

     * @notice Check that the root has been submitted

     * and that the optimistic timeout period has expired,

     * meaning the root can be processed

     * @param _root the Merkle root, submitted in an update, to check

     * @return TRUE iff root has been submitted & timeout has expired

     */

    function acceptableRoot(bytes32 _root) public view returns (bool) {

        uint256 _time = confirmAt[_root];

        if (_time == 0) {

            return false;

        }

        return block.timestamp >= _time;

    }



    /**

     * @notice Attempts to prove the validity of message given its leaf, the

     * merkle proof of inclusion for the leaf, and the index of the leaf.

     * @dev Reverts if message's MessageStatus != None (i.e. if message was

     * already proven or processed)

     * @dev For convenience, we allow proving against any previous root.

     * This means that witnesses never need to be updated for the new root

     * @param _leaf Leaf of message to prove

     * @param _proof Merkle proof of inclusion for leaf

     * @param _index Index of leaf in home's merkle tree

     * @return Returns true if proof was valid and `prove` call succeeded

     **/

    function prove(

        bytes32 _leaf,

        bytes32[32] calldata _proof,

        uint256 _index

    ) public returns (bool) {

        // ensure that message has not been proven or processed

        require(messages[_leaf] == MessageStatus.None, "!MessageStatus.None");

        // calculate the expected root based on the proof

        bytes32 _calculatedRoot = MerkleLib.branchRoot(_leaf, _proof, _index);

        // if the root is valid, change status to Proven

        if (acceptableRoot(_calculatedRoot)) {

            messages[_leaf] = MessageStatus.Proven;

            return true;

        }

        return false;

    }



    /**

     * @notice Hash of Home domain concatenated with "OPTICS"

     */

    function homeDomainHash() public view override returns (bytes32) {

        return _homeDomainHash(remoteDomain);

    }



    // ============ Internal Functions ============



    /**

     * @notice Moves the contract into failed state

     * @dev Called when a Double Update is submitted

     */

    function _fail() internal override {

        _setFailed();

    }



    /// @notice Hook for potential future use

    // solhint-disable-next-line no-empty-blocks

    function _beforeUpdate() internal {}

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Router.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {XAppConnectionClient} from "./XAppConnectionClient.sol";

// ============ External Imports ============

import {IMessageRecipient} from "@celo-org/optics-sol/interfaces/IMessageRecipient.sol";



abstract contract Router is XAppConnectionClient, IMessageRecipient {

    // ============ Mutable Storage ============



    mapping(uint32 => bytes32) public remotes;

    uint256[49] private __GAP; // gap for upgrade safety



    // ============ Modifiers ============



    /**

     * @notice Only accept messages from a remote Router contract

     * @param _origin The domain the message is coming from

     * @param _router The address the message is coming from

     */

    modifier onlyRemoteRouter(uint32 _origin, bytes32 _router) {

        require(_isRemoteRouter(_origin, _router), "!remote router");

        _;

    }



    // ============ External functions ============



    /**

     * @notice Register the address of a Router contract for the same xApp on a remote chain

     * @param _domain The domain of the remote xApp Router

     * @param _router The address of the remote xApp Router

     */

    function enrollRemoteRouter(uint32 _domain, bytes32 _router)

        external

        onlyOwner

    {

        remotes[_domain] = _router;

    }



    // ============ Virtual functions ============



    function handle(

        uint32 _origin,

        bytes32 _sender,

        bytes memory _message

    ) external virtual override;



    // ============ Internal functions ============

    /**

     * @notice Return true if the given domain / router is the address of a remote xApp Router

     * @param _domain The domain of the potential remote xApp Router

     * @param _router The address of the potential remote xApp Router

     */

    function _isRemoteRouter(uint32 _domain, bytes32 _router)

        internal

        view

        returns (bool)

    {

        return remotes[_domain] == _router;

    }



    /**

     * @notice Assert that the given domain has a xApp Router registered and return its address

     * @param _domain The domain of the chain for which to get the xApp Router

     * @return _remote The address of the remote xApp Router on _domain

     */

    function _mustHaveRemote(uint32 _domain)

        internal

        view

        returns (bytes32 _remote)

    {

        _remote = remotes[_domain];

        require(_remote != bytes32(0), "!remote");

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\SafeERC20.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "./IERC20.sol";

import "../../math/SafeMath.sol";

import "../../utils/Address.sol";



/**

 * @title SafeERC20

 * @dev Wrappers around ERC20 operations that throw on failure (when the token

 * contract returns false). Tokens that return no value (and instead revert or

 * throw on failure) are also supported, non-reverting calls are assumed to be

 * successful.

 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,

 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.

 */

library SafeERC20 {

    using SafeMath for uint256;

    using Address for address;



    function safeTransfer(IERC20 token, address to, uint256 value) internal {

        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));

    }



    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {

        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));

    }



    /**

     * @dev Deprecated. This function has issues similar to the ones found in

     * {IERC20-approve}, and its usage is discouraged.

     *

     * Whenever possible, use {safeIncreaseAllowance} and

     * {safeDecreaseAllowance} instead.

     */

    function safeApprove(IERC20 token, address spender, uint256 value) internal {

        // safeApprove should only be called when setting an initial allowance,

        // or when resetting it to zero. To increase and decrease it, use

        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'

        // solhint-disable-next-line max-line-length

        require((value == 0) || (token.allowance(address(this), spender) == 0),

            "SafeERC20: approve from non-zero to non-zero allowance"

        );

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));

    }



    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {

        uint256 newAllowance = token.allowance(address(this), spender).add(value);

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

    }



    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {

        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

    }



    /**

     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement

     * on the return value: the return value is optional (but if data is returned, it must not be false).

     * @param token The token targeted by the call.

     * @param data The call data (encoded using abi.encode or one of its variants).

     */

    function _callOptionalReturn(IERC20 token, bytes memory data) private {

        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that

        // the target address contains contract code and also asserts for success in the low-level call.



        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional

            // solhint-disable-next-line max-line-length

            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\SafeMath.sol
File type: .sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.5.10;



/*

The MIT License (MIT)



Copyright (c) 2016 Smart Contract Solutions, Inc.



Permission is hereby granted, free of charge, to any person obtaining

a copy of this software and associated documentation files (the

"Software"), to deal in the Software without restriction, including

without limitation the rights to use, copy, modify, merge, publish,

distribute, sublicense, and/or sell copies of the Software, and to

permit persons to whom the Software is furnished to do so, subject to

the following conditions:



The above copyright notice and this permission notice shall be included

in all copies or substantial portions of the Software.



THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.

IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY

CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,

TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE

SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/





/**

 * @title SafeMath

 * @dev Math operations with safety checks that throw on error

 */

library SafeMath {



    /**

     * @dev Multiplies two numbers, throws on overflow.

     */

    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {

        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the

        // benefit is lost if 'b' is also tested.

        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522

        if (_a == 0) {

            return 0;

        }



        c = _a * _b;

        require(c / _a == _b, "Overflow during multiplication.");

        return c;

    }



    /**

     * @dev Integer division of two numbers, truncating the quotient.

     */

    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {

        // assert(_b > 0); // Solidity automatically throws when dividing by 0

        // uint256 c = _a / _b;

        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold

        return _a / _b;

    }



    /**

     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).

     */

    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {

        require(_b <= _a, "Underflow during subtraction.");

        return _a - _b;

    }



    /**

     * @dev Adds two numbers, throws on overflow.

     */

    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {

        c = _a + _b;

        require(c >= _a, "Overflow during addition.");

        return c;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\SecuredTokenTransfer.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



/// @title SecuredTokenTransfer - Secure token transfer

/// @author Richard Meissner - <richard@gnosis.pm>

contract SecuredTokenTransfer {

    /// @dev Transfers a token and returns if it was a success

    /// @param token Token that should be transferred

    /// @param receiver Receiver to whom the token should be transferred

    /// @param amount The amount of tokens that should be transferred

    function transferToken(

        address token,

        address receiver,

        uint256 amount

    ) internal returns (bool transferred) {

        // 0xa9059cbb - keccack("transfer(address,uint256)")

        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);

        // solhint-disable-next-line no-inline-assembly

        assembly {

            // We write the return value to scratch space.

            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory

            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)

            switch returndatasize()

                case 0 {

                    transferred := success

                }

                case 0x20 {

                    transferred := iszero(or(iszero(success), iszero(mload(0))))

                }

                default {

                    transferred := 0

                }

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\SelfAuthorized.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



/// @title SelfAuthorized - authorizes current contract to perform actions

/// @author Richard Meissner - <richard@gnosis.pm>

contract SelfAuthorized {

    function requireSelfCall() private view {

        require(msg.sender == address(this), "GS031");

    }



    modifier authorized() {

        // This is a function call as it minimized the bytecode size

        requireSelfCall();

        _;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\SignatureDecoder.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



/// @title SignatureDecoder - Decodes signatures that a encoded as bytes

/// @author Richard Meissner - <richard@gnosis.pm>

contract SignatureDecoder {

    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.

    /// @notice Make sure to peform a bounds check for @param pos, to avoid out of bounds access on @param signatures

    /// @param pos which signature to read. A prior bounds check of this parameter should be performed, to avoid out of bounds access

    /// @param signatures concatenated rsv signatures

    function signatureSplit(bytes memory signatures, uint256 pos)

        internal

        pure

        returns (

            uint8 v,

            bytes32 r,

            bytes32 s

        )

    {

        // The signature format is a compact form of:

        //   {bytes32 r}{bytes32 s}{uint8 v}

        // Compact means, uint8 is not padded to 32 bytes.

        // solhint-disable-next-line no-inline-assembly

        assembly {

            let signaturePos := mul(0x41, pos)

            r := mload(add(signatures, add(signaturePos, 0x20)))

            s := mload(add(signatures, add(signaturePos, 0x40)))

            // Here we are loading the last 32 bytes, including 31 bytes

            // of 's'. There is no 'mload8' to do this.

            //

            // 'byte' is not working due to the Solidity parser, so lets

            // use the second best option, 'and'

            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Singleton.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



/// @title Singleton - Base for singleton contracts (should always be first super contract)

///         This contract is tightly coupled to our proxy contract (see `proxies/GnosisSafeProxy.sol`)

/// @author Richard Meissner - <richard@gnosis.io>

contract Singleton {

    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.

    // It should also always be ensured that the address is stored alone (uses a full word)

    address private singleton;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\StorageAccessible.sol
File type: .sol
// SPDX-License-Identifier: LGPL-3.0-only

pragma solidity >=0.7.0 <0.9.0;



/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.

/// @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol

contract StorageAccessible {

    /**

     * @dev Reads `length` bytes of storage in the currents contract

     * @param offset - the offset in the current contract's storage in words to start reading from

     * @param length - the number of words (32 bytes) of data to read

     * @return the bytes that were read.

     */

    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {

        bytes memory result = new bytes(length * 32);

        for (uint256 index = 0; index < length; index++) {

            // solhint-disable-next-line no-inline-assembly

            assembly {

                let word := sload(add(offset, index))

                mstore(add(add(result, 0x20), mul(index, 0x20)), word)

            }

        }

        return result;

    }



    /**

     * @dev Performs a delegetecall on a targetContract in the context of self.

     * Internally reverts execution to avoid side effects (making it static).

     *

     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.

     * Specifically, the `returndata` after a call to this method will be:

     * `success:bool || response.length:uint256 || response:bytes`.

     *

     * @param targetContract Address of the contract containing the code to execute.

     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).

     */

    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {

        // solhint-disable-next-line no-inline-assembly

        assembly {

            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)



            mstore(0x00, success)

            mstore(0x20, returndatasize())

            returndatacopy(0x40, 0, returndatasize())

            revert(0, add(returndatasize(), 0x40))

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\TokenRegistry.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {BridgeMessage} from "./BridgeMessage.sol";

import {Encoding} from "./Encoding.sol";

import {IBridgeToken} from "../../interfaces/bridge/IBridgeToken.sol";

import {XAppConnectionClient} from "../XAppConnectionClient.sol";

// ============ External Imports ============

import {TypeCasts} from "@celo-org/optics-sol/contracts/XAppConnectionManager.sol";

import {UpgradeBeaconProxy} from "@celo-org/optics-sol/contracts/upgrade/UpgradeBeaconProxy.sol";

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import {TypedMemView} from "@summa-tx/memview-sol/contracts/TypedMemView.sol";

import {Initializable} from "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";



/**

 * @title TokenRegistry

 * @notice manages a registry of token contracts on this chain

 * -

 * We sort token types as "representation token" or "locally originating token".

 * Locally originating - a token contract that was originally deployed on the local chain

 * Representation (repr) - a token that was originally deployed on some other chain

 * -

 * When the router handles an incoming message, it determines whether the

 * transfer is for an asset of local origin. If not, it checks for an existing

 * representation contract. If no such representation exists, it deploys a new

 * representation contract. It then stores the relationship in the

 * "reprToCanonical" and "canonicalToRepr" mappings to ensure we can always

 * perform a lookup in either direction

 * Note that locally originating tokens should NEVER be represented in these lookup tables.

 */

abstract contract TokenRegistry is Initializable {

    // ============ Libraries ============



    using TypedMemView for bytes;

    using TypedMemView for bytes29;

    using BridgeMessage for bytes29;



    // ============ Structs ============



    // Tokens are identified by a TokenId:

    // domain - 4 byte chain ID of the chain from which the token originates

    // id - 32 byte identifier of the token address on the origin chain, in that chain's address format

    struct TokenId {

        uint32 domain;

        bytes32 id;

    }



    // ============ Public Storage ============



    // UpgradeBeacon from which new token proxies will get their implementation

    address public tokenBeacon;

    // local representation token address => token ID

    mapping(address => TokenId) public representationToCanonical;

    // hash of the tightly-packed TokenId => local representation token address

    // If the token is of local origin, this MUST map to address(0).

    mapping(bytes32 => address) public canonicalToRepresentation;



    // ============ Events ============



    event TokenDeployed(

        uint32 indexed domain,

        bytes32 indexed id,

        address indexed representation

    );



    // ======== Initializer =========



    /**

     * @notice Initialize the TokenRegistry with UpgradeBeaconController and

     * XappConnectionManager.

     * @dev This method deploys two new contracts, and may be expensive to call.

     * @param _tokenBeacon The address of the upgrade beacon for bridge token

     * proxies

     */

    function __TokenRegistry_initialize(address _tokenBeacon)

        internal

        initializer

    {

        tokenBeacon = _tokenBeacon;

    }



    // ======== External: Token Lookup Convenience =========



    /**

     * @notice Looks up the canonical identifier for a local representation.

     * @dev If no such canonical ID is known, this instead returns (0, bytes32(0))

     * @param _local The local address of the representation

     */

    function getCanonicalAddress(address _local)

        external

        view

        returns (uint32 _domain, bytes32 _id)

    {

        TokenId memory _canonical = representationToCanonical[_local];

        _domain = _canonical.domain;

        _id = _canonical.id;

    }



    /**

     * @notice Looks up the local address corresponding to a domain/id pair.

     * @dev If the token is local, it will return the local address.

     * If the token is non-local and no local representation exists, this

     * will return `address(0)`.

     * @param _domain the domain of the canonical version.

     * @param _id the identifier of the canonical version in its domain.

     * @return _token the local address of the token contract

     */

    function getLocalAddress(uint32 _domain, address _id)

        external

        view

        returns (address _token)

    {

        _token = getLocalAddress(_domain, TypeCasts.addressToBytes32(_id));

    }



    // ======== Public: Token Lookup Convenience =========



    /**

     * @notice Looks up the local address corresponding to a domain/id pair.

     * @dev If the token is local, it will return the local address.

     * If the token is non-local and no local representation exists, this

     * will return `address(0)`.

     * @param _domain the domain of the canonical version.

     * @param _id the identifier of the canonical version in its domain.

     * @return _token the local address of the token contract

     */

    function getLocalAddress(uint32 _domain, bytes32 _id)

        public

        view

        returns (address _token)

    {

        _token = _getTokenAddress(BridgeMessage.formatTokenId(_domain, _id));

    }



    // ======== Internal Functions =========



    function _localDomain() internal view virtual returns (uint32);



    /**

     * @notice Get default name and details for a token

     * Sets name to "optics.[domain].[id]"

     * and symbol to

     * @param _tokenId the tokenId for the token

     */

    function _defaultDetails(bytes29 _tokenId)

        internal

        pure

        returns (string memory _name, string memory _symbol)

    {

        // get the first and second half of the token ID

        (, uint256 _secondHalfId) = Encoding.encodeHex(uint256(_tokenId.id()));

        // encode the default token name: "[decimal domain].[hex 4 bytes of ID]"

        _name = string(

            abi.encodePacked(

                Encoding.decimalUint32(_tokenId.domain()), // 10

                ".", // 1

                uint32(_secondHalfId) // 4

            )

        );

        // allocate the memory for a new 32-byte string

        _symbol = new string(10 + 1 + 4);

        assembly {

            mstore(add(_symbol, 0x20), mload(add(_name, 0x20)))

        }

    }



    /**

     * @notice Deploy and initialize a new token contract

     * @dev Each token contract is a proxy which

     * points to the token upgrade beacon

     * @return _token the address of the token contract

     */

    function _deployToken(bytes29 _tokenId) internal returns (address _token) {

        // deploy and initialize the token contract

        _token = address(new UpgradeBeaconProxy(tokenBeacon, ""));

        // initialize the token separately from the

        IBridgeToken(_token).initialize();

        // set the default token name & symbol

        string memory _name;

        string memory _symbol;

        (_name, _symbol) = _defaultDetails(_tokenId);

        IBridgeToken(_token).setDetails(_name, _symbol, 18);

        // store token in mappings

        representationToCanonical[_token].domain = _tokenId.domain();

        representationToCanonical[_token].id = _tokenId.id();

        canonicalToRepresentation[_tokenId.keccak()] = _token;

        // emit event upon deploying new token

        emit TokenDeployed(_tokenId.domain(), _tokenId.id(), _token);

    }



    /**

     * @notice Get the local token address

     * for the canonical token represented by tokenID

     * Returns address(0) if canonical token is of remote origin

     * and no representation token has been deployed locally

     * @param _tokenId the token id of the canonical token

     * @return _local the local token address

     */

    function _getTokenAddress(bytes29 _tokenId)

        internal

        view

        returns (address _local)

    {

        if (_tokenId.domain() == _localDomain()) {

            // Token is of local origin

            _local = _tokenId.evmId();

        } else {

            // Token is a representation of a token of remote origin

            _local = canonicalToRepresentation[_tokenId.keccak()];

        }

    }



    /**

     * @notice Return the local token contract for the

     * canonical tokenId; revert if there is no local token

     * @param _tokenId the token id of the canonical token

     * @return the IERC20 token contract

     */

    function _mustHaveToken(bytes29 _tokenId) internal view returns (IERC20) {

        address _local = _getTokenAddress(_tokenId);

        require(_local != address(0), "!token");

        return IERC20(_local);

    }



    /**

     * @notice Return tokenId for a local token address

     * @param _token local token address (representation or canonical)

     * @return _id local token address (representation or canonical)

     */

    function _tokenIdFor(address _token)

        internal

        view

        returns (TokenId memory _id)

    {

        _id = representationToCanonical[_token];

        if (_id.domain == 0) {

            _id.domain = _localDomain();

            _id.id = TypeCasts.addressToBytes32(_token);

        }

    }



    /**

     * @notice Determine if token is of local origin

     * @return TRUE if token is locally originating

     */

    function _isLocalOrigin(IERC20 _token) internal view returns (bool) {

        return _isLocalOrigin(address(_token));

    }



    /**

     * @notice Determine if token is of local origin

     * @return TRUE if token is locally originating

     */

    function _isLocalOrigin(address _token) internal view returns (bool) {

        // If the contract WAS deployed by the TokenRegistry,

        // it will be stored in this mapping.

        // If so, it IS NOT of local origin

        if (representationToCanonical[_token].domain != 0) {

            return false;

        }

        // If the contract WAS NOT deployed by the TokenRegistry,

        // and the contract exists, then it IS of local origin

        // Return true if code exists at _addr

        uint256 _codeSize;

        // solhint-disable-next-line no-inline-assembly

        assembly {

            _codeSize := extcodesize(_token)

        }

        return _codeSize != 0;

    }



    /**

     * @notice Get the local representation contract for a canonical token

     * @dev Returns contract with null address if tokenId has no representation

     * @param _tokenId the tokenId of the canonical token

     * @return representation token contract

     */

    function _representationForCanonical(bytes29 _tokenId)

        internal

        view

        returns (IBridgeToken)

    {

        return IBridgeToken(canonicalToRepresentation[_tokenId.keccak()]);

    }



    /**

     * @notice Get the local representation contract for a canonical token

     * @dev Returns contract with null address if tokenId has no representation

     * @param _tokenId the tokenId of the canonical token

     * @return representation token contract

     */

    function _representationForCanonical(TokenId memory _tokenId)

        internal

        view

        returns (IBridgeToken)

    {

        return _representationForCanonical(_serializeId(_tokenId));

    }



    /**

     * @notice downcast an IERC20 to an IBridgeToken

     * @dev Unsafe. Please know what you're doing

     * @param _token the IERC20 contract

     * @return the IBridgeToken contract

     */

    function _downcast(IERC20 _token) internal pure returns (IBridgeToken) {

        return IBridgeToken(address(_token));

    }



    /**

     * @notice serialize a TokenId struct into a bytes view

     * @param _id the tokenId

     * @return serialized bytes of tokenId

     */

    function _serializeId(TokenId memory _id) internal pure returns (bytes29) {

        return BridgeMessage.formatTokenId(_id.domain, _id.id);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\TypeCasts.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



import "@summa-tx/memview-sol/contracts/TypedMemView.sol";



library TypeCasts {

    using TypedMemView for bytes;

    using TypedMemView for bytes29;



    function coerceBytes32(string memory _s)

        internal

        pure

        returns (bytes32 _b)

    {

        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));

    }



    // treat it as a null-terminated string of max 32 bytes

    function coerceString(bytes32 _buf)

        internal

        pure

        returns (string memory _newStr)

    {

        uint8 _slen = 0;

        while (_slen < 32 && _buf[_slen] != 0) {

            _slen++;

        }



        // solhint-disable-next-line no-inline-assembly

        assembly {

            _newStr := mload(0x40)

            mstore(0x40, add(_newStr, 0x40)) // may end up with extra

            mstore(_newStr, _slen)

            mstore(add(_newStr, 0x20), _buf)

        }

    }



    // alignment preserving cast

    function addressToBytes32(address _addr) internal pure returns (bytes32) {

        return bytes32(uint256(uint160(_addr)));

    }



    // alignment preserving cast

    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {

        return address(uint160(uint256(_buf)));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\TypedMemView.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.5.10;



import {SafeMath} from "./SafeMath.sol";



library TypedMemView {

    using SafeMath for uint256;



    // Why does this exist?

    // the solidity `bytes memory` type has a few weaknesses.

    // 1. You can't index ranges effectively

    // 2. You can't slice without copying

    // 3. The underlying data may represent any type

    // 4. Solidity never deallocates memory, and memory costs grow

    //    superlinearly



    // By using a memory view instead of a `bytes memory` we get the following

    // advantages:

    // 1. Slices are done on the stack, by manipulating the pointer

    // 2. We can index arbitrary ranges and quickly convert them to stack types

    // 3. We can insert type info into the pointer, and typecheck at runtime



    // This makes `TypedMemView` a useful tool for efficient zero-copy

    // algorithms.



    // Why bytes29?

    // We want to avoid confusion between views, digests, and other common

    // types so we chose a large and uncommonly used odd number of bytes

    //

    // Note that while bytes are left-aligned in a word, integers and addresses

    // are right-aligned. This means when working in assembly we have to

    // account for the 3 unused bytes on the righthand side

    //

    // First 5 bytes are a type flag.

    // - ff_ffff_fffe is reserved for unknown type.

    // - ff_ffff_ffff is reserved for invalid types/errors.

    // next 12 are memory address

    // next 12 are len

    // bottom 3 bytes are empty



    // Assumptions:

    // - non-modification of memory.

    // - No Solidity updates

    // - - wrt free mem point

    // - - wrt bytes representation in memory

    // - - wrt memory addressing in general



    // Usage:

    // - create type constants

    // - use `assertType` for runtime type assertions

    // - - unfortunately we can't do this at compile time yet :(

    // - recommended: implement modifiers that perform type checking

    // - - e.g.

    // - - `uint40 constant MY_TYPE = 3;`

    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`

    // - instantiate a typed view from a bytearray using `ref`

    // - use `index` to inspect the contents of the view

    // - use `slice` to create smaller views into the same memory

    // - - `slice` can increase the offset

    // - - `slice can decrease the length`

    // - - must specify the output type of `slice`

    // - - `slice` will return a null view if you try to overrun

    // - - make sure to explicitly check for this with `notNull` or `assertType`

    // - use `equal` for typed comparisons.





    // The null view

    bytes29 public constant NULL = hex"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";

    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;

    uint8 constant TWELVE_BYTES = 96;



    /**

     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.

     * @param _b    The byte

     * @return      char - The encoded hex character

     */

    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {

        // This can probably be done more efficiently, but it's only in error

        // paths, so we don't really care :)

        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4

        if (_nibble == 0xf0) {return 0x30;} // 0

        if (_nibble == 0xf1) {return 0x31;} // 1

        if (_nibble == 0xf2) {return 0x32;} // 2

        if (_nibble == 0xf3) {return 0x33;} // 3

        if (_nibble == 0xf4) {return 0x34;} // 4

        if (_nibble == 0xf5) {return 0x35;} // 5

        if (_nibble == 0xf6) {return 0x36;} // 6

        if (_nibble == 0xf7) {return 0x37;} // 7

        if (_nibble == 0xf8) {return 0x38;} // 8

        if (_nibble == 0xf9) {return 0x39;} // 9

        if (_nibble == 0xfa) {return 0x61;} // a

        if (_nibble == 0xfb) {return 0x62;} // b

        if (_nibble == 0xfc) {return 0x63;} // c

        if (_nibble == 0xfd) {return 0x64;} // d

        if (_nibble == 0xfe) {return 0x65;} // e

        if (_nibble == 0xff) {return 0x66;} // f

    }



    /**

     * @notice      Returns a uint16 containing the hex-encoded byte.

     * @param _b    The byte

     * @return      encoded - The hex-encoded byte

     */

    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {

        encoded |= nibbleHex(_b >> 4); // top 4 bits

        encoded <<= 8;

        encoded |= nibbleHex(_b); // lower 4 bits

    }



    /**

     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.

     *              `second` contains the encoded lower 16 bytes.

     *

     * @param _b    The 32 bytes as uint256

     * @return      first - The top 16 bytes

     * @return      second - The bottom 16 bytes

     */

    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {

        for (uint8 i = 31; i > 15; i -= 1) {

            uint8 _byte = uint8(_b >> (i * 8));

            first |= byteHex(_byte);

            if (i != 16) {

                first <<= 16;

            }

        }



        // abusing underflow here =_=

        for (uint8 i = 15; i < 255 ; i -= 1) {

            uint8 _byte = uint8(_b >> (i * 8));

            second |= byteHex(_byte);

            if (i != 0) {

                second <<= 16;

            }

        }

    }



    /**

     * @notice          Changes the endianness of a uint256.

     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel

     * @param _b        The unsigned integer to reverse

     * @return          v - The reversed value

     */

    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {

        v = _b;



        // swap bytes

        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |

            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);

        // swap 2-byte long pairs

        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |

            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);

        // swap 4-byte long pairs

        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |

            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);

        // swap 8-byte long pairs

        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |

            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);

        // swap 16-byte long pairs

        v = (v >> 128) | (v << 128);

    }



    /**

     * @notice      Create a mask with the highest `_len` bits set.

     * @param _len  The length

     * @return      mask - The mask

     */

    function leftMask(uint8 _len) private pure returns (uint256 mask) {

        // ugly. redo without assembly?

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            mask := sar(

                sub(_len, 1),

                0x8000000000000000000000000000000000000000000000000000000000000000

            )

        }

    }



    /**

     * @notice      Return the null view.

     * @return      bytes29 - The null view

     */

    function nullView() internal pure returns (bytes29) {

        return NULL;

    }



    /**

     * @notice      Check if the view is null.

     * @return      bool - True if the view is null

     */

    function isNull(bytes29 memView) internal pure returns (bool) {

        return memView == NULL;

    }



    /**

     * @notice      Check if the view is not null.

     * @return      bool - True if the view is not null

     */

    function notNull(bytes29 memView) internal pure returns (bool) {

        return !isNull(memView);

    }



    /**

     * @notice          Check if the view is of a valid type and points to a valid location

     *                  in memory.

     * @dev             We perform this check by examining solidity's unallocated memory

     *                  pointer and ensuring that the view's upper bound is less than that.

     * @param memView   The view

     * @return          ret - True if the view is valid

     */

    function isValid(bytes29 memView) internal pure returns (bool ret) {

        if (typeOf(memView) == 0xffffffffff) {return false;}

        uint256 _end = end(memView);

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            ret := not(gt(_end, mload(0x40)))

        }

    }



    /**

     * @notice          Require that a typed memory view be valid.

     * @dev             Returns the view for easy chaining.

     * @param memView   The view

     * @return          bytes29 - The validated view

     */

    function assertValid(bytes29 memView) internal pure returns (bytes29) {

        require(isValid(memView), "Validity assertion failed");

        return memView;

    }



    /**

     * @notice          Return true if the memview is of the expected type. Otherwise false.

     * @param memView   The view

     * @param _expected The expected type

     * @return          bool - True if the memview is of the expected type

     */

    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {

        return typeOf(memView) == _expected;

    }



    /**

     * @notice          Require that a typed memory view has a specific type.

     * @dev             Returns the view for easy chaining.

     * @param memView   The view

     * @param _expected The expected type

     * @return          bytes29 - The view with validated type

     */

    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {

        if (!isType(memView, _expected)) {

            (, uint256 g) = encodeHex(uint256(typeOf(memView)));

            (, uint256 e) = encodeHex(uint256(_expected));

            string memory err = string(

                abi.encodePacked(

                    "Type assertion failed. Got 0x",

                    uint80(g),

                    ". Expected 0x",

                    uint80(e)

                )

            );

            revert(err);

        }

        return memView;

    }



    /**

     * @notice          Return an identical view with a different type.

     * @param memView   The view

     * @param _newType  The new type

     * @return          newView - The new view with the specified type

     */

    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {

        // then | in the new type

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            // shift off the top 5 bytes

            newView := or(newView, shr(40, shl(40, memView)))

            newView := or(newView, shl(216, _newType))

        }

    }



    /**

     * @notice          Unsafe raw pointer construction. This should generally not be called

     *                  directly. Prefer `ref` wherever possible.

     * @dev             Unsafe raw pointer construction. This should generally not be called

     *                  directly. Prefer `ref` wherever possible.

     * @param _type     The type

     * @param _loc      The memory address

     * @param _len      The length

     * @return          newView - The new view with the specified type, location and length

     */

    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            newView := shl(96, or(newView, _type)) // insert type

            newView := shl(96, or(newView, _loc))  // insert loc

            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes

        }

    }



    /**

     * @notice          Instantiate a new memory view. This should generally not be called

     *                  directly. Prefer `ref` wherever possible.

     * @dev             Instantiate a new memory view. This should generally not be called

     *                  directly. Prefer `ref` wherever possible.

     * @param _type     The type

     * @param _loc      The memory address

     * @param _len      The length

     * @return          newView - The new view with the specified type, location and length

     */

    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {

        uint256 _end = _loc.add(_len);

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            if gt(_end, mload(0x40)) {

                _end := 0

            }

        }

        if (_end == 0) {

            return NULL;

        }

        newView = unsafeBuildUnchecked(_type, _loc, _len);

    }



    /**

     * @notice          Instantiate a memory view from a byte array.

     * @dev             Note that due to Solidity memory representation, it is not possible to

     *                  implement a deref, as the `bytes` type stores its len in memory.

     * @param arr       The byte array

     * @param newType   The type

     * @return          bytes29 - The memory view

     */

    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {

        uint256 _len = arr.length;



        uint256 _loc;

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            _loc := add(arr, 0x20)  // our view is of the data, not the struct

        }



        return build(newType, _loc, _len);

    }



    /**

     * @notice          Return the associated type information.

     * @param memView   The memory view

     * @return          _type - The type associated with the view

     */

    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            // 216 == 256 - 40

            _type := shr(216, memView) // shift out lower 24 bytes

        }

    }



    /**

     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.

     * @param left      The first view

     * @param right     The second view

     * @return          bool - True if the 5-byte type flag is equal

     */

    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {

        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;

    }



    /**

     * @notice          Return the memory address of the underlying bytes.

     * @param memView   The view

     * @return          _loc - The memory address

     */

    function loc(bytes29 memView) internal pure returns (uint96 _loc) {

        uint256 _mask = LOW_12_MASK;  // assembly can't use globals

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)

            _loc := and(shr(120, memView), _mask)

        }

    }



    /**

     * @notice          The number of memory words this memory view occupies, rounded up.

     * @param memView   The view

     * @return          uint256 - The number of memory words

     */

    function words(bytes29 memView) internal pure returns (uint256) {

        return uint256(len(memView)).add(32) / 32;

    }



    /**

     * @notice          The in-memory footprint of a fresh copy of the view.

     * @param memView   The view

     * @return          uint256 - The in-memory footprint of a fresh copy of the view.

     */

    function footprint(bytes29 memView) internal pure returns (uint256) {

        return words(memView) * 32;

    }



    /**

     * @notice          The number of bytes of the view.

     * @param memView   The view

     * @return          _len - The length of the view

     */

    function len(bytes29 memView) internal pure returns (uint96 _len) {

        uint256 _mask = LOW_12_MASK;  // assembly can't use globals

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            _len := and(shr(24, memView), _mask)

        }

    }



    /**

     * @notice          Returns the endpoint of `memView`.

     * @param memView   The view

     * @return          uint256 - The endpoint of `memView`

     */

    function end(bytes29 memView) internal pure returns (uint256) {

        return loc(memView) + len(memView);

    }



    /**

     * @notice          Safe slicing without memory modification.

     * @param memView   The view

     * @param _index    The start index

     * @param _len      The length

     * @param newType   The new type

     * @return          bytes29 - The new view

     */

    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {

        uint256 _loc = loc(memView);



        // Ensure it doesn't overrun the view

        if (_loc.add(_index).add(_len) > end(memView)) {

            return NULL;

        }



        _loc = _loc.add(_index);

        return build(newType, _loc, _len);

    }



    /**

     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.

     * @param memView   The view

     * @param _len      The length

     * @param newType   The new type

     * @return          bytes29 - The new view

     */

    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {

        return slice(memView, 0, _len, newType);

    }



    /**

     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.

     * @param memView   The view

     * @param _len      The length

     * @param newType   The new type

     * @return          bytes29 - The new view

     */

    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {

        return slice(memView, uint256(len(memView)).sub(_len), _len, newType);

    }



    /**

     * @notice          Construct an error message for an indexing overrun.

     * @param _loc      The memory address

     * @param _len      The length

     * @param _index    The index

     * @param _slice    The slice where the overrun occurred

     * @return          err - The err

     */

    function indexErrOverrun(

        uint256 _loc,

        uint256 _len,

        uint256 _index,

        uint256 _slice

    ) internal pure returns (string memory err) {

        (, uint256 a) = encodeHex(_loc);

        (, uint256 b) = encodeHex(_len);

        (, uint256 c) = encodeHex(_index);

        (, uint256 d) = encodeHex(_slice);

        err = string(

            abi.encodePacked(

                "TypedMemView/index - Overran the view. Slice is at 0x",

                uint48(a),

                " with length 0x",

                uint48(b),

                ". Attempted to index at offset 0x",

                uint48(c),

                " with length 0x",

                uint48(d),

                "."

            )

        );

    }



    /**

     * @notice          Load up to 32 bytes from the view onto the stack.

     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.

     *                  This can be immediately cast to a smaller fixed-length byte array.

     *                  To automatically cast to an integer, use `indexUint`.

     * @param memView   The view

     * @param _index    The index

     * @param _bytes    The bytes

     * @return          result - The 32 byte result

     */

    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {

        if (_bytes == 0) {return bytes32(0);}

        if (_index.add(_bytes) > len(memView)) {

            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));

        }

        require(_bytes <= 32, "TypedMemView/index - Attempted to index more than 32 bytes");



        uint8 bitLength = _bytes * 8;

        uint256 _loc = loc(memView);

        uint256 _mask = leftMask(bitLength);

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            result := and(mload(add(_loc, _index)), _mask)

        }

    }



    /**

     * @notice          Parse an unsigned integer from the view at `_index`.

     * @dev             Requires that the view have >= `_bytes` bytes following that index.

     * @param memView   The view

     * @param _index    The index

     * @param _bytes    The bytes

     * @return          result - The unsigned integer

     */

    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {

        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);

    }



    /**

     * @notice          Parse an unsigned integer from LE bytes.

     * @param memView   The view

     * @param _index    The index

     * @param _bytes    The bytes

     * @return          result - The unsigned integer

     */

    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {

        return reverseUint256(uint256(index(memView, _index, _bytes)));

    }



    /**

     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes

     *                  following that index.

     * @param memView   The view

     * @param _index    The index

     * @return          address - The address

     */

    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {

        return address(uint160(indexUint(memView, _index, 20)));

    }



    /**

     * @notice          Return the keccak256 hash of the underlying memory

     * @param memView   The view

     * @return          digest - The keccak256 hash of the underlying memory

     */

    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {

        uint256 _loc = loc(memView);

        uint256 _len = len(memView);

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            digest := keccak256(_loc, _len)

        }

    }



    /**

     * @notice          Return the sha2 digest of the underlying memory.

     * @dev             We explicitly deallocate memory afterwards.

     * @param memView   The view

     * @return          digest - The sha2 hash of the underlying memory

     */

    function sha2(bytes29 memView) internal view returns (bytes32 digest) {

        uint256 _loc = loc(memView);

        uint256 _len = len(memView);

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            let ptr := mload(0x40)

            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1

            digest := mload(ptr)

        }

    }



    /**

     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))

     * @param memView   The pre-image

     * @return          digest - the Digest

     */

    function hash160(bytes29 memView) internal view returns (bytes20 digest) {

        uint256 _loc = loc(memView);

        uint256 _len = len(memView);

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            let ptr := mload(0x40)

            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2

            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160

            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.

        }

    }



    /**

     * @notice          Implements bitcoin's hash256 (double sha2)

     * @param memView   A view of the preimage

     * @return          digest - the Digest

     */

    function hash256(bytes29 memView) internal view returns (bytes32 digest) {

        uint256 _loc = loc(memView);

        uint256 _len = len(memView);

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            let ptr := mload(0x40)

            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1

            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2

            digest := mload(ptr)

        }

    }



    /**

     * @notice          Return true if the underlying memory is equal. Else false.

     * @param left      The first view

     * @param right     The second view

     * @return          bool - True if the underlying memory is equal

     */

    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {

        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);

    }



    /**

     * @notice          Return false if the underlying memory is equal. Else true.

     * @param left      The first view

     * @param right     The second view

     * @return          bool - False if the underlying memory is equal

     */

    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {

        return !untypedEqual(left, right);

    }



    /**

     * @notice          Compares type equality.

     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.

     * @param left      The first view

     * @param right     The second view

     * @return          bool - True if the types are the same

     */

    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {

        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));

    }



    /**

     * @notice          Compares type inequality.

     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.

     * @param left      The first view

     * @param right     The second view

     * @return          bool - True if the types are not the same

     */

    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {

        return !equal(left, right);

    }



    /**

     * @notice          Copy the view to a location, return an unsafe memory reference

     * @dev             Super Dangerous direct memory access.

     *

     *                  This reference can be overwritten if anything else modifies memory (!!!).

     *                  As such it MUST be consumed IMMEDIATELY.

     *                  This function is private to prevent unsafe usage by callers.

     * @param memView   The view

     * @param _newLoc   The new location

     * @return          written - the unsafe memory reference

     */

    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {

        require(notNull(memView), "TypedMemView/copyTo - Null pointer deref");

        require(isValid(memView), "TypedMemView/copyTo - Invalid pointer deref");

        uint256 _len = len(memView);

        uint256 _oldLoc = loc(memView);



        uint256 ptr;

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            ptr := mload(0x40)

            // revert if we're writing in occupied memory

            if gt(ptr, _newLoc) {

                revert(0x60, 0x20) // empty revert message

            }



            // use the identity precompile to copy

            // guaranteed not to fail, so pop the success

            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))

        }



        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);

    }



    /**

     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to

     *                  the new memory

     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.

     * @param memView   The view

     * @return          ret - The view pointing to the new memory

     */

    function clone(bytes29 memView) internal view returns (bytes memory ret) {

        uint256 ptr;

        uint256 _len = len(memView);

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            ptr := mload(0x40) // load unused memory pointer

            ret := ptr

        }

        unsafeCopyTo(memView, ptr + 0x20);

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer

            mstore(ptr, _len) // write len of new array (in bytes)

        }

    }



    /**

     * @notice          Join the views in memory, return an unsafe reference to the memory.

     * @dev             Super Dangerous direct memory access.

     *

     *                  This reference can be overwritten if anything else modifies memory (!!!).

     *                  As such it MUST be consumed IMMEDIATELY.

     *                  This function is private to prevent unsafe usage by callers.

     * @param memViews  The views

     * @return          unsafeView - The conjoined view pointing to the new memory

     */

    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            let ptr := mload(0x40)

            // revert if we're writing in occupied memory

            if gt(ptr, _location) {

                revert(0x60, 0x20) // empty revert message

            }

        }



        uint256 _offset = 0;

        for (uint256 i = 0; i < memViews.length; i ++) {

            bytes29 memView = memViews[i];

            unsafeCopyTo(memView, _location + _offset);

            _offset += len(memView);

        }

        unsafeView = unsafeBuildUnchecked(0, _location, _offset);

    }



    /**

     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.

     * @param memViews  The views

     * @return          bytes32 - The keccak256 digest

     */

    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {

        uint256 ptr;

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            ptr := mload(0x40) // load unused memory pointer

        }

        return keccak(unsafeJoin(memViews, ptr));

    }



    /**

     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.

     * @param memViews  The views

     * @return          bytes32 - The sha256 digest

     */

    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {

        uint256 ptr;

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            ptr := mload(0x40) // load unused memory pointer

        }

        return sha2(unsafeJoin(memViews, ptr));

    }



    /**

     * @notice          copies all views, joins them into a new bytearray.

     * @param memViews  The views

     * @return          ret - The new byte array

     */

    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {

        uint256 ptr;

        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            ptr := mload(0x40) // load unused memory pointer

        }



        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);

        uint256 _written = len(_newView);

        uint256 _footprint = footprint(_newView);



        assembly {

            // solium-disable-previous-line security/no-inline-assembly

            // store the legnth

            mstore(ptr, _written)

            // new pointer is old + 0x20 + the footprint of the body

            mstore(0x40, add(add(ptr, _footprint), 0x20))

            ret := ptr

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\UpdaterManager.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {IUpdaterManager} from "../interfaces/IUpdaterManager.sol";

import {Home} from "./Home.sol";

// ============ External Imports ============

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

import {Address} from "@openzeppelin/contracts/utils/Address.sol";



/**

 * @title UpdaterManager

 * @author Celo Labs Inc.

 * @notice MVP / centralized version of contract

 * that will manage Updater bonding, slashing,

 * selection and rotation

 */

contract UpdaterManager is IUpdaterManager, Ownable {

    // ============ Internal Storage ============



    // address of home contract

    address internal home;



    // ============ Private Storage ============



    // address of the current updater

    address private _updater;



    // ============ Events ============



    /**

     * @notice Emitted when a new home is set

     * @param home The address of the new home contract

     */

    event NewHome(address home);



    /**

     * @notice Emitted when slashUpdater is called

     */

    event FakeSlashed(address reporter);



    // ============ Modifiers ============



    /**

     * @notice Require that the function is called

     * by the Home contract

     */

    modifier onlyHome() {

        require(msg.sender == home, "!home");

        _;

    }



    // ============ Constructor ============



    constructor(address _updaterAddress) payable Ownable() {

        _updater = _updaterAddress;

    }



    // ============ External Functions ============



    /**

     * @notice Set the address of the a new home contract

     * @dev only callable by trusted owner

     * @param _home The address of the new home contract

     */

    function setHome(address _home) external onlyOwner {

        require(Address.isContract(_home), "!contract home");

        home = _home;



        emit NewHome(_home);

    }



    /**

     * @notice Set the address of a new updater

     * @dev only callable by trusted owner

     * @param _updaterAddress The address of the new updater

     */

    function setUpdater(address _updaterAddress) external onlyOwner {

        _updater = _updaterAddress;

        Home(home).setUpdater(_updaterAddress);

    }



    /**

     * @notice Slashes the updater

     * @dev Currently does nothing, functionality will be implemented later

     * when updater bonding and rotation are also implemented

     * @param _reporter The address of the entity that reported the updater fraud

     */

    function slashUpdater(address payable _reporter)

        external

        override

        onlyHome

    {

        emit FakeSlashed(_reporter);

    }



    /**

     * @notice Get address of current updater

     * @return the updater address

     */

    function updater() external view override returns (address) {

        return _updater;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\UpgradeBeacon.sol
File type: .sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.11;



// ============ External Imports ============

import {Address} from "@openzeppelin/contracts/utils/Address.sol";



/**

 * @title UpgradeBeacon

 * @notice Stores the address of an implementation contract

 * and allows a controller to upgrade the implementation address

 * @dev This implementation combines the gas savings of having no function selectors

 * found in 0age's implementation:

 * https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/proxies/smart-wallet/UpgradeBeaconProxyV1.sol

 * With the added niceties of a safety check that each implementation is a contract

 * and an Upgrade event emitted each time the implementation is changed

 * found in OpenZeppelin's implementation:

 * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol

 */

contract UpgradeBeacon {

    // ============ Immutables ============



    // The controller is capable of modifying the implementation address

    address private immutable controller;



    // ============ Private Storage Variables ============



    // The implementation address is held in storage slot zero.

    address private implementation;



    // ============ Events ============



    // Upgrade event is emitted each time the implementation address is set

    // (including deployment)

    event Upgrade(address indexed implementation);



    // ============ Constructor ============



    /**

     * @notice Validate the initial implementation and store it.

     * Store the controller immutably.

     * @param _initialImplementation Address of the initial implementation contract

     * @param _controller Address of the controller who can upgrade the implementation

     */

    constructor(address _initialImplementation, address _controller) payable {

        _setImplementation(_initialImplementation);

        controller = _controller;

    }



    // ============ External Functions ============



    /**

     * @notice For all callers except the controller, return the current implementation address.

     * If called by the Controller, update the implementation address

     * to the address passed in the calldata.

     * Note: this requires inline assembly because Solidity fallback functions

     * do not natively take arguments or return values.

     */

    fallback() external payable {

        if (msg.sender != controller) {

            // if not called by the controller,

            // load implementation address from storage slot zero

            // and return it.

            assembly {

                mstore(0, sload(0))

                return(0, 32)

            }

        } else {

            // if called by the controller,

            // load new implementation address from the first word of the calldata

            address _newImplementation;

            assembly {

                _newImplementation := calldataload(0)

            }

            // set the new implementation

            _setImplementation(_newImplementation);

        }

    }



    // ============ Private Functions ============



    /**

     * @notice Perform checks on the new implementation address

     * then upgrade the stored implementation.

     * @param _newImplementation Address of the new implementation contract which will replace the old one

     */

    function _setImplementation(address _newImplementation) private {

        // Require that the new implementation is different from the current one

        require(implementation != _newImplementation, "!upgrade");

        // Require that the new implementation is a contract

        require(

            Address.isContract(_newImplementation),

            "implementation !contract"

        );

        // set the new implementation

        implementation = _newImplementation;

        emit Upgrade(_newImplementation);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\UpgradeBeaconController.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {UpgradeBeacon} from "./UpgradeBeacon.sol";

// ============ External Imports ============

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

import {Address} from "@openzeppelin/contracts/utils/Address.sol";



/**

 * @title UpgradeBeaconController

 * @notice Set as the controller of UpgradeBeacon contract(s),

 * capable of changing their stored implementation address.

 * @dev This implementation is a minimal version inspired by 0age's implementation:

 * https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/upgradeability/DharmaUpgradeBeaconController.sol

 */

contract UpgradeBeaconController is Ownable {

    // ============ Events ============



    event BeaconUpgraded(address indexed beacon, address implementation);



    // ============ External Functions ============



    /**

     * @notice Modify the implementation stored in the UpgradeBeacon,

     * which will upgrade the implementation used by all

     * Proxy contracts using that UpgradeBeacon

     * @param _beacon Address of the UpgradeBeacon which will be updated

     * @param _implementation Address of the Implementation contract to upgrade the Beacon to

     */

    function upgrade(address _beacon, address _implementation)

        external

        onlyOwner

    {

        // Require that the beacon is a contract

        require(Address.isContract(_beacon), "beacon !contract");

        // Call into beacon and supply address of new implementation to update it.

        (bool _success, ) = _beacon.call(abi.encode(_implementation));

        // Revert with message on failure (i.e. if the beacon is somehow incorrect).

        if (!_success) {

            assembly {

                returndatacopy(0, 0, returndatasize())

                revert(0, returndatasize())

            }

        }

        emit BeaconUpgraded(_beacon, _implementation);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\UpgradeBeaconProxy.sol
File type: .sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.11;



// ============ External Imports ============

import {Address} from "@openzeppelin/contracts/utils/Address.sol";



/**

 * @title UpgradeBeaconProxy

 * @notice

 * Proxy contract which delegates all logic, including initialization,

 * to an implementation contract.

 * The implementation contract is stored within an Upgrade Beacon contract;

 * the implementation contract can be changed by performing an upgrade on the Upgrade Beacon contract.

 * The Upgrade Beacon contract for this Proxy is immutably specified at deployment.

 * @dev This implementation combines the gas savings of keeping the UpgradeBeacon address outside of contract storage

 * found in 0age's implementation:

 * https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/proxies/smart-wallet/UpgradeBeaconProxyV1.sol

 * With the added safety checks that the UpgradeBeacon and implementation are contracts at time of deployment

 * found in OpenZeppelin's implementation:

 * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol

 */

contract UpgradeBeaconProxy {

    // ============ Immutables ============



    // Upgrade Beacon address is immutable (therefore not kept in contract storage)

    address private immutable upgradeBeacon;



    // ============ Constructor ============



    /**

     * @notice Validate that the Upgrade Beacon is a contract, then set its

     * address immutably within this contract.

     * Validate that the implementation is also a contract,

     * Then call the initialization function defined at the implementation.

     * The deployment will revert and pass along the

     * revert reason if the initialization function reverts.

     * @param _upgradeBeacon Address of the Upgrade Beacon to be stored immutably in the contract

     * @param _initializationCalldata Calldata supplied when calling the initialization function

     */

    constructor(address _upgradeBeacon, bytes memory _initializationCalldata)

        payable

    {

        // Validate the Upgrade Beacon is a contract

        require(Address.isContract(_upgradeBeacon), "beacon !contract");

        // set the Upgrade Beacon

        upgradeBeacon = _upgradeBeacon;

        // Validate the implementation is a contract

        address _implementation = _getImplementation(_upgradeBeacon);

        require(

            Address.isContract(_implementation),

            "beacon implementation !contract"

        );

        // Call the initialization function on the implementation

        if (_initializationCalldata.length > 0) {

            _initialize(_implementation, _initializationCalldata);

        }

    }



    // ============ External Functions ============



    /**

     * @notice Forwards all calls with data to _fallback()

     * No public functions are declared on the contract, so all calls hit fallback

     */

    fallback() external payable {

        _fallback();

    }



    /**

     * @notice Forwards all calls with no data to _fallback()

     */

    receive() external payable {

        _fallback();

    }



    // ============ Private Functions ============



    /**

     * @notice Call the initialization function on the implementation

     * Used at deployment to initialize the proxy

     * based on the logic for initialization defined at the implementation

     * @param _implementation - Contract to which the initalization is delegated

     * @param _initializationCalldata - Calldata supplied when calling the initialization function

     */

    function _initialize(

        address _implementation,

        bytes memory _initializationCalldata

    ) private {

        // Delegatecall into the implementation, supplying initialization calldata.

        (bool _ok, ) = _implementation.delegatecall(_initializationCalldata);

        // Revert and include revert data if delegatecall to implementation reverts.

        if (!_ok) {

            assembly {

                returndatacopy(0, 0, returndatasize())

                revert(0, returndatasize())

            }

        }

    }



    /**

     * @notice Delegates function calls to the implementation contract returned by the Upgrade Beacon

     */

    function _fallback() private {

        _delegate(_getImplementation());

    }



    /**

     * @notice Delegate function execution to the implementation contract

     * @dev This is a low level function that doesn't return to its internal

     * call site. It will return whatever is returned by the implementation to the

     * external caller, reverting and returning the revert data if implementation

     * reverts.

     * @param _implementation - Address to which the function execution is delegated

     */

    function _delegate(address _implementation) private {

        assembly {

            // Copy msg.data. We take full control of memory in this inline assembly

            // block because it will not return to Solidity code. We overwrite the

            // Solidity scratch pad at memory position 0.

            calldatacopy(0, 0, calldatasize())

            // Delegatecall to the implementation, supplying calldata and gas.

            // Out and outsize are set to zero - instead, use the return buffer.

            let result := delegatecall(

                gas(),

                _implementation,

                0,

                calldatasize(),

                0,

                0

            )

            // Copy the returned data from the return buffer.

            returndatacopy(0, 0, returndatasize())

            switch result

            // Delegatecall returns 0 on error.

            case 0 {

                revert(0, returndatasize())

            }

            default {

                return(0, returndatasize())

            }

        }

    }



    /**

     * @notice Call the Upgrade Beacon to get the current implementation contract address

     * @return _implementation Address of the current implementation.

     */

    function _getImplementation()

        private

        view

        returns (address _implementation)

    {

        _implementation = _getImplementation(upgradeBeacon);

    }



    /**

     * @notice Call the Upgrade Beacon to get the current implementation contract address

     * @dev _upgradeBeacon is passed as a parameter so that

     * we can also use this function in the constructor,

     * where we can't access immutable variables.

     * @param _upgradeBeacon Address of the UpgradeBeacon storing the current implementation

     * @return _implementation Address of the current implementation.

     */

    function _getImplementation(address _upgradeBeacon)

        private

        view

        returns (address _implementation)

    {

        // Get the current implementation address from the upgrade beacon.

        (bool _ok, bytes memory _returnData) = _upgradeBeacon.staticcall("");

        // Revert and pass along revert message if call to upgrade beacon reverts.

        require(_ok, string(_returnData));

        // Set the implementation to the address returned from the upgrade beacon.

        _implementation = abi.decode(_returnData, (address));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\Version0.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



/**

 * @title Version0

 * @notice Version getter for contracts

 **/

contract Version0 {

    uint8 public constant VERSION = 0;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\XAppConnectionClient.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ External Imports ============

import {Home} from "@celo-org/optics-sol/contracts/Home.sol";

import {XAppConnectionManager} from "@celo-org/optics-sol/contracts/XAppConnectionManager.sol";

import {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";



abstract contract XAppConnectionClient is OwnableUpgradeable {

    // ============ Mutable Storage ============



    XAppConnectionManager public xAppConnectionManager;

    uint256[49] private __GAP; // gap for upgrade safety



    // ============ Modifiers ============



    /**

     * @notice Only accept messages from an Optics Replica contract

     */

    modifier onlyReplica() {

        require(_isReplica(msg.sender), "!replica");

        _;

    }



    // ======== Initializer =========



    function __XAppConnectionClient_initialize(address _xAppConnectionManager)

        internal

        initializer

    {

        xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);

        __Ownable_init();

    }



    // ============ External functions ============



    /**

     * @notice Modify the contract the xApp uses to validate Replica contracts

     * @param _xAppConnectionManager The address of the xAppConnectionManager contract

     */

    function setXAppConnectionManager(address _xAppConnectionManager)

        external

        onlyOwner

    {

        xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);

    }



    // ============ Internal functions ============



    /**

     * @notice Get the local Home contract from the xAppConnectionManager

     * @return The local Home contract

     */

    function _home() internal view returns (Home) {

        return xAppConnectionManager.home();

    }



    /**

     * @notice Determine whether _potentialReplcia is an enrolled Replica from the xAppConnectionManager

     * @return True if _potentialReplica is an enrolled Replica

     */

    function _isReplica(address _potentialReplica)

        internal

        view

        returns (bool)

    {

        return xAppConnectionManager.isReplica(_potentialReplica);

    }



    /**

     * @notice Get the local domain from the xAppConnectionManager

     * @return The local domain

     */

    function _localDomain() internal view virtual returns (uint32) {

        return xAppConnectionManager.localDomain();

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Celo Optics Bridge\contracts\XAppConnectionManager.sol
File type: .sol
// SPDX-License-Identifier: MIT OR Apache-2.0

pragma solidity >=0.6.11;



// ============ Internal Imports ============

import {Home} from "./Home.sol";

import {Replica} from "./Replica.sol";

import {TypeCasts} from "../libs/TypeCasts.sol";

// ============ External Imports ============

import {ECDSA} from "@openzeppelin/contracts/cryptography/ECDSA.sol";

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";



/**

 * @title XAppConnectionManager

 * @author Celo Labs Inc.

 * @notice Manages a registry of local Replica contracts

 * for remote Home domains. Accepts Watcher signatures

 * to un-enroll Replicas attached to fraudulent remote Homes

 */

contract XAppConnectionManager is Ownable {

    // ============ Public Storage ============



    // Home contract

    Home public home;

    // local Replica address => remote Home domain

    mapping(address => uint32) public replicaToDomain;

    // remote Home domain => local Replica address

    mapping(uint32 => address) public domainToReplica;

    // watcher address => replica remote domain => has/doesn't have permission

    mapping(address => mapping(uint32 => bool)) private watcherPermissions;



    // ============ Events ============



    /**

     * @notice Emitted when a new Replica is enrolled / added

     * @param domain the remote domain of the Home contract for the Replica

     * @param replica the address of the Replica

     */

    event ReplicaEnrolled(uint32 indexed domain, address replica);



    /**

     * @notice Emitted when a new Replica is un-enrolled / removed

     * @param domain the remote domain of the Home contract for the Replica

     * @param replica the address of the Replica

     */

    event ReplicaUnenrolled(uint32 indexed domain, address replica);



    /**

     * @notice Emitted when Watcher permissions are changed

     * @param domain the remote domain of the Home contract for the Replica

     * @param watcher the address of the Watcher

     * @param access TRUE if the Watcher was given permissions, FALSE if permissions were removed

     */

    event WatcherPermissionSet(

        uint32 indexed domain,

        address watcher,

        bool access

    );



    // ============ Modifiers ============



    modifier onlyReplica() {

        require(isReplica(msg.sender), "!replica");

        _;

    }



    // ============ Constructor ============



    // solhint-disable-next-line no-empty-blocks

    constructor() Ownable() {}



    // ============ External Functions ============



    /**

     * @notice Un-Enroll a replica contract

     * in the case that fraud was detected on the Home

     * @dev in the future, if fraud occurs on the Home contract,

     * the Watcher will submit their signature directly to the Home

     * and it can be relayed to all remote chains to un-enroll the Replicas

     * @param _domain the remote domain of the Home contract for the Replica

     * @param _updater the address of the Updater for the Home contract (also stored on Replica)

     * @param _signature signature of watcher on (domain, replica address, updater address)

     */

    function unenrollReplica(

        uint32 _domain,

        bytes32 _updater,

        bytes memory _signature

    ) external {

        // ensure that the replica is currently set

        address _replica = domainToReplica[_domain];

        require(_replica != address(0), "!replica exists");

        // ensure that the signature is on the proper updater

        require(

            Replica(_replica).updater() == TypeCasts.bytes32ToAddress(_updater),

            "!current updater"

        );

        // get the watcher address from the signature

        // and ensure that the watcher has permission to un-enroll this replica

        address _watcher = _recoverWatcherFromSig(

            _domain,

            TypeCasts.addressToBytes32(_replica),

            _updater,

            _signature

        );

        require(watcherPermissions[_watcher][_domain], "!valid watcher");

        // remove the replica from mappings

        _unenrollReplica(_replica);

    }



    /**

     * @notice Set the address of the local Home contract

     * @param _home the address of the local Home contract

     */

    function setHome(address _home) external onlyOwner {

        home = Home(_home);

    }



    /**

     * @notice Allow Owner to enroll Replica contract

     * @param _replica the address of the Replica

     * @param _domain the remote domain of the Home contract for the Replica

     */

    function ownerEnrollReplica(address _replica, uint32 _domain)

        external

        onlyOwner

    {

        // un-enroll any existing replica

        _unenrollReplica(_replica);

        // add replica and domain to two-way mapping

        replicaToDomain[_replica] = _domain;

        domainToReplica[_domain] = _replica;

        emit ReplicaEnrolled(_domain, _replica);

    }



    /**

     * @notice Allow Owner to un-enroll Replica contract

     * @param _replica the address of the Replica

     */

    function ownerUnenrollReplica(address _replica) external onlyOwner {

        _unenrollReplica(_replica);

    }



    /**

     * @notice Allow Owner to set Watcher permissions for a Replica

     * @param _watcher the address of the Watcher

     * @param _domain the remote domain of the Home contract for the Replica

     * @param _access TRUE to give the Watcher permissions, FALSE to remove permissions

     */

    function setWatcherPermission(

        address _watcher,

        uint32 _domain,

        bool _access

    ) external onlyOwner {

        watcherPermissions[_watcher][_domain] = _access;

        emit WatcherPermissionSet(_domain, _watcher, _access);

    }



    /**

     * @notice Query local domain from Home

     * @return local domain

     */

    function localDomain() external view returns (uint32) {

        return home.localDomain();

    }



    /**

     * @notice Get access permissions for the watcher on the domain

     * @param _watcher the address of the watcher

     * @param _domain the domain to check for watcher permissions

     * @return TRUE iff _watcher has permission to un-enroll replicas on _domain

     */

    function watcherPermission(address _watcher, uint32 _domain)

        external

        view

        returns (bool)

    {

        return watcherPermissions[_watcher][_domain];

    }



    // ============ Public Functions ============



    /**

     * @notice Check whether _replica is enrolled

     * @param _replica the replica to check for enrollment

     * @return TRUE iff _replica is enrolled

     */

    function isReplica(address _replica) public view returns (bool) {

        return replicaToDomain[_replica] != 0;

    }



    // ============ Internal Functions ============



    /**

     * @notice Remove the replica from the two-way mappings

     * @param _replica replica to un-enroll

     */

    function _unenrollReplica(address _replica) internal {

        uint32 _currentDomain = replicaToDomain[_replica];

        domainToReplica[_currentDomain] = address(0);

        replicaToDomain[_replica] = 0;

        emit ReplicaUnenrolled(_currentDomain, _replica);

    }



    /**

     * @notice Get the Watcher address from the provided signature

     * @return address of watcher that signed

     */

    function _recoverWatcherFromSig(

        uint32 _domain,

        bytes32 _replica,

        bytes32 _updater,

        bytes memory _signature

    ) internal view returns (address) {

        bytes32 _homeDomainHash = Replica(TypeCasts.bytes32ToAddress(_replica))

            .homeDomainHash();

        bytes32 _digest = keccak256(

            abi.encodePacked(_homeDomainHash, _domain, _updater)

        );

        _digest = ECDSA.toEthSignedMessageHash(_digest);

        return ECDSA.recover(_digest, _signature);

    }

}

--------------------------------------------------
File End
--------------------------------------------------

{
  "contract": "QBridge",
  "source_code_path": "../contracts/",
  "type": "",
  "vulnerable_entry_function": {
    "file": "",
    "name": "",
    "signature": "",
    "lines": "",
    "attack_type": "",
    "vul_reason": "",
    "code_snippet": ""
  },
  "detail": "",
  "blg": {
    "QBridge": {
      "interoperability": "heterogeneous",
      "roles": {
        "src_chain": [
          "Deposit1"
        ],
        "rel_chain": [
          "ProposalVote",
          "ProposalEvent"
        ],
        "det_chain": [
          "Transfer1"
        ]
      },
      "src_chain": {
        "chain_name": "source_chain",
        "events": {
          "Deposit1": {
            "0": {
              "func_name": "deposit",
              "file_name": "QBridge.sol",
              "key_ops": [
                "require(msg.value == fee, \"QBridge: invalid fee\")",
                "require(handler != address(0), \"QBridge: invalid resourceID\")"
              ],
              "child": {
                "0": {
                  "func_name": "deposit",
                  "file_name": "QBridgeHandler.sol",
                  "key_ops": [
                    "require(contractWhitelist[tokenAddress], \"provided tokenAddress is not whitelisted\")",
                    "if (burnList[tokenAddress]) { require(amount >= withdrawalFees[resourceID], \"less than withdrawal fee\"); QBridgeToken(tokenAddress).burnFrom(depositer, amount); } else { require(amount >= minAmounts[resourceID][option], \"less than minimum amount\"); tokenAddress.safeTransferFrom(depositer, address(this), amount); }"
                  ],
                  "child": {}
                }
              }
            }
          }
        }
      },
      "rel_chain": {
        "chain_name": "relay_chain",
        "events": {
          "ProposalVote": {
            "0": {
              "func_name": "voteProposal",
              "file_name": "QBridge.sol",
              "key_ops": [
                "require(handlerAddress != address(0), \"QBridge: invalid handler\")",
                "require(uint(proposal._status) <= 1, \"QBridge: proposal already executed/cancelled\")",
                "require(!_hasVoted(proposal, msg.sender), \"QBridge: relayer already voted\")"
              ],
              "child": {
                "0": {
                  "func_name": "_hasVoted",
                  "file_name": "QBridge.sol",
                  "key_ops": [],
                  "child": {}
                }
              }
            }
          },
          "ProposalEvent": {
            "0": {
              "func_name": "executeProposal",
              "file_name": "QBridge.sol",
              "key_ops": [
                "require(proposal._status == ProposalStatus.Passed, \"QBridge: Proposal must have Passed status\")",
                "proposal._status = ProposalStatus.Executed"
              ],
              "child": {
                "0": {
                  "func_name": "executeProposal",
                  "file_name": "QBridgeHandler.sol",
                  "key_ops": [
                    "require(contractWhitelist[tokenAddress], \"provided tokenAddress is not whitelisted\")",
                    "if (delegatorAddress == address(0)) { QBridgeToken(tokenAddress).mint(recipientAddress, amount); } else { QBridgeToken(tokenAddress).mint(delegatorAddress, amount); IQBridgeDelegator(delegatorAddress).delegate(tokenAddress, recipientAddress, option, amount); }"
                  ],
                  "child": {}
                }
              }
            }
          }
        }
      },
      "det_chain": {
        "chain_name": "destination_chain",
        "events": {
          "Transfer1": {
            "0": {
              "func_name": "mint",
              "file_name": "QBridgeToken.sol",
              "key_ops": [
                "_mint(recipientAddress, amount)"
              ],
              "child": {
                "0": {
                  "func_name": "_mint",
                  "file_name": "BEP20Upgradeable.sol",
                  "key_ops": [
                    "require(account != address(0), \"BEP20: mint to the zero address\");",
                    "_balances[account] = _balances[account].add(amount)",
                    "_totalSupply = _totalSupply.add(amount)",
                    "emit Transfer(address(0), account, amount)"
                  ],
                  "child": {}
                }
              }
            }
          }
        }
      }
    }
  },
  "cag": []
}
{
  "contract": "Holograph Bridge",
  "source_code_path": "../contracts/",
  "type": "",
  "vulnerable_entry_function": {
    "file": "",
    "name": "",
    "signature": "",
    "lines": "",
    "attack_type": "",
    "vul_reason": "",
    "code_snippet": ""
  },
  "detail": "",
  "blg": {
    "Holograph Bridge": {
      "interoperability": "heterogeneous",
      "roles": {
        "src_chain": [
          "bridgeIn1"
        ],
        "rel_chain": [
          "lzReceive"
        ],
        "det_chain": [
          "bridgeIn1",
          "bridgeOut2"
        ]
      },
      "src_chain": {
        "chain_name": "source chain",
        "events": {
          "bridgeIn1": {
            "0": {
              "func_name": "bridgeIn",
              "file_name": "HolographERC721.sol",
              "key_ops": [
                "require(!_exists(tokenId), 'ERC721: token already exists');",
                "delete _burnedTokens[tokenId];",
                "_mint(to, tokenId);"
              ],
              "child": {
                "0": {
                  "func_name": "lzReceive",
                  "file_name": "LayerZeroModule.sol",
                  "key_ops": [],
                  "child": {}
                }
              }
            }
          }
        }
      },
      "rel_chain": {
        "chain_name": "relay chain",
        "events": {
          "lzReceive": {
            "0": {
              "func_name": "lzReceive",
              "file_name": "LayerZeroModule.sol",
              "key_ops": [],
              "child": {}
            }
          }
        }
      },
      "det_chain": {
        "chain_name": "destination chain",
        "events": {
          "bridgeIn1": {
            "0": {
              "func_name": "bridgeIn",
              "file_name": "HolographERC721.sol",
              "key_ops": [
                "require(!_exists(tokenId), 'ERC721: token already exists');",
                "delete _burnedTokens[tokenId];",
                "_mint(to, tokenId);",
                "if (_isEventRegistered(HolographERC721Event.bridgeIn)) { require(_sourceCall(abi.encodeWithSelector(HolographedERC721.bridgeIn.selector, fromChain, from, to, tokenId, data)), 'HOLOGRAPH: bridge in failed'); }"
              ],
              "child": {}
            }
          },
          "bridgeOut2": {
            "0": {
              "func_name": "bridgeOut",
              "file_name": "HolographERC721.sol",
              "key_ops": [
                "require(to != address(0), 'ERC721: zero address');",
                "require(_isApproved(sender, tokenId), 'ERC721: sender not approved');",
                "require(from == _tokenOwner[tokenId], 'ERC721: from is not owner');",
                "if (_isEventRegistered(HolographERC721Event.bridgeOut)) ",
                "bytes memory sourcePayload = abi.encodeWithSelector(HolographedERC721.bridgeOut.selector, toChain, from, to, tokenId);",
                "assembly { mstore(add(sourcePayload, add(mload(sourcePayload), 0x20)), caller()) }",
                "let result := call(gas(), sload(_sourceContractSlot), callvalue(), add(sourcePayload, 0x20), add(mload(sourcePayload), 0x20), 0, 0)",
                "returndatacopy(data, 0x20, sub(returndatasize(), 0x20))",
                "switch result case 0 { revert(0, returndatasize()) "
              ],
              "child": {}
            }
          }
        }
      }
    }
  },
  "cag": []
}
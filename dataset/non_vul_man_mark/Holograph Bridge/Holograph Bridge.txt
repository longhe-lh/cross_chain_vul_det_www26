Folder Structure
--------------------------------------------------
contracts/
    Address.sol
    AddressMintDetails.sol
    Admin.sol
    Base64.sol
    BridgeSettings.sol
    Bytes.sol
    ChainIdType.sol
    CollectionURI.sol
    Configuration.sol
    CrossChainMessageInterface.sol
    CxipERC721.sol
    CxipERC721Proxy.sol
    DeploymentConfig.sol
    DropsInitializer.sol
    DropsMetadataRenderer.sol
    DropsMetadataRendererProxy.sol
    DropsPriceOracleArbitrumNova.sol
    DropsPriceOracleArbitrumOne.sol
    DropsPriceOracleArbitrumTestnetGoerli.sol
    DropsPriceOracleAvalanche.sol
    DropsPriceOracleAvalancheTestnet.sol
    DropsPriceOracleBase.sol
    DropsPriceOracleBaseTestnetGoerli.sol
    DropsPriceOracleBinanceSmartChain.sol
    DropsPriceOracleBinanceSmartChainTestnet.sol
    DropsPriceOracleEthereum.sol
    DropsPriceOracleEthereumTestnetGoerli.sol
    DropsPriceOracleMantle.sol
    DropsPriceOracleMantleTestnet.sol
    DropsPriceOracleOptimism.sol
    DropsPriceOracleOptimismTestnetGoerli.sol
    DropsPriceOraclePolygon.sol
    DropsPriceOraclePolygonTestnet.sol
    DropsPriceOracleProxy.sol
    DropsPriceOracleZora.sol
    DropsPriceOracleZoraTestnetGoerli.sol
    DummyDropsPriceOracle.sol
    ECDSA.sol
    EditionsMetadataRenderer.sol
    EditionsMetadataRendererProxy.sol
    EIP712.sol
    ERC1155H.sol
    ERC1271.sol
    ERC165.sol
    ERC20.sol
    ERC20Burnable.sol
    ERC20H.sol
    ERC20Metadata.sol
    ERC20Mock.sol
    ERC20Permit.sol
    ERC20Receiver.sol
    ERC20Safer.sol
    ERC721.sol
    ERC721Enumerable.sol
    ERC721H.sol
    ERC721Metadata.sol
    ERC721TokenReceiver.sol
    Faucet.sol
    GasParameters.sol
    GenericH.sol
    HLGERC20H.sol
    Holograph.sol
    Holographable.sol
    HolographBridge.sol
    HolographBridgeInterface.sol
    HolographBridgeProxy.sol
    HolographDropERC721.sol
    HolographDropERC721Proxy.sol
    HolographedERC1155.sol
    HolographedERC20.sol
    HolographedERC721.sol
    HolographedGeneric.sol
    Holographer.sol
    HolographERC20.sol
    HolographERC20Event.sol
    HolographERC20Interface.sol
    HolographERC721.sol
    HolographERC721Event.sol
    HolographERC721Interface.sol
    HolographerInterface.sol
    HolographFactory.sol
    HolographFactoryInterface.sol
    HolographFactoryProxy.sol
    HolographGeneric.sol
    HolographGenericEvent.sol
    HolographGenericInterface.sol
    HolographGenesis.sol
    HolographInterface.sol
    HolographInterfaces.sol
    HolographInterfacesInterface.sol
    HolographOperator.sol
    HolographOperatorInterface.sol
    HolographOperatorProxy.sol
    HolographRegistry.sol
    HolographRegistryInterface.sol
    HolographRegistryProxy.sol
    HolographRoyalties.sol
    HolographRoyaltiesInterface.sol
    HolographTreasury.sol
    HolographTreasuryInterface.sol
    HolographTreasuryProxy.sol
    HolographUtilityToken.sol
    hToken.sol
    hTokenProxy.sol
    IDropsPriceOracle.sol
    IHolographDropERC721.sol
    ILBPair.sol
    ILBRouter.sol
    IMetadataRenderer.sol
    Initializable.sol
    InitializableInterface.sol
    InterfaceType.sol
    IOperatorFilterRegistry.sol
    IUniswapV2Pair.sol
    IUniswapV3Pair.sol
    IUniswapV3Quoter.sol
    LayerZeroEndpointInterface.sol
    LayerZeroModule.sol
    LayerZeroModuleInterface.sol
    LayerZeroModuleProxy.sol
    LayerZeroOverrides.sol
    LayerZeroReceiverInterface.sol
    LayerZeroUserApplicationConfigInterface.sol
    LZEndpointMock.sol
    MerkleProof.sol
    MetadataRenderAdminCheck.sol
    Mock.sol
    MockERC721Receiver.sol
    MockExternalCall.sol
    MockHolographChild.sol
    MockHolographGenesisChild.sol
    MockLZEndpoint.sol
    NFTMetadataRenderer.sol
    NonReentrant.sol
    OperatorJob.sol
    OVM_GasPriceOracle.sol
    Ownable.sol
    Owner.sol
    SaleDetails.sol
    SalesConfiguration.sol
    SampleERC20.sol
    SampleERC721.sol
    StrictERC1155H.sol
    StrictERC20H.sol
    StrictERC721H.sol
    Strings.sol
    TempHtokenFix.sol
    TokenUriType.sol
    Verification.sol
    ZoraBidShares.sol
    ZoraDecimal.sol


File Contents
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Address.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



library Address {

  function isContract(address account) internal view returns (bool) {

    // This method relies on extcodesize/address.code.length, which returns 0

    // for contracts in construction, since the code is only stored at the end

    // of the constructor execution.



    return account.code.length > 0;

  }



  /**

   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

   * but performing a delegate call.

   *

   * _Available since v3.4._

   */

  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {

    return functionDelegateCall(target, data, "Address: low-level delegate call failed");

  }



  /**

   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],

   * but performing a delegate call.

   *

   * _Available since v3.4._

   */

  function functionDelegateCall(

    address target,

    bytes memory data,

    string memory errorMessage

  ) internal returns (bytes memory) {

    (bool success, bytes memory returndata) = target.delegatecall(data);

    return verifyCallResultFromTarget(target, success, returndata, errorMessage);

  }



  /**

   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling

   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.

   *

   * _Available since v4.8._

   */

  function verifyCallResultFromTarget(

    address target,

    bool success,

    bytes memory returndata,

    string memory errorMessage

  ) internal view returns (bytes memory) {

    if (success) {

      if (returndata.length == 0) {

        // only check isContract if the call was successful and the return data is empty

        // otherwise we already know that it was a contract

        require(isContract(target), "Address: call to non-contract");

      }

      return returndata;

    } else {

      _revert(returndata, errorMessage);

    }

  }



  function _revert(bytes memory returndata, string memory errorMessage) private pure {

    // Look for revert reason and bubble it up if present

    if (returndata.length > 0) {

      // The easiest way to bubble the revert reason is using memory via assembly

      /// @solidity memory-safe-assembly

      assembly {

        let returndata_size := mload(returndata)

        revert(add(32, returndata), returndata_size)

      }

    } else {

      revert(errorMessage);

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\AddressMintDetails.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



/// @notice Return type of specific mint counts and details per address

struct AddressMintDetails {

  /// Number of total mints from the given address

  uint256 totalMints;

  /// Number of presale mints from the given address

  uint256 presaleMints;

  /// Number of public mints from the given address

  uint256 publicMints;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Admin.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



abstract contract Admin {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.admin')) - 1)

   */

  bytes32 constant _adminSlot = 0x3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c9;



  modifier onlyAdmin() {

    require(msg.sender == getAdmin(), "HOLOGRAPH: admin only function");

    _;

  }



  constructor() {}



  function admin() public view returns (address) {

    return getAdmin();

  }



  function getAdmin() public view returns (address adminAddress) {

    assembly {

      adminAddress := sload(_adminSlot)

    }

  }



  function setAdmin(address adminAddress) public onlyAdmin {

    assembly {

      sstore(_adminSlot, adminAddress)

    }

  }



  function adminCall(address target, bytes calldata data) external payable onlyAdmin {

    assembly {

      calldatacopy(0, data.offset, data.length)

      let result := call(gas(), target, callvalue(), 0, data.length, 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Base64.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



library Base64 {

  bytes private constant base64stdchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  bytes private constant base64urlchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";



  function encode(string memory _str) internal pure returns (string memory) {

    bytes memory _bs = bytes(_str);

    return encode(_bs);

  }



  function encode(bytes memory _bs) internal pure returns (string memory) {

    uint256 rem = _bs.length % 3;



    uint256 res_length = ((_bs.length + 2) / 3) * 4 - ((3 - rem) % 3);

    bytes memory res = new bytes(res_length);



    uint256 i = 0;

    uint256 j = 0;



    for (; i + 3 <= _bs.length; i += 3) {

      (res[j], res[j + 1], res[j + 2], res[j + 3]) = encode3(uint8(_bs[i]), uint8(_bs[i + 1]), uint8(_bs[i + 2]));



      j += 4;

    }



    if (rem != 0) {

      uint8 la0 = uint8(_bs[_bs.length - rem]);

      uint8 la1 = 0;



      if (rem == 2) {

        la1 = uint8(_bs[_bs.length - 1]);

      }



      (bytes1 b0, bytes1 b1, bytes1 b2 /* bytes1 b3*/, ) = encode3(la0, la1, 0);

      res[j] = b0;

      res[j + 1] = b1;

      if (rem == 2) {

        res[j + 2] = b2;

      }

    }



    return string(res);

  }



  function encode3(

    uint256 a0,

    uint256 a1,

    uint256 a2

  ) private pure returns (bytes1 b0, bytes1 b1, bytes1 b2, bytes1 b3) {

    uint256 n = (a0 << 16) | (a1 << 8) | a2;



    uint256 c0 = (n >> 18) & 63;

    uint256 c1 = (n >> 12) & 63;

    uint256 c2 = (n >> 6) & 63;

    uint256 c3 = (n) & 63;



    b0 = base64urlchars[c0];

    b1 = base64urlchars[c1];

    b2 = base64urlchars[c2];

    b3 = base64urlchars[c3];

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\BridgeSettings.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



struct BridgeSettings {

  uint256 value;

  uint256 gasLimit;

  uint256 gasPrice;

  uint32 toChain;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Bytes.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



library Bytes {

  function getBoolean(uint192 _packedBools, uint192 _boolNumber) internal pure returns (bool) {

    uint192 flag = (_packedBools >> _boolNumber) & uint192(1);

    return (flag == 1 ? true : false);

  }



  function setBoolean(uint192 _packedBools, uint192 _boolNumber, bool _value) internal pure returns (uint192) {

    if (_value) {

      return _packedBools | (uint192(1) << _boolNumber);

    } else {

      return _packedBools & ~(uint192(1) << _boolNumber);

    }

  }



  function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {

    require(_length + 31 >= _length, "slice_overflow");

    require(_bytes.length >= _start + _length, "slice_outOfBounds");

    bytes memory tempBytes;

    assembly {

      switch iszero(_length)

      case 0 {

        tempBytes := mload(0x40)

        let lengthmod := and(_length, 31)

        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))

        let end := add(mc, _length)

        for {

          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)

        } lt(mc, end) {

          mc := add(mc, 0x20)

          cc := add(cc, 0x20)

        } {

          mstore(mc, mload(cc))

        }

        mstore(tempBytes, _length)

        mstore(0x40, and(add(mc, 31), not(31)))

      }

      default {

        tempBytes := mload(0x40)

        mstore(tempBytes, 0)

        mstore(0x40, add(tempBytes, 0x20))

      }

    }

    return tempBytes;

  }



  function trim(bytes32 source) internal pure returns (bytes memory) {

    uint256 temp = uint256(source);

    uint256 length = 0;

    while (temp != 0) {

      length++;

      temp >>= 8;

    }

    return slice(abi.encodePacked(source), 32 - length, length);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ChainIdType.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



enum ChainIdType {

  UNDEFINED, //  0

  EVM, //        1

  HOLOGRAPH, //  2

  LAYERZERO, //  3

  HYPERLANE //   4

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\CollectionURI.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



interface CollectionURI {

  function contractURI() external view returns (string memory);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Configuration.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {IMetadataRenderer} from "../interface/IMetadataRenderer.sol";



/// @notice General configuration for NFT Minting and bookkeeping

struct Configuration {

  /// @dev Metadata renderer (uint160)

  IMetadataRenderer metadataRenderer;

  /// @dev Total size of edition that can be minted (uint160+64 = 224)

  uint64 editionSize;

  /// @dev Royalty amount in bps (uint224+16 = 240)

  uint16 royaltyBPS;

  /// @dev Funds recipient for sale (new slot, uint160)

  address payable fundsRecipient;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\CrossChainMessageInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



interface CrossChainMessageInterface {

  function send(

    uint256 gasLimit,

    uint256 gasPrice,

    uint32 toChain,

    address msgSender,

    uint256 msgValue,

    bytes calldata crossChainPayload

  ) external payable;



  function getMessageFee(

    uint32 toChain,

    uint256 gasLimit,

    uint256 gasPrice,

    bytes calldata crossChainPayload

  ) external view returns (uint256 hlgFee, uint256 msgFee, uint256 dstGasPrice);



  function getHlgFee(

    uint32 toChain,

    uint256 gasLimit,

    uint256 gasPrice,

    bytes calldata crossChainPayload

  ) external view returns (uint256 hlgFee);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\CxipERC721.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/ERC721H.sol";



import "../enum/TokenUriType.sol";



import "../interface/HolographERC721Interface.sol";

import "../interface/HolographInterfacesInterface.sol";

import "../interface/HolographInterface.sol";

import "../interface/HolographerInterface.sol";



/**

 * @title CXIP ERC-721 Collection that is bridgeable via Holograph

 * @author Holograph Foundation

 * @notice A smart contract for minting and managing Holograph Bridgeable ERC721 NFTs.

 * @dev The entire logic and functionality of the smart contract is self-contained.

 */

contract CxipERC721 is ERC721H {

  /**

   * @dev Internal reference used for minting incremental token ids.

   */

  uint224 private _currentTokenId;



  /**

   * @dev Enum of type of token URI to use globally for the entire contract.

   */

  TokenUriType private _uriType;



  /**

   * @dev Enum mapping of type of token URI to use for specific tokenId.

   */

  mapping(uint256 => TokenUriType) private _tokenUriType;



  /**

   * @dev Mapping of IPFS URIs for tokenIds.

   */

  mapping(uint256 => mapping(TokenUriType => string)) private _tokenURIs;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    // we set this as default type since that's what Mint is currently using

    _uriType = TokenUriType.IPFS;

    address owner = abi.decode(initPayload, (address));

    _setOwner(owner);

    // run underlying initializer logic

    return _init(initPayload);

  }



  /**

   * @notice Get's the URI of the token.

   * @return string The URI.

   */

  function tokenURI(uint256 _tokenId) external view onlyHolographer returns (string memory) {

    TokenUriType uriType = _tokenUriType[_tokenId];

    if (uriType == TokenUriType.UNDEFINED) {

      uriType = _uriType;

    }

    return

      string(

        abi.encodePacked(

          HolographInterfacesInterface(

            HolographInterface(HolographerInterface(holographer()).getHolograph()).getInterfaces()

          ).getUriPrepend(uriType),

          _tokenURIs[_tokenId][uriType]

        )

      );

  }



  function cxipMint(

    uint224 tokenId,

    TokenUriType uriType,

    string calldata tokenUri

  ) external onlyHolographer onlyOwner {

    HolographERC721Interface H721 = HolographERC721Interface(holographer());

    uint256 chainPrepend = H721.sourceGetChainPrepend();

    if (tokenId == 0) {

      _currentTokenId += 1;

      while (

        H721.exists(chainPrepend + uint256(_currentTokenId)) || H721.burned(chainPrepend + uint256(_currentTokenId))

      ) {

        _currentTokenId += 1;

      }

      tokenId = _currentTokenId;

    }

    H721.sourceMint(msgSender(), tokenId);

    uint256 id = chainPrepend + uint256(tokenId);

    if (uriType == TokenUriType.UNDEFINED) {

      uriType = _uriType;

    }

    _tokenUriType[id] = uriType;

    _tokenURIs[id][uriType] = tokenUri;

  }



  function bridgeIn(

    uint32 /* _chainId*/,

    address /* _from*/,

    address /* _to*/,

    uint256 _tokenId,

    bytes calldata _data

  ) external onlyHolographer returns (bool) {

    (TokenUriType uriType, string memory tokenUri) = abi.decode(_data, (TokenUriType, string));

    _tokenUriType[_tokenId] = uriType;

    _tokenURIs[_tokenId][uriType] = tokenUri;

    return true;

  }



  function bridgeOut(

    uint32 /* _chainId*/,

    address /* _from*/,

    address /* _to*/,

    uint256 _tokenId

  ) external view onlyHolographer returns (bytes memory _data) {

    TokenUriType uriType = _tokenUriType[_tokenId];

    if (uriType == TokenUriType.UNDEFINED) {

      uriType = _uriType;

    }

    _data = abi.encode(uriType, _tokenURIs[_tokenId][uriType]);

  }



  function afterBurn(address /* _owner*/, uint256 _tokenId) external onlyHolographer returns (bool) {

    TokenUriType uriType = _tokenUriType[_tokenId];

    if (uriType == TokenUriType.UNDEFINED) {

      uriType = _uriType;

    }

    delete _tokenURIs[_tokenId][uriType];

    return true;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\CxipERC721Proxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



import "../interface/InitializableInterface.sol";

import "../interface/HolographRegistryInterface.sol";



contract CxipERC721Proxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.contractType')) - 1)

   */

  bytes32 constant _contractTypeSlot = 0x0b671eb65810897366dd82c4cbb7d9dff8beda8484194956e81e89b8a361d9c7;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)

   */

  bytes32 constant _registrySlot = 0xce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e7;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (bytes32 contractType, address registry, bytes memory initCode) = abi.decode(data, (bytes32, address, bytes));

    assembly {

      sstore(_contractTypeSlot, contractType)

      sstore(_registrySlot, registry)

    }

    (bool success, bytes memory returnData) = getCxipERC721Source().delegatecall(

      abi.encodeWithSignature("init(bytes)", initCode)

    );

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == InitializableInterface.init.selector, "initialization failed");



    _setInitialized();

    return InitializableInterface.init.selector;

  }



  function getCxipERC721Source() public view returns (address) {

    HolographRegistryInterface registry;

    bytes32 contractType;

    assembly {

      registry := sload(_registrySlot)

      contractType := sload(_contractTypeSlot)

    }

    return registry.getContractTypeAddress(contractType);

  }



  receive() external payable {}



  fallback() external payable {

    address cxipErc721Source = getCxipERC721Source();

    assembly {

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), cxipErc721Source, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DeploymentConfig.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



struct DeploymentConfig {

  bytes32 contractType;

  uint32 chainType;

  bytes32 salt;

  bytes byteCode;

  bytes initCode;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsInitializer.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {SalesConfiguration} from "./SalesConfiguration.sol";



/// @param erc721TransferHelper Transfer helper contract

/// @param marketFilterAddress Market filter address - Manage subscription to the for marketplace filtering based off royalty payouts.

/// @param initialOwner User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.

/// @param fundsRecipient Wallet/user that receives funds from sale

/// @param editionSize Number of editions that can be minted in total. If type(uint64).max, unlimited editions can be minted as an open edition.

/// @param royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.

/// @param salesConfiguration The initial SalesConfiguration

/// @param metadataRenderer Renderer contract to use

/// @param metadataRendererInit Renderer data initial contract

struct DropsInitializer {

  address erc721TransferHelper;

  address marketFilterAddress;

  address initialOwner;

  address payable fundsRecipient;

  uint64 editionSize;

  uint16 royaltyBPS;

  bool enableOpenSeaRoyaltyRegistry;

  SalesConfiguration salesConfiguration;

  address metadataRenderer;

  bytes metadataRendererInit;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsMetadataRenderer.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Initializable} from "../../abstract/Initializable.sol";



import {IMetadataRenderer} from "../interface/IMetadataRenderer.sol";



import {Strings} from "../library/Strings.sol";



import {MetadataRenderAdminCheck} from "./MetadataRenderAdminCheck.sol";



/// @notice Drops metadata system

contract DropsMetadataRenderer is Initializable, IMetadataRenderer, MetadataRenderAdminCheck {

  error MetadataFrozen();



  /// Event to mark updated metadata information

  event MetadataUpdated(

    address indexed target,

    string metadataBase,

    string metadataExtension,

    string contractURI,

    uint256 freezeAt

  );



  /// @notice Hash to mark updated provenance hash

  event ProvenanceHashUpdated(address indexed target, bytes32 provenanceHash);



  /// @notice Struct to store metadata info and update data

  struct MetadataURIInfo {

    string base;

    string extension;

    string contractURI;

    uint256 freezeAt;

  }



  /// @notice NFT metadata by contract

  mapping(address => MetadataURIInfo) public metadataBaseByContract;



  /// @notice Optional provenance hashes for NFT metadata by contract

  mapping(address => bytes32) public provenanceHashes;



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @dev A blank init function is required to be able to call genesisDeriveFutureAddress to get the deterministic address

   * @dev Since no data is required to be intialized the selector is just returned and _setInitialized() does not need to be called

   */

  function init(bytes memory /* initPayload */) external pure override returns (bytes4) {

    return Initializable.init.selector;

  }



  /// @notice Standard init for drop metadata from root drop contract

  /// @param data passed in for initialization

  function initializeWithData(bytes memory data) external {

    // data format: string baseURI, string newContractURI

    (string memory initialBaseURI, string memory initialContractURI) = abi.decode(data, (string, string));

    _updateMetadataDetails(msg.sender, initialBaseURI, "", initialContractURI, 0);

  }



  /// @notice Update the provenance hash (optional) for a given nft

  /// @param target target address to update

  /// @param provenanceHash provenance hash to set

  function updateProvenanceHash(address target, bytes32 provenanceHash) external requireSenderAdmin(target) {

    provenanceHashes[target] = provenanceHash;

    emit ProvenanceHashUpdated(target, provenanceHash);

  }



  /// @notice Update metadata base URI and contract URI

  /// @param baseUri new base URI

  /// @param newContractUri new contract URI (can be an empty string)

  function updateMetadataBase(

    address target,

    string memory baseUri,

    string memory newContractUri

  ) external requireSenderAdmin(target) {

    _updateMetadataDetails(target, baseUri, "", newContractUri, 0);

  }



  /// @notice Update metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing details

  /// @param target target contract to update metadata for

  /// @param metadataBase new base URI to update metadata with

  /// @param metadataExtension new extension to append to base metadata URI

  /// @param freezeAt time to freeze the contract metadata at (set to 0 to disable)

  function updateMetadataBaseWithDetails(

    address target,

    string memory metadataBase,

    string memory metadataExtension,

    string memory newContractURI,

    uint256 freezeAt

  ) external requireSenderAdmin(target) {

    _updateMetadataDetails(target, metadataBase, metadataExtension, newContractURI, freezeAt);

  }



  /// @notice Internal metadata update function

  /// @param metadataBase Base URI to update metadata for

  /// @param metadataExtension Extension URI to update metadata for

  /// @param freezeAt timestamp to freeze metadata (set to 0 to disable freezing)

  function _updateMetadataDetails(

    address target,

    string memory metadataBase,

    string memory metadataExtension,

    string memory newContractURI,

    uint256 freezeAt

  ) internal {

    if (freezeAt != 0 && freezeAt > block.timestamp) {

      revert MetadataFrozen();

    }



    metadataBaseByContract[target] = MetadataURIInfo({

      base: metadataBase,

      extension: metadataExtension,

      contractURI: newContractURI,

      freezeAt: freezeAt

    });

    emit MetadataUpdated({

      target: target,

      metadataBase: metadataBase,

      metadataExtension: metadataExtension,

      contractURI: newContractURI,

      freezeAt: freezeAt

    });

  }



  /// @notice A contract URI for the given drop contract

  /// @dev reverts if a contract uri is not provided

  /// @return contract uri for the contract metadata

  function contractURI() external view override returns (string memory) {

    string memory uri = metadataBaseByContract[msg.sender].contractURI;

    if (bytes(uri).length == 0) revert();

    return uri;

  }



  /// @notice A token URI for the given drops contract

  /// @dev reverts if a contract uri is not set

  /// @return token URI for the given token ID and contract (set by msg.sender)

  function tokenURI(uint256 tokenId) external view override returns (string memory) {

    MetadataURIInfo memory info = metadataBaseByContract[msg.sender];



    if (bytes(info.base).length == 0) revert();



    return string(abi.encodePacked(info.base, Strings.toString(tokenId), info.extension));

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsMetadataRendererProxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../../abstract/Admin.sol";

import "../../abstract/Initializable.sol";



contract DropsMetadataRendererProxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.dropsMetadataRenderer')) - 1)

   */

  bytes32 constant _dropsMetadataRendererSlot = 0xe1d18664c68b1eedd4e2fc65b2d42097f2cd8cd4c2f1a9a6418986c9f5da3817;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address dropsMetadataRenderer, bytes memory initCode) = abi.decode(data, (address, bytes));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_dropsMetadataRendererSlot, dropsMetadataRenderer)

    }

    (bool success, bytes memory returnData) = dropsMetadataRenderer.delegatecall(

      abi.encodeWithSignature("init(bytes)", initCode)

    );

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == Initializable.init.selector, "initialization failed");

    _setInitialized();

    return Initializable.init.selector;

  }



  function getDropsMetadataRenderer() external view returns (address dropsMetadataRenderer) {

    assembly {

      dropsMetadataRenderer := sload(_dropsMetadataRendererSlot)

    }

  }



  function setDropsMetadataRenderer(address dropsMetadataRenderer) external onlyAdmin {

    assembly {

      sstore(_dropsMetadataRendererSlot, dropsMetadataRenderer)

    }

  }



  receive() external payable {}



  fallback() external payable {

    assembly {

      let dropsMetadataRenderer := sload(_dropsMetadataRendererSlot)

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), dropsMetadataRenderer, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleArbitrumNova.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOracleArbitrumNova is Admin, Initializable, IDropsPriceOracle {

  address constant WETH = 0x0000000000000000000000000000000000000000; // 18 decimals

  address constant USDC = 0x0000000000000000000000000000000000000000; // 6 decimals

  address constant USDT = 0x0000000000000000000000000000000000000000; // 6 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);



  IUniswapV2Pair constant UniV2UsdcPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);

  IUniswapV2Pair constant UniV2UsdtPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    weiAmount =

      (_getSushiUSDC(usdAmount) + _getSushiUSDT(usdAmount) + _getUniUSDC(usdAmount) + _getUniUSDT(usdAmount)) /

      4;

  }



  function _getSushiUSDC(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdcPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getSushiUSDT(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdtPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUniUSDC(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = UniV2UsdcPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUniUSDT(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = UniV2UsdtPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleArbitrumOne.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOracleArbitrumOne is Admin, Initializable, IDropsPriceOracle {

  address constant WETH = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1; // 18 decimals

  address constant USDC = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8; // 6 decimals

  address constant USDT = 0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9; // 6 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0x905dfCD5649217c42684f23958568e533C711Aa3);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0xCB0E5bFa72bBb4d16AB5aA0c60601c438F04b4ad);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    weiAmount = (_getSushiUSDC(usdAmount) + _getSushiUSDT(usdAmount)) / 2;

  }



  function _getSushiUSDC(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdcPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDC

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getSushiUSDT(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdtPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleArbitrumTestnetGoerli.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOracleArbitrumTestnetGoerli is Admin, Initializable, IDropsPriceOracle {

  address constant WETH = 0x0000000000000000000000000000000000000000; // 18 decimals

  address constant USDC = 0x0000000000000000000000000000000000000000; // 6 decimals

  address constant USDT = 0x0000000000000000000000000000000000000000; // 6 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);



  IUniswapV2Pair constant UniV2UsdcPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);

  IUniswapV2Pair constant UniV2UsdtPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external pure returns (uint256 weiAmount) {

    weiAmount = (_getSushiUSDC(usdAmount) + _getSushiUSDT(usdAmount)) / 2;

  }



  function _getSushiUSDC(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdcPool.getReserves();

    uint112 _reserve0 = 14248413024234;

    uint112 _reserve1 = 8237558200010903232972;

    // x is always native token / WETH

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getSushiUSDT(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdtPool.getReserves();

    uint112 _reserve0 = 7190540826553156156218;

    uint112 _reserve1 = 12394808861997;

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleAvalanche.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {ILBPair} from "./interface/ILBPair.sol";

import {ILBRouter} from "./interface/ILBRouter.sol";



contract DropsPriceOracleAvalanche is Admin, Initializable, IDropsPriceOracle {

  address constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7; // 18 decimals

  address constant USDC = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E; // 6 decimals

  address constant USDT = 0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7; // 6 decimals



  ILBRouter constant TraderJoeRouter = ILBRouter(0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30);

  ILBPair constant TraderJoeUsdcPool = ILBPair(0xD446eb1660F766d533BeCeEf890Df7A69d26f7d1);

  ILBPair constant TraderJoeUsdtPool = ILBPair(0x87EB2F90d7D0034571f343fb7429AE22C1Bd9F72);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    if (usdAmount == 0) {

      weiAmount = 0;

      return weiAmount;

    }

    weiAmount = (_getTraderJoeUSDC(usdAmount) + _getTraderJoeUSDT(usdAmount)) / 2;

  }



  function _getTraderJoeUSDC(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint128 amountIn, uint128 amountOutLeft, uint128 fee) = TraderJoeRouter.getSwapIn(

      TraderJoeUsdcPool,

      uint128(usdAmount),

      true

    );

    weiAmount = amountIn + fee;

  }



  function _getTraderJoeUSDT(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint128 amountIn, uint128 amountOutLeft, uint128 fee) = TraderJoeRouter.getSwapIn(

      TraderJoeUsdtPool,

      uint128(usdAmount),

      true

    );

    weiAmount = amountIn + fee;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleAvalancheTestnet.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOracleAvalancheTestnet is Admin, Initializable, IDropsPriceOracle {

  address constant WAVAX = 0xd00ae08403B9bbb9124bB305C09058E32C39A48c;

  address constant USDC = 0x5425890298aed601595a70AB815c96711a31Bc65; // 6 decimals

  address constant USDT = 0x0000000000000000000000000000000000000000; // 6 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0x1B92bf7394d317A758d953F6428445A8977e195C);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external pure returns (uint256 weiAmount) {

    weiAmount = (_getSushiUSDC(usdAmount) + _getSushiUSDT(usdAmount)) / 2;

  }



  function _getSushiUSDC(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdcPool.getReserves();

    uint112 _reserve0 = 133224784402692878349;

    uint112 _reserve1 = 2205199060;

    // x is always native token / WAVAX

    uint256 x = _reserve0;

    // y is always USD token / USDC

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getSushiUSDT(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdtPool.getReserves();

    uint112 _reserve0 = 2205199060;

    uint112 _reserve1 = 133224784402692878349;

    // x is always native token / WAVAX

    uint256 x = _reserve1;

    // y is always USD token / USDT

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleBase.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";



contract DropsPriceOracleBase is Admin, Initializable, IDropsPriceOracle {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.tokenPriceRatio')) - 1)

   */

  bytes32 constant _tokenPriceRatioSlot = 0x562ce994878444f1ca8bcf3afcea513b950965abed659462312e8fdd38c020a1;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

      sstore(_tokenPriceRatioSlot, 0x000000000000000000000000000000000000000000000077432217e683600000)

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    // USD is with 6 decimal places

    // WETH  is with 18 decimal places

    // we add decimal places for USD to match WETH  decimals

    usdAmount = usdAmount * (10 ** (18 - 6));

    // x is always native token / WETH

    // we use precision of 21

    uint256 x = 1000000000000000000 * (10 ** 21);

    // y is always USD token / USDC

    // load token price ratio

    uint256 tokenPriceRatio;

    assembly {

      tokenPriceRatio := sload(_tokenPriceRatioSlot)

    }

    // in our case, we use ratio for defining USD cost of 1 WETH

    // we use precision of 21

    uint256 y = tokenPriceRatio * (10 ** 21);



    uint256 numerator = x * usdAmount;

    uint256 denominator = y - usdAmount;



    weiAmount = (numerator / denominator) + 1;

  }



  function getTokenPriceRatio() external view returns (uint256 tokenPriceRatio) {

    assembly {

      tokenPriceRatio := sload(_tokenPriceRatioSlot)

    }

  }



  function setTokenPriceRatio(uint256 tokenPriceRatio) external onlyAdmin {

    assembly {

      sstore(_tokenPriceRatioSlot, tokenPriceRatio)

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleBaseTestnetGoerli.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";



contract DropsPriceOracleBaseTestnetGoerli is Admin, Initializable, IDropsPriceOracle {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.tokenPriceRatio')) - 1)

   */

  bytes32 constant _tokenPriceRatioSlot = 0x562ce994878444f1ca8bcf3afcea513b950965abed659462312e8fdd38c020a1;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

      sstore(_tokenPriceRatioSlot, 0x0000000000000000000000000000000000000000000000d8d726b7177a800000)

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    // USD is with 6 decimal places

    // WETH  is with 18 decimal places

    // we add decimal places for USD to match WETH  decimals

    usdAmount = usdAmount * (10 ** (18 - 6));

    // x is always native token / WETH

    // we use precision of 21

    uint256 x = 1000000000000000000 * (10 ** 21);

    // y is always USD token / USDC

    // load token price ratio

    uint256 tokenPriceRatio;

    assembly {

      tokenPriceRatio := sload(_tokenPriceRatioSlot)

    }

    // in our case, we use ratio for defining USD cost of 1 WETH

    // we use precision of 21

    uint256 y = tokenPriceRatio * (10 ** 21);



    uint256 numerator = x * usdAmount;

    uint256 denominator = y - usdAmount;



    weiAmount = (numerator / denominator) + 1;

  }



  function getTokenPriceRatio() external view returns (uint256 tokenPriceRatio) {

    assembly {

      tokenPriceRatio := sload(_tokenPriceRatioSlot)

    }

  }



  function setTokenPriceRatio(uint256 tokenPriceRatio) external onlyAdmin {

    assembly {

      sstore(_tokenPriceRatioSlot, tokenPriceRatio)

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleBinanceSmartChain.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOracleBinanceSmartChain is Admin, Initializable, IDropsPriceOracle {

  address constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;

  address constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d; // 18 decimals

  address constant USDT = 0x55d398326f99059fF775485246999027B3197955; // 18 decimals

  address constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // 18 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0xc7632B7b2d768bbb30a404E13E1dE48d1439ec21);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0x2905817b020fD35D9d09672946362b62766f0d69);

  IUniswapV2Pair constant SushiV2BusdPool = IUniswapV2Pair(0xDc558D64c29721d74C4456CfB4363a6e6660A9Bb);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    weiAmount = (_getUSDC(usdAmount) + _getUSDT(usdAmount) + _getBUSD(usdAmount)) / 3;

  }



  function _getUSDC(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    usdAmount = usdAmount * (10 ** (18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdcPool.getReserves();

    // x is always native token / WBNB

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUSDT(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    usdAmount = usdAmount * (10 ** (18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdtPool.getReserves();

    // x is always native token / WBNB

    uint256 x = _reserve1;

    // y is always USD token / USDT

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getBUSD(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    usdAmount = usdAmount * (10 ** (18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2BusdPool.getReserves();

    // x is always native token / WBNB

    uint256 x = _reserve0;

    // y is always USD token / BUSD

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleBinanceSmartChainTestnet.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOracleBinanceSmartChainTestnet is Admin, Initializable, IDropsPriceOracle {

  address constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;

  address constant USDC = 0x0000000000000000000000000000000000000000; // 18 decimals

  address constant USDT = 0x337610d27c682E347C9cD60BD4b3b107C9d34dDd; // 18 decimals

  address constant BUSD = 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee; // 18 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0x622A814A1c842D34F9828370d9015Dc9d4c5b6F1);

  IUniswapV2Pair constant SushiV2BusdPool = IUniswapV2Pair(0x9A0eeceDA5c0203924484F5467cEE4321cf6A189);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external pure returns (uint256 weiAmount) {

    weiAmount = (_getUSDC(usdAmount) + _getUSDT(usdAmount) + _getBUSD(usdAmount)) / 3;

  }



  function _getUSDC(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    usdAmount = usdAmount * (10 ** (18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdcPool.getReserves();

    uint112 _reserve0 = 13021882855694508203763;

    uint112 _reserve1 = 40694382259814793835;

    // x is always native token / WBNB

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUSDT(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    usdAmount = usdAmount * (10 ** (18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdtPool.getReserves();

    uint112 _reserve0 = 27194218672878436248359;

    uint112 _reserve1 = 85236077287017749564;

    // x is always native token / WBNB

    uint256 x = _reserve1;

    // y is always USD token / USDT

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getBUSD(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    usdAmount = usdAmount * (10 ** (18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2BusdPool.getReserves();

    uint112 _reserve0 = 18888866298338593382;

    uint112 _reserve1 = 6055244885106491861952;

    // x is always native token / WBNB

    uint256 x = _reserve0;

    // y is always USD token / BUSD

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleEthereum.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOracleEthereum is Admin, Initializable, IDropsPriceOracle {

  address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // 18 decimals

  address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // 6 decimals

  address constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // 6 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0x397FF1542f962076d0BFE58eA045FfA2d347ACa0);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0x06da0fd433C1A5d7a4faa01111c044910A184553);



  IUniswapV2Pair constant UniV2UsdcPool = IUniswapV2Pair(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc);

  IUniswapV2Pair constant UniV2UsdtPool = IUniswapV2Pair(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    weiAmount =

      (_getSushiUSDC(usdAmount) + _getSushiUSDT(usdAmount) + _getUniUSDC(usdAmount) + _getUniUSDT(usdAmount)) /

      4;

  }



  function _getSushiUSDC(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdcPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getSushiUSDT(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdtPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUniUSDC(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = UniV2UsdcPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUniUSDT(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = UniV2UsdtPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleEthereumTestnetGoerli.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOracleEthereumTestnetGoerli is Admin, Initializable, IDropsPriceOracle {

  address constant WETH = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6; // 18 decimals

  address constant USDC = 0x07865c6E87B9F70255377e024ace6630C1Eaa37F; // 6 decimals

  address constant USDT = 0x0000000000000000000000000000000000000000; // 6 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);



  IUniswapV2Pair constant UniV2UsdcPool = IUniswapV2Pair(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc);

  IUniswapV2Pair constant UniV2UsdtPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external pure returns (uint256 weiAmount) {

    weiAmount =

      (_getSushiUSDC(usdAmount) + _getSushiUSDT(usdAmount) + _getUniUSDC(usdAmount) + _getUniUSDT(usdAmount)) /

      4;

  }



  function _getSushiUSDC(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdcPool.getReserves();

    uint112 _reserve0 = 14248413024234;

    uint112 _reserve1 = 8237558200010903232972;

    // x is always native token / WETH

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getSushiUSDT(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdtPool.getReserves();

    uint112 _reserve0 = 7190540826553156156218;

    uint112 _reserve1 = 12394808861997;

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUniUSDC(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = UniV2UsdcPool.getReserves();

    uint112 _reserve0 = 27969935741431;

    uint112 _reserve1 = 16175569695347837629371;

    // x is always native token / WETH

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUniUSDT(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = UniV2UsdtPool.getReserves();

    uint112 _reserve0 = 16492332449237327237450;

    uint112 _reserve1 = 28443279643692;

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleMantle.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";



contract DropsPriceOracleMantle is Admin, Initializable, IDropsPriceOracle {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.tokenPriceRatio')) - 1)

   */

  bytes32 constant _tokenPriceRatioSlot = 0x562ce994878444f1ca8bcf3afcea513b950965abed659462312e8fdd38c020a1;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

      sstore(_tokenPriceRatioSlot, 0x00000000000000000000000000000000000000000000000006f05b59d3b20000)

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    // USD is with 6 decimal places

    // MNT is with 18 decimal places

    // we add decimal places for USD to match MNT decimals

    usdAmount = usdAmount * (10 ** (18 - 6));

    // x is always native token / WMNT

    // we use precision of 21

    uint256 x = 1000000000000000000 * (10 ** 21);

    // y is always USD token / USDC

    // load token price ratio

    uint256 tokenPriceRatio;

    assembly {

      tokenPriceRatio := sload(_tokenPriceRatioSlot)

    }

    // in our case, we use ratio for defining USD cost of 1 MNT

    // we use precision of 21

    uint256 y = tokenPriceRatio * (10 ** 21);



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 1000;



    weiAmount = (numerator / denominator) + 1;

  }



  function getTokenPriceRatio() external view returns (uint256 tokenPriceRatio) {

    assembly {

      tokenPriceRatio := sload(_tokenPriceRatioSlot)

    }

  }



  function setTokenPriceRatio(uint256 tokenPriceRatio) external onlyAdmin {

    assembly {

      sstore(_tokenPriceRatioSlot, tokenPriceRatio)

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleMantleTestnet.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";



contract DropsPriceOracleMantleTestnet is Admin, Initializable, IDropsPriceOracle {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.tokenPriceRatio')) - 1)

   */

  bytes32 constant _tokenPriceRatioSlot = 0x562ce994878444f1ca8bcf3afcea513b950965abed659462312e8fdd38c020a1;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

      sstore(_tokenPriceRatioSlot, 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000)

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    // USD is with 6 decimal places

    // MNT is with 18 decimal places

    // we add decimal places for USD to match MNT decimals

    usdAmount = usdAmount * (10 ** (18 - 6));

    // x is always native token / WMNT

    // we use precision of 21

    uint256 x = 1000000000000000000 * (10 ** 21);

    // y is always USD token / USDC

    // load token price ratio

    uint256 tokenPriceRatio;

    assembly {

      tokenPriceRatio := sload(_tokenPriceRatioSlot)

    }

    // in our case, we use ratio for defining USD cost of 1 MNT

    // we use precision of 21

    uint256 y = tokenPriceRatio * (10 ** 21);



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 1000;



    weiAmount = (numerator / denominator) + 1;

  }



  function getTokenPriceRatio() external view returns (uint256 tokenPriceRatio) {

    assembly {

      tokenPriceRatio := sload(_tokenPriceRatioSlot)

    }

  }



  function setTokenPriceRatio(uint256 tokenPriceRatio) external onlyAdmin {

    assembly {

      sstore(_tokenPriceRatioSlot, tokenPriceRatio)

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleOptimism.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOracleOptimism is Admin, Initializable, IDropsPriceOracle {

  address constant WETH = 0x4200000000000000000000000000000000000006; // 18 decimals

  address constant USDC = 0x7F5c764cBc14f9669B88837ca1490cCa17c31607; // 6 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0x7086622E6Db990385B102D79CB1218947fb549a9);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    weiAmount = _getSushiUSDC(usdAmount);

  }



  function _getSushiUSDC(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdcPool.getReserves();

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDC

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleOptimismTestnetGoerli.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOracleOptimismTestnetGoerli is Admin, Initializable, IDropsPriceOracle {

  address constant WETH = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6; // 18 decimals

  address constant USDC = 0x07865c6E87B9F70255377e024ace6630C1Eaa37F; // 6 decimals

  address constant USDT = 0x0000000000000000000000000000000000000000; // 6 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);



  IUniswapV2Pair constant UniV2UsdcPool = IUniswapV2Pair(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc);

  IUniswapV2Pair constant UniV2UsdtPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external pure returns (uint256 weiAmount) {

    weiAmount =

      (_getSushiUSDC(usdAmount) + _getSushiUSDT(usdAmount) + _getUniUSDC(usdAmount) + _getUniUSDT(usdAmount)) /

      4;

  }



  function _getSushiUSDC(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdcPool.getReserves();

    uint112 _reserve0 = 14248413024234;

    uint112 _reserve1 = 8237558200010903232972;

    // x is always native token / WETH

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getSushiUSDT(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdtPool.getReserves();

    uint112 _reserve0 = 7190540826553156156218;

    uint112 _reserve1 = 12394808861997;

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUniUSDC(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = UniV2UsdcPool.getReserves();

    uint112 _reserve0 = 27969935741431;

    uint112 _reserve1 = 16175569695347837629371;

    // x is always native token / WETH

    uint256 x = _reserve1;

    // y is always USD token / USDC

    uint256 y = _reserve0;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUniUSDT(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = UniV2UsdtPool.getReserves();

    uint112 _reserve0 = 16492332449237327237450;

    uint112 _reserve1 = 28443279643692;

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOraclePolygon.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOraclePolygon is Admin, Initializable, IDropsPriceOracle {

  address constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270; // 18 decimals

  address constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174; // 6 decimals

  address constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F; // 6 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0xcd353F79d9FADe311fC3119B841e1f456b54e858);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0x55FF76BFFC3Cdd9D5FdbBC2ece4528ECcE45047e);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    weiAmount = (_getUSDC(usdAmount) + _getUSDT(usdAmount)) / 2;

  }



  function _getUSDC(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdcPool.getReserves();

    // x is always native token / WMATIC

    uint256 x = _reserve0;

    // y is always USD token / USDC

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUSDT(uint256 usdAmount) internal view returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    (uint112 _reserve0, uint112 _reserve1, ) = SushiV2UsdtPool.getReserves();

    // x is always native token / WMATIC

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOraclePolygonTestnet.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DropsPriceOraclePolygonTestnet is Admin, Initializable, IDropsPriceOracle {

  address constant WMATIC = 0x5B67676a984807a212b1c59eBFc9B3568a474F0a; // 18 decimals

  address constant USDC = 0x742DfA5Aa70a8212857966D491D67B09Ce7D6ec7; // 6 decimals

  address constant USDT = 0x0000000000000000000000000000000000000000; // 6 decimals



  IUniswapV2Pair constant SushiV2UsdcPool = IUniswapV2Pair(0x412D4b3C56836ff78F1C8197c6718A6DFf3702F5);

  IUniswapV2Pair constant SushiV2UsdtPool = IUniswapV2Pair(0x0000000000000000000000000000000000000000);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external pure returns (uint256 weiAmount) {

    weiAmount = (_getUSDC(usdAmount) + _getUSDT(usdAmount)) / 2;

  }



  function _getUSDC(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdcPool.getReserves();

    uint112 _reserve0 = 185186616552407552407159;

    uint112 _reserve1 = 207981749778;

    // x is always native token / WMATIC

    uint256 x = _reserve0;

    // y is always USD token / USDC

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUSDT(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdtPool.getReserves();

    uint112 _reserve0 = 13799757434002573084812;

    uint112 _reserve1 = 15484391886;

    // x is always native token / WMATIC

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleProxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../../abstract/Admin.sol";

import "../../abstract/Initializable.sol";



contract DropsPriceOracleProxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.dropsPriceOracle')) - 1)

   */

  bytes32 constant _dropsPriceOracleSlot = 0x26600f0171e5a2b86874be26285c66444b2a6fa5f62114757214d5e732aded36;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address dropsPriceOracle, bytes memory initCode) = abi.decode(data, (address, bytes));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_dropsPriceOracleSlot, dropsPriceOracle)

    }

    (bool success, bytes memory returnData) = dropsPriceOracle.delegatecall(

      abi.encodeWithSignature("init(bytes)", initCode)

    );

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == Initializable.init.selector, "initialization failed");

    _setInitialized();

    return Initializable.init.selector;

  }



  function getDropsPriceOracle() external view returns (address dropsPriceOracle) {

    assembly {

      dropsPriceOracle := sload(_dropsPriceOracleSlot)

    }

  }



  function setDropsPriceOracle(address dropsPriceOracle) external onlyAdmin {

    assembly {

      sstore(_dropsPriceOracleSlot, dropsPriceOracle)

    }

  }



  receive() external payable {}



  fallback() external payable {

    assembly {

      let dropsPriceOracle := sload(_dropsPriceOracleSlot)

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), dropsPriceOracle, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleZora.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";



contract DropsPriceOracleZora is Admin, Initializable, IDropsPriceOracle {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.tokenPriceRatio')) - 1)

   */

  bytes32 constant _tokenPriceRatioSlot = 0x562ce994878444f1ca8bcf3afcea513b950965abed659462312e8fdd38c020a1;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

      sstore(_tokenPriceRatioSlot, 0x0000000000000000000000000000000000000000000000878678326eac900000)

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount) {

    // USD is with 6 decimal places

    // WETH  is with 18 decimal places

    // we add decimal places for USD to match WETH  decimals

    usdAmount = usdAmount * (10 ** (18 - 6));

    // x is always native token / WETH

    // we use precision of 21

    uint256 x = 1000000000000000000 * (10 ** 21);

    // y is always USD token / USDC

    // load token price ratio

    uint256 tokenPriceRatio;

    assembly {

      tokenPriceRatio := sload(_tokenPriceRatioSlot)

    }

    // in our case, we use ratio for defining USD cost of 1 WETH

    // we use precision of 21

    uint256 y = tokenPriceRatio * (10 ** 21);



    uint256 numerator = x * usdAmount;

    uint256 denominator = y - usdAmount;



    weiAmount = (numerator / denominator) + 1;

  }



  function getTokenPriceRatio() external view returns (uint256 tokenPriceRatio) {

    assembly {

      tokenPriceRatio := sload(_tokenPriceRatioSlot)

    }

  }



  function setTokenPriceRatio(uint256 tokenPriceRatio) external onlyAdmin {

    assembly {

      sstore(_tokenPriceRatioSlot, tokenPriceRatio)

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DropsPriceOracleZoraTestnetGoerli.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";



contract DropsPriceOracleZoraTestnetGoerli is Admin, Initializable, IDropsPriceOracle {

  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external pure returns (uint256 weiAmount) {

    weiAmount = (_getUSDC(usdAmount) + _getUSDT(usdAmount)) / 2;

  }



  function _getUSDC(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdcPool.getReserves();

    uint112 _reserve0 = 185186616552407552407157;

    uint112 _reserve1 = 207981749778;

    // x is always native token / WMATIC

    uint256 x = _reserve0;

    // y is always USD token / USDC

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }



  function _getUSDT(uint256 usdAmount) internal pure returns (uint256 weiAmount) {

    // add decimal places for amount IF decimals are above 6!

    // usdAmount = usdAmount * (10**(18 - 6));

    // (uint112 _reserve0, uint112 _reserve1,) = SushiV2UsdtPool.getReserves();

    uint112 _reserve0 = 13799757434002573084810;

    uint112 _reserve1 = 15484391886;

    // x is always native token / WMATIC

    uint256 x = _reserve0;

    // y is always USD token / USDT

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\DummyDropsPriceOracle.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {Admin} from "../../abstract/Admin.sol";

import {Initializable} from "../../abstract/Initializable.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";

import {IUniswapV2Pair} from "./interface/IUniswapV2Pair.sol";



contract DummyDropsPriceOracle is Admin, Initializable, IDropsPriceOracle {

  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   */

  function init(bytes memory) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return Initializable.init.selector;

  }



  /**

   * @notice Convert USD value to native gas token value

   * @dev It is important to note that different USD stablecoins use different decimal places.

   * @param usdAmount a 6 decimal places USD amount

   */

  function convertUsdToWei(uint256 usdAmount) external pure returns (uint256 weiAmount) {

    uint112 _reserve0 = 8237558200010903232972;

    uint112 _reserve1 = 14248413024234;

    // x is always native token / WETH

    uint256 x = _reserve0;

    // y is always USD token / USDC

    uint256 y = _reserve1;



    uint256 numerator = (x * usdAmount) * 1000;

    uint256 denominator = (y - usdAmount) * 997;



    weiAmount = (numerator / denominator) + 1;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ECDSA.sol
File type: .sol
// SPDX-License-Identifier: MIT

// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)



pragma solidity 0.8.13;



import "./Strings.sol";



/**

 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.

 *

 * These functions can be used to verify that a message was signed by the holder

 * of the private keys of a given address.

 */

library ECDSA {

  enum RecoverError {

    NoError,

    InvalidSignature,

    InvalidSignatureLength,

    InvalidSignatureS,

    InvalidSignatureV

  }



  function _throwError(RecoverError error) private pure {

    if (error == RecoverError.NoError) {

      return; // no error: do nothing

    } else if (error == RecoverError.InvalidSignature) {

      revert("ECDSA: invalid signature");

    } else if (error == RecoverError.InvalidSignatureLength) {

      revert("ECDSA: invalid signature length");

    } else if (error == RecoverError.InvalidSignatureS) {

      revert("ECDSA: invalid signature 's' value");

    } else if (error == RecoverError.InvalidSignatureV) {

      revert("ECDSA: invalid signature 'v' value");

    }

  }



  /**

   * @dev Returns the address that signed a hashed message (`hash`) with

   * `signature` or error string. This address can then be used for verification purposes.

   *

   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:

   * this function rejects them by requiring the `s` value to be in the lower

   * half order, and the `v` value to be either 27 or 28.

   *

   * IMPORTANT: `hash` _must_ be the result of a hash operation for the

   * verification to be secure: it is possible to craft signatures that

   * recover to arbitrary addresses for non-hashed data. A safe way to ensure

   * this is by receiving a hash of the original message (which may otherwise

   * be too long), and then calling {toEthSignedMessageHash} on it.

   *

   * Documentation for signature generation:

   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]

   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]

   *

   * _Available since v4.3._

   */

  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {

    // Check the signature length

    // - case 65: r,s,v signature (standard)

    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._

    if (signature.length == 65) {

      bytes32 r;

      bytes32 s;

      uint8 v;

      // ecrecover takes the signature parameters, and the only way to get them

      // currently is to use assembly.

      assembly {

        r := mload(add(signature, 0x20))

        s := mload(add(signature, 0x40))

        v := byte(0, mload(add(signature, 0x60)))

      }

      return tryRecover(hash, v, r, s);

    } else if (signature.length == 64) {

      bytes32 r;

      bytes32 vs;

      // ecrecover takes the signature parameters, and the only way to get them

      // currently is to use assembly.

      assembly {

        r := mload(add(signature, 0x20))

        vs := mload(add(signature, 0x40))

      }

      return tryRecover(hash, r, vs);

    } else {

      return (address(0), RecoverError.InvalidSignatureLength);

    }

  }



  /**

   * @dev Returns the address that signed a hashed message (`hash`) with

   * `signature`. This address can then be used for verification purposes.

   *

   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:

   * this function rejects them by requiring the `s` value to be in the lower

   * half order, and the `v` value to be either 27 or 28.

   *

   * IMPORTANT: `hash` _must_ be the result of a hash operation for the

   * verification to be secure: it is possible to craft signatures that

   * recover to arbitrary addresses for non-hashed data. A safe way to ensure

   * this is by receiving a hash of the original message (which may otherwise

   * be too long), and then calling {toEthSignedMessageHash} on it.

   */

  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {

    (address recovered, RecoverError error) = tryRecover(hash, signature);

    _throwError(error);

    return recovered;

  }



  /**

   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.

   *

   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]

   *

   * _Available since v4.3._

   */

  function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {

    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);

    uint8 v = uint8((uint256(vs) >> 255) + 27);

    return tryRecover(hash, v, r, s);

  }



  /**

   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.

   *

   * _Available since v4.2._

   */

  function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {

    (address recovered, RecoverError error) = tryRecover(hash, r, vs);

    _throwError(error);

    return recovered;

  }



  /**

   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,

   * `r` and `s` signature fields separately.

   *

   * _Available since v4.3._

   */

  function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {

    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature

    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines

    // the valid range for s in (301): 0 < s < secp256k1n ?? 2 + 1, and for v in (302): v ?? {27, 28}. Most

    // signatures from current libraries generate a unique signature with an s-value in the lower half order.

    //

    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value

    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or

    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept

    // these malleable signatures as well.

    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {

      return (address(0), RecoverError.InvalidSignatureS);

    }

    if (v != 27 && v != 28) {

      return (address(0), RecoverError.InvalidSignatureV);

    }



    // If the signature is valid (and not malleable), return the signer address

    address signer = ecrecover(hash, v, r, s);

    if (signer == address(0)) {

      return (address(0), RecoverError.InvalidSignature);

    }



    return (signer, RecoverError.NoError);

  }



  /**

   * @dev Overload of {ECDSA-recover} that receives the `v`,

   * `r` and `s` signature fields separately.

   */

  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {

    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);

    _throwError(error);

    return recovered;

  }



  /**

   * @dev Returns an Ethereum Signed Message, created from a `hash`. This

   * produces hash corresponding to the one signed with the

   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]

   * JSON-RPC method as part of EIP-191.

   *

   * See {recover}.

   */

  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {

    // 32 is the length in bytes of hash,

    // enforced by the type signature above

    return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));

  }



  /**

   * @dev Returns an Ethereum Signed Message, created from `s`. This

   * produces hash corresponding to the one signed with the

   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]

   * JSON-RPC method as part of EIP-191.

   *

   * See {recover}.

   */

  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {

    return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));

  }



  /**

   * @dev Returns an Ethereum Signed Typed Data, created from a

   * `domainSeparator` and a `structHash`. This produces hash corresponding

   * to the one signed with the

   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]

   * JSON-RPC method as part of EIP-712.

   *

   * See {recover}.

   */

  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {

    return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\EditionsMetadataRenderer.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import "../../abstract/Initializable.sol";



import {IMetadataRenderer} from "../interface/IMetadataRenderer.sol";

import {IHolographDropERC721} from "../interface/IHolographDropERC721.sol";

import {ERC721Metadata} from "../../interface/ERC721Metadata.sol";

import {NFTMetadataRenderer} from "../utils/NFTMetadataRenderer.sol";

import {MetadataRenderAdminCheck} from "./MetadataRenderAdminCheck.sol";



import {Configuration} from "../struct/Configuration.sol";



interface DropConfigGetter {

  function config() external view returns (Configuration memory config);

}



/// @notice EditionsMetadataRenderer for editions support

contract EditionsMetadataRenderer is Initializable, IMetadataRenderer, MetadataRenderAdminCheck {

  /// @notice Storage for token edition information

  struct TokenEditionInfo {

    string description;

    string imageURI;

    string animationURI;

  }



  /// @notice Event for updated Media URIs

  event MediaURIsUpdated(address indexed target, address sender, string imageURI, string animationURI);



  /// @notice Event for a new edition initialized

  /// @dev admin function indexer feedback

  event EditionInitialized(address indexed target, string description, string imageURI, string animationURI);



  /// @notice Description updated for this edition

  /// @dev admin function indexer feedback

  event DescriptionUpdated(address indexed target, address sender, string newDescription);



  /// @notice Token information mapping storage

  mapping(address => TokenEditionInfo) public tokenInfos;



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @dev A blank init function is required to be able to call genesisDeriveFutureAddress to get the deterministic address

   * @dev Since no data is required to be intialized the selector is just returned and _setInitialized() does not need to be called

   */

  function init(bytes memory /* initPayload */) external pure override returns (bytes4) {

    return InitializableInterface.init.selector;

  }



  /// @notice Update media URIs

  /// @param target target for contract to update metadata for

  /// @param imageURI new image uri address

  /// @param animationURI new animation uri address

  function updateMediaURIs(

    address target,

    string memory imageURI,

    string memory animationURI

  ) external requireSenderAdmin(target) {

    tokenInfos[target].imageURI = imageURI;

    tokenInfos[target].animationURI = animationURI;

    emit MediaURIsUpdated({target: target, sender: msg.sender, imageURI: imageURI, animationURI: animationURI});

  }



  /// @notice Admin function to update description

  /// @param target target description

  /// @param newDescription new description

  function updateDescription(address target, string memory newDescription) external requireSenderAdmin(target) {

    tokenInfos[target].description = newDescription;



    emit DescriptionUpdated({target: target, sender: msg.sender, newDescription: newDescription});

  }



  /// @notice Default initializer for edition data from a specific contract

  /// @param data data to init with

  function initializeWithData(bytes memory data) external {

    // data format: description, imageURI, animationURI

    (string memory description, string memory imageURI, string memory animationURI) = abi.decode(

      data,

      (string, string, string)

    );



    tokenInfos[msg.sender] = TokenEditionInfo({

      description: description,

      imageURI: imageURI,

      animationURI: animationURI

    });

    emit EditionInitialized({

      target: msg.sender,

      description: description,

      imageURI: imageURI,

      animationURI: animationURI

    });

  }



  /// @notice Contract URI information getter

  /// @return contract uri (if set)

  function contractURI() external view override returns (string memory) {

    address target = msg.sender;

    TokenEditionInfo storage editionInfo = tokenInfos[target];

    Configuration memory config = DropConfigGetter(target).config();



    return

      NFTMetadataRenderer.encodeContractURIJSON({

        name: ERC721Metadata(target).name(),

        description: editionInfo.description,

        imageURI: editionInfo.imageURI,

        animationURI: editionInfo.animationURI,

        royaltyBPS: uint256(config.royaltyBPS),

        royaltyRecipient: config.fundsRecipient

      });

  }



  /// @notice Token URI information getter

  /// @param tokenId to get uri for

  /// @return contract uri (if set)

  function tokenURI(uint256 tokenId) external view override returns (string memory) {

    address target = msg.sender;



    TokenEditionInfo memory info = tokenInfos[target];

    IHolographDropERC721 media = IHolographDropERC721(target);



    uint256 maxSupply = media.saleDetails().maxSupply;



    // For open editions, set max supply to 0 for renderer to remove the edition max number

    // This will be added back on once the open edition is "finalized"

    if (maxSupply == type(uint64).max) {

      maxSupply = 0;

    }



    return

      NFTMetadataRenderer.createMetadataEdition({

        name: ERC721Metadata(target).name(),

        description: info.description,

        imageURI: info.imageURI,

        animationURI: info.animationURI,

        tokenOfEdition: tokenId,

        editionSize: maxSupply

      });

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\EditionsMetadataRendererProxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../../abstract/Admin.sol";

import "../../abstract/Initializable.sol";



contract EditionsMetadataRendererProxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.editionsMetadataRenderer')) - 1)

   */

  bytes32 constant _editionsMetadataRendererSlot = 0x747f2428bc473d14fd9642872693b7bc7ad3f58057c4c084ce1f541a26e4bcb1;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address editionsMetadataRenderer, bytes memory initCode) = abi.decode(data, (address, bytes));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_editionsMetadataRendererSlot, editionsMetadataRenderer)

    }

    (bool success, bytes memory returnData) = editionsMetadataRenderer.delegatecall(

      abi.encodeWithSignature("init(bytes)", initCode)

    );

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == Initializable.init.selector, "initialization failed");

    _setInitialized();

    return Initializable.init.selector;

  }



  function getEditionsMetadataRenderer() external view returns (address editionsMetadataRenderer) {

    assembly {

      editionsMetadataRenderer := sload(_editionsMetadataRendererSlot)

    }

  }



  function setEditionsMetadataRenderer(address editionsMetadataRenderer) external onlyAdmin {

    assembly {

      sstore(_editionsMetadataRendererSlot, editionsMetadataRenderer)

    }

  }



  receive() external payable {}



  fallback() external payable {

    assembly {

      let editionsMetadataRenderer := sload(_editionsMetadataRendererSlot)

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), editionsMetadataRenderer, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\EIP712.sol
File type: .sol
// SPDX-License-Identifier: MIT

// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)



pragma solidity 0.8.13;



import "../library/ECDSA.sol";



/**

 * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.

 *

 * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,

 * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding

 * they need in their contracts using a combination of `abi.encode` and `keccak256`.

 *

 * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding

 * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA

 * ({_hashTypedDataV4}).

 *

 * The implementation of the domain separator was designed to be as efficient as possible while still properly updating

 * the chain id to protect against replay attacks on an eventual fork of the chain.

 *

 * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method

 * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].

 *

 * _Available since v3.4._

 */

abstract contract EIP712 {

  /* solhint-disable var-name-mixedcase */

  // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to

  // invalidate the cached domain separator if the chain id changes.

  // WE CANNOT USE immutable VALUES SINCE IT BREAKS OUT CREATE2 COMPUTATIONS ON DEPLOYER SCRIPTS

  // AFTER MAKING NECESARRY CHANGES, WE CAN ADD IT BACK IN

  bytes32 private _CACHED_DOMAIN_SEPARATOR;

  uint256 private _CACHED_CHAIN_ID;

  address private _CACHED_THIS;



  bytes32 private _HASHED_NAME;

  bytes32 private _HASHED_VERSION;

  bytes32 private _TYPE_HASH;



  /* solhint-enable var-name-mixedcase */



  /**

   * @dev Initializes the domain separator and parameter caches.

   *

   * The meaning of `name` and `version` is specified in

   * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:

   *

   * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.

   * - `version`: the current major version of the signing domain.

   *

   * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart

   * contract upgrade].

   */

  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  function _eip712_init(string memory name, string memory version) internal {

    bytes32 hashedName = keccak256(bytes(name));

    bytes32 hashedVersion = keccak256(bytes(version));

    bytes32 typeHash = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");

    _HASHED_NAME = hashedName;

    _HASHED_VERSION = hashedVersion;

    _CACHED_CHAIN_ID = block.chainid;

    _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);

    _CACHED_THIS = address(this);

    _TYPE_HASH = typeHash;

  }



  /**

   * @dev Returns the domain separator for the current chain.

   */

  function _domainSeparatorV4() internal view returns (bytes32) {

    if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {

      return _CACHED_DOMAIN_SEPARATOR;

    } else {

      return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);

    }

  }



  function _buildDomainSeparator(

    bytes32 typeHash,

    bytes32 nameHash,

    bytes32 versionHash

  ) private view returns (bytes32) {

    return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));

  }



  /**

   * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this

   * function returns the hash of the fully encoded EIP712 message for this domain.

   *

   * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:

   *

   * ```solidity

   * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(

   *     keccak256("Mail(address to,string contents)"),

   *     mailTo,

   *     keccak256(bytes(mailContents))

   * )));

   * address signer = ECDSA.recover(digest, signature);

   * ```

   */

  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {

    return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC1155H.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Initializable.sol";



abstract contract ERC1155H is Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holographer')) - 1)

   */

  bytes32 constant _holographerSlot = 0xe9fcff60011c1a99f7b7244d1f2d9da93d79ea8ef3654ce590d775575255b2bd;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.owner')) - 1)

   */

  bytes32 constant _ownerSlot = 0xb56711ba6bd3ded7639fc335ee7524fe668a79d7558c85992e3f8494cf772777;



  modifier onlyHolographer() {

    require(msg.sender == holographer(), "ERC1155: holographer only");

    _;

  }



  modifier onlyOwner() {

    require(msgSender() == _getOwner(), "ERC1155: owner only function");

    _;

  }



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external virtual override returns (bytes4) {

    return _init(initPayload);

  }



  function _init(bytes memory /* initPayload*/) internal returns (bytes4) {

    require(!_isInitialized(), "ERC1155: already initialized");

    address _holographer = msg.sender;

    address currentOwner;

    assembly {

      sstore(_holographerSlot, _holographer)

      currentOwner := sload(_ownerSlot)

    }

    require(currentOwner != address(0), "HOLOGRAPH: owner not set");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @dev The Holographer passes original msg.sender via calldata. This function extracts it.

   */

  function msgSender() internal view returns (address sender) {

    assembly {

      switch eq(caller(), sload(_holographerSlot))

      case 0 {

        sender := caller()

      }

      default {

        sender := calldataload(sub(calldatasize(), 0x20))

      }

    }

  }



  /**

   * @dev Address of Holograph ERC1155 standards enforcer smart contract.

   */

  function holographer() internal view returns (address _holographer) {

    assembly {

      _holographer := sload(_holographerSlot)

    }

  }



  function supportsInterface(bytes4) external pure virtual returns (bool) {

    return false;

  }



  /**

   * @dev Address of initial creator/owner of the collection.

   */

  function owner() external view virtual returns (address) {

    return _getOwner();

  }



  function isOwner() external view returns (bool) {

    return (msgSender() == _getOwner());

  }



  function isOwner(address wallet) external view returns (bool) {

    return wallet == _getOwner();

  }



  function _getOwner() internal view returns (address ownerAddress) {

    assembly {

      ownerAddress := sload(_ownerSlot)

    }

  }



  function _setOwner(address ownerAddress) internal {

    assembly {

      sstore(_ownerSlot, ownerAddress)

    }

  }



  function withdraw() external virtual onlyOwner {

    payable(_getOwner()).transfer(address(this).balance);

  }



  event FundsReceived(address indexed source, uint256 amount);



  /**

   * @dev This function emits an event to indicate native gas token receipt. Do not rely on this to work.

   *      Please use custom payable functions for accepting native value.

   */

  receive() external payable virtual {

    emit FundsReceived(msgSender(), msg.value);

  }



  /**

   * @dev Return true for any un-implemented event hooks

   */

  fallback() external payable virtual {

    assembly {

      switch eq(sload(_holographerSlot), caller())

      case 1 {

        mstore(0x80, 0x0000000000000000000000000000000000000000000000000000000000000001)

        return(0x80, 0x20)

      }

      default {

        revert(0x00, 0x00)

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC1271.sol
File type: .sol
// SPDX-License-Identifier: MIT

// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)



pragma solidity 0.8.13;



/**

 * @dev Interface of the ERC1271 standard signature validation method for

 * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].

 *

 * _Available since v4.1._

 */

interface ERC1271 {

  /**

   * @dev Should return whether the signature provided is valid for the provided data

   * @param hash      Hash of the data to be signed

   * @param signature Signature byte array associated with _data

   */

  function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC165.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED



pragma solidity 0.8.13;



interface ERC165 {

  /// @notice Query if a contract implements an interface

  /// @param interfaceID The interface identifier, as specified in ERC-165

  /// @dev Interface identification is specified in ERC-165. This function

  ///  uses less than 30,000 gas.

  /// @return `true` if the contract implements `interfaceID` and

  ///  `interfaceID` is not 0xffffffff, `false` otherwise

  function supportsInterface(bytes4 interfaceID) external view returns (bool);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC20.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED



pragma solidity 0.8.13;



interface ERC20 {

  function totalSupply() external view returns (uint256);



  function balanceOf(address _owner) external view returns (uint256 balance);



  function transfer(address _to, uint256 _value) external returns (bool success);



  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);



  function approve(address _spender, uint256 _value) external returns (bool success);



  function allowance(address _owner, address _spender) external view returns (uint256 remaining);



  event Transfer(address indexed _from, address indexed _to, uint256 _value);



  event Approval(address indexed _owner, address indexed _spender, uint256 _value);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC20Burnable.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED



pragma solidity 0.8.13;



interface ERC20Burnable {

  function burn(uint256 amount) external;



  function burnFrom(address account, uint256 amount) external returns (bool);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC20H.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Initializable.sol";



abstract contract ERC20H is Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holographer')) - 1)

   */

  bytes32 constant _holographerSlot = 0xe9fcff60011c1a99f7b7244d1f2d9da93d79ea8ef3654ce590d775575255b2bd;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.owner')) - 1)

   */

  bytes32 constant _ownerSlot = 0xb56711ba6bd3ded7639fc335ee7524fe668a79d7558c85992e3f8494cf772777;



  modifier onlyHolographer() {

    require(msg.sender == holographer(), "ERC20: holographer only");

    _;

  }



  modifier onlyOwner() {

    require(msgSender() == _getOwner(), "ERC20: owner only function");

    _;

  }



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external virtual override returns (bytes4) {

    return _init(initPayload);

  }



  function _init(bytes memory /* initPayload*/) internal returns (bytes4) {

    require(!_isInitialized(), "ERC20: already initialized");

    address _holographer = msg.sender;

    address currentOwner;

    assembly {

      sstore(_holographerSlot, _holographer)

      currentOwner := sload(_ownerSlot)

    }

    require(currentOwner != address(0), "HOLOGRAPH: owner not set");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @dev The Holographer passes original msg.sender via calldata. This function extracts it.

   */

  function msgSender() internal view returns (address sender) {

    assembly {

      switch eq(caller(), sload(_holographerSlot))

      case 0 {

        sender := caller()

      }

      default {

        sender := calldataload(sub(calldatasize(), 0x20))

      }

    }

  }



  /**

   * @dev Address of Holograph ERC20 standards enforcer smart contract.

   */

  function holographer() internal view returns (address _holographer) {

    assembly {

      _holographer := sload(_holographerSlot)

    }

  }



  function supportsInterface(bytes4) external pure virtual returns (bool) {

    return false;

  }



  /**

   * @dev Address of initial creator/owner of the token contract.

   */

  function owner() external view virtual returns (address) {

    return _getOwner();

  }



  function isOwner() external view returns (bool) {

    return (msgSender() == _getOwner());

  }



  function isOwner(address wallet) external view returns (bool) {

    return wallet == _getOwner();

  }



  function _getOwner() internal view returns (address ownerAddress) {

    assembly {

      ownerAddress := sload(_ownerSlot)

    }

  }



  function _setOwner(address ownerAddress) internal {

    assembly {

      sstore(_ownerSlot, ownerAddress)

    }

  }



  function withdraw() external virtual onlyOwner {

    payable(_getOwner()).transfer(address(this).balance);

  }



  event FundsReceived(address indexed source, uint256 amount);



  /**

   * @dev This function emits an event to indicate native gas token receipt. Do not rely on this to work.

   *      Please use custom payable functions for accepting native value.

   */

  receive() external payable virtual {

    emit FundsReceived(msgSender(), msg.value);

  }



  /**

   * @dev Return true for any un-implemented event hooks

   */

  fallback() external payable virtual {

    assembly {

      switch eq(sload(_holographerSlot), caller())

      case 1 {

        mstore(0x80, 0x0000000000000000000000000000000000000000000000000000000000000001)

        return(0x80, 0x20)

      }

      default {

        revert(0x00, 0x00)

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC20Metadata.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED



pragma solidity 0.8.13;



interface ERC20Metadata {

  function decimals() external view returns (uint8);



  function name() external view returns (string memory);



  function symbol() external view returns (string memory);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC20Mock.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/EIP712.sol";

import "../abstract/NonReentrant.sol";



import "../interface/ERC20.sol";

import "../interface/ERC20Burnable.sol";

import "../interface/HolographERC20Interface.sol";

import "../interface/ERC20Metadata.sol";

import "../interface/ERC20Permit.sol";

import "../interface/ERC20Receiver.sol";

import "../interface/ERC20Safer.sol";

import "../interface/ERC165.sol";

import "../interface/ERC165.sol";



import "../library/ECDSA.sol";



/**

 * @title Mock ERC20 Token

 * @author Holograph Foundation

 * @notice Used for imitating the likes of WETH and WMATIC tokens.

 * @dev The entire logic and functionality of the smart contract is self-contained.

 */

contract ERC20Mock is

  ERC165,

  ERC20,

  ERC20Burnable,

  ERC20Metadata,

  ERC20Receiver,

  ERC20Safer,

  ERC20Permit,

  NonReentrant,

  EIP712

{

  bool private _works;



  /**

   * @dev Mapping of all the addresse's balances.

   */

  mapping(address => uint256) private _balances;



  /**

   * @dev Mapping of all authorized operators, and capped amounts.

   */

  mapping(address => mapping(address => uint256)) private _allowances;



  /**

   * @dev Total number of token in circulation.

   */

  uint256 private _totalSupply;



  /**

   * @dev Token name.

   */

  string private _name;



  /**

   * @dev Token ticker symbol.

   */

  string private _symbol;



  /**

   * @dev Token number of decimal places.

   */

  uint8 private _decimals;



  /**

   * @dev List of all supported ERC165 interfaces.

   */

  mapping(bytes4 => bool) private _supportedInterfaces;



  /**

   * @dev List of used up nonces. Used in the ERC20Permit interface functionality.

   */

  mapping(address => uint256) private _nonces;



  /**

   * @dev Constructor does not accept any parameters.

   */

  constructor(

    string memory contractName,

    string memory contractSymbol,

    uint8 contractDecimals,

    string memory domainSeperator,

    string memory domainVersion

  ) {

    _works = true;

    _name = contractName;

    _symbol = contractSymbol;

    _decimals = contractDecimals;



    // ERC165

    _supportedInterfaces[ERC165.supportsInterface.selector] = true;



    // ERC20

    _supportedInterfaces[ERC20.allowance.selector] = true;

    _supportedInterfaces[ERC20.approve.selector] = true;

    _supportedInterfaces[ERC20.balanceOf.selector] = true;

    _supportedInterfaces[ERC20.totalSupply.selector] = true;

    _supportedInterfaces[ERC20.transfer.selector] = true;

    _supportedInterfaces[ERC20.transferFrom.selector] = true;

    _supportedInterfaces[

      ERC20.allowance.selector ^

        ERC20.approve.selector ^

        ERC20.balanceOf.selector ^

        ERC20.totalSupply.selector ^

        ERC20.transfer.selector ^

        ERC20.transferFrom.selector

    ] = true;



    // ERC20Metadata

    _supportedInterfaces[ERC20Metadata.name.selector] = true;

    _supportedInterfaces[ERC20Metadata.symbol.selector] = true;

    _supportedInterfaces[ERC20Metadata.decimals.selector] = true;

    _supportedInterfaces[

      ERC20Metadata.name.selector ^ ERC20Metadata.symbol.selector ^ ERC20Metadata.decimals.selector

    ] = true;



    // ERC20Burnable

    _supportedInterfaces[ERC20Burnable.burn.selector] = true;

    _supportedInterfaces[ERC20Burnable.burnFrom.selector] = true;

    _supportedInterfaces[ERC20Burnable.burn.selector ^ ERC20Burnable.burnFrom.selector] = true;



    // ERC20Safer

    // bytes4(keccak256(abi.encodePacked('safeTransfer(address,uint256)'))) == 0x423f6cef

    _supportedInterfaces[0x423f6cef] = true;

    // bytes4(keccak256(abi.encodePacked('safeTransfer(address,uint256,bytes)'))) == 0xeb795549

    _supportedInterfaces[0xeb795549] = true;

    // bytes4(keccak256(abi.encodePacked('safeTransferFrom(address,address,uint256)'))) == 0x42842e0e

    _supportedInterfaces[0x42842e0e] = true;

    // bytes4(keccak256(abi.encodePacked('safeTransferFrom(address,address,uint256,bytes)'))) == 0xb88d4fde

    _supportedInterfaces[0xb88d4fde] = true;

    _supportedInterfaces[bytes4(0x423f6cef) ^ bytes4(0xeb795549) ^ bytes4(0x42842e0e) ^ bytes4(0xb88d4fde)] = true;



    // ERC20Receiver

    _supportedInterfaces[ERC20Receiver.onERC20Received.selector] = true;



    // ERC20Permit

    _supportedInterfaces[ERC20Permit.permit.selector] = true;

    _supportedInterfaces[ERC20Permit.nonces.selector] = true;

    _supportedInterfaces[ERC20Permit.DOMAIN_SEPARATOR.selector] = true;

    _supportedInterfaces[

      ERC20Permit.permit.selector ^ ERC20Permit.nonces.selector ^ ERC20Permit.DOMAIN_SEPARATOR.selector

    ] = true;

    _eip712_init(domainSeperator, domainVersion);

  }



  function toggleWorks(bool active) external {

    _works = active;

  }



  function transferTokens(address payable token, address to, uint256 amount) external {

    ERC20(token).transfer(to, amount);

  }



  /**

   * @dev Purposefully left empty, to prevent running out of gas errors when receiving native token payments.

   */

  receive() external payable {}



  function decimals() public view returns (uint8) {

    return _decimals;

  }



  /**

   * @dev Although EIP-165 is not required for ERC20 contracts, we still decided to implement it.

   *

   * This makes it easier for external smart contracts to easily identify a valid ERC20 token contract.

   */

  function supportsInterface(bytes4 interfaceId) public view returns (bool) {

    return _supportedInterfaces[interfaceId];

  }



  function allowance(address account, address spender) public view returns (uint256) {

    return _allowances[account][spender];

  }



  function balanceOf(address account) public view returns (uint256) {

    return _balances[account];

  }



  // solhint-disable-next-line func-name-mixedcase

  function DOMAIN_SEPARATOR() public view returns (bytes32) {

    return _domainSeparatorV4();

  }



  function name() public view returns (string memory) {

    return _name;

  }



  function nonces(address account) public view returns (uint256) {

    return _nonces[account];

  }



  function symbol() public view returns (string memory) {

    return _symbol;

  }



  function totalSupply() public view returns (uint256) {

    return _totalSupply;

  }



  function approve(address spender, uint256 amount) public returns (bool) {

    _approve(msg.sender, spender, amount);

    return true;

  }



  function burn(uint256 amount) public {

    _burn(msg.sender, amount);

  }



  function burnFrom(address account, uint256 amount) public returns (bool) {

    uint256 currentAllowance = _allowances[account][msg.sender];

    require(currentAllowance >= amount, "ERC20: amount exceeds allowance");

    unchecked {

      _allowances[account][msg.sender] = currentAllowance - amount;

    }

    _burn(account, amount);

    return true;

  }



  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {

    uint256 currentAllowance = _allowances[msg.sender][spender];

    require(currentAllowance >= subtractedValue, "ERC20: decreased below zero");

    uint256 newAllowance;

    unchecked {

      newAllowance = currentAllowance - subtractedValue;

    }

    _approve(msg.sender, spender, newAllowance);

    return true;

  }



  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {

    uint256 currentAllowance = _allowances[msg.sender][spender];

    uint256 newAllowance;

    unchecked {

      newAllowance = currentAllowance + addedValue;

    }

    unchecked {

      require(newAllowance >= currentAllowance, "ERC20: increased above max value");

    }

    _approve(msg.sender, spender, newAllowance);

    return true;

  }



  function mint(address account, uint256 amount) external {

    _mint(account, amount);

  }



  function onERC20Received(

    address account,

    address /* sender*/,

    uint256 amount,

    bytes calldata /* data*/

  ) public returns (bytes4) {

    assembly {

      // used to drop "change function to view" compiler warning

      sstore(0x17fb676f92438402d8ef92193dd096c59ee1f4ba1bb57f67f3e6d2eef8aeed5e, amount)

    }

    if (_works) {

      require(_isContract(account), "ERC20: operator not contract");

      try ERC20(account).balanceOf(address(this)) returns (uint256 balance) {

        require(balance >= amount, "ERC20: balance check failed");

      } catch {

        revert("ERC20: failed getting balance");

      }

      return ERC20Receiver.onERC20Received.selector;

    } else {

      return 0x00000000;

    }

  }



  function permit(

    address account,

    address spender,

    uint256 amount,

    uint256 deadline,

    uint8 v,

    bytes32 r,

    bytes32 s

  ) public {

    require(block.timestamp <= deadline, "ERC20: expired deadline");

    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)")

    //  == 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9

    bytes32 structHash = keccak256(

      abi.encode(

        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9,

        account,

        spender,

        amount,

        _useNonce(account),

        deadline

      )

    );

    bytes32 hash = _hashTypedDataV4(structHash);

    address signer = ECDSA.recover(hash, v, r, s);

    require(signer == account, "ERC20: invalid signature");

    _approve(account, spender, amount);

  }



  function safeTransfer(address recipient, uint256 amount) public returns (bool) {

    return safeTransfer(recipient, amount, "");

  }



  function safeTransfer(address recipient, uint256 amount, bytes memory data) public returns (bool) {

    _transfer(msg.sender, recipient, amount);

    require(_checkOnERC20Received(msg.sender, recipient, amount, data), "ERC20: non ERC20Receiver");

    return true;

  }



  function safeTransferFrom(address account, address recipient, uint256 amount) public returns (bool) {

    return safeTransferFrom(account, recipient, amount, "");

  }



  function safeTransferFrom(

    address account,

    address recipient,

    uint256 amount,

    bytes memory data

  ) public returns (bool) {

    if (account != msg.sender) {

      uint256 currentAllowance = _allowances[account][msg.sender];

      require(currentAllowance >= amount, "ERC20: amount exceeds allowance");

      unchecked {

        _allowances[account][msg.sender] = currentAllowance - amount;

      }

    }

    _transfer(account, recipient, amount);

    require(_checkOnERC20Received(account, recipient, amount, data), "ERC20: non ERC20Receiver");

    return true;

  }



  function transfer(address recipient, uint256 amount) public returns (bool) {

    _transfer(msg.sender, recipient, amount);

    return true;

  }



  function transferFrom(address account, address recipient, uint256 amount) public returns (bool) {

    if (account != msg.sender) {

      uint256 currentAllowance = _allowances[account][msg.sender];

      require(currentAllowance >= amount, "ERC20: amount exceeds allowance");

      unchecked {

        _allowances[account][msg.sender] = currentAllowance - amount;

      }

    }

    _transfer(account, recipient, amount);

    return true;

  }



  function _approve(address account, address spender, uint256 amount) internal {

    require(account != address(0), "ERC20: account is zero address");

    require(spender != address(0), "ERC20: spender is zero address");

    _allowances[account][spender] = amount;

    emit Approval(account, spender, amount);

  }



  function _burn(address account, uint256 amount) internal {

    require(account != address(0), "ERC20: account is zero address");

    uint256 accountBalance = _balances[account];

    require(accountBalance >= amount, "ERC20: amount exceeds balance");

    unchecked {

      _balances[account] = accountBalance - amount;

    }

    _totalSupply -= amount;

    emit Transfer(account, address(0), amount);

  }



  function _checkOnERC20Received(

    address account,

    address recipient,

    uint256 amount,

    bytes memory data

  ) internal nonReentrant returns (bool) {

    if (_isContract(recipient)) {

      try ERC165(recipient).supportsInterface(0x01ffc9a7) returns (bool erc165support) {

        require(erc165support, "ERC20: no ERC165 support");

        // we have erc165 support

        if (ERC165(recipient).supportsInterface(0x534f5876)) {

          // we have eip-4524 support

          try ERC20Receiver(recipient).onERC20Received(msg.sender, account, amount, data) returns (bytes4 retval) {

            return retval == ERC20Receiver.onERC20Received.selector;

          } catch (bytes memory reason) {

            if (reason.length == 0) {

              revert("ERC20: non ERC20Receiver");

            } else {

              assembly {

                revert(add(32, reason), mload(reason))

              }

            }

          }

        } else {

          revert("ERC20: eip-4524 not supported");

        }

      } catch (bytes memory reason) {

        if (reason.length == 0) {

          revert("ERC20: no ERC165 support");

        } else {

          assembly {

            revert(add(32, reason), mload(reason))

          }

        }

      }

    } else {

      return true;

    }

  }



  /**

   * @notice Mints tokens.

   * @dev Mint a specific amount of tokens to a specific address.

   * @param to Address to mint to.

   * @param amount Amount of tokens to mint.

   */

  function _mint(address to, uint256 amount) internal {

    require(to != address(0), "ERC20: minting to burn address");

    _totalSupply += amount;

    _balances[to] += amount;

    emit Transfer(address(0), to, amount);

  }



  function _transfer(address account, address recipient, uint256 amount) internal {

    require(account != address(0), "ERC20: account is zero address");

    require(recipient != address(0), "ERC20: recipient is zero address");

    uint256 accountBalance = _balances[account];

    require(accountBalance >= amount, "ERC20: amount exceeds balance");

    unchecked {

      _balances[account] = accountBalance - amount;

    }

    _balances[recipient] += amount;

    emit Transfer(account, recipient, amount);

  }



  /**

   * @dev "Consume a nonce": return the current value and increment.

   *

   * _Available since v4.1._

   */

  function _useNonce(address account) internal returns (uint256 current) {

    current = _nonces[account];

    _nonces[account]++;

  }



  function _isContract(address contractAddress) private view returns (bool) {

    bytes32 codehash;

    assembly {

      codehash := extcodehash(contractAddress)

    }

    return (codehash != 0x0 && codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC20Permit.sol
File type: .sol
// SPDX-License-Identifier: MIT

// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)



pragma solidity 0.8.13;



/**

 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in

 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].

 *

 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by

 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't

 * need to send a transaction, and thus is not required to hold Ether at all.

 */

interface ERC20Permit {

  /**

   * @dev Sets `value` as the allowance of `spender` over ``account``'s tokens,

   * given ``account``'s signed approval.

   *

   * IMPORTANT: The same issues {IERC20-approve} has related to transaction

   * ordering also apply here.

   *

   * Emits an {Approval} event.

   *

   * Requirements:

   *

   * - `spender` cannot be the zero address.

   * - `deadline` must be a timestamp in the future.

   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `account`

   * over the EIP712-formatted function arguments.

   * - the signature must use ``account``'s current nonce (see {nonces}).

   *

   * For more information on the signature format, see the

   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP

   * section].

   */

  function permit(

    address account,

    address spender,

    uint256 value,

    uint256 deadline,

    uint8 v,

    bytes32 r,

    bytes32 s

  ) external;



  /**

   * @dev Returns the current nonce for `account`. This value must be

   * included whenever a signature is generated for {permit}.

   *

   * Every successful call to {permit} increases ``account``'s nonce by one. This

   * prevents a signature from being used multiple times.

   */

  function nonces(address account) external view returns (uint256);



  /**

   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.

   */

  // solhint-disable-next-line func-name-mixedcase

  function DOMAIN_SEPARATOR() external view returns (bytes32);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC20Receiver.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED



pragma solidity 0.8.13;



interface ERC20Receiver {

  function onERC20Received(

    address account,

    address recipient,

    uint256 amount,

    bytes memory data

  ) external returns (bytes4);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC20Safer.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED



pragma solidity 0.8.13;



interface ERC20Safer {

  function safeTransfer(address recipient, uint256 amount) external returns (bool);



  function safeTransfer(address recipient, uint256 amount, bytes memory data) external returns (bool);



  function safeTransferFrom(address account, address recipient, uint256 amount) external returns (bool);



  function safeTransferFrom(

    address account,

    address recipient,

    uint256 amount,

    bytes memory data

  ) external returns (bool);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC721.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED



pragma solidity 0.8.13;



/// @title ERC-721 Non-Fungible Token Standard

/// @dev See https://eips.ethereum.org/EIPS/eip-721

///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.

/* is ERC165 */

interface ERC721 {

  /// @dev This emits when ownership of any NFT changes by any mechanism.

  ///  This event emits when NFTs are created (`from` == 0) and destroyed

  ///  (`to` == 0). Exception: during contract creation, any number of NFTs

  ///  may be created and assigned without emitting Transfer. At the time of

  ///  any transfer, the approved address for that NFT (if any) is reset to none.

  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);



  /// @dev This emits when the approved address for an NFT is changed or

  ///  reaffirmed. The zero address indicates there is no approved address.

  ///  When a Transfer event emits, this also indicates that the approved

  ///  address for that NFT (if any) is reset to none.

  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);



  /// @dev This emits when an operator is enabled or disabled for an owner.

  ///  The operator can manage all NFTs of the owner.

  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);



  /// @notice Count all NFTs assigned to an owner

  /// @dev NFTs assigned to the zero address are considered invalid, and this

  ///  function throws for queries about the zero address.

  /// @param _owner An address for whom to query the balance

  /// @return The number of NFTs owned by `_owner`, possibly zero

  function balanceOf(address _owner) external view returns (uint256);



  /// @notice Find the owner of an NFT

  /// @dev NFTs assigned to zero address are considered invalid, and queries

  ///  about them do throw.

  /// @param _tokenId The identifier for an NFT

  /// @return The address of the owner of the NFT

  function ownerOf(uint256 _tokenId) external view returns (address);



  /// @notice Transfers the ownership of an NFT from one address to another address

  /// @dev Throws unless `msg.sender` is the current owner, an authorized

  ///  operator, or the approved address for this NFT. Throws if `_from` is

  ///  not the current owner. Throws if `_to` is the zero address. Throws if

  ///  `_tokenId` is not a valid NFT. When transfer is complete, this function

  ///  checks if `_to` is a smart contract (code size > 0). If so, it calls

  ///  `onERC721Received` on `_to` and throws if the return value is not

  ///  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.

  /// @param _from The current owner of the NFT

  /// @param _to The new owner

  /// @param _tokenId The NFT to transfer

  /// @param data Additional data with no specified format, sent in call to `_to`

  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;



  /// @notice Transfers the ownership of an NFT from one address to another address

  /// @dev This works identically to the other function with an extra data parameter,

  ///  except this function just sets data to "".

  /// @param _from The current owner of the NFT

  /// @param _to The new owner

  /// @param _tokenId The NFT to transfer

  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;



  /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE

  ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE

  ///  THEY MAY BE PERMANENTLY LOST

  /// @dev Throws unless `msg.sender` is the current owner, an authorized

  ///  operator, or the approved address for this NFT. Throws if `_from` is

  ///  not the current owner. Throws if `_to` is the zero address. Throws if

  ///  `_tokenId` is not a valid NFT.

  /// @param _from The current owner of the NFT

  /// @param _to The new owner

  /// @param _tokenId The NFT to transfer

  function transferFrom(address _from, address _to, uint256 _tokenId) external payable;



  /// @notice Change or reaffirm the approved address for an NFT

  /// @dev The zero address indicates there is no approved address.

  ///  Throws unless `msg.sender` is the current NFT owner, or an authorized

  ///  operator of the current owner.

  /// @param _approved The new approved NFT controller

  /// @param _tokenId The NFT to approve

  function approve(address _approved, uint256 _tokenId) external payable;



  /// @notice Enable or disable approval for a third party ("operator") to manage

  ///  all of `msg.sender`'s assets

  /// @dev Emits the ApprovalForAll event. The contract MUST allow

  ///  multiple operators per owner.

  /// @param _operator Address to add to the set of authorized operators

  /// @param _approved True if the operator is approved, false to revoke approval

  function setApprovalForAll(address _operator, bool _approved) external;



  /// @notice Get the approved address for a single NFT

  /// @dev Throws if `_tokenId` is not a valid NFT.

  /// @param _tokenId The NFT to find the approved address for

  /// @return The approved address for this NFT, or the zero address if there is none

  function getApproved(uint256 _tokenId) external view returns (address);



  /// @notice Query if an address is an authorized operator for another address

  /// @param _owner The address that owns the NFTs

  /// @param _operator The address that acts on behalf of the owner

  /// @return True if `_operator` is an approved operator for `_owner`, false otherwise

  function isApprovedForAll(address _owner, address _operator) external view returns (bool);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC721Enumerable.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED



pragma solidity 0.8.13;



/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension

/// @dev See https://eips.ethereum.org/EIPS/eip-721

///  Note: the ERC-165 identifier for this interface is 0x780e9d63.

/* is ERC721 */

interface ERC721Enumerable {

  /// @notice Count NFTs tracked by this contract

  /// @return A count of valid NFTs tracked by this contract, where each one of

  ///  them has an assigned and queryable owner not equal to the zero address

  function totalSupply() external view returns (uint256);



  /// @notice Enumerate valid NFTs

  /// @dev Throws if `_index` >= `totalSupply()`.

  /// @param _index A counter less than `totalSupply()`

  /// @return The token identifier for the `_index`th NFT,

  ///  (sort order not specified)

  function tokenByIndex(uint256 _index) external view returns (uint256);



  /// @notice Enumerate NFTs assigned to an owner

  /// @dev Throws if `_index` >= `balanceOf(_owner)` or if

  ///  `_owner` is the zero address, representing invalid NFTs.

  /// @param _owner An address where we are interested in NFTs owned by them

  /// @param _index A counter less than `balanceOf(_owner)`

  /// @return The token identifier for the `_index`th NFT assigned to `_owner`,

  ///   (sort order not specified)

  function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC721H.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Initializable.sol";



abstract contract ERC721H is Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holographer')) - 1)

   */

  bytes32 constant _holographerSlot = 0xe9fcff60011c1a99f7b7244d1f2d9da93d79ea8ef3654ce590d775575255b2bd;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.owner')) - 1)

   */

  bytes32 constant _ownerSlot = 0xb56711ba6bd3ded7639fc335ee7524fe668a79d7558c85992e3f8494cf772777;



  modifier onlyHolographer() {

    require(msg.sender == holographer(), "ERC721: holographer only");

    _;

  }



  modifier onlyOwner() {

    require(msgSender() == _getOwner(), "ERC721: owner only function");

    _;

  }



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external virtual override returns (bytes4) {

    return _init(initPayload);

  }



  function _init(bytes memory /* initPayload*/) internal returns (bytes4) {

    require(!_isInitialized(), "ERC721: already initialized");

    address _holographer = msg.sender;

    address currentOwner;

    assembly {

      sstore(_holographerSlot, _holographer)

      currentOwner := sload(_ownerSlot)

    }

    require(currentOwner != address(0), "HOLOGRAPH: owner not set");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @dev The Holographer passes original msg.sender via calldata. This function extracts it.

   */

  function msgSender() internal view returns (address sender) {

    assembly {

      switch eq(caller(), sload(_holographerSlot))

      case 0 {

        sender := caller()

      }

      default {

        sender := calldataload(sub(calldatasize(), 0x20))

      }

    }

  }



  /**

   * @dev Address of Holograph ERC721 standards enforcer smart contract.

   */

  function holographer() internal view returns (address _holographer) {

    assembly {

      _holographer := sload(_holographerSlot)

    }

  }



  function supportsInterface(bytes4) external pure virtual returns (bool) {

    return false;

  }



  /**

   * @dev Address of initial creator/owner of the collection.

   */

  function owner() external view virtual returns (address) {

    return _getOwner();

  }



  function isOwner() external view returns (bool) {

    return (msgSender() == _getOwner());

  }



  function isOwner(address wallet) external view returns (bool) {

    return wallet == _getOwner();

  }



  function _getOwner() internal view returns (address ownerAddress) {

    assembly {

      ownerAddress := sload(_ownerSlot)

    }

  }



  function _setOwner(address ownerAddress) internal {

    assembly {

      sstore(_ownerSlot, ownerAddress)

    }

  }



  function withdraw() external virtual onlyOwner {

    payable(_getOwner()).transfer(address(this).balance);

  }



  event FundsReceived(address indexed source, uint256 amount);



  /**

   * @dev This function emits an event to indicate native gas token receipt. Do not rely on this to work.

   *      Please use custom payable functions for accepting native value.

   */

  receive() external payable virtual {

    emit FundsReceived(msgSender(), msg.value);

  }



  /**

   * @dev Return true for any un-implemented event hooks

   */

  fallback() external payable virtual {

    assembly {

      switch eq(sload(_holographerSlot), caller())

      case 1 {

        mstore(0x80, 0x0000000000000000000000000000000000000000000000000000000000000001)

        return(0x80, 0x20)

      }

      default {

        revert(0x00, 0x00)

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC721Metadata.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED



pragma solidity 0.8.13;



/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension

/// @dev See https://eips.ethereum.org/EIPS/eip-721

///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.

/* is ERC721 */

interface ERC721Metadata {

  /// @notice A descriptive name for a collection of NFTs in this contract

  function name() external view returns (string memory _name);



  /// @notice An abbreviated name for NFTs in this contract

  function symbol() external view returns (string memory _symbol);



  /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.

  /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC

  ///  3986. The URI may point to a JSON file that conforms to the "ERC721

  ///  Metadata JSON Schema".

  function tokenURI(uint256 _tokenId) external view returns (string memory);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ERC721TokenReceiver.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.

interface ERC721TokenReceiver {

  /// @notice Handle the receipt of an NFT

  /// @dev The ERC721 smart contract calls this function on the recipient

  ///  after a `transfer`. This function MAY throw to revert and reject the

  ///  transfer. Return of other than the magic value MUST result in the

  ///  transaction being reverted.

  ///  Note: the contract address is always the message sender.

  /// @param _operator The address which called `safeTransferFrom` function

  /// @param _from The address which previously owned the token

  /// @param _tokenId The NFT identifier which is being transferred

  /// @param _data Additional data with no specified format

  /// @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`

  ///  unless throwing

  function onERC721Received(

    address _operator,

    address _from,

    uint256 _tokenId,

    bytes calldata _data

  ) external returns (bytes4);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Faucet.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Initializable.sol";

import "../interface/HolographERC20Interface.sol";

import "../interface/InitializableInterface.sol";



contract Faucet is Initializable {

  address public owner;

  HolographERC20Interface public token;



  uint256 public faucetDripAmount = 100 ether;

  uint256 public faucetCooldown = 24 hours;



  mapping(address => uint256) lastAccessTime;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "Faucet contract is already initialized");

    (address _contractOwner, address _tokenInstance) = abi.decode(initPayload, (address, address));

    token = HolographERC20Interface(_tokenInstance);

    owner = _contractOwner;

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /// @notice Get tokens from faucet's own balance. Rate limited.

  function requestTokens() external {

    require(isAllowedToWithdraw(msg.sender), "Come back later");

    require(token.balanceOf(address(this)) >= faucetDripAmount, "Faucet is empty");

    lastAccessTime[msg.sender] = block.timestamp;

    token.transfer(msg.sender, faucetDripAmount);

  }



  /// @notice Update token address

  function setToken(address tokenAddress) external onlyOwner {

    token = HolographERC20Interface(tokenAddress);

  }



  /// @notice Grant tokens to receiver from faucet's own balance. Not rate limited.

  function grantTokens(address _address) external onlyOwner {

    require(token.balanceOf(address(this)) >= faucetDripAmount, "Faucet is empty");

    token.transfer(_address, faucetDripAmount);

  }



  function grantTokens(address _address, uint256 _amountWei) external onlyOwner {

    require(token.balanceOf(address(this)) >= _amountWei, "Insufficient funds");

    token.transfer(_address, _amountWei);

  }



  /// @notice Withdraw all funds from the faucet.

  function withdrawAllTokens(address _receiver) external onlyOwner {

    token.transfer(_receiver, token.balanceOf(address(this)));

  }



  /// @notice Withdraw amount of funds from the faucet. Amount is in wei.

  function withdrawTokens(address _receiver, uint256 _amountWei) external onlyOwner {

    require(token.balanceOf(address(this)) >= _amountWei, "Insufficient funds");

    token.transfer(_receiver, _amountWei);

  }



  /// @notice Configure the time between two drip requests. Time is in seconds.

  function setWithdrawCooldown(uint256 _waitTimeSeconds) external onlyOwner {

    faucetCooldown = _waitTimeSeconds;

  }



  /// @notice Configure the drip request amount. Amount is in wei.

  function setWithdrawAmount(uint256 _amountWei) external onlyOwner {

    faucetDripAmount = _amountWei;

  }



  /// @notice Check whether an address can request drip and is not on cooldown.

  function isAllowedToWithdraw(address _address) public view returns (bool) {

    if (lastAccessTime[_address] == 0) {

      return true;

    } else if (block.timestamp >= lastAccessTime[_address] + faucetCooldown) {

      return true;

    }

    return false;

  }



  /// @notice Get the last time the address withdrew tokens.

  function getLastAccessTime(address _address) public view returns (uint256) {

    return lastAccessTime[_address];

  }



  modifier onlyOwner() {

    require(msg.sender == owner, "Caller is not the owner");

    _;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\GasParameters.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



struct GasParameters {

  uint256 msgBaseGas;

  uint256 msgGasPerByte;

  uint256 jobBaseGas;

  uint256 jobGasPerByte;

  uint256 minGasPrice;

  uint256 maxGasLimit;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\GenericH.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Initializable.sol";



abstract contract GenericH is Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holographer')) - 1)

   */

  bytes32 constant _holographerSlot = 0xe9fcff60011c1a99f7b7244d1f2d9da93d79ea8ef3654ce590d775575255b2bd;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.owner')) - 1)

   */

  bytes32 constant _ownerSlot = 0xb56711ba6bd3ded7639fc335ee7524fe668a79d7558c85992e3f8494cf772777;



  modifier onlyHolographer() {

    require(msg.sender == holographer(), "GENERIC: holographer only");

    _;

  }



  modifier onlyOwner() {

    require(msgSender() == _getOwner(), "GENERIC: owner only function");

    _;

  }



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external virtual override returns (bytes4) {

    return _init(initPayload);

  }



  function _init(bytes memory /* initPayload*/) internal returns (bytes4) {

    require(!_isInitialized(), "GENERIC: already initialized");

    address _holographer = msg.sender;

    address currentOwner;

    assembly {

      sstore(_holographerSlot, _holographer)

      currentOwner := sload(_ownerSlot)

    }

    require(currentOwner != address(0), "HOLOGRAPH: owner not set");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @dev The Holographer passes original msg.sender via calldata. This function extracts it.

   */

  function msgSender() internal view returns (address sender) {

    assembly {

      switch eq(caller(), sload(_holographerSlot))

      case 0 {

        sender := caller()

      }

      default {

        sender := calldataload(sub(calldatasize(), 0x20))

      }

    }

  }



  /**

   * @dev Address of Holograph GENERIC standards enforcer smart contract.

   */

  function holographer() internal view returns (address _holographer) {

    assembly {

      _holographer := sload(_holographerSlot)

    }

  }



  function supportsInterface(bytes4) external pure virtual returns (bool) {

    return false;

  }



  /**

   * @dev Address of initial creator/owner of the contract.

   */

  function owner() external view virtual returns (address) {

    return _getOwner();

  }



  function isOwner() external view returns (bool) {

    return (msgSender() == _getOwner());

  }



  function isOwner(address wallet) external view returns (bool) {

    return wallet == _getOwner();

  }



  function _getOwner() internal view returns (address ownerAddress) {

    assembly {

      ownerAddress := sload(_ownerSlot)

    }

  }



  function _setOwner(address ownerAddress) internal {

    assembly {

      sstore(_ownerSlot, ownerAddress)

    }

  }



  function withdraw() external virtual onlyOwner {

    payable(_getOwner()).transfer(address(this).balance);

  }



  event FundsReceived(address indexed source, uint256 amount);



  /**

   * @dev This function emits an event to indicate native gas token receipt. Do not rely on this to work.

   *      Please use custom payable functions for accepting native value.

   */

  receive() external payable virtual {

    emit FundsReceived(msgSender(), msg.value);

  }



  /**

   * @dev Return true for any un-implemented event hooks

   */

  fallback() external payable virtual {

    assembly {

      switch eq(sload(_holographerSlot), caller())

      case 1 {

        mstore(0x80, 0x0000000000000000000000000000000000000000000000000000000000000001)

        return(0x80, 0x20)

      }

      default {

        revert(0x00, 0x00)

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HLGERC20H.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Initializable.sol";



abstract contract HLGERC20H is Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holographer')) - 1)

   */

  bytes32 constant _holographerSlot = 0xe9fcff60011c1a99f7b7244d1f2d9da93d79ea8ef3654ce590d775575255b2bd;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.owner')) - 1)

   */

  bytes32 constant _ownerSlot = 0xb56711ba6bd3ded7639fc335ee7524fe668a79d7558c85992e3f8494cf772777;



  modifier onlyHolographer() {

    require(msg.sender == holographer(), "ERC20: holographer only");

    _;

  }



  modifier onlyOwner() {

    if (msg.sender == holographer()) {

      require(msgSender() == _getOwner(), "ERC20: owner only function");

    } else {

      require(msg.sender == _getOwner(), "ERC20: owner only function");

    }

    _;

  }



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external virtual override returns (bytes4) {

    return _init(initPayload);

  }



  function _init(bytes memory /* initPayload*/) internal returns (bytes4) {

    require(!_isInitialized(), "ERC20: already initialized");

    address _holographer = msg.sender;

    address currentOwner;

    assembly {

      sstore(_holographerSlot, _holographer)

      currentOwner := sload(_ownerSlot)

    }

    require(currentOwner != address(0), "HOLOGRAPH: owner not set");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @dev The Holographer passes original msg.sender via calldata. This function extracts it.

   */

  function msgSender() internal pure returns (address sender) {

    assembly {

      sender := calldataload(sub(calldatasize(), 0x20))

    }

  }



  /**

   * @dev Address of Holograph ERC20 standards enforcer smart contract.

   */

  function holographer() internal view returns (address _holographer) {

    assembly {

      _holographer := sload(_holographerSlot)

    }

  }



  function supportsInterface(bytes4) external pure returns (bool) {

    return false;

  }



  /**

   * @dev Address of initial creator/owner of the token contract.

   */

  function owner() external view returns (address) {

    return _getOwner();

  }



  function isOwner() external view returns (bool) {

    if (msg.sender == holographer()) {

      return msgSender() == _getOwner();

    } else {

      return msg.sender == _getOwner();

    }

  }



  function isOwner(address wallet) external view returns (bool) {

    return wallet == _getOwner();

  }



  function _getOwner() internal view returns (address ownerAddress) {

    assembly {

      ownerAddress := sload(_ownerSlot)

    }

  }



  function _setOwner(address ownerAddress) internal {

    assembly {

      sstore(_ownerSlot, ownerAddress)

    }

  }



  function withdraw() external virtual onlyOwner {

    payable(_getOwner()).transfer(address(this).balance);

  }



  /**

   * @dev This function is unreachable unless custom contract address is called directly.

   *      Please use custom payable functions for accepting native value.

   */

  receive() external payable {

    revert("ERC20: unreachable code");

  }



  /**

   * @dev Return true for any un-implemented event hooks

   */

  fallback() external payable {

    assembly {

      switch eq(sload(_holographerSlot), caller())

      case 1 {

        mstore(0x80, 0x0000000000000000000000000000000000000000000000000000000000000001)

        return(0x80, 0x20)

      }

      default {

        revert(0x00, 0x00)

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Holograph.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./abstract/Admin.sol";

import "./abstract/Initializable.sol";



import "./interface/InitializableInterface.sol";

import "./interface/HolographInterface.sol";



/**

 * @title Holograph Protocol

 * @author https://github.com/holographxyz

 * @notice This is the primary Holograph Protocol smart contract

 * @dev This contract stores a reference to all the primary modules and variables of the protocol

 */

contract Holograph is Admin, Initializable, HolographInterface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.bridge')) - 1)

   */

  bytes32 constant _bridgeSlot = 0xeb87cbb21687feb327e3d58c6c16d552231d12c7a0e8115042a4165fac8a77f9;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.chainId')) - 1)

   */

  bytes32 constant _chainIdSlot = 0x7651bfc11f7485d07ab2b41c1312e2007c8cb7efb0f7352a6dee4a1153eebab2;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.factory')) - 1)

   */

  bytes32 constant _factorySlot = 0xa49f20855ba576e09d13c8041c8039fa655356ea27f6c40f1ec46a4301cd5b23;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holographChainId')) - 1)

   */

  bytes32 constant _holographChainIdSlot = 0xd840a780c26e07edc6e1ee2eaa6f134ed5488dbd762614116653cee8542a3844;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.interfaces')) - 1)

   */

  bytes32 constant _interfacesSlot = 0xbd3084b8c09da87ad159c247a60e209784196be2530cecbbd8f337fdd1848827;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.operator')) - 1)

   */

  bytes32 constant _operatorSlot = 0x7caba557ad34138fa3b7e43fb574e0e6cc10481c3073e0dffbc560db81b5c60f;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)

   */

  bytes32 constant _registrySlot = 0xce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e7;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.treasury')) - 1)

   */

  bytes32 constant _treasurySlot = 0x4215e7a38d75164ca078bbd61d0992cdeb1ba16f3b3ead5944966d3e4080e8b6;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.utilityToken')) - 1)

   */

  bytes32 constant _utilityTokenSlot = 0xbf76518d46db472b71aa7677a0908b8016f3dee568415ffa24055f9a670f9c37;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (

      uint32 holographChainId,

      address bridge,

      address factory,

      address interfaces,

      address operator,

      address registry,

      address treasury,

      address utilityToken

    ) = abi.decode(initPayload, (uint32, address, address, address, address, address, address, address));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_chainIdSlot, chainid())

      sstore(_holographChainIdSlot, holographChainId)

      sstore(_bridgeSlot, bridge)

      sstore(_factorySlot, factory)

      sstore(_interfacesSlot, interfaces)

      sstore(_operatorSlot, operator)

      sstore(_registrySlot, registry)

      sstore(_treasurySlot, treasury)

      sstore(_utilityTokenSlot, utilityToken)

    }

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @notice Get the address of the Holograph Bridge module

   * @dev Used for beaming holographable assets cross-chain

   */

  function getBridge() external view returns (address bridge) {

    assembly {

      bridge := sload(_bridgeSlot)

    }

  }



  /**

   * @notice Update the Holograph Bridge module address

   * @param bridge address of the Holograph Bridge smart contract to use

   */

  function setBridge(address bridge) external onlyAdmin {

    assembly {

      sstore(_bridgeSlot, bridge)

    }

  }



  /**

   * @notice Get the chain ID that the Protocol was deployed on

   * @dev Useful for checking if/when a hard fork occurs

   */

  function getChainId() external view returns (uint256 chainId) {

    assembly {

      chainId := sload(_chainIdSlot)

    }

  }



  /**

   * @notice Update the chain ID

   * @dev Useful for updating once a hard fork has been mitigated

   * @param chainId EVM chain ID to use

   */

  function setChainId(uint256 chainId) external onlyAdmin {

    assembly {

      sstore(_chainIdSlot, chainId)

    }

  }



  /**

   * @notice Get the address of the Holograph Factory module

   * @dev Used for deploying holographable smart contracts

   */

  function getFactory() external view returns (address factory) {

    assembly {

      factory := sload(_factorySlot)

    }

  }



  /**

   * @notice Update the Holograph Factory module address

   * @param factory address of the Holograph Factory smart contract to use

   */

  function setFactory(address factory) external onlyAdmin {

    assembly {

      sstore(_factorySlot, factory)

    }

  }



  /**

   * @notice Get the Holograph chain Id

   * @dev Holograph uses an internal chain id mapping

   */

  function getHolographChainId() external view returns (uint32 holographChainId) {

    assembly {

      holographChainId := sload(_holographChainIdSlot)

    }

  }



  /**

   * @notice Update the Holograph chain ID

   * @dev Useful for updating once a hard fork was mitigated

   * @param holographChainId Holograph chain ID to use

   */

  function setHolographChainId(uint32 holographChainId) external onlyAdmin {

    assembly {

      sstore(_holographChainIdSlot, holographChainId)

    }

  }



  /**

   * @notice Get the address of the Holograph Interfaces module

   * @dev Holograph uses this contract to store data that needs to be accessed by a large portion of the modules

   */

  function getInterfaces() external view returns (address interfaces) {

    assembly {

      interfaces := sload(_interfacesSlot)

    }

  }



  /**

   * @notice Update the Holograph Interfaces module address

   * @param interfaces address of the Holograph Interfaces smart contract to use

   */

  function setInterfaces(address interfaces) external onlyAdmin {

    assembly {

      sstore(_interfacesSlot, interfaces)

    }

  }



  /**

   * @notice Get the address of the Holograph Operator module

   * @dev All cross-chain Holograph Bridge beams are handled by the Holograph Operator module

   */

  function getOperator() external view returns (address operator) {

    assembly {

      operator := sload(_operatorSlot)

    }

  }



  /**

   * @notice Update the Holograph Operator module address

   * @param operator address of the Holograph Operator smart contract to use

   */

  function setOperator(address operator) external onlyAdmin {

    assembly {

      sstore(_operatorSlot, operator)

    }

  }



  /**

   * @notice Get the Holograph Registry module

   * @dev This module stores a reference for all deployed holographable smart contracts

   */

  function getRegistry() external view returns (address registry) {

    assembly {

      registry := sload(_registrySlot)

    }

  }



  /**

   * @notice Update the Holograph Registry module address

   * @param registry address of the Holograph Registry smart contract to use

   */

  function setRegistry(address registry) external onlyAdmin {

    assembly {

      sstore(_registrySlot, registry)

    }

  }



  /**

   * @notice Get the Holograph Treasury module

   * @dev All of the Holograph Protocol assets are stored and managed by this module

   */

  function getTreasury() external view returns (address treasury) {

    assembly {

      treasury := sload(_treasurySlot)

    }

  }



  /**

   * @notice Update the Holograph Treasury module address

   * @param treasury address of the Holograph Treasury smart contract to use

   */

  function setTreasury(address treasury) external onlyAdmin {

    assembly {

      sstore(_treasurySlot, treasury)

    }

  }



  /**

   * @notice Get the Holograph Utility Token address

   * @dev This is the official utility token of the Holograph Protocol

   */

  function getUtilityToken() external view returns (address utilityToken) {

    assembly {

      utilityToken := sload(_utilityTokenSlot)

    }

  }



  /**

   * @notice Update the Holograph Utility Token address

   * @param utilityToken address of the Holograph Utility Token smart contract to use

   */

  function setUtilityToken(address utilityToken) external onlyAdmin {

    assembly {

      sstore(_utilityTokenSlot, utilityToken)

    }

  }



  /**

   * @dev Purposefully reverts to prevent having any type of ether transfered into the contract

   */

  receive() external payable {

    revert();

  }



  /**

   * @dev Purposefully reverts to prevent any calls to undefined functions

   */

  fallback() external payable {

    revert();

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Holographable.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



interface Holographable {

  function bridgeIn(uint32 fromChain, bytes calldata payload) external returns (bytes4);



  function bridgeOut(

    uint32 toChain,

    address sender,

    bytes calldata payload

  ) external returns (bytes4 selector, bytes memory data);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographBridge.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./abstract/Admin.sol";

import "./abstract/Initializable.sol";



import "./interface/HolographERC20Interface.sol";

import "./interface/Holographable.sol";

import "./interface/HolographInterface.sol";

import "./interface/HolographBridgeInterface.sol";

import "./interface/HolographFactoryInterface.sol";

import "./interface/HolographOperatorInterface.sol";

import "./interface/HolographRegistryInterface.sol";

import "./interface/InitializableInterface.sol";



/**

 * @title Holograph Bridge

 * @author https://github.com/holographxyz

 * @notice Beam any holographable contracts and assets across blockchains

 * @dev The contract abstracts all the complexities of making bridge requests and uses a universal interface to bridge any type of holographable assets

 */

contract HolographBridge is Admin, Initializable, HolographBridgeInterface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.factory')) - 1)

   */

  bytes32 constant _factorySlot = 0xa49f20855ba576e09d13c8041c8039fa655356ea27f6c40f1ec46a4301cd5b23;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)

   */

  bytes32 constant _holographSlot = 0xb4107f746e9496e8452accc7de63d1c5e14c19f510932daa04077cd49e8bd77a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.jobNonce')) - 1)

   */

  bytes32 constant _jobNonceSlot = 0x1cda64803f3b43503042e00863791e8d996666552d5855a78d53ee1dd4b3286d;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.operator')) - 1)

   */

  bytes32 constant _operatorSlot = 0x7caba557ad34138fa3b7e43fb574e0e6cc10481c3073e0dffbc560db81b5c60f;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)

   */

  bytes32 constant _registrySlot = 0xce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e7;



  /**

   * @dev Allow calls only from Holograph Operator contract

   */

  modifier onlyOperator() {

    require(msg.sender == address(_operator()), "HOLOGRAPH: operator only call");

    _;

  }



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address factory, address holograph, address operator, address registry) = abi.decode(

      initPayload,

      (address, address, address, address)

    );

    assembly {

      sstore(_adminSlot, origin())

      sstore(_factorySlot, factory)

      sstore(_holographSlot, holograph)

      sstore(_operatorSlot, operator)

      sstore(_registrySlot, registry)

    }

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @notice Receive a beam from another chain

   * @dev This function can only be called by the Holograph Operator module

   * @param fromChain Holograph Chain ID where the brigeOutRequest was created

   * @param holographableContract address of the destination contract that the bridgeInRequest is targeted for

   * @param hToken address of the hToken contract that wrapped the origin chain native gas token

   * @param hTokenRecipient address of recipient for the hToken reward

   * @param hTokenValue exact amount of hToken reward in wei

   * @param doNotRevert boolean used to specify if the call should revert

   * @param bridgeInPayload actual abi encoded bytes of the data that the holographable contract bridgeIn function will receive

   */

  function bridgeInRequest(

    uint256 /* nonce*/,

    uint32 fromChain,

    address holographableContract,

    address hToken,

    address hTokenRecipient,

    uint256 hTokenValue,

    bool doNotRevert,

    bytes calldata bridgeInPayload

  ) external payable onlyOperator {

    /**

     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract

     */

    require(

      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,

      "HOLOGRAPH: not holographed"

    );

    /**

     * @dev make a bridgeIn function call to the holographable contract

     */

    bytes4 selector = Holographable(holographableContract).bridgeIn(fromChain, bridgeInPayload);

    /**

     * @dev ensure returned selector is bridgeIn function signature, to guarantee that the function was called and succeeded

     */

    require(selector == Holographable.bridgeIn.selector, "HOLOGRAPH: bridge in failed");

    /**

     * @dev check if a specific reward amount was assigned to this request

     */

    if (hTokenValue > 0 && hTokenRecipient != address(0)) {

      /**

       * @dev mint the specific hToken amount for hToken recipient

       *      this value is equivalent to amount that is deposited on origin chain's hToken contract

       *      recipient can beam the asset to origin chain and unwrap for native gas token at any time

       */

      require(

        HolographERC20Interface(hToken).holographBridgeMint(hTokenRecipient, hTokenValue) ==

          HolographERC20Interface.holographBridgeMint.selector,

        "HOLOGRAPH: hToken mint failed"

      );

    }

    /**

     * @dev allow the call to revert on demand, for example use case, look into the Holograph Operator's jobEstimator function

     */

    require(doNotRevert, "HOLOGRAPH: reverted");

  }



  /**

   * @notice Create a beam request for a destination chain

   * @dev This function works for deploying contracts and beaming supported holographable assets across chains

   * @param toChain Holograph Chain ID where the beam is being sent to

   * @param holographableContract address of the contract for which the bridge request is being made

   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain

   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain

   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive

   */

  function bridgeOutRequest(

    uint32 toChain,

    address holographableContract,

    uint256 gasLimit,

    uint256 gasPrice,

    bytes calldata bridgeOutPayload

  ) external payable {

    /**

     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract

     */

    require(

      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,

      "HOLOGRAPH: not holographed"

    );

    /**

     * @dev make a bridgeOut function call to the holographable contract

     */

    (bytes4 selector, bytes memory returnedPayload) = Holographable(holographableContract).bridgeOut(

      toChain,

      msg.sender,

      bridgeOutPayload

    );

    /**

     * @dev ensure returned selector is bridgeOut function signature, to guarantee that the function was called and succeeded

     */

    require(selector == Holographable.bridgeOut.selector, "HOLOGRAPH: bridge out failed");

    /**

     * @dev pass the request, along with all data, to Holograph Operator, to handle the cross-chain messaging logic

     */

    _operator().send{value: msg.value}(

      gasLimit,

      gasPrice,

      toChain,

      msg.sender,

      _jobNonce(),

      holographableContract,

      returnedPayload

    );

  }



  /**

   * @notice Do not call this function, it will always revert

   * @dev Used by getBridgeOutRequestPayload function

   *      It is purposefully inverted to always revert on a successful call

   *      Marked as external and not private to allow use inside try/catch of getBridgeOutRequestPayload function

   *      If this function does not revert and returns a string, it is the actual revert reason

   * @param sender address of actual sender that is planning to make a bridgeOutRequest call

   * @param toChain holograph chain id of destination chain

   * @param holographableContract address of the contract for which the bridge request is being made

   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive

   */

  function revertedBridgeOutRequest(

    address sender,

    uint32 toChain,

    address holographableContract,

    bytes calldata bridgeOutPayload

  ) external returns (string memory revertReason) {

    /**

     * @dev make a bridgeOut function call to the holographable contract inside of a try/catch

     */

    try Holographable(holographableContract).bridgeOut(toChain, sender, bridgeOutPayload) returns (

      bytes4 selector,

      bytes memory payload

    ) {

      /**

       * @dev ensure returned selector is bridgeOut function signature, to guarantee that the function was called and succeeded

       */

      if (selector != Holographable.bridgeOut.selector) {

        /**

         * @dev if selector does not match, then it means the request failed

         */

        return "HOLOGRAPH: bridge out failed";

      }

      assembly {

        /**

         * @dev the entire payload is sent back in a revert

         */

        revert(add(payload, 0x20), mload(payload))

      }

    } catch Error(string memory reason) {

      return reason;

    } catch {

      return "HOLOGRAPH: unknown error";

    }

  }



  /**

   * @notice Get the payload created by the bridgeOutRequest function

   * @dev Use this function to get the payload that will be generated by a bridgeOutRequest

   *      Only use this with a static call

   * @param toChain Holograph Chain ID where the beam is being sent to

   * @param holographableContract address of the contract for which the bridge request is being made

   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain

   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain

   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive

   * @return samplePayload bytes made up of the bridgeOutRequest payload

   */

  function getBridgeOutRequestPayload(

    uint32 toChain,

    address holographableContract,

    uint256 gasLimit,

    uint256 gasPrice,

    bytes calldata bridgeOutPayload

  ) external returns (bytes memory samplePayload) {

    /**

     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract

     */

    require(

      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,

      "HOLOGRAPH: not holographed"

    );

    bytes memory payload;

    /**

     * @dev the revertedBridgeOutRequest function is wrapped into a try/catch function

     */

    try this.revertedBridgeOutRequest(msg.sender, toChain, holographableContract, bridgeOutPayload) returns (

      string memory revertReason

    ) {

      /**

       * @dev a non reverted result is actually a revert

       */

      revert(revertReason);

    } catch (bytes memory realResponse) {

      /**

       * @dev a revert is actually success, so the return data is stored as payload

       */

      payload = realResponse;

    }

    uint256 jobNonce;

    assembly {

      jobNonce := sload(_jobNonceSlot)

    }

    /**

     * @dev extract hlgFee from operator

     */

    uint256 fee = 0;

    if (gasPrice < type(uint256).max && gasLimit < type(uint256).max) {

      (uint256 hlgFee, , uint256 dstGasPrice) = _operator().getMessageFee(

        toChain,

        gasLimit,

        gasPrice,

        bridgeOutPayload

      );

      if (gasPrice == 0) {

        gasPrice = dstGasPrice;

      }

      fee = hlgFee;

    }

    /**

     * @dev the data is abi encoded into actual bridgeOutRequest payload bytes

     */

    bytes memory encodedData = abi.encodeWithSelector(

      HolographBridgeInterface.bridgeInRequest.selector,

      /**

       * @dev the latest job nonce is incremented by one

       */

      jobNonce + 1,

      _holograph().getHolographChainId(),

      holographableContract,

      _registry().getHToken(_holograph().getHolographChainId()),

      address(0),

      fee,

      true,

      payload

    );

    /**

     * @dev this abi encodes the data just like in Holograph Operator

     */

    samplePayload = abi.encodePacked(encodedData, gasLimit, gasPrice);

  }



  /**

   * @notice Get the fees associated with sending specific payload

   * @dev Will provide exact costs on protocol and message side, combine the two to get total

   * @dev @param toChain holograph chain id of destination chain for payload

   * @dev @param gasLimit amount of gas to provide for executing payload on destination chain

   * @dev @param gasPrice maximum amount to pay for gas price, can be set to 0 and will be chose automatically

   * @dev @param crossChainPayload the entire packet being sent cross-chain

   * @return hlgFee the amount (in wei) of native gas token that will cost for finalizing job on destiantion chain

   * @return msgFee the amount (in wei) of native gas token that will cost for sending message to destiantion chain

   * @return dstGasPrice the amount (in wei) that destination message maximum gas price will be

   */

  function getMessageFee(uint32, uint256, uint256, bytes calldata) external view returns (uint256, uint256, uint256) {

    assembly {

      calldatacopy(0, 0, calldatasize())

      let result := staticcall(gas(), sload(_operatorSlot), 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  /**

   * @notice Get the address of the Holograph Factory module

   * @dev Used for deploying holographable smart contracts

   */

  function getFactory() external view returns (address factory) {

    assembly {

      factory := sload(_factorySlot)

    }

  }



  /**

   * @notice Update the Holograph Factory module address

   * @param factory address of the Holograph Factory smart contract to use

   */

  function setFactory(address factory) external onlyAdmin {

    assembly {

      sstore(_factorySlot, factory)

    }

  }



  /**

   * @notice Get the Holograph Protocol contract

   * @dev Used for storing a reference to all the primary modules and variables of the protocol

   */

  function getHolograph() external view returns (address holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  /**

   * @notice Update the Holograph Protocol contract address

   * @param holograph address of the Holograph Protocol smart contract to use

   */

  function setHolograph(address holograph) external onlyAdmin {

    assembly {

      sstore(_holographSlot, holograph)

    }

  }



  /**

   * @notice Get the latest job nonce

   * @dev You can use the job nonce as a way to calculate total amount of bridge requests that have been made

   */

  function getJobNonce() external view returns (uint256 jobNonce) {

    assembly {

      jobNonce := sload(_jobNonceSlot)

    }

  }



  /**

   * @notice Get the address of the Holograph Operator module

   * @dev All cross-chain Holograph Bridge beams are handled by the Holograph Operator module

   */

  function getOperator() external view returns (address operator) {

    assembly {

      operator := sload(_operatorSlot)

    }

  }



  /**

   * @notice Update the Holograph Operator module address

   * @param operator address of the Holograph Operator smart contract to use

   */

  function setOperator(address operator) external onlyAdmin {

    assembly {

      sstore(_operatorSlot, operator)

    }

  }



  /**

   * @notice Get the Holograph Registry module

   * @dev This module stores a reference for all deployed holographable smart contracts

   */

  function getRegistry() external view returns (address registry) {

    assembly {

      registry := sload(_registrySlot)

    }

  }



  /**

   * @notice Update the Holograph Registry module address

   * @param registry address of the Holograph Registry smart contract to use

   */

  function setRegistry(address registry) external onlyAdmin {

    assembly {

      sstore(_registrySlot, registry)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Factory Interface

   */

  function _factory() private view returns (HolographFactoryInterface factory) {

    assembly {

      factory := sload(_factorySlot)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Interface

   */

  function _holograph() private view returns (HolographInterface holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  /**

   * @dev Internal nonce, that increments on each call, used for randomness

   */

  function _jobNonce() private returns (uint256 jobNonce) {

    assembly {

      jobNonce := add(sload(_jobNonceSlot), 0x0000000000000000000000000000000000000000000000000000000000000001)

      sstore(_jobNonceSlot, jobNonce)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Operator Interface

   */

  function _operator() private view returns (HolographOperatorInterface operator) {

    assembly {

      operator := sload(_operatorSlot)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Registry Interface

   */

  function _registry() private view returns (HolographRegistryInterface registry) {

    assembly {

      registry := sload(_registrySlot)

    }

  }



  /**

   * @dev Purposefully reverts to prevent having any type of ether transfered into the contract

   */

  receive() external payable {

    revert();

  }



  /**

   * @dev Purposefully reverts to prevent any calls to undefined functions

   */

  fallback() external payable {

    revert();

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographBridgeInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



/**

 * @title Holograph Bridge

 * @author https://github.com/holographxyz

 * @notice Beam any holographable contracts and assets across blockchains

 * @dev The contract abstracts all the complexities of making bridge requests and uses a universal interface to bridge any type of holographable assets

 */

interface HolographBridgeInterface {

  /**

   * @notice Receive a beam from another chain

   * @dev This function can only be called by the Holograph Operator module

   * @param fromChain Holograph Chain ID where the brigeOutRequest was created

   * @param holographableContract address of the destination contract that the bridgeInRequest is targeted for

   * @param hToken address of the hToken contract that wrapped the origin chain native gas token

   * @param hTokenRecipient address of recipient for the hToken reward

   * @param hTokenValue exact amount of hToken reward in wei

   * @param doNotRevert boolean used to specify if the call should revert

   * @param bridgeInPayload actual abi encoded bytes of the data that the holographable contract bridgeIn function will receive

   */

  function bridgeInRequest(

    uint256 nonce,

    uint32 fromChain,

    address holographableContract,

    address hToken,

    address hTokenRecipient,

    uint256 hTokenValue,

    bool doNotRevert,

    bytes calldata bridgeInPayload

  ) external payable;



  /**

   * @notice Create a beam request for a destination chain

   * @dev This function works for deploying contracts and beaming supported holographable assets across chains

   * @param toChain Holograph Chain ID where the beam is being sent to

   * @param holographableContract address of the contract for which the bridge request is being made

   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain

   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain

   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive

   */

  function bridgeOutRequest(

    uint32 toChain,

    address holographableContract,

    uint256 gasLimit,

    uint256 gasPrice,

    bytes calldata bridgeOutPayload

  ) external payable;



  /**

   * @notice Do not call this function, it will always revert

   * @dev Used by getBridgeOutRequestPayload function

   *      It is purposefully inverted to always revert on a successful call

   *      Marked as external and not private to allow use inside try/catch of getBridgeOutRequestPayload function

   *      If this function does not revert and returns a string, it is the actual revert reason

   * @param sender address of actual sender that is planning to make a bridgeOutRequest call

   * @param toChain holograph chain id of destination chain

   * @param holographableContract address of the contract for which the bridge request is being made

   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive

   */

  function revertedBridgeOutRequest(

    address sender,

    uint32 toChain,

    address holographableContract,

    bytes calldata bridgeOutPayload

  ) external returns (string memory revertReason);



  /**

   * @notice Get the payload created by the bridgeOutRequest function

   * @dev Use this function to get the payload that will be generated by a bridgeOutRequest

   *      Only use this with a static call

   * @param toChain Holograph Chain ID where the beam is being sent to

   * @param holographableContract address of the contract for which the bridge request is being made

   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain

   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain

   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive

   * @return samplePayload bytes made up of the bridgeOutRequest payload

   */

  function getBridgeOutRequestPayload(

    uint32 toChain,

    address holographableContract,

    uint256 gasLimit,

    uint256 gasPrice,

    bytes calldata bridgeOutPayload

  ) external returns (bytes memory samplePayload);



  /**

   * @notice Get the fees associated with sending specific payload

   * @dev Will provide exact costs on protocol and message side, combine the two to get total

   * @param toChain holograph chain id of destination chain for payload

   * @param gasLimit amount of gas to provide for executing payload on destination chain

   * @param gasPrice maximum amount to pay for gas price, can be set to 0 and will be chose automatically

   * @param crossChainPayload the entire packet being sent cross-chain

   * @return hlgFee the amount (in wei) of native gas token that will cost for finalizing job on destiantion chain

   * @return msgFee the amount (in wei) of native gas token that will cost for sending message to destiantion chain

   * @return dstGasPrice the amount (in wei) that destination message maximum gas price will be

   */

  function getMessageFee(

    uint32 toChain,

    uint256 gasLimit,

    uint256 gasPrice,

    bytes calldata crossChainPayload

  ) external view returns (uint256 hlgFee, uint256 msgFee, uint256 dstGasPrice);



  /**

   * @notice Get the address of the Holograph Factory module

   * @dev Used for deploying holographable smart contracts

   */

  function getFactory() external view returns (address factory);



  /**

   * @notice Update the Holograph Factory module address

   * @param factory address of the Holograph Factory smart contract to use

   */

  function setFactory(address factory) external;



  /**

   * @notice Get the Holograph Protocol contract

   * @dev Used for storing a reference to all the primary modules and variables of the protocol

   */

  function getHolograph() external view returns (address holograph);



  /**

   * @notice Update the Holograph Protocol contract address

   * @param holograph address of the Holograph Protocol smart contract to use

   */

  function setHolograph(address holograph) external;



  /**

   * @notice Get the latest job nonce

   * @dev You can use the job nonce as a way to calculate total amount of bridge requests that have been made

   */

  function getJobNonce() external view returns (uint256 jobNonce);



  /**

   * @notice Get the address of the Holograph Operator module

   * @dev All cross-chain Holograph Bridge beams are handled by the Holograph Operator module

   */

  function getOperator() external view returns (address operator);



  /**

   * @notice Update the Holograph Operator module address

   * @param operator address of the Holograph Operator smart contract to use

   */

  function setOperator(address operator) external;



  /**

   * @notice Get the Holograph Registry module

   * @dev This module stores a reference for all deployed holographable smart contracts

   */

  function getRegistry() external view returns (address registry);



  /**

   * @notice Update the Holograph Registry module address

   * @param registry address of the Holograph Registry smart contract to use

   */

  function setRegistry(address registry) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographBridgeProxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



import "../interface/InitializableInterface.sol";



contract HolographBridgeProxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.bridge')) - 1)

   */

  bytes32 constant _bridgeSlot = 0xeb87cbb21687feb327e3d58c6c16d552231d12c7a0e8115042a4165fac8a77f9;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address bridge, bytes memory initCode) = abi.decode(data, (address, bytes));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_bridgeSlot, bridge)

    }

    (bool success, bytes memory returnData) = bridge.delegatecall(abi.encodeWithSignature("init(bytes)", initCode));

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == InitializableInterface.init.selector, "initialization failed");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  function getBridge() external view returns (address bridge) {

    assembly {

      bridge := sload(_bridgeSlot)

    }

  }



  function setBridge(address bridge) external onlyAdmin {

    assembly {

      sstore(_bridgeSlot, bridge)

    }

  }



  receive() external payable {}



  fallback() external payable {

    assembly {

      let bridge := sload(_bridgeSlot)

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), bridge, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographDropERC721.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import {ERC721H} from "../../abstract/ERC721H.sol";

import {NonReentrant} from "../../abstract/NonReentrant.sol";



import {HolographERC721Interface} from "../../interface/HolographERC721Interface.sol";

import {HolographerInterface} from "../../interface/HolographerInterface.sol";

import {HolographInterface} from "../../interface/HolographInterface.sol";



import {AddressMintDetails} from "../struct/AddressMintDetails.sol";

import {Configuration} from "../struct/Configuration.sol";

import {DropsInitializer} from "../struct/DropsInitializer.sol";

import {SaleDetails} from "../struct/SaleDetails.sol";

import {SalesConfiguration} from "../struct/SalesConfiguration.sol";



import {Address} from "../library/Address.sol";

import {MerkleProof} from "../library/MerkleProof.sol";



import {IMetadataRenderer} from "../interface/IMetadataRenderer.sol";

import {IOperatorFilterRegistry} from "../interface/IOperatorFilterRegistry.sol";

import {IHolographDropERC721} from "../interface/IHolographDropERC721.sol";



import {IDropsPriceOracle} from "../interface/IDropsPriceOracle.sol";



/**

 * @dev This contract subscribes to the following HolographERC721 events:

 *       - beforeSafeTransfer

 *       - beforeTransfer

 *       - onIsApprovedForAll

 *       - customContractURI

 *

 *       Do not enable or subscribe to any other events unless you modified your source code for them.

 */

contract HolographDropERC721 is NonReentrant, ERC721H, IHolographDropERC721 {

  /**

   * CONTRACT VARIABLES

   * all variables, without custom storage slots, are defined here

   */



  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.osRegistryEnabled')) - 1)

   */

  bytes32 constant _osRegistryEnabledSlot = 0x5c835f3b6bd322d9a084ffdeac746df2b96cce308e7f0612f4ff4f9c490734cc;



  /**

   * @dev Address of the operator filter registry

   */

  IOperatorFilterRegistry public constant openseaOperatorFilterRegistry =

    IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);



  /**

   * @dev Address of the price oracle proxy

   */

  IDropsPriceOracle public constant dropsPriceOracle = IDropsPriceOracle(0x34D76b88BC848aaFD11CA609cC6ab6fEEC638A51);



  /**

   * @dev Internal reference used for minting incremental token ids.

   */

  uint224 private _currentTokenId;



  /**

   * @dev HOLOGRAPH transfer helper address for auto-approval

   */

  address public erc721TransferHelper;



  /**

   * @dev Address of the market filter registry

   */

  address public marketFilterAddress;



  /// @notice Holograph Mint Fee

  uint256 public constant HOLOGRAPH_MINT_FEE = 100000; // $0.10 USD (6 decimal places)



  /// @dev Gas limit for transferring funds

  uint256 private constant STATIC_GAS_LIMIT = 210_000;



  /**

   * @notice Configuration for NFT minting contract storage

   */

  Configuration public config;



  /**

   * @notice Sales configuration

   */

  SalesConfiguration public salesConfig;



  /**

   * @dev Mapping for presale mint counts by address to allow public mint limit

   */

  mapping(address => uint256) public presaleMintsByAddress;



  /**

   * @dev Mapping for presale mint counts by address to allow public mint limit

   */

  mapping(address => uint256) public totalMintsByAddress;



  /**

   * CUSTOM ERRORS

   */



  /**

   * @notice Thrown when there is no active market filter address supported for the current chain

   * @dev Used for enabling and disabling filter for the given chain.

   */

  error MarketFilterAddressNotSupportedForChain();



  /**

   * MODIFIERS

   */



  /**

   * @notice Allows user to mint tokens at a quantity

   */

  modifier canMintTokens(uint256 quantity) {

    if (config.editionSize != 0 && quantity + _currentTokenId > config.editionSize) {

      revert Mint_SoldOut();

    }



    _;

  }



  /**

   * @notice Presale active

   */

  modifier onlyPresaleActive() {

    if (!_presaleActive()) {

      revert Presale_Inactive();

    }



    _;

  }



  /**

   * @notice Public sale active

   */

  modifier onlyPublicSaleActive() {

    if (!_publicSaleActive()) {

      revert Sale_Inactive();

    }



    _;

  }



  /**

   * CONTRACT INITIALIZERS

   * init function is used instead of constructor

   */



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");



    DropsInitializer memory initializer = abi.decode(initPayload, (DropsInitializer));



    erc721TransferHelper = initializer.erc721TransferHelper;

    if (initializer.marketFilterAddress != address(0)) {

      marketFilterAddress = initializer.marketFilterAddress;

    }



    // Setup the owner role

    _setOwner(initializer.initialOwner);



    // to enable sourceExternalCall to work on init, we set holographer here since it's only set after init

    assembly {

      sstore(_holographerSlot, caller())

    }



    // Setup config variables

    config = Configuration({

      metadataRenderer: IMetadataRenderer(initializer.metadataRenderer),

      editionSize: initializer.editionSize,

      royaltyBPS: initializer.royaltyBPS,

      fundsRecipient: initializer.fundsRecipient

    });



    salesConfig = initializer.salesConfiguration;



    // TODO: Need to make sure to initialize the metadata renderer

    if (initializer.metadataRenderer != address(0)) {

      IMetadataRenderer(initializer.metadataRenderer).initializeWithData(initializer.metadataRendererInit);

    }



    if (initializer.enableOpenSeaRoyaltyRegistry && Address.isContract(address(openseaOperatorFilterRegistry))) {

      if (marketFilterAddress == address(0)) {

        // this is a default filter that can be used for OS royalty filtering

        // marketFilterAddress = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;

        // we just register to OS royalties and let OS handle it for us with their default filter contract

        HolographERC721Interface(holographer()).sourceExternalCall(

          address(openseaOperatorFilterRegistry),

          abi.encodeWithSelector(IOperatorFilterRegistry.register.selector, holographer())

        );

      } else {

        // allow user to specify custom filtering contract address

        HolographERC721Interface(holographer()).sourceExternalCall(

          address(openseaOperatorFilterRegistry),

          abi.encodeWithSelector(

            IOperatorFilterRegistry.registerAndSubscribe.selector,

            holographer(),

            marketFilterAddress

          )

        );

      }

      assembly {

        sstore(_osRegistryEnabledSlot, true)

      }

    }



    setStatus(1);



    return _init(initPayload);

  }



  /**

   * PUBLIC NON STATE CHANGING FUNCTIONS

   * static

   */



  /**

   * @notice Returns the version of the contract

   * @dev Used for contract versioning and validation

   * @return version string representing the version of the contract

   */

  function version() external pure returns (string memory) {

    return "1.0.0";

  }



  function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {

    return interfaceId == type(IHolographDropERC721).interfaceId;

  }



  /**

   * PUBLIC NON STATE CHANGING FUNCTIONS

   * dynamic

   */



  function owner() external view override(ERC721H, IHolographDropERC721) returns (address) {

    return _getOwner();

  }



  function isAdmin(address user) external view returns (bool) {

    return (_getOwner() == user);

  }



  function beforeSafeTransfer(

    address _from,

    address /* _to*/,

    uint256 /* _tokenId*/,

    bytes calldata /* _data*/

  ) external view returns (bool) {

    if (

      _from != address(0) && // skip on mints

      _from != msgSender() // skip on transfers from sender

    ) {

      bool osRegistryEnabled;

      assembly {

        osRegistryEnabled := sload(_osRegistryEnabledSlot)

      }

      if (osRegistryEnabled) {

        try openseaOperatorFilterRegistry.isOperatorAllowed(address(this), msgSender()) returns (bool allowed) {

          return allowed;

        } catch {

          revert OperatorNotAllowed(msgSender());

        }

      }

    }

    return true;

  }



  function beforeTransfer(

    address _from,

    address /* _to*/,

    uint256 /* _tokenId*/,

    bytes calldata /* _data*/

  ) external view returns (bool) {

    if (

      _from != address(0) && // skip on mints

      _from != msgSender() // skip on transfers from sender

    ) {

      bool osRegistryEnabled;

      assembly {

        osRegistryEnabled := sload(_osRegistryEnabledSlot)

      }

      if (osRegistryEnabled) {

        try openseaOperatorFilterRegistry.isOperatorAllowed(address(this), msgSender()) returns (bool allowed) {

          return allowed;

        } catch {

          revert OperatorNotAllowed(msgSender());

        }

      }

    }

    return true;

  }



  function onIsApprovedForAll(address /* _wallet*/, address _operator) external view returns (bool approved) {

    approved = (erc721TransferHelper != address(0) && _operator == erc721TransferHelper);

  }



  /**

   * @notice Sale details

   * @return SaleDetails sale information details

   */

  function saleDetails() external view returns (SaleDetails memory) {

    return

      SaleDetails({

        publicSaleActive: _publicSaleActive(),

        presaleActive: _presaleActive(),

        publicSalePrice: salesConfig.publicSalePrice,

        publicSaleStart: salesConfig.publicSaleStart,

        publicSaleEnd: salesConfig.publicSaleEnd,

        presaleStart: salesConfig.presaleStart,

        presaleEnd: salesConfig.presaleEnd,

        presaleMerkleRoot: salesConfig.presaleMerkleRoot,

        totalMinted: _currentTokenId,

        maxSupply: config.editionSize,

        maxSalePurchasePerAddress: salesConfig.maxSalePurchasePerAddress

      });

  }



  /// @notice The Holograph fee is a flat fee for each mint in USD

  /// @dev Gets the Holograph protocol fee for amount of mints in USD

  function getHolographFeeUsd(uint256 quantity) public view returns (uint256 fee) {

    fee = HOLOGRAPH_MINT_FEE * quantity;

  }



  /// @notice The Holograph fee is a flat fee for each mint in wei after conversion

  /// @dev Gets the Holograph protocol fee for amount of mints in wei

  function getHolographFeeWei(uint256 quantity) public view returns (uint256) {

    return _usdToWei(HOLOGRAPH_MINT_FEE * quantity);

  }



  /**

   * @dev Number of NFTs the user has minted per address

   * @param minter to get counts for

   */

  function mintedPerAddress(address minter) external view returns (AddressMintDetails memory) {

    return

      AddressMintDetails({

        presaleMints: presaleMintsByAddress[minter],

        publicMints: totalMintsByAddress[minter] - presaleMintsByAddress[minter],

        totalMints: totalMintsByAddress[minter]

      });

  }



  /**

   * @notice Contract URI Getter, proxies to metadataRenderer

   * @return Contract URI

   */

  function contractURI() external view returns (string memory) {

    return config.metadataRenderer.contractURI();

  }



  /**

   * @notice Getter for metadataRenderer contract

   */

  function metadataRenderer() external view returns (IMetadataRenderer) {

    return IMetadataRenderer(config.metadataRenderer);

  }



  /**

   * @notice Convert USD price to current price in native Ether units

   */

  function getNativePrice() external view returns (uint256) {

    return _usdToWei(salesConfig.publicSalePrice);

  }



  /**

   * @notice Returns the name of the token through the holographer entrypoint

   */

  function name() external view returns (string memory) {

    return HolographERC721Interface(holographer()).name();

  }



  /**

   * @notice Token URI Getter, proxies to metadataRenderer

   * @param tokenId id of token to get URI for

   * @return Token URI

   */

  function tokenURI(uint256 tokenId) external view returns (string memory) {

    HolographERC721Interface H721 = HolographERC721Interface(holographer());

    require(H721.exists(tokenId), "ERC721: token does not exist");



    return config.metadataRenderer.tokenURI(tokenId);

  }



  /**

   * PUBLIC STATE CHANGING FUNCTIONS

   * available to all

   */



  function multicall(bytes[] memory data) public returns (bytes[] memory results) {

    results = new bytes[](data.length);

    for (uint256 i = 0; i < data.length; i++) {

      results[i] = Address.functionDelegateCall(address(this), abi.encodePacked(data[i], msgSender()));

    }

  }



  /**

   * @dev This allows the user to purchase/mint a edition at the given price in the contract.

   */

  function purchase(

    uint256 quantity

  ) external payable nonReentrant canMintTokens(quantity) onlyPublicSaleActive returns (uint256) {

    uint256 salePrice = _usdToWei(salesConfig.publicSalePrice);

    uint256 holographMintFeeInWei = _usdToWei(HOLOGRAPH_MINT_FEE);



    if (msg.value < (salePrice + holographMintFeeInWei) * quantity) {

      // The error will display the wrong price that was sent in USD

      revert Purchase_WrongPrice((salesConfig.publicSalePrice + HOLOGRAPH_MINT_FEE) * quantity);

    }

    uint256 remainder = msg.value - (salePrice * quantity);



    // If max purchase per address == 0 there is no limit.

    // Any other number, the per address mint limit is that.

    if (

      salesConfig.maxSalePurchasePerAddress != 0 &&

      totalMintsByAddress[msgSender()] + quantity - presaleMintsByAddress[msgSender()] >

      salesConfig.maxSalePurchasePerAddress

    ) {

      revert Purchase_TooManyForAddress();

    }



    // First mint the NFTs

    _mintNFTs(msgSender(), quantity);



    // Then send the Holograph fee to the recipient (currently the Holograph Treasury)

    _payoutHolographFee(quantity);



    HolographERC721Interface H721 = HolographERC721Interface(holographer());

    uint256 chainPrepend = H721.sourceGetChainPrepend();

    uint256 firstMintedTokenId = (chainPrepend + uint256(_currentTokenId - quantity)) + 1;



    emit Sale({

      to: msgSender(),

      quantity: quantity,

      pricePerToken: salePrice,

      firstPurchasedTokenId: firstMintedTokenId

    });



    // Refund any overpayment

    if (remainder > 0) {

      msgSender().call{value: remainder, gas: gasleft() > STATIC_GAS_LIMIT ? STATIC_GAS_LIMIT : gasleft()}("");

    }



    return firstMintedTokenId;

  }



  /**

   * @notice Merkle-tree based presale purchase function

   * @param quantity quantity to purchase

   * @param maxQuantity max quantity that can be purchased via merkle proof #

   * @param pricePerToken price that each token is purchased at

   * @param merkleProof proof for presale mint

   */

  function purchasePresale(

    uint256 quantity,

    uint256 maxQuantity,

    uint256 pricePerToken,

    bytes32[] calldata merkleProof

  ) external payable nonReentrant canMintTokens(quantity) onlyPresaleActive returns (uint256) {

    if (

      !MerkleProof.verify(

        merkleProof,

        salesConfig.presaleMerkleRoot,

        keccak256(

          // address, uint256, uint256

          abi.encode(msgSender(), maxQuantity, pricePerToken)

        )

      )

    ) {

      revert Presale_MerkleNotApproved();

    }



    uint256 weiPricePerToken = _usdToWei(pricePerToken);

    if (msg.value < weiPricePerToken * quantity) {

      revert Purchase_WrongPrice(pricePerToken * quantity);

    }

    uint256 remainder = msg.value - (weiPricePerToken * quantity);



    presaleMintsByAddress[msgSender()] += quantity;

    if (presaleMintsByAddress[msgSender()] > maxQuantity) {

      revert Presale_TooManyForAddress();

    }



    // First mint the NFTs

    _mintNFTs(msgSender(), quantity);



    // Then send the Holograph fee to the recipient (currently the Holograph Treasury)

    _payoutHolographFee(quantity);



    HolographERC721Interface H721 = HolographERC721Interface(holographer());

    uint256 chainPrepend = H721.sourceGetChainPrepend();

    uint256 firstMintedTokenId = (chainPrepend + uint256(_currentTokenId - quantity)) + 1;



    emit Sale({

      to: msgSender(),

      quantity: quantity,

      pricePerToken: weiPricePerToken,

      firstPurchasedTokenId: firstMintedTokenId

    });



    // Refund any overpayment

    if (remainder > 0) {

      msgSender().call{value: remainder, gas: gasleft() > STATIC_GAS_LIMIT ? STATIC_GAS_LIMIT : gasleft()}("");

    }



    return firstMintedTokenId;

  }



  /**

   * PUBLIC STATE CHANGING FUNCTIONS

   * admin only

   */



  /**

   * @notice Proxy to update market filter settings in the main registry contracts

   * @notice Requires admin permissions

   * @param args Calldata args to pass to the registry

   */

  function updateMarketFilterSettings(bytes calldata args) external onlyOwner {

    HolographERC721Interface(holographer()).sourceExternalCall(address(openseaOperatorFilterRegistry), args);

    bool osRegistryEnabled = openseaOperatorFilterRegistry.isRegistered(holographer());

    assembly {

      sstore(_osRegistryEnabledSlot, osRegistryEnabled)

    }

  }



  /**

   * @notice Manage subscription for marketplace filtering based off royalty payouts.

   * @param enable Enable filtering to non-royalty payout marketplaces

   */

  function manageMarketFilterSubscription(bool enable) external onlyOwner {

    address self = holographer();

    if (marketFilterAddress == address(0)) {

      revert MarketFilterAddressNotSupportedForChain();

    }

    if (!openseaOperatorFilterRegistry.isRegistered(self) && enable) {

      HolographERC721Interface(self).sourceExternalCall(

        address(openseaOperatorFilterRegistry),

        abi.encodeWithSelector(IOperatorFilterRegistry.registerAndSubscribe.selector, self, marketFilterAddress)

      );

    } else if (enable) {

      HolographERC721Interface(self).sourceExternalCall(

        address(openseaOperatorFilterRegistry),

        abi.encodeWithSelector(IOperatorFilterRegistry.subscribe.selector, self, marketFilterAddress)

      );

    } else {

      HolographERC721Interface(self).sourceExternalCall(

        address(openseaOperatorFilterRegistry),

        abi.encodeWithSelector(IOperatorFilterRegistry.unsubscribe.selector, self, false)

      );

      HolographERC721Interface(self).sourceExternalCall(

        address(openseaOperatorFilterRegistry),

        abi.encodeWithSelector(IOperatorFilterRegistry.unregister.selector, self)

      );

    }

    bool osRegistryEnabled = openseaOperatorFilterRegistry.isRegistered(self);

    assembly {

      sstore(_osRegistryEnabledSlot, osRegistryEnabled)

    }

  }



  function modifyMarketFilterAddress(address newMarketFilterAddress) external onlyOwner {

    marketFilterAddress = newMarketFilterAddress;

  }



  /**

   * @notice Admin mint tokens to a recipient for free

   * @param recipient recipient to mint to

   * @param quantity quantity to mint

   */

  function adminMint(address recipient, uint256 quantity) external onlyOwner canMintTokens(quantity) returns (uint256) {

    _mintNFTs(recipient, quantity);



    return _currentTokenId;

  }



  /**

   * @dev Mints multiple editions to the given list of addresses.

   * @param recipients list of addresses to send the newly minted editions to

   */

  function adminMintAirdrop(

    address[] calldata recipients

  ) external onlyOwner canMintTokens(recipients.length) returns (uint256) {

    unchecked {

      for (uint256 i = 0; i < recipients.length; i++) {

        _mintNFTs(recipients[i], 1);

      }

    }



    return _currentTokenId;

  }



  /**

   * @notice Set a new metadata renderer

   * @param newRenderer new renderer address to use

   * @param setupRenderer data to setup new renderer with

   */

  function setMetadataRenderer(IMetadataRenderer newRenderer, bytes memory setupRenderer) external onlyOwner {

    config.metadataRenderer = newRenderer;



    if (setupRenderer.length > 0) {

      newRenderer.initializeWithData(setupRenderer);

    }



    emit UpdatedMetadataRenderer({sender: msgSender(), renderer: newRenderer});

  }



  /**

   * @dev This sets the sales configuration

   * @param publicSalePrice New public sale price

   * @param maxSalePurchasePerAddress Max # of purchases (public) per address allowed

   * @param publicSaleStart unix timestamp when the public sale starts

   * @param publicSaleEnd unix timestamp when the public sale ends (set to 0 to disable)

   * @param presaleStart unix timestamp when the presale starts

   * @param presaleEnd unix timestamp when the presale ends

   * @param presaleMerkleRoot merkle root for the presale information

   */

  function setSaleConfiguration(

    uint104 publicSalePrice,

    uint32 maxSalePurchasePerAddress,

    uint64 publicSaleStart,

    uint64 publicSaleEnd,

    uint64 presaleStart,

    uint64 presaleEnd,

    bytes32 presaleMerkleRoot

  ) external onlyOwner {

    salesConfig.publicSalePrice = publicSalePrice;

    salesConfig.maxSalePurchasePerAddress = maxSalePurchasePerAddress;

    salesConfig.publicSaleStart = publicSaleStart;

    salesConfig.publicSaleEnd = publicSaleEnd;

    salesConfig.presaleStart = presaleStart;

    salesConfig.presaleEnd = presaleEnd;

    salesConfig.presaleMerkleRoot = presaleMerkleRoot;



    emit SalesConfigChanged(msgSender());

  }



  /**

   * @notice Set a different funds recipient

   * @param newRecipientAddress new funds recipient address

   */

  function setFundsRecipient(address payable newRecipientAddress) external onlyOwner {

    if (newRecipientAddress == address(0)) {

      revert("Funds Recipient cannot be 0 address");

    }

    config.fundsRecipient = newRecipientAddress;

    emit FundsRecipientChanged(newRecipientAddress, msgSender());

  }



  /**

   * @notice This withdraws native tokens from the contract to the contract owner.

   */

  function withdraw() external override nonReentrant {

    if (config.fundsRecipient == address(0)) {

      revert("Funds Recipient address not set");

    }

    address sender = msgSender();



    // Get the contract balance

    uint256 funds = address(this).balance;



    // Check if withdraw is allowed for sender

    if (sender != config.fundsRecipient && sender != _getOwner()) {

      revert Access_WithdrawNotAllowed();

    }



    // Payout recipient

    (bool successFunds, ) = config.fundsRecipient.call{value: funds, gas: STATIC_GAS_LIMIT}("");

    if (!successFunds) {

      revert Withdraw_FundsSendFailure();

    }



    // Emit event for indexing

    emit FundsWithdrawn(sender, config.fundsRecipient, funds);

  }



  /**

   * @notice Admin function to finalize and open edition sale

   */

  function finalizeOpenEdition() external onlyOwner {

    if (config.editionSize != type(uint64).max) {

      revert Admin_UnableToFinalizeNotOpenEdition();

    }



    config.editionSize = uint64(_currentTokenId);

    emit OpenMintFinalized(msgSender(), config.editionSize);

  }



  /**

   * INTERNAL FUNCTIONS

   * non state changing

   */



  function _presaleActive() internal view returns (bool) {

    return salesConfig.presaleStart <= block.timestamp && salesConfig.presaleEnd > block.timestamp;

  }



  function _publicSaleActive() internal view returns (bool) {

    return salesConfig.publicSaleStart <= block.timestamp && salesConfig.publicSaleEnd > block.timestamp;

  }



  function _usdToWei(uint256 amount) internal view returns (uint256 weiAmount) {

    if (amount == 0) {

      return 0;

    }

    weiAmount = dropsPriceOracle.convertUsdToWei(amount);

  }



  /**

   * INTERNAL FUNCTIONS

   * state changing

   */



  function _mintNFTs(address recipient, uint256 quantity) internal {

    HolographERC721Interface H721 = HolographERC721Interface(holographer());

    uint256 chainPrepend = H721.sourceGetChainPrepend();

    uint224 tokenId = 0;

    for (uint256 i = 0; i < quantity; i++) {

      _currentTokenId += 1;

      while (

        H721.exists(chainPrepend + uint256(_currentTokenId)) || H721.burned(chainPrepend + uint256(_currentTokenId))

      ) {

        _currentTokenId += 1;

      }

      tokenId = _currentTokenId;

      H721.sourceMint(recipient, tokenId);

      // uint256 id = chainPrepend + uint256(tokenId);

    }

  }



  function _payoutHolographFee(uint256 quantity) internal {

    // Transfer protocol mint fee to recipient address

    uint256 holographMintFeeWei = getHolographFeeWei(quantity);



    // Payout Holograph fee

    address payable holographFeeRecipient = payable(

      HolographInterface(HolographerInterface(holographer()).getHolograph()).getTreasury()

    );



    (bool success, ) = holographFeeRecipient.call{value: holographMintFeeWei, gas: STATIC_GAS_LIMIT}("");

    if (!success) {

      revert FeePaymentFailed();

    }

    emit MintFeePayout(holographMintFeeWei, holographFeeRecipient, success);

  }



  fallback() external payable override {

    assembly {

      // Allocate memory for the error message

      let errorMsg := mload(0x40)



      // Error message: "Function not found", properly padded with zeroes

      mstore(errorMsg, 0x46756e6374696f6e206e6f7420666f756e640000000000000000000000000000)



      // Revert with the error message

      revert(errorMsg, 20) // 20 is the length of the error message in bytes

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographDropERC721Proxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../../abstract/Admin.sol";

import "../../abstract/Initializable.sol";



import "../../interface/HolographRegistryInterface.sol";



contract HolographDropERC721Proxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.contractType')) - 1)

   */

  bytes32 constant _contractTypeSlot = 0x0b671eb65810897366dd82c4cbb7d9dff8beda8484194956e81e89b8a361d9c7;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)

   */

  bytes32 constant _registrySlot = 0xce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e7;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (bytes32 contractType, address registry, bytes memory initCode) = abi.decode(data, (bytes32, address, bytes));

    assembly {

      sstore(_contractTypeSlot, contractType)

      sstore(_registrySlot, registry)

    }

    (bool success, bytes memory returnData) = getHolographDropERC721Source().delegatecall(

      abi.encodeWithSignature("init(bytes)", initCode)

    );

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == Initializable.init.selector, "initialization failed");



    _setInitialized();

    return Initializable.init.selector;

  }



  function getHolographDropERC721Source() public view returns (address) {

    HolographRegistryInterface registry;

    bytes32 contractType;

    assembly {

      registry := sload(_registrySlot)

      contractType := sload(_contractTypeSlot)

    }

    return registry.getContractTypeAddress(contractType);

  }



  receive() external payable {}



  fallback() external payable {

    address HolographDropERC721Source = getHolographDropERC721Source();

    assembly {

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), HolographDropERC721Source, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographedERC1155.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



/// @title Holograph ERC-1155 Non-Fungible Token Standard

/// @dev See https://holograph.network/standard/ERC-1155

///  Note: the ERC-165 identifier for this interface is 0xFFFFFFFF.

interface HolographedERC1155 {

  // event id = 1

  function bridgeIn(

    uint32 _chainId,

    address _from,

    address _to,

    uint256 _tokenId,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 2

  function bridgeOut(

    uint32 _chainId,

    address _from,

    address _to,

    uint256 _tokenId,

    uint256 _amount

  ) external returns (bytes memory _data);



  // event id = 3

  function afterApprove(address _owner, address _to, uint256 _tokenId, uint256 _amount) external returns (bool success);



  // event id = 4

  function beforeApprove(

    address _owner,

    address _to,

    uint256 _tokenId,

    uint256 _amount

  ) external returns (bool success);



  // event id = 5

  function afterApprovalAll(address _to, bool _approved) external returns (bool success);



  // event id = 6

  function beforeApprovalAll(address _to, bool _approved) external returns (bool success);



  // event id = 7

  function afterBurn(address _owner, uint256 _tokenId, uint256 _amount) external returns (bool success);



  // event id = 8

  function beforeBurn(address _owner, uint256 _tokenId, uint256 _amount) external returns (bool success);



  // event id = 9

  function afterMint(address _owner, uint256 _tokenId, uint256 _amount) external returns (bool success);



  // event id = 10

  function beforeMint(address _owner, uint256 _tokenId, uint256 _amount) external returns (bool success);



  // event id = 11

  function afterSafeTransfer(

    address _from,

    address _to,

    uint256 _tokenId,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 12

  function beforeSafeTransfer(

    address _from,

    address _to,

    uint256 _tokenId,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 13

  function afterTransfer(

    address _from,

    address _to,

    uint256 _tokenId,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 14

  function beforeTransfer(

    address _from,

    address _to,

    uint256 _tokenId,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 15

  function afterOnERC1155Received(

    address _operator,

    address _from,

    address _to,

    uint256 _tokenId,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 16

  function beforeOnERC1155Received(

    address _operator,

    address _from,

    address _to,

    uint256 _tokenId,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographedERC20.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



/// @title Holograph ERC-20 Fungible Token Standard

/// @dev See https://holograph.network/standard/ERC-20

///  Note: the ERC-165 identifier for this interface is 0xFFFFFFFF.

interface HolographedERC20 {

  // event id = 1

  function bridgeIn(

    uint32 _chainId,

    address _from,

    address _to,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 2

  function bridgeOut(

    uint32 _chainId,

    address _from,

    address _to,

    uint256 _amount

  ) external returns (bytes memory _data);



  // event id = 3

  function afterApprove(address _owner, address _to, uint256 _amount) external returns (bool success);



  // event id = 4

  function beforeApprove(address _owner, address _to, uint256 _amount) external returns (bool success);



  // event id = 5

  function afterOnERC20Received(

    address _token,

    address _from,

    address _to,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 6

  function beforeOnERC20Received(

    address _token,

    address _from,

    address _to,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 7

  function afterBurn(address _owner, uint256 _amount) external returns (bool success);



  // event id = 8

  function beforeBurn(address _owner, uint256 _amount) external returns (bool success);



  // event id = 9

  function afterMint(address _owner, uint256 _amount) external returns (bool success);



  // event id = 10

  function beforeMint(address _owner, uint256 _amount) external returns (bool success);



  // event id = 11

  function afterSafeTransfer(

    address _from,

    address _to,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 12

  function beforeSafeTransfer(

    address _from,

    address _to,

    uint256 _amount,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 13

  function afterTransfer(address _from, address _to, uint256 _amount) external returns (bool success);



  // event id = 14

  function beforeTransfer(address _from, address _to, uint256 _amount) external returns (bool success);



  // event id = 15

  function onAllowance(address _owner, address _to, uint256 _amount) external returns (bool success);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographedERC721.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



/// @title Holograph ERC-721 Non-Fungible Token Standard

/// @dev See https://holograph.network/standard/ERC-721

///  Note: the ERC-165 identifier for this interface is 0xFFFFFFFF.

interface HolographedERC721 {

  // event id = 1

  function bridgeIn(

    uint32 _chainId,

    address _from,

    address _to,

    uint256 _tokenId,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 2

  function bridgeOut(

    uint32 _chainId,

    address _from,

    address _to,

    uint256 _tokenId

  ) external returns (bytes memory _data);



  // event id = 3

  function afterApprove(address _owner, address _to, uint256 _tokenId) external returns (bool success);



  // event id = 4

  function beforeApprove(address _owner, address _to, uint256 _tokenId) external returns (bool success);



  // event id = 5

  function afterApprovalAll(address _sender, address _to, bool _approved) external returns (bool success);



  // event id = 6

  function beforeApprovalAll(address _sender, address _to, bool _approved) external returns (bool success);



  // event id = 7

  function afterBurn(address _owner, uint256 _tokenId) external returns (bool success);



  // event id = 8

  function beforeBurn(address _owner, uint256 _tokenId) external returns (bool success);



  // event id = 9

  function afterMint(address _owner, uint256 _tokenId) external returns (bool success);



  // event id = 10

  function beforeMint(address _owner, uint256 _tokenId) external returns (bool success);



  // event id = 11

  function afterSafeTransfer(

    address _from,

    address _to,

    uint256 _tokenId,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 12

  function beforeSafeTransfer(

    address _from,

    address _to,

    uint256 _tokenId,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 13

  function afterTransfer(

    address _from,

    address _to,

    uint256 _tokenId,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 14

  function beforeTransfer(

    address _from,

    address _to,

    uint256 _tokenId,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 15

  function afterOnERC721Received(

    address _operator,

    address _from,

    address _to,

    uint256 _tokenId,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 16

  function beforeOnERC721Received(

    address _operator,

    address _from,

    address _to,

    uint256 _tokenId,

    bytes calldata _data

  ) external returns (bool success);



  // event id = 17

  function onIsApprovedForAll(address _wallet, address _operator) external view returns (bool approved);



  // event id = 18

  function contractURI() external view returns (string memory contractJSON);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographedGeneric.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



/// @title Holograph Generic Standard

interface HolographedGeneric {

  // event id = 1

  function bridgeIn(uint32 _chainId, bytes calldata _data) external returns (bool success);



  // event id = 2

  function bridgeOut(uint32 _chainId, address _sender, bytes calldata _payload) external returns (bytes memory _data);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Holographer.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



import "../interface/HolographInterface.sol";

import "../interface/HolographerInterface.sol";

import "../interface/HolographRegistryInterface.sol";

import "../interface/InitializableInterface.sol";



/**

 * @dev This contract is a binder. It puts together all the variables to make the underlying contracts functional and be bridgeable.

 */

contract Holographer is Admin, Initializable, HolographerInterface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.originChain')) - 1)

   */

  bytes32 constant _originChainSlot = 0xd49ffd6af8249d6e6b5963d9d2b22c6db30ad594cb468453047a14e1c1bcde4d;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)

   */

  bytes32 constant _holographSlot = 0xb4107f746e9496e8452accc7de63d1c5e14c19f510932daa04077cd49e8bd77a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.contractType')) - 1)

   */

  bytes32 constant _contractTypeSlot = 0x0b671eb65810897366dd82c4cbb7d9dff8beda8484194956e81e89b8a361d9c7;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.sourceContract')) - 1)

   */

  bytes32 constant _sourceContractSlot = 0x27d542086d1e831d40b749e7f5509a626c3047a36d160781c40d5acc83e5b074;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.blockHeight')) - 1)

   */

  bytes32 constant _blockHeightSlot = 0x9172848b0f1df776dc924b58e7fa303087ae0409bbf611608529e7f747d55de3;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPHER: already initialized");

    (bytes memory encoded, bytes memory initCode) = abi.decode(initPayload, (bytes, bytes));

    (uint32 originChain, address holograph, bytes32 contractType, address sourceContract) = abi.decode(

      encoded,

      (uint32, address, bytes32, address)

    );

    assembly {

      sstore(_adminSlot, caller())

      sstore(_blockHeightSlot, number())

      sstore(_contractTypeSlot, contractType)

      sstore(_holographSlot, holograph)

      sstore(_originChainSlot, originChain)

      sstore(_sourceContractSlot, sourceContract)

    }

    (bool success, bytes memory returnData) = HolographRegistryInterface(HolographInterface(holograph).getRegistry())

      .getReservedContractTypeAddress(contractType)

      .delegatecall(abi.encodeWithSelector(InitializableInterface.init.selector, initCode));

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == InitializableInterface.init.selector, "HOLOGRAPH: initialization failed");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @dev Returns the contract type that is used for loading the Enforcer

   */

  function getContractType() external view returns (bytes32 contractType) {

    assembly {

      contractType := sload(_contractTypeSlot)

    }

  }



  /**

   * @dev Returns the block height of when the smart contract was deployed. Useful for retrieving deployment config for re-deployment on other EVM-compatible chains.

   */

  function getDeploymentBlock() external view returns (uint256 deploymentBlock) {

    assembly {

      deploymentBlock := sload(_blockHeightSlot)

    }

  }



  /**

   * @dev Returns a hardcoded address for the Holograph smart contract.

   */

  function getHolograph() external view returns (address holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  /**

   * @dev Returns a hardcoded address for the Holograph smart contract that controls and enforces the ERC standards.

   */

  function getHolographEnforcer() public view returns (address) {

    HolographInterface holograph;

    bytes32 contractType;

    assembly {

      holograph := sload(_holographSlot)

      contractType := sload(_contractTypeSlot)

    }

    return HolographRegistryInterface(holograph.getRegistry()).getReservedContractTypeAddress(contractType);

  }



  /**

   * @dev Returns the original chain that contract was deployed on.

   */

  function getOriginChain() external view returns (uint32 originChain) {

    assembly {

      originChain := sload(_originChainSlot)

    }

  }



  /**

   * @dev Returns a hardcoded address for the custom secure storage contract deployed in parallel with this contract deployment.

   */

  function getSourceContract() external view returns (address sourceContract) {

    assembly {

      sourceContract := sload(_sourceContractSlot)

    }

  }



  /**

   * @dev Purposefully left empty, to prevent running out of gas errors when receiving native token payments.

   */

  receive() external payable {}



  /**

   * @dev This takes the Enforcer's source code, runs it, and uses current address for storage slots.

   */

  fallback() external payable {

    address holographEnforcer = getHolographEnforcer();

    assembly {

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), holographEnforcer, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographERC20.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/EIP712.sol";

import "../abstract/Initializable.sol";

import "../abstract/NonReentrant.sol";

import "../abstract/Owner.sol";



import "../enum/HolographERC20Event.sol";

import "../enum/InterfaceType.sol";



import "../interface/ERC20.sol";

import "../interface/ERC20Burnable.sol";

import "../interface/HolographERC20Interface.sol";

import "../interface/ERC20Metadata.sol";

import "../interface/ERC20Permit.sol";

import "../interface/ERC20Receiver.sol";

import "../interface/ERC20Safer.sol";

import "../interface/ERC165.sol";

import "../interface/Holographable.sol";

import "../interface/HolographedERC20.sol";

import "../interface/HolographInterface.sol";

import "../interface/HolographerInterface.sol";

import "../interface/HolographRegistryInterface.sol";

import "../interface/InitializableInterface.sol";

import "../interface/HolographInterfacesInterface.sol";

import "../interface/Ownable.sol";



/**

 * @title Holograph Bridgeable ERC-20 Token

 * @author Holograph Foundation

 * @notice A smart contract for minting and managing Holograph Bridgeable ERC20 Tokens.

 * @dev The entire logic and functionality of the smart contract is self-contained.

 */

contract HolographERC20 is Admin, Owner, Initializable, NonReentrant, EIP712, HolographERC20Interface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)

   */

  bytes32 constant _holographSlot = 0xb4107f746e9496e8452accc7de63d1c5e14c19f510932daa04077cd49e8bd77a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.sourceContract')) - 1)

   */

  bytes32 constant _sourceContractSlot = 0x27d542086d1e831d40b749e7f5509a626c3047a36d160781c40d5acc83e5b074;



  /**

   * @dev Configuration for events to trigger for source smart contract.

   */

  uint256 private _eventConfig;



  /**

   * @dev Mapping of all the addresse's balances.

   */

  mapping(address => uint256) private _balances;



  /**

   * @dev Mapping of all authorized operators, and capped amounts.

   */

  mapping(address => mapping(address => uint256)) private _allowances;



  /**

   * @dev Total number of token in circulation.

   */

  uint256 private _totalSupply;



  /**

   * @dev Token name.

   */

  string private _name;



  /**

   * @dev Token ticker symbol.

   */

  string private _symbol;



  /**

   * @dev Token number of decimal places.

   */

  uint8 private _decimals;



  /**

   * @dev List of used up nonces. Used in the ERC20Permit interface functionality.

   */

  mapping(address => uint256) private _nonces;



  /**

   * @notice Only allow calls from bridge smart contract.

   */

  modifier onlyBridge() {

    require(msg.sender == _holograph().getBridge(), "ERC20: bridge only call");

    _;

  }



  /**

   * @notice Only allow calls from source smart contract.

   */

  modifier onlySource() {

    address sourceContract;

    assembly {

      sourceContract := sload(_sourceContractSlot)

    }

    require(msg.sender == sourceContract, "ERC20: source only call");

    _;

  }



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "ERC20: already initialized");

    InitializableInterface sourceContract;

    assembly {

      sstore(_reentrantSlot, 0x0000000000000000000000000000000000000000000000000000000000000001)

      sstore(_ownerSlot, caller())

      sourceContract := sload(_sourceContractSlot)

    }

    (

      string memory contractName,

      string memory contractSymbol,

      uint8 contractDecimals,

      uint256 eventConfig,

      string memory domainSeperator,

      string memory domainVersion,

      bool skipInit,

      bytes memory initCode

    ) = abi.decode(initPayload, (string, string, uint8, uint256, string, string, bool, bytes));

    _name = contractName;

    _symbol = contractSymbol;

    _decimals = contractDecimals;

    _eventConfig = eventConfig;

    if (!skipInit) {

      require(sourceContract.init(initCode) == InitializableInterface.init.selector, "ERC20: could not init source");

    }

    _setInitialized();

    _eip712_init(domainSeperator, domainVersion);

    return InitializableInterface.init.selector;

  }



  /**

   * @dev Purposefully left empty, to prevent running out of gas errors when receiving native token payments.

   */

  receive() external payable {}



  /**

   * @notice Fallback to the source contract.

   * @dev Any function call that is not covered here, will automatically be sent over to the source contract.

   */

  fallback() external payable {

    assembly {

      calldatacopy(0, 0, calldatasize())

      mstore(calldatasize(), caller())

      let result := call(gas(), sload(_sourceContractSlot), callvalue(), 0, add(calldatasize(), 0x20), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  /*

   * @dev all calls to source contract go through this function in order to inject original msg.sender in calldata

   */

  function _sourceCall(bytes memory payload) private returns (bool output) {

    assembly {

      mstore(add(payload, add(mload(payload), 0x20)), caller())

      // offset memory position by 32 bytes to skip the 32 bytes where bytes length is stored

      // add 32 bytes to bytes length to include the appended msg.sender to calldata

      let result := call(

        gas(),

        sload(_sourceContractSlot),

        callvalue(),

        add(payload, 0x20),

        add(mload(payload), 0x20),

        0,

        0

      )

      let pos := mload(0x40)

      // reserve memory space for return data

      mstore(0x40, add(pos, returndatasize()))

      returndatacopy(pos, 0, returndatasize())

      switch result

      case 0 {

        revert(pos, returndatasize())

      }

      output := mload(pos)

    }

  }



  function decimals() public view returns (uint8) {

    return _decimals;

  }



  /**

   * @dev Although EIP-165 is not required for ERC20 contracts, we still decided to implement it.

   *

   * This makes it easier for external smart contracts to easily identify a valid ERC20 token contract.

   */

  function supportsInterface(bytes4 interfaceId) external view returns (bool) {

    HolographInterfacesInterface interfaces = HolographInterfacesInterface(_interfaces());

    ERC165 erc165Contract;

    assembly {

      erc165Contract := sload(_sourceContractSlot)

    }

    if (

      interfaces.supportsInterface(InterfaceType.ERC20, interfaceId) || erc165Contract.supportsInterface(interfaceId) // check global interfaces // check if source supports interface

    ) {

      return true;

    } else {

      return false;

    }

  }



  function allowance(address account, address spender) public view returns (uint256) {

    return _allowances[account][spender];

  }



  function balanceOf(address account) public view returns (uint256) {

    return _balances[account];

  }



  // solhint-disable-next-line func-name-mixedcase

  function DOMAIN_SEPARATOR() public view returns (bytes32) {

    return _domainSeparatorV4();

  }



  function name() public view returns (string memory) {

    return _name;

  }



  function nonces(address account) public view returns (uint256) {

    return _nonces[account];

  }



  function symbol() public view returns (string memory) {

    return _symbol;

  }



  function totalSupply() public view returns (uint256) {

    return _totalSupply;

  }



  function approve(address spender, uint256 amount) public returns (bool) {

    if (_isEventRegistered(HolographERC20Event.beforeApprove)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC20.beforeApprove.selector, msg.sender, spender, amount))

      );

    }

    _approve(msg.sender, spender, amount);

    if (_isEventRegistered(HolographERC20Event.afterApprove)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC20.afterApprove.selector, msg.sender, spender, amount)));

    }

    return true;

  }



  function burn(uint256 amount) public {

    if (_isEventRegistered(HolographERC20Event.beforeBurn)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC20.beforeBurn.selector, msg.sender, amount)));

    }

    _burn(msg.sender, amount);

    if (_isEventRegistered(HolographERC20Event.afterBurn)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC20.afterBurn.selector, msg.sender, amount)));

    }

  }



  function _allowance(address account, address to, uint256 amount) internal {

    uint256 currentAllowance = _allowances[account][to];

    if (currentAllowance >= amount) {

      unchecked {

        _allowances[account][to] = currentAllowance - amount;

      }

    } else {

      if (_isEventRegistered(HolographERC20Event.onAllowance)) {

        require(

          _sourceCall(abi.encodeWithSelector(HolographedERC20.onAllowance.selector, account, to, amount)),

          "ERC20: amount exceeds allowance"

        );

        _allowances[account][to] = 0;

      } else {

        revert("ERC20: amount exceeds allowance");

      }

    }

  }



  function burnFrom(address account, uint256 amount) public returns (bool) {

    _allowance(account, msg.sender, amount);

    if (_isEventRegistered(HolographERC20Event.beforeBurn)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC20.beforeBurn.selector, account, amount)));

    }

    _burn(account, amount);

    if (_isEventRegistered(HolographERC20Event.afterBurn)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC20.afterBurn.selector, account, amount)));

    }

    return true;

  }



  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {

    uint256 currentAllowance = _allowances[msg.sender][spender];

    require(currentAllowance >= subtractedValue, "ERC20: decreased below zero");

    uint256 newAllowance;

    unchecked {

      newAllowance = currentAllowance - subtractedValue;

    }

    if (_isEventRegistered(HolographERC20Event.beforeApprove)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC20.beforeApprove.selector, msg.sender, spender, newAllowance))

      );

    }

    _approve(msg.sender, spender, newAllowance);

    if (_isEventRegistered(HolographERC20Event.afterApprove)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC20.afterApprove.selector, msg.sender, spender, newAllowance))

      );

    }

    return true;

  }



  function bridgeIn(uint32 fromChain, bytes calldata payload) external onlyBridge returns (bytes4) {

    (address from, address to, uint256 amount, bytes memory data) = abi.decode(

      payload,

      (address, address, uint256, bytes)

    );

    _mint(to, amount);

    if (_isEventRegistered(HolographERC20Event.bridgeIn)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC20.bridgeIn.selector, fromChain, from, to, amount, data)),

        "HOLOGRAPH: bridge in failed"

      );

    }

    return Holographable.bridgeIn.selector;

  }



  function bridgeOut(

    uint32 toChain,

    address sender,

    bytes calldata payload

  ) external onlyBridge returns (bytes4 selector, bytes memory data) {

    (address from, address to, uint256 amount) = abi.decode(payload, (address, address, uint256));

    if (sender != from) {

      _allowance(from, sender, amount);

    }

    if (_isEventRegistered(HolographERC20Event.bridgeOut)) {

      /*

       * @dev making a bridgeOut call to source contract

       *      assembly is used so that msg.sender can be injected in the calldata

       */

      bytes memory sourcePayload = abi.encodeWithSelector(

        HolographedERC20.bridgeOut.selector,

        toChain,

        from,

        to,

        amount

      );

      assembly {

        // it is important to add 32 bytes in order to accommodate the first 32 bytes being used for storing length of bytes

        mstore(add(sourcePayload, add(mload(sourcePayload), 0x20)), caller())

        let result := call(

          gas(),

          sload(_sourceContractSlot),

          callvalue(),

          // start reading data from memory position, plus 32 bytes, to skip bytes length indicator

          add(sourcePayload, 0x20),

          // add an additional 32 bytes to bytes length to include the appended caller address

          add(mload(sourcePayload), 0x20),

          0,

          0

        )

        // when reading back data, skip the first 32 bytes which is used to indicate bytes position in calldata

        // also subtract 32 bytes from returndatasize to accomodate the skipped first 32 bytes

        returndatacopy(data, 0x20, sub(returndatasize(), 0x20))

        switch result

        case 0 {

          revert(0, returndatasize())

        }

      }

    }

    _burn(from, amount);

    return (Holographable.bridgeOut.selector, abi.encode(from, to, amount, data));

  }



  /**

   * @dev Allows the bridge to mint tokens (used for hTokens only).

   */

  function holographBridgeMint(address to, uint256 amount) external onlyBridge returns (bytes4) {

    _mint(to, amount);

    return HolographERC20Interface.holographBridgeMint.selector;

  }



  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {

    uint256 currentAllowance = _allowances[msg.sender][spender];

    uint256 newAllowance;

    unchecked {

      newAllowance = currentAllowance + addedValue;

    }

    unchecked {

      require(newAllowance >= currentAllowance, "ERC20: increased above max value");

    }

    if (_isEventRegistered(HolographERC20Event.beforeApprove)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC20.beforeApprove.selector, msg.sender, spender, newAllowance))

      );

    }

    _approve(msg.sender, spender, newAllowance);

    if (_isEventRegistered(HolographERC20Event.afterApprove)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC20.afterApprove.selector, msg.sender, spender, newAllowance))

      );

    }

    return true;

  }



  function onERC20Received(

    address account,

    address sender,

    uint256 amount,

    bytes calldata data

  ) public returns (bytes4) {

    require(_isContract(account), "ERC20: operator not contract");

    if (_isEventRegistered(HolographERC20Event.beforeOnERC20Received)) {

      require(

        _sourceCall(

          abi.encodeWithSelector(

            HolographedERC20.beforeOnERC20Received.selector,

            account,

            sender,

            address(this),

            amount,

            data

          )

        )

      );

    }

    try ERC20(account).balanceOf(address(this)) returns (uint256) {

      // do nothing, just want to see if this reverts due to invalid erc-20 contract

    } catch {

      revert("ERC20: failed getting balance");

    }

    if (_isEventRegistered(HolographERC20Event.afterOnERC20Received)) {

      require(

        _sourceCall(

          abi.encodeWithSelector(

            HolographedERC20.afterOnERC20Received.selector,

            account,

            sender,

            address(this),

            amount,

            data

          )

        )

      );

    }

    return ERC20Receiver.onERC20Received.selector;

  }



  function permit(

    address account,

    address spender,

    uint256 amount,

    uint256 deadline,

    uint8 v,

    bytes32 r,

    bytes32 s

  ) public {

    require(block.timestamp <= deadline, "ERC20: expired deadline");

    bytes32 structHash = keccak256(

      abi.encode(

        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9,

        account,

        spender,

        amount,

        _useNonce(account),

        deadline

      )

    );

    bytes32 hash = _hashTypedDataV4(structHash);

    address signer = _recover(r, s, v, hash);

    require(signer == account, "ERC20: invalid signature");

    if (_isEventRegistered(HolographERC20Event.beforeApprove)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC20.beforeApprove.selector, account, spender, amount)));

    }

    _approve(account, spender, amount);

    if (_isEventRegistered(HolographERC20Event.afterApprove)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC20.afterApprove.selector, account, spender, amount)));

    }

  }



  function safeTransfer(address recipient, uint256 amount) public returns (bool) {

    return safeTransfer(recipient, amount, "");

  }



  function safeTransfer(address recipient, uint256 amount, bytes memory data) public returns (bool) {

    if (_isEventRegistered(HolographERC20Event.beforeSafeTransfer)) {

      require(

        _sourceCall(

          abi.encodeWithSelector(HolographedERC20.beforeSafeTransfer.selector, msg.sender, recipient, amount, data)

        )

      );

    }

    _transfer(msg.sender, recipient, amount);

    if (_isEventRegistered(HolographERC20Event.afterSafeTransfer)) {

      require(

        _sourceCall(

          abi.encodeWithSelector(HolographedERC20.afterSafeTransfer.selector, msg.sender, recipient, amount, data)

        )

      );

    }

    return true;

  }



  function safeTransferFrom(address account, address recipient, uint256 amount) public returns (bool) {

    return safeTransferFrom(account, recipient, amount, "");

  }



  function safeTransferFrom(

    address account,

    address recipient,

    uint256 amount,

    bytes memory data

  ) public returns (bool) {

    if (account != msg.sender) {

      /*

       * @dev This is intentionally enabled to remove friction when operator or bridge needs to move tokens

       */

      if (msg.sender != _holograph().getBridge() && msg.sender != _holograph().getOperator()) {

        _allowance(account, msg.sender, amount);

      }

    }

    if (_isEventRegistered(HolographERC20Event.beforeSafeTransfer)) {

      require(

        _sourceCall(

          abi.encodeWithSelector(HolographedERC20.beforeSafeTransfer.selector, account, recipient, amount, data)

        )

      );

    }

    _transfer(account, recipient, amount);

    if (_isEventRegistered(HolographERC20Event.afterSafeTransfer)) {

      require(

        _sourceCall(

          abi.encodeWithSelector(HolographedERC20.afterSafeTransfer.selector, account, recipient, amount, data)

        )

      );

    }

    return true;

  }



  /**

   * @dev Allows for source smart contract to burn tokens.

   */

  function sourceBurn(address from, uint256 amount) external onlySource {

    _burn(from, amount);

  }



  /**

   * @dev Allows for source smart contract to mint tokens.

   */

  function sourceMint(address to, uint256 amount) external onlySource {

    _mint(to, amount);

  }



  /**

   * @dev Allows for source smart contract to mint a batch of token amounts.

   */

  function sourceMintBatch(address[] calldata wallets, uint256[] calldata amounts) external onlySource {

    for (uint256 i = 0; i < wallets.length; i++) {

      _mint(wallets[i], amounts[i]);

    }

  }



  /**

   * @dev Allows for source smart contract to transfer tokens.

   */

  function sourceTransfer(address from, address to, uint256 amount) external onlySource {

    _transfer(from, to, amount);

  }



  /**

   * @dev Allows for source smart contract to withdraw contract balance.

   */

  function sourceTransfer(address payable destination, uint256 amount) external onlySource {

    destination.transfer(amount);

  }



  /**

   * @dev Allows for source smart contract to make calls to external contracts

   */

  function sourceExternalCall(address target, bytes calldata data) external onlySource {

    assembly {

      calldatacopy(0, data.offset, data.length)

      let result := call(gas(), target, callvalue(), 0, data.length, 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  function transfer(address recipient, uint256 amount) public returns (bool) {

    if (_isEventRegistered(HolographERC20Event.beforeTransfer)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC20.beforeTransfer.selector, msg.sender, recipient, amount))

      );

    }

    _transfer(msg.sender, recipient, amount);

    if (_isEventRegistered(HolographERC20Event.afterTransfer)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC20.afterTransfer.selector, msg.sender, recipient, amount))

      );

    }

    return true;

  }



  function transferFrom(address account, address recipient, uint256 amount) public returns (bool) {

    if (account != msg.sender) {

      /*

       * @dev This is intentionally enabled to remove friction when operator or bridge needs to move tokens

       */

      if (msg.sender != _holograph().getBridge() && msg.sender != _holograph().getOperator()) {

        _allowance(account, msg.sender, amount);

      }

    }

    if (_isEventRegistered(HolographERC20Event.beforeTransfer)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC20.beforeTransfer.selector, account, recipient, amount))

      );

    }

    _transfer(account, recipient, amount);

    if (_isEventRegistered(HolographERC20Event.afterTransfer)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC20.afterTransfer.selector, account, recipient, amount)));

    }

    return true;

  }



  function _approve(address account, address spender, uint256 amount) private {

    require(account != address(0), "ERC20: account is zero address");

    require(spender != address(0), "ERC20: spender is zero address");

    _allowances[account][spender] = amount;

    emit Approval(account, spender, amount);

  }



  function _burn(address account, uint256 amount) private {

    require(account != address(0), "ERC20: account is zero address");

    uint256 accountBalance = _balances[account];

    require(accountBalance >= amount, "ERC20: amount exceeds balance");

    unchecked {

      _balances[account] = accountBalance - amount;

    }

    _totalSupply -= amount;

    _registryTransfer(account, address(0), amount);

  }



  /**

   * @notice Mints tokens.

   * @dev Mint a specific amount of tokens to a specific address.

   * @param to Address to mint to.

   * @param amount Amount of tokens to mint.

   */

  function _mint(address to, uint256 amount) private {

    require(to != address(0), "ERC20: minting to burn address");

    _totalSupply += amount;

    _balances[to] += amount;

    _registryTransfer(address(0), to, amount);

  }



  function _transfer(address account, address recipient, uint256 amount) private {

    require(account != address(0), "ERC20: account is zero address");

    require(recipient != address(0), "ERC20: recipient is zero address");

    uint256 accountBalance = _balances[account];

    require(accountBalance >= amount, "ERC20: amount exceeds balance");

    unchecked {

      _balances[account] = accountBalance - amount;

    }

    _balances[recipient] += amount;

    _registryTransfer(account, recipient, amount);

  }



  function _registryTransfer(address _from, address _to, uint256 _amount) private {

    emit Transfer(_from, _to, _amount);

    HolographRegistryInterface(_holograph().getRegistry()).holographableEvent(

      abi.encode(

        // keccak256("TransferERC20(address,address,uint256)")

        bytes32(0x9b035625e569d1d2bf54830a290aefba7ab11610ba8490871dc62b86b63a8956),

        _from,

        _to,

        _amount

      )

    );

  }



  /**

   * @dev "Consume a nonce": return the current value and increment.

   *

   * _Available since v4.1._

   */

  function _useNonce(address account) private returns (uint256 current) {

    current = _nonces[account];

    _nonces[account]++;

  }



  function _isContract(address contractAddress) private view returns (bool) {

    bytes32 codehash;

    assembly {

      codehash := extcodehash(contractAddress)

    }

    return (codehash != 0x0 && codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);

  }



  /**

   * @dev Internal function used for identifying signer

   */

  function _recover(bytes32 r, bytes32 s, uint8 v, bytes32 hash) private pure returns (address signer) {

    if (v < 27) {

      v += 27;

    }

    require(v == 27 || v == 28, "ERC20: invalid v-value");

    // prevent signature malleability by checking if s-value is in the upper range

    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {

      // if s-value is in upper range, calculate a new s-value

      s = bytes32(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - uint256(s));

      // flip the v-value

      if (v == 27) {

        v = 28;

      } else {

        v = 27;

      }

      // check if s-value is still in upper range

      require(

        uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,

        "ERC20: invalid s-value"

      );

    }

    signer = ecrecover(hash, v, r, s);

    require(signer != address(0), "ERC20: zero address signer");

  }



  /**

   * @dev Get the interfaces contract address.

   */

  function _interfaces() private view returns (address) {

    return _holograph().getInterfaces();

  }



  function owner() public view override returns (address) {

    Ownable ownableContract;

    assembly {

      ownableContract := sload(_sourceContractSlot)

    }

    return ownableContract.owner();

  }



  function _holograph() private view returns (HolographInterface holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  function _isEventRegistered(HolographERC20Event _eventName) private view returns (bool) {

    return ((_eventConfig >> uint256(_eventName)) & uint256(1) == 1 ? true : false);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographERC20Event.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



enum HolographERC20Event {

  UNDEFINED, // 0

  bridgeIn, //  1

  bridgeOut, //  2

  afterApprove, //  3

  beforeApprove, //  4

  afterOnERC20Received, //  5

  beforeOnERC20Received, //  6

  afterBurn, //  7

  beforeBurn, //  8

  afterMint, //  9

  beforeMint, // 10

  afterSafeTransfer, // 11

  beforeSafeTransfer, // 12

  afterTransfer, // 13

  beforeTransfer, // 14

  onAllowance // 15

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographERC20Interface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./ERC20.sol";

import "./ERC20Burnable.sol";

import "./ERC20Metadata.sol";

import "./ERC20Permit.sol";

import "./ERC20Receiver.sol";

import "./ERC20Safer.sol";

import "./ERC165.sol";

import "./Holographable.sol";



interface HolographERC20Interface is

  ERC165,

  ERC20,

  ERC20Burnable,

  ERC20Metadata,

  ERC20Receiver,

  ERC20Safer,

  ERC20Permit,

  Holographable

{

  function holographBridgeMint(address to, uint256 amount) external returns (bytes4);



  function sourceBurn(address from, uint256 amount) external;



  function sourceMint(address to, uint256 amount) external;



  function sourceMintBatch(address[] calldata wallets, uint256[] calldata amounts) external;



  function sourceTransfer(address from, address to, uint256 amount) external;



  function sourceTransfer(address payable destination, uint256 amount) external;



  function sourceExternalCall(address target, bytes calldata data) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographERC721.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";

import "../abstract/Owner.sol";



import "../enum/HolographERC721Event.sol";

import "../enum/InterfaceType.sol";



import "../interface/ERC165.sol";

import "../interface/ERC721.sol";

import "../interface/HolographERC721Interface.sol";

import "../interface/ERC721Metadata.sol";

import "../interface/ERC721TokenReceiver.sol";

import "../interface/Holographable.sol";

import "../interface/HolographedERC721.sol";

import "../interface/HolographInterface.sol";

import "../interface/HolographerInterface.sol";

import "../interface/HolographRegistryInterface.sol";

import "../interface/InitializableInterface.sol";

import "../interface/HolographInterfacesInterface.sol";

import "../interface/HolographRoyaltiesInterface.sol";

import "../interface/Ownable.sol";



/**

 * @title Holograph Bridgeable ERC-721 Collection

 * @author Holograph Foundation

 * @notice A smart contract for minting and managing Holograph Bridgeable ERC721 NFTs.

 * @dev The entire logic and functionality of the smart contract is self-contained.

 */

contract HolographERC721 is Admin, Owner, HolographERC721Interface, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)

   */

  bytes32 constant _holographSlot = 0xb4107f746e9496e8452accc7de63d1c5e14c19f510932daa04077cd49e8bd77a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.sourceContract')) - 1)

   */

  bytes32 constant _sourceContractSlot = 0x27d542086d1e831d40b749e7f5509a626c3047a36d160781c40d5acc83e5b074;



  /**

   * @dev Configuration for events to trigger for source smart contract.

   */

  uint256 private _eventConfig;



  /**

   * @dev Collection name.

   */

  string private _name;



  /**

   * @dev Collection symbol.

   */

  string private _symbol;



  /**

   * @dev Collection royalty base points.

   */

  uint16 private _bps;



  /**

   * @dev Array of all token ids in collection.

   */

  uint256[] private _allTokens;



  /**

   * @dev Map of token id to array index of _ownedTokens.

   */

  mapping(uint256 => uint256) private _ownedTokensIndex;



  /**

   * @dev Token id to wallet (owner) address map.

   */

  mapping(uint256 => address) private _tokenOwner;



  /**

   * @dev 1-to-1 map of token id that was assigned an approved operator address.

   */

  mapping(uint256 => address) private _tokenApprovals;



  /**

   * @dev Map of total tokens owner by a specific address.

   */

  mapping(address => uint256) private _ownedTokensCount;



  /**

   * @dev Map of array of token ids owned by a specific address.

   */

  mapping(address => uint256[]) private _ownedTokens;



  /**

   * @notice Map of full operator approval for a particular address.

   * @dev Usually utilised for supporting marketplace proxy wallets.

   */

  mapping(address => mapping(address => bool)) private _operatorApprovals;



  /**

   * @dev Mapping from token id to position in the allTokens array.

   */

  mapping(uint256 => uint256) private _allTokensIndex;



  /**

   * @dev Mapping of all token ids that have been burned. This is to prevent re-minting of same token ids.

   */

  mapping(uint256 => bool) private _burnedTokens;



  /**

   * @notice Only allow calls from bridge smart contract.

   */

  modifier onlyBridge() {

    require(msg.sender == _holograph().getBridge(), "ERC721: bridge only call");

    _;

  }



  /**

   * @notice Only allow calls from source smart contract.

   */

  modifier onlySource() {

    address sourceContract;

    assembly {

      sourceContract := sload(_sourceContractSlot)

    }

    require(msg.sender == sourceContract, "ERC721: source only call");

    _;

  }



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "ERC721: already initialized");

    InitializableInterface sourceContract;

    assembly {

      sstore(_ownerSlot, caller())

      sourceContract := sload(_sourceContractSlot)

    }

    (

      string memory contractName,

      string memory contractSymbol,

      uint16 contractBps,

      uint256 eventConfig,

      bool skipInit,

      bytes memory initCode

    ) = abi.decode(initPayload, (string, string, uint16, uint256, bool, bytes));

    _name = contractName;

    _symbol = contractSymbol;

    _bps = contractBps;

    _eventConfig = eventConfig;

    if (!skipInit) {

      require(sourceContract.init(initCode) == InitializableInterface.init.selector, "ERC721: could not init source");

      (bool success, bytes memory returnData) = _royalties().delegatecall(

        abi.encodeWithSelector(

          HolographRoyaltiesInterface.initHolographRoyalties.selector,

          abi.encode(uint256(contractBps), uint256(0))

        )

      );

      bytes4 selector = abi.decode(returnData, (bytes4));

      require(success && selector == InitializableInterface.init.selector, "ERC721: could not init royalties");

    }



    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @notice Gets a base64 encoded contract JSON file.

   * @return string The URI.

   */

  function contractURI() external view returns (string memory) {

    if (_isEventRegistered(HolographERC721Event.customContractURI)) {

      assembly {

        calldatacopy(0, 0, calldatasize())

        mstore(calldatasize(), caller())

        let result := staticcall(gas(), sload(_sourceContractSlot), 0, add(calldatasize(), 0x20), 0, 0)

        returndatacopy(0, 0, returndatasize())

        switch result

        case 0 {

          revert(0, returndatasize())

        }

        default {

          return(0, returndatasize())

        }

      }

    }

    return HolographInterfacesInterface(_interfaces()).contractURI(_name, "", "", _bps, address(this));

  }



  /**

   * @notice Gets the name of the collection.

   * @return string The collection name.

   */

  function name() external view returns (string memory) {

    return _name;

  }



  /**

   * @notice Shows the interfaces the contracts support

   * @dev Must add new 4 byte interface Ids here to acknowledge support

   * @param interfaceId ERC165 style 4 byte interfaceId.

   * @return bool True if supported.

   */

  function supportsInterface(bytes4 interfaceId) external view returns (bool) {

    HolographInterfacesInterface interfaces = HolographInterfacesInterface(_interfaces());

    ERC165 erc165Contract;

    assembly {

      erc165Contract := sload(_sourceContractSlot)

    }

    if (

      interfaces.supportsInterface(InterfaceType.ERC721, interfaceId) || // check global interfaces

      interfaces.supportsInterface(InterfaceType.ROYALTIES, interfaceId) || // check if royalties supports interface

      erc165Contract.supportsInterface(interfaceId) // check if source supports interface

    ) {

      return true;

    } else {

      return false;

    }

  }



  /**

   * @notice Gets the collection's symbol.

   * @return string The symbol.

   */

  function symbol() external view returns (string memory) {

    return _symbol;

  }



  /**

   * @notice Get's the URI of the token.

   * @dev Defaults the the Arweave URI

   * @return string The URI.

   */

  function tokenURI(uint256 tokenId) external view returns (string memory) {

    assembly {

      calldatacopy(0, 0, calldatasize())

      mstore(calldatasize(), caller())

      let result := staticcall(gas(), sload(_sourceContractSlot), 0, add(calldatasize(), 0x20), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  /**

   * @notice Get list of tokens owned by wallet.

   * @param wallet The wallet address to get tokens for.

   * @return uint256[] Returns an array of token ids owned by wallet.

   */

  function tokensOfOwner(address wallet) external view returns (uint256[] memory) {

    return _ownedTokens[wallet];

  }



  /**

   * @notice Get set length list, starting from index, for tokens owned by wallet.

   * @param wallet The wallet address to get tokens for.

   * @param index The index to start enumeration from.

   * @param length The length of returned results.

   * @return tokenIds uint256[] Returns a set length array of token ids owned by wallet.

   */

  function tokensOfOwner(

    address wallet,

    uint256 index,

    uint256 length

  ) external view returns (uint256[] memory tokenIds) {

    uint256 supply = _ownedTokensCount[wallet];

    if (index + length > supply) {

      length = supply - index;

    }

    tokenIds = new uint256[](length);

    for (uint256 i = 0; i < length; i++) {

      tokenIds[i] = _ownedTokens[wallet][index + i];

    }

  }



  /**

   * @notice Adds a new address to the token's approval list.

   * @dev Requires the sender to be in the approved addresses.

   * @param to The address to approve.

   * @param tokenId The affected token.

   */

  function approve(address to, uint256 tokenId) external payable {

    address tokenOwner = _tokenOwner[tokenId];

    require(to != tokenOwner, "ERC721: cannot approve self");

    require(_isApprovedStrict(msg.sender, tokenId), "ERC721: not approved sender");

    if (_isEventRegistered(HolographERC721Event.beforeApprove)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC721.beforeApprove.selector, tokenOwner, to, tokenId)));

    }

    _tokenApprovals[tokenId] = to;

    emit Approval(tokenOwner, to, tokenId);

    if (_isEventRegistered(HolographERC721Event.afterApprove)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC721.afterApprove.selector, tokenOwner, to, tokenId)));

    }

  }



  /**

   * @notice Burns the token.

   * @dev The sender must be the owner or approved.

   * @param tokenId The token to burn.

   */

  function burn(uint256 tokenId) external {

    require(_isApproved(msg.sender, tokenId), "ERC721: not approved sender");

    address wallet = _tokenOwner[tokenId];

    if (_isEventRegistered(HolographERC721Event.beforeBurn)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC721.beforeBurn.selector, wallet, tokenId)));

    }

    _burn(wallet, tokenId);

    if (_isEventRegistered(HolographERC721Event.afterBurn)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC721.afterBurn.selector, wallet, tokenId)));

    }

  }



  function bridgeIn(uint32 fromChain, bytes calldata payload) external onlyBridge returns (bytes4) {

    (address from, address to, uint256 tokenId, bytes memory data) = abi.decode(

      payload,

      (address, address, uint256, bytes)

    );

    require(!_exists(tokenId), "ERC721: token already exists");

    delete _burnedTokens[tokenId];

    _mint(to, tokenId);

    if (_isEventRegistered(HolographERC721Event.bridgeIn)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC721.bridgeIn.selector, fromChain, from, to, tokenId, data)),

        "HOLOGRAPH: bridge in failed"

      );

    }

    return Holographable.bridgeIn.selector;

  }



  function bridgeOut(

    uint32 toChain,

    address sender,

    bytes calldata payload

  ) external onlyBridge returns (bytes4 selector, bytes memory data) {

    (address from, address to, uint256 tokenId) = abi.decode(payload, (address, address, uint256));

    require(to != address(0), "ERC721: zero address");

    require(_isApproved(sender, tokenId), "ERC721: sender not approved");

    require(from == _tokenOwner[tokenId], "ERC721: from is not owner");

    if (_isEventRegistered(HolographERC721Event.bridgeOut)) {

      /*

       * @dev making a bridgeOut call to source contract

       *      assembly is used so that msg.sender can be injected in the calldata

       */

      bytes memory sourcePayload = abi.encodeWithSelector(

        HolographedERC721.bridgeOut.selector,

        toChain,

        from,

        to,

        tokenId

      );

      assembly {

        // it is important to add 32 bytes in order to accommodate the first 32 bytes being used for storing length of bytes

        mstore(add(sourcePayload, add(mload(sourcePayload), 0x20)), caller())

        let result := call(

          gas(),

          sload(_sourceContractSlot),

          callvalue(),

          // start reading data from memory position, plus 32 bytes, to skip bytes length indicator

          add(sourcePayload, 0x20),

          // add an additional 32 bytes to bytes length to include the appended caller address

          add(mload(sourcePayload), 0x20),

          0,

          0

        )

        // when reading back data, skip the first 32 bytes which is used to indicate bytes position in calldata

        // also subtract 32 bytes from returndatasize to accomodate the skipped first 32 bytes

        returndatacopy(data, 0x20, sub(returndatasize(), 0x20))

        switch result

        case 0 {

          revert(0, returndatasize())

        }

      }

    }

    _burn(from, tokenId);

    return (Holographable.bridgeOut.selector, abi.encode(from, to, tokenId, data));

  }



  /**

   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients

   * are aware of the ERC721 protocol to prevent tokens from being forever locked.

   * @param from cannot be the zero address.

   * @param to cannot be the zero address.

   * @param tokenId token must exist and be owned by `from`.

   */

  function safeTransferFrom(address from, address to, uint256 tokenId) external payable {

    safeTransferFrom(from, to, tokenId, "");

  }



  /**

   * @notice Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients

   * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.

   * are aware of the ERC721 protocol to prevent tokens from being forever locked.

   * @param from cannot be the zero address.

   * @param to cannot be the zero address.

   * @param tokenId token must exist and be owned by `from`.

   */

  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public payable {

    require(_isApproved(msg.sender, tokenId), "ERC721: not approved sender");

    if (_isEventRegistered(HolographERC721Event.beforeSafeTransfer)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC721.beforeSafeTransfer.selector, from, to, tokenId, data))

      );

    }

    _transferFrom(from, to, tokenId);

    if (_isContract(to)) {

      require(

        ERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenId, data) ==

          ERC721TokenReceiver.onERC721Received.selector,

        "ERC721: onERC721Received fail"

      );

    }

    if (_isEventRegistered(HolographERC721Event.afterSafeTransfer)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC721.afterSafeTransfer.selector, from, to, tokenId, data))

      );

    }

  }



  /**

   * @notice Adds a new approved operator.

   * @dev Allows platforms to sell/transfer all your NFTs. Used with proxy contracts like OpenSea/Rarible.

   * @param to The address to approve.

   * @param approved Turn on or off approval status.

   */

  function setApprovalForAll(address to, bool approved) external {

    require(to != msg.sender, "ERC721: cannot approve self");

    if (_isEventRegistered(HolographERC721Event.beforeApprovalAll)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC721.beforeApprovalAll.selector, msg.sender, to, approved))

      );

    }

    _operatorApprovals[msg.sender][to] = approved;

    emit ApprovalForAll(msg.sender, to, approved);

    if (_isEventRegistered(HolographERC721Event.afterApprovalAll)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedERC721.afterApprovalAll.selector, msg.sender, to, approved))

      );

    }

  }



  /**

   * @dev Allows for source smart contract to burn a token.

   *  Note: this is put in place to make sure that custom logic could be implemented for merging, gamification, etc.

   *  Note: token cannot be burned if it's locked by bridge.

   */

  function sourceBurn(uint256 tokenId) external onlySource {

    address wallet = _tokenOwner[tokenId];

    _burn(wallet, tokenId);

  }



  /**

   * @dev Allows for source smart contract to mint a token.

   */

  function sourceMint(address to, uint224 tokenId) external onlySource {

    // uint32 is reserved for chain id to be used

    // we need to get current chain id, and prepend it to tokenId

    // this will prevent possible tokenId overlap if minting simultaneously on multiple chains is possible

    uint256 token = uint256(bytes32(abi.encodePacked(_chain(), tokenId)));

    require(!_burnedTokens[token], "ERC721: can't mint burned token");

    _mint(to, token);

  }



  /**

   * @dev Allows source to get the prepend for their tokenIds.

   */

  function sourceGetChainPrepend() external view onlySource returns (uint256) {

    return uint256(bytes32(abi.encodePacked(_chain(), uint224(0))));

  }



  /**

   * @dev Allows for source smart contract to mint a batch of tokens.

   */

  function sourceMintBatch(address to, uint224[] calldata tokenIds) external onlySource {

    require(tokenIds.length < 1000, "ERC721: max batch size is 1000");

    uint32 chain = _chain();

    uint256 token;

    for (uint256 i = 0; i < tokenIds.length; i++) {

      require(!_burnedTokens[token], "ERC721: can't mint burned token");

      token = uint256(bytes32(abi.encodePacked(chain, tokenIds[i])));

      require(!_burnedTokens[token], "ERC721: can't mint burned token");

      _mint(to, token);

    }

  }



  /**

   * @dev Allows for source smart contract to mint a batch of tokens.

   */

  function sourceMintBatch(address[] calldata wallets, uint224[] calldata tokenIds) external onlySource {

    require(wallets.length == tokenIds.length, "ERC721: array length missmatch");

    require(tokenIds.length < 1000, "ERC721: max batch size is 1000");

    uint32 chain = _chain();

    uint256 token;

    for (uint256 i = 0; i < tokenIds.length; i++) {

      token = uint256(bytes32(abi.encodePacked(chain, tokenIds[i])));

      require(!_burnedTokens[token], "ERC721: can't mint burned token");

      _mint(wallets[i], token);

    }

  }



  /**

   * @dev Allows for source smart contract to mint a batch of tokens.

   */

  function sourceMintBatchIncremental(address to, uint224 startingTokenId, uint256 length) external onlySource {

    uint256 token = uint256(bytes32(abi.encodePacked(_chain(), startingTokenId)));

    for (uint256 i = 0; i < length; i++) {

      require(!_burnedTokens[token], "ERC721: can't mint burned token");

      _mint(to, token);

      token++;

    }

  }



  /**

   * @dev Allows for source smart contract to transfer a token.

   *  Note: this is put in place to make sure that custom logic could be implemented for merging, gamification, etc.

   *  Note: token cannot be transfered if it's locked by bridge.

   */

  function sourceTransfer(address to, uint256 tokenId) external onlySource {

    require(!_burnedTokens[tokenId], "ERC721: token has been burned");

    address wallet = _tokenOwner[tokenId];

    _transferFrom(wallet, to, tokenId);

  }



  /**

   * @dev Allows for source smart contract to make calls to external contracts

   */

  function sourceExternalCall(address target, bytes calldata data) external onlySource {

    assembly {

      calldatacopy(0, data.offset, data.length)

      let result := call(gas(), target, callvalue(), 0, data.length, 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  /**

   * @notice Transfers `tokenId` token from `msg.sender` to `to`.

   * @dev WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

   * @param to cannot be the zero address.

   * @param tokenId token must be owned by `from`.

   */

  function transfer(address to, uint256 tokenId) external payable {

    transferFrom(msg.sender, to, tokenId, "");

  }



  /**

   * @notice Transfers `tokenId` token from `from` to `to`.

   * @dev WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

   * @param from  cannot be the zero address.

   * @param to cannot be the zero address.

   * @param tokenId token must be owned by `from`.

   */

  function transferFrom(address from, address to, uint256 tokenId) public payable {

    transferFrom(from, to, tokenId, "");

  }



  /**

   * @notice Transfers `tokenId` token from `from` to `to`.

   * @dev WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

   * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.

   * @param from  cannot be the zero address.

   * @param to cannot be the zero address.

   * @param tokenId token must be owned by `from`.

   * @param data additional data to pass.

   */

  function transferFrom(address from, address to, uint256 tokenId, bytes memory data) public payable {

    require(_isApproved(msg.sender, tokenId), "ERC721: not approved sender");

    if (_isEventRegistered(HolographERC721Event.beforeTransfer)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC721.beforeTransfer.selector, from, to, tokenId, data)));

    }

    _transferFrom(from, to, tokenId);

    if (_isEventRegistered(HolographERC721Event.afterTransfer)) {

      require(_sourceCall(abi.encodeWithSelector(HolographedERC721.afterTransfer.selector, from, to, tokenId, data)));

    }

  }



  /**

   * @notice Get total number of tokens owned by wallet.

   * @dev Used to see total amount of tokens owned by a specific wallet.

   * @param wallet Address for which to get token balance.

   * @return uint256 Returns an integer, representing total amount of tokens held by address.

   */

  function balanceOf(address wallet) public view returns (uint256) {

    return _ownedTokensCount[wallet];

  }



  function burned(uint256 tokenId) public view returns (bool) {

    return _burnedTokens[tokenId];

  }



  /**

   * @notice Decimal places to have for totalSupply.

   * @dev Since ERC721s are single, we use 0 as the decimal places to make sure a round number for totalSupply.

   * @return uint256 Returns the number of decimal places to have for totalSupply.

   */

  function decimals() external pure returns (uint256) {

    return 0;

  }



  function exists(uint256 tokenId) public view returns (bool) {

    return _tokenOwner[tokenId] != address(0);

  }



  /**

   * @notice Gets the approved address for the token.

   * @dev Single operator set for a specific token. Usually used for one-time very specific authorisations.

   * @param tokenId Token id to get approved operator for.

   * @return address Approved address for token.

   */

  function getApproved(uint256 tokenId) external view returns (address) {

    return _tokenApprovals[tokenId];

  }



  /**

   * @notice Checks if the address is approved.

   * @dev Includes references to OpenSea and Rarible marketplace proxies.

   * @param wallet Address of the wallet.

   * @param operator Address of the marketplace operator.

   * @return bool True if approved.

   */

  function isApprovedForAll(address wallet, address operator) external view returns (bool) {

    return (_operatorApprovals[wallet][operator] || _sourceApproved(wallet, operator));

  }



  /**

   * @notice Checks who the owner of a token is.

   * @dev The token must exist.

   * @param tokenId The token to look up.

   * @return address Owner of the token.

   */

  function ownerOf(uint256 tokenId) external view returns (address) {

    address tokenOwner = _tokenOwner[tokenId];

    require(tokenOwner != address(0), "ERC721: token does not exist");

    return tokenOwner;

  }



  /**

   * @notice Get token by index.

   * @dev Used in conjunction with totalSupply function to iterate over all tokens in collection.

   * @param index Index of token in array.

   * @return uint256 Returns the token id of token located at that index.

   */

  function tokenByIndex(uint256 index) external view returns (uint256) {

    require(index < _allTokens.length, "ERC721: index out of bounds");

    return _allTokens[index];

  }



  /**

   * @notice Get set length list, starting from index, for all tokens.

   * @param index The index to start enumeration from.

   * @param length The length of returned results.

   * @return tokenIds uint256[] Returns a set length array of token ids minted.

   */

  function tokens(uint256 index, uint256 length) external view returns (uint256[] memory tokenIds) {

    uint256 supply = _allTokens.length;

    if (index + length > supply) {

      length = supply - index;

    }

    tokenIds = new uint256[](length);

    for (uint256 i = 0; i < length; i++) {

      tokenIds[i] = _allTokens[index + i];

    }

  }



  /**

   * @notice Get token from wallet by index instead of token id.

   * @dev Helpful for wallet token enumeration where token id info is not yet available. Use in conjunction with balanceOf function.

   * @param wallet Specific address for which to get token for.

   * @param index Index of token in array.

   * @return uint256 Returns the token id of token located at that index in specified wallet.

   */

  function tokenOfOwnerByIndex(address wallet, uint256 index) external view returns (uint256) {

    require(index < balanceOf(wallet), "ERC721: index out of bounds");

    return _ownedTokens[wallet][index];

  }



  /**

   * @notice Total amount of tokens in the collection.

   * @dev Ignores burned tokens.

   * @return uint256 Returns the total number of active (not burned) tokens.

   */

  function totalSupply() external view returns (uint256) {

    return _allTokens.length;

  }



  /**

   * @notice Empty function that is triggered by external contract on NFT transfer.

   * @dev We have this blank function in place to make sure that external contract sending in NFTs don't error out.

   * @dev Since it's not being used, the _operator variable is commented out to avoid compiler warnings.

   * @dev Since it's not being used, the _from variable is commented out to avoid compiler warnings.

   * @dev Since it's not being used, the _tokenId variable is commented out to avoid compiler warnings.

   * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.

   * @return bytes4 Returns the interfaceId of onERC721Received.

   */

  function onERC721Received(

    address _operator,

    address _from,

    uint256 _tokenId,

    bytes calldata _data

  ) external returns (bytes4) {

    require(_isContract(_operator), "ERC721: operator not contract");

    if (_isEventRegistered(HolographERC721Event.beforeOnERC721Received)) {

      require(

        _sourceCall(

          abi.encodeWithSelector(

            HolographedERC721.beforeOnERC721Received.selector,

            _operator,

            _from,

            address(this),

            _tokenId,

            _data

          )

        )

      );

    }

    try HolographERC721Interface(_operator).ownerOf(_tokenId) returns (address tokenOwner) {

      require(tokenOwner == address(this), "ERC721: contract not token owner");

    } catch {

      revert("ERC721: token does not exist");

    }

    if (_isEventRegistered(HolographERC721Event.afterOnERC721Received)) {

      require(

        _sourceCall(

          abi.encodeWithSelector(

            HolographedERC721.afterOnERC721Received.selector,

            _operator,

            _from,

            address(this),

            _tokenId,

            _data

          )

        )

      );

    }

    return ERC721TokenReceiver.onERC721Received.selector;

  }



  /**

   * @dev Add a newly minted token into managed list of tokens.

   * @param to Address of token owner for which to add the token.

   * @param tokenId Id of token to add.

   */

  function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {

    _ownedTokensIndex[tokenId] = _ownedTokensCount[to];

    _ownedTokensCount[to]++;

    _ownedTokens[to].push(tokenId);

    _allTokensIndex[tokenId] = _allTokens.length;

    _allTokens.push(tokenId);

  }



  /**

   * @notice Burns the token.

   * @dev All validation needs to be done before calling this function.

   * @param wallet Address of current token owner.

   * @param tokenId The token to burn.

   */

  function _burn(address wallet, uint256 tokenId) private {

    _clearApproval(tokenId);

    _tokenOwner[tokenId] = address(0);

    _registryTransfer(wallet, address(0), tokenId);

    _removeTokenFromOwnerEnumeration(wallet, tokenId);

    _burnedTokens[tokenId] = true;

  }



  /**

   * @notice Deletes a token from the approval list.

   * @dev Removes from count.

   * @param tokenId T.

   */

  function _clearApproval(uint256 tokenId) private {

    delete _tokenApprovals[tokenId];

  }



  /**

   * @notice Mints an NFT.

   * @dev Can to mint the token to the zero address and the token cannot already exist.

   * @param to Address to mint to.

   * @param tokenId The new token.

   */

  function _mint(address to, uint256 tokenId) private {

    require(tokenId > 0, "ERC721: token id cannot be zero");

    require(to != address(0), "ERC721: minting to burn address");

    require(!_exists(tokenId), "ERC721: token already exists");

    require(!_burnedTokens[tokenId], "ERC721: token has been burned");

    _tokenOwner[tokenId] = to;

    _registryTransfer(address(0), to, tokenId);

    _addTokenToOwnerEnumeration(to, tokenId);

  }



  function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {

    uint256 lastTokenIndex = _allTokens.length - 1;

    uint256 tokenIndex = _allTokensIndex[tokenId];

    uint256 lastTokenId = _allTokens[lastTokenIndex];

    _allTokens[tokenIndex] = lastTokenId;

    _allTokensIndex[lastTokenId] = tokenIndex;

    delete _allTokensIndex[tokenId];

    delete _allTokens[lastTokenIndex];

    _allTokens.pop();

  }



  /**

   * @dev Remove a token from managed list of tokens.

   * @param from Address of token owner for which to remove the token.

   * @param tokenId Id of token to remove.

   */

  function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {

    _removeTokenFromAllTokensEnumeration(tokenId);

    _ownedTokensCount[from]--;

    uint256 lastTokenIndex = _ownedTokensCount[from];

    uint256 tokenIndex = _ownedTokensIndex[tokenId];

    if (tokenIndex != lastTokenIndex) {

      uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

      _ownedTokens[from][tokenIndex] = lastTokenId;

      _ownedTokensIndex[lastTokenId] = tokenIndex;

    }

    if (lastTokenIndex == 0) {

      delete _ownedTokens[from];

    } else {

      delete _ownedTokens[from][lastTokenIndex];

      _ownedTokens[from].pop();

    }

  }



  /**

   * @dev Primary private function that handles the transfer/mint/burn functionality.

   * @param from Address from where token is being transferred. Zero address means it is being minted.

   * @param to Address to whom the token is being transferred. Zero address means it is being burned.

   * @param tokenId Id of token that is being transferred/minted/burned.

   */

  function _transferFrom(address from, address to, uint256 tokenId) private {

    require(_tokenOwner[tokenId] == from, "ERC721: token not owned");

    require(to != address(0), "ERC721: use burn instead");

    _clearApproval(tokenId);

    _tokenOwner[tokenId] = to;

    _registryTransfer(from, to, tokenId);

    _removeTokenFromOwnerEnumeration(from, tokenId);

    _addTokenToOwnerEnumeration(to, tokenId);

  }



  function _chain() private view returns (uint32) {

    uint32 currentChain = HolographInterface(HolographerInterface(payable(address(this))).getHolograph())

      .getHolographChainId();

    if (currentChain != HolographerInterface(payable(address(this))).getOriginChain()) {

      return currentChain;

    }

    return uint32(0);

  }



  /**

   * @notice Checks if the token owner exists.

   * @dev If the address is the zero address no owner exists.

   * @param tokenId The affected token.

   * @return bool True if it exists.

   */

  function _exists(uint256 tokenId) private view returns (bool) {

    address tokenOwner = _tokenOwner[tokenId];

    return tokenOwner != address(0);

  }



  function _sourceApproved(address _tokenWallet, address _tokenSpender) internal view returns (bool approved) {

    if (_isEventRegistered(HolographERC721Event.onIsApprovedForAll)) {

      HolographedERC721 sourceContract;

      assembly {

        sourceContract := sload(_sourceContractSlot)

      }

      if (sourceContract.onIsApprovedForAll(_tokenWallet, _tokenSpender)) {

        approved = true;

      }

    }

  }



  /**

   * @notice Checks if the address is an approved one.

   * @dev Uses inlined checks for different usecases of approval.

   * @param spender Address of the spender.

   * @param tokenId The affected token.

   * @return bool True if approved.

   */

  function _isApproved(address spender, uint256 tokenId) private view returns (bool) {

    require(_exists(tokenId), "ERC721: token does not exist");

    address tokenOwner = _tokenOwner[tokenId];

    return (spender == tokenOwner ||

      _tokenApprovals[tokenId] == spender ||

      _operatorApprovals[tokenOwner][spender] ||

      _sourceApproved(tokenOwner, spender));

  }



  function _isApprovedStrict(address spender, uint256 tokenId) private view returns (bool) {

    require(_exists(tokenId), "ERC721: token does not exist");

    address tokenOwner = _tokenOwner[tokenId];

    return (spender == tokenOwner || _operatorApprovals[tokenOwner][spender] || _sourceApproved(tokenOwner, spender));

  }



  function _isContract(address contractAddress) private view returns (bool) {

    bytes32 codehash;

    assembly {

      codehash := extcodehash(contractAddress)

    }

    return (codehash != 0x0 && codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);

  }



  /**

   * @dev Get the interfaces contract address.

   */

  function _interfaces() private view returns (address) {

    return _holograph().getInterfaces();

  }



  function owner() public view override returns (address) {

    assembly {

      calldatacopy(0, 0, calldatasize())

      mstore(calldatasize(), caller())

      let result := staticcall(gas(), sload(_sourceContractSlot), 0, add(calldatasize(), 0x20), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  function _holograph() private view returns (HolographInterface holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  /**

   * @dev Get the bridge contract address.

   */

  function _royalties() private view returns (address) {

    return

      HolographRegistryInterface(_holograph().getRegistry()).getContractTypeAddress(

        // "HolographRoyalties" front zero padded to be 32 bytes

        0x0000000000000000000000000000486f6c6f6772617068526f79616c74696573

      );

  }



  function _registryTransfer(address _from, address _to, uint256 _tokenId) private {

    emit Transfer(_from, _to, _tokenId);

    HolographRegistryInterface(_holograph().getRegistry()).holographableEvent(

      abi.encode(

        // keccak256("TransferERC721(address,address,uint256)")

        bytes32(0x351b8d13789e4d8d2717631559251955685881a31494dd0b8b19b4ef8530bb6d),

        _from,

        _to,

        _tokenId

      )

    );

  }



  /**

   * @dev Purposefully left empty, to prevent running out of gas errors when receiving native token payments.

   */

  event FundsReceived(address indexed source, uint256 amount);



  receive() external payable {

    emit FundsReceived(msg.sender, msg.value);

  }



  /**

   * @notice Fallback to the source contract.

   * @dev Any function call that is not covered here, will automatically be sent over to the source contract.

   */

  fallback() external payable {

    // Check if royalties support the function, send there, otherwise revert to source

    address _target;

    if (HolographInterfacesInterface(_interfaces()).supportsInterface(InterfaceType.ROYALTIES, msg.sig)) {

      _target = _royalties();

      assembly {

        calldatacopy(0, 0, calldatasize())

        let result := delegatecall(gas(), _target, 0, calldatasize(), 0, 0)

        returndatacopy(0, 0, returndatasize())

        switch result

        case 0 {

          revert(0, returndatasize())

        }

        default {

          return(0, returndatasize())

        }

      }

    } else {

      assembly {

        calldatacopy(0, 0, calldatasize())

        mstore(calldatasize(), caller())

        let result := call(gas(), sload(_sourceContractSlot), callvalue(), 0, add(calldatasize(), 0x20), 0, 0)

        returndatacopy(0, 0, returndatasize())

        switch result

        case 0 {

          revert(0, returndatasize())

        }

        default {

          return(0, returndatasize())

        }

      }

    }

  }



  /*

   * @dev all calls to source contract go through this function in order to inject original msg.sender in calldata

   */

  function _sourceCall(bytes memory payload) private returns (bool output) {

    assembly {

      mstore(add(payload, add(mload(payload), 0x20)), caller())

      // offset memory position by 32 bytes to skip the 32 bytes where bytes length is stored

      // add 32 bytes to bytes length to include the appended msg.sender to calldata

      let result := call(

        gas(),

        sload(_sourceContractSlot),

        callvalue(),

        add(payload, 0x20),

        add(mload(payload), 0x20),

        0,

        0

      )

      let pos := mload(0x40)

      // reserve memory space for return data

      mstore(0x40, add(pos, returndatasize()))

      returndatacopy(pos, 0, returndatasize())

      switch result

      case 0 {

        revert(pos, returndatasize())

      }

      output := mload(pos)

    }

  }



  function _isEventRegistered(HolographERC721Event _eventName) private view returns (bool) {

    return ((_eventConfig >> uint256(_eventName)) & uint256(1) == 1 ? true : false);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographERC721Event.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



enum HolographERC721Event {

  UNDEFINED, // 0

  bridgeIn, //  1

  bridgeOut, //  2

  afterApprove, //  3

  beforeApprove, //  4

  afterApprovalAll, //  5

  beforeApprovalAll, //  6

  afterBurn, //  7

  beforeBurn, //  8

  afterMint, //  9

  beforeMint, // 10

  afterSafeTransfer, // 11

  beforeSafeTransfer, // 12

  afterTransfer, // 13

  beforeTransfer, // 14

  beforeOnERC721Received, // 15

  afterOnERC721Received, // 16

  onIsApprovedForAll, // 17

  customContractURI // 18

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographERC721Interface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./CollectionURI.sol";

import "./ERC165.sol";

import "./ERC721.sol";

import "./ERC721Enumerable.sol";

import "./ERC721Metadata.sol";

import "./ERC721TokenReceiver.sol";

import "./Holographable.sol";



interface HolographERC721Interface is

  ERC165,

  ERC721,

  ERC721Enumerable,

  ERC721Metadata,

  ERC721TokenReceiver,

  CollectionURI,

  Holographable

{

  function approve(address to, uint256 tokenId) external payable;



  function burn(uint256 tokenId) external;



  function safeTransferFrom(address from, address to, uint256 tokenId) external payable;



  function setApprovalForAll(address to, bool approved) external;



  function sourceBurn(uint256 tokenId) external;



  function sourceMint(address to, uint224 tokenId) external;



  function sourceGetChainPrepend() external view returns (uint256);



  function sourceTransfer(address to, uint256 tokenId) external;



  function sourceExternalCall(address target, bytes calldata data) external;



  function transfer(address to, uint256 tokenId) external payable;



  function contractURI() external view returns (string memory);



  function getApproved(uint256 tokenId) external view returns (address);



  function isApprovedForAll(address wallet, address operator) external view returns (bool);



  function name() external view returns (string memory);



  function burned(uint256 tokenId) external view returns (bool);



  function decimals() external pure returns (uint256);



  function exists(uint256 tokenId) external view returns (bool);



  function ownerOf(uint256 tokenId) external view returns (address);



  function supportsInterface(bytes4 interfaceId) external view returns (bool);



  function symbol() external view returns (string memory);



  function tokenByIndex(uint256 index) external view returns (uint256);



  function tokenOfOwnerByIndex(address wallet, uint256 index) external view returns (uint256);



  function tokensOfOwner(address wallet) external view returns (uint256[] memory);



  function tokenURI(uint256 tokenId) external view returns (string memory);



  function totalSupply() external view returns (uint256);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographerInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



interface HolographerInterface {

  function getContractType() external view returns (bytes32 contractType);



  function getDeploymentBlock() external view returns (uint256 deploymentBlock);



  function getHolograph() external view returns (address holograph);



  function getHolographEnforcer() external view returns (address);



  function getOriginChain() external view returns (uint32 originChain);



  function getSourceContract() external view returns (address sourceContract);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographFactory.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./abstract/Admin.sol";

import "./abstract/Initializable.sol";



import "./enforcer/Holographer.sol";



import "./interface/Holographable.sol";

import "./interface/HolographBridgeInterface.sol";

import "./interface/HolographFactoryInterface.sol";

import "./interface/HolographInterface.sol";

import "./interface/HolographRegistryInterface.sol";

import "./interface/InitializableInterface.sol";



import "./struct/BridgeSettings.sol";

import "./struct/DeploymentConfig.sol";

import "./struct/Verification.sol";



import "./library/Strings.sol";



/**

 * @title Holograph Factory

 * @author https://github.com/holographxyz

 * @notice Deploy holographable contracts

 * @dev The contract provides methods that allow for the creation of Holograph Protocol compliant smart contracts, that are capable of minting holographable assets

 */

contract HolographFactory is Admin, Initializable, Holographable, HolographFactoryInterface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)

   */

  bytes32 constant _holographSlot = 0xb4107f746e9496e8452accc7de63d1c5e14c19f510932daa04077cd49e8bd77a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)

   */

  bytes32 constant _registrySlot = 0xce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e7;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address holograph, address registry) = abi.decode(initPayload, (address, address));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_holographSlot, holograph)

      sstore(_registrySlot, registry)

    }

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @notice Deploy holographable contract via bridge request

   * @dev This function directly forwards the calldata to the deployHolographableContract function

   *      It is used to allow for Holograph Bridge to make cross-chain deployments

   */

  function bridgeIn(uint32 /* fromChain*/, bytes calldata payload) external returns (bytes4) {

    (DeploymentConfig memory config, Verification memory signature, address signer) = abi.decode(

      payload,

      (DeploymentConfig, Verification, address)

    );

    HolographFactoryInterface(address(this)).deployHolographableContract(config, signature, signer);

    return Holographable.bridgeIn.selector;

  }



  /**

   * @notice Deploy holographable contract via bridge request

   * @dev This function directly returns the calldata

   *      It is used to allow for Holograph Bridge to make cross-chain deployments

   */

  function bridgeOut(

    uint32 /* toChain*/,

    address /* sender*/,

    bytes calldata payload

  ) external pure returns (bytes4 selector, bytes memory data) {

    return (Holographable.bridgeOut.selector, payload);

  }



  function deployHolographableContractMultiChain(

    DeploymentConfig memory config,

    Verification memory signature,

    address signer,

    bool deployOnCurrentChain,

    BridgeSettings[] memory bridgeSettings

  ) external payable {

    if (deployOnCurrentChain) {

      deployHolographableContract(config, signature, signer);

    }

    bytes memory payload = abi.encode(config, signature, signer);

    HolographInterface holograph;

    assembly {

      holograph := sload(_holographSlot)

    }

    HolographBridgeInterface bridge = HolographBridgeInterface(holograph.getBridge());

    uint256 l = bridgeSettings.length;

    for (uint256 i = 0; i < l; i++) {

      bridge.bridgeOutRequest{value: bridgeSettings[i].value}(

        bridgeSettings[i].toChain,

        address(this),

        bridgeSettings[i].gasLimit,

        bridgeSettings[i].gasPrice,

        payload

      );

    }

  }



  /**

   * @notice Deploy a holographable smart contract

   * @dev Using this function allows to deploy smart contracts that have the same address across all EVM chains

   * @param config contract deployement configurations

   * @param signature that was created by the wallet that created the original payload

   * @param signer address of wallet that created the payload

   */

  function deployHolographableContract(

    DeploymentConfig memory config,

    Verification memory signature,

    address signer

  ) public {

    address registry;

    address holograph;

    assembly {

      holograph := sload(_holographSlot)

      registry := sload(_registrySlot)

    }

    /**

     * @dev the configuration is encoded and hashed along with signer address

     */

    bytes32 hash = keccak256(

      abi.encodePacked(

        config.contractType,

        config.chainType,

        config.salt,

        keccak256(config.byteCode),

        keccak256(config.initCode),

        signer

      )

    );

    /**

     * @dev the hash is validated against signature

     *      this is to guarantee that the original creator's configuration has not been altered

     */

    require(_verifySigner(signature.r, signature.s, signature.v, hash, signer), "HOLOGRAPH: invalid signature");

    /**

     * @dev check that this contract has not already been deployed on this chain

     */

    bytes memory holographerBytecode = type(Holographer).creationCode;

    address holographerAddress = address(

      uint160(uint256(keccak256(abi.encodePacked(bytes1(0xff), address(this), hash, keccak256(holographerBytecode)))))

    );

    require(!_isContract(holographerAddress), "HOLOGRAPH: already deployed");

    /**

     * @dev convert hash into uint256 which will be used as the salt for create2

     */

    uint256 saltInt = uint256(hash);

    address sourceContractAddress;

    bytes memory sourceByteCode = config.byteCode;

    assembly {

      /**

       * @dev deploy the user created smart contract first

       */

      sourceContractAddress := create2(0, add(sourceByteCode, 0x20), mload(sourceByteCode), saltInt)

    }

    assembly {

      /**

       * @dev deploy the Holographer contract

       */

      holographerAddress := create2(0, add(holographerBytecode, 0x20), mload(holographerBytecode), saltInt)

    }

    /**

     * @dev initialize the Holographer contract

     */

    require(

      InitializableInterface(holographerAddress).init(

        abi.encode(abi.encode(config.chainType, holograph, config.contractType, sourceContractAddress), config.initCode)

      ) == InitializableInterface.init.selector,

      "initialization failed"

    );

    /**

     * @dev update the Holograph Registry with deployed contract address

     */

    HolographRegistryInterface(registry).setHolographedHashAddress(hash, holographerAddress);

    /**

     * @dev emit an event that on-chain indexers can easily read

     */

    emit BridgeableContractDeployed(holographerAddress, hash);

  }



  /**

   * @notice Get the Holograph Protocol contract

   * @dev Used for storing a reference to all the primary modules and variables of the protocol

   */

  function getHolograph() external view returns (address holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  /**

   * @notice Update the Holograph Protocol contract address

   * @param holograph address of the Holograph Protocol smart contract to use

   */

  function setHolograph(address holograph) external onlyAdmin {

    assembly {

      sstore(_holographSlot, holograph)

    }

  }



  /**

   * @notice Get the Holograph Registry module

   * @dev This module stores a reference for all deployed holographable smart contracts

   */

  function getRegistry() external view returns (address registry) {

    assembly {

      registry := sload(_registrySlot)

    }

  }



  /**

   * @notice Update the Holograph Registry module address

   * @param registry address of the Holograph Registry smart contract to use

   */

  function setRegistry(address registry) external onlyAdmin {

    assembly {

      sstore(_registrySlot, registry)

    }

  }



  /**

   * @dev Internal function used for checking if a contract has been deployed at address

   */

  function _isContract(address contractAddress) private view returns (bool) {

    bytes32 codehash;

    assembly {

      codehash := extcodehash(contractAddress)

    }

    return (codehash != 0x0 && codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);

  }



  /**

   * @dev Internal function used for verifying a signature

   */

  function _verifySigner(bytes32 r, bytes32 s, uint8 v, bytes32 hash, address signer) private pure returns (bool) {

    if (v < 27) {

      v += 27;

    }

    if (v != 27 && v != 28) {

      return false;

    }

    // prevent signature malleability by checking if s-value is in the upper range

    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {

      // if s-value is in upper range, calculate a new s-value

      s = bytes32(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - uint256(s));

      // flip the v-value

      if (v == 27) {

        v = 28;

      } else {

        v = 27;

      }

      // check if s-value is still in upper range

      if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {

        return false;

      }

    }

    /**

     * @dev signature is checked against EIP-191 first, then directly, to support legacy wallets

     */

    return (signer != address(0) &&

      (ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)), v, r, s) == signer ||

        (

          ecrecover(

            keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n66", Strings.toHexString(uint256(hash), 32))),

            v,

            r,

            s

          )

        ) ==

        signer ||

        ecrecover(hash, v, r, s) == signer));

  }



  /**

   * @dev Purposefully reverts to prevent having any type of ether transfered into the contract

   */

  receive() external payable {

    revert();

  }



  /**

   * @dev Purposefully reverts to prevent any calls to undefined functions

   */

  fallback() external payable {

    revert();

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographFactoryInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../struct/DeploymentConfig.sol";

import "../struct/Verification.sol";



/**

 * @title Holograph Factory

 * @author https://github.com/holographxyz

 * @notice Deploy holographable contracts

 * @dev The contract provides methods that allow for the creation of Holograph Protocol compliant smart contracts, that are capable of minting holographable assets

 */

interface HolographFactoryInterface {

  /**

   * @dev This event is fired every time that a bridgeable contract is deployed.

   */

  event BridgeableContractDeployed(address indexed contractAddress, bytes32 indexed hash);



  /**

   * @notice Deploy a holographable smart contract

   * @dev Using this function allows to deploy smart contracts that have the same address across all EVM chains

   * @param config contract deployement configurations

   * @param signature that was created by the wallet that created the original payload

   * @param signer address of wallet that created the payload

   */

  function deployHolographableContract(

    DeploymentConfig memory config,

    Verification memory signature,

    address signer

  ) external;



  /**

   * @notice Get the Holograph Protocol contract

   * @dev Used for storing a reference to all the primary modules and variables of the protocol

   */

  function getHolograph() external view returns (address holograph);



  /**

   * @notice Update the Holograph Protocol contract address

   * @param holograph address of the Holograph Protocol smart contract to use

   */

  function setHolograph(address holograph) external;



  /**

   * @notice Get the Holograph Registry module

   * @dev This module stores a reference for all deployed holographable smart contracts

   */

  function getRegistry() external view returns (address registry);



  /**

   * @notice Update the Holograph Registry module address

   * @param registry address of the Holograph Registry smart contract to use

   */

  function setRegistry(address registry) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographFactoryProxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



import "../interface/InitializableInterface.sol";



contract HolographFactoryProxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.factory')) - 1)

   */

  bytes32 constant _factorySlot = 0xa49f20855ba576e09d13c8041c8039fa655356ea27f6c40f1ec46a4301cd5b23;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address factory, bytes memory initCode) = abi.decode(data, (address, bytes));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_factorySlot, factory)

    }

    (bool success, bytes memory returnData) = factory.delegatecall(abi.encodeWithSignature("init(bytes)", initCode));

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == InitializableInterface.init.selector, "initialization failed");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  function getFactory() external view returns (address factory) {

    assembly {

      factory := sload(_factorySlot)

    }

  }



  function setFactory(address factory) external onlyAdmin {

    assembly {

      sstore(_factorySlot, factory)

    }

  }



  receive() external payable {}



  fallback() external payable {

    assembly {

      let factory := sload(_factorySlot)

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), factory, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographGeneric.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";

import "../abstract/Owner.sol";



import "../enum/HolographGenericEvent.sol";

import "../enum/InterfaceType.sol";



import "../interface/HolographGenericInterface.sol";

import "../interface/ERC165.sol";

import "../interface/Holographable.sol";

import "../interface/HolographedGeneric.sol";

import "../interface/HolographInterface.sol";

import "../interface/InitializableInterface.sol";

import "../interface/HolographInterfacesInterface.sol";

import "../interface/Ownable.sol";



/**

 * @title Holograph Bridgeable Generic Contract

 * @author Holograph Foundation

 * @notice A smart contract for creating custom bridgeable logic.

 * @dev The entire logic and functionality of the smart contract is self-contained.

 */

contract HolographGeneric is Admin, Owner, Initializable, HolographGenericInterface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)

   */

  bytes32 constant _holographSlot = 0xb4107f746e9496e8452accc7de63d1c5e14c19f510932daa04077cd49e8bd77a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.sourceContract')) - 1)

   */

  bytes32 constant _sourceContractSlot = 0x27d542086d1e831d40b749e7f5509a626c3047a36d160781c40d5acc83e5b074;



  /**

   * @dev Configuration for events to trigger for source smart contract.

   */

  uint256 private _eventConfig;



  /**

   * @notice Only allow calls from bridge smart contract.

   */

  modifier onlyBridge() {

    require(msg.sender == _holograph().getBridge(), "GENERIC: bridge only call");

    _;

  }



  /**

   * @notice Only allow calls from source smart contract.

   */

  modifier onlySource() {

    address sourceContract;

    assembly {

      sourceContract := sload(_sourceContractSlot)

    }

    require(msg.sender == sourceContract, "GENERIC: source only call");

    _;

  }



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "GENERIC: already initialized");

    InitializableInterface sourceContract;

    assembly {

      sstore(_ownerSlot, caller())

      sourceContract := sload(_sourceContractSlot)

    }

    (uint256 eventConfig, bool skipInit, bytes memory initCode) = abi.decode(initPayload, (uint256, bool, bytes));

    _eventConfig = eventConfig;

    if (!skipInit) {

      require(sourceContract.init(initCode) == InitializableInterface.init.selector, "GENERIC: could not init source");

    }

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @dev Allows for source smart contract to withdraw contract balance.

   */

  function sourceTransfer(address payable destination, uint256 amount) external onlySource {

    destination.transfer(amount);

  }



  /**

   * @dev Allows for source smart contract to make calls to external contracts

   */

  function sourceExternalCall(address target, bytes calldata data) external onlySource {

    assembly {

      calldatacopy(0, data.offset, data.length)

      let result := call(gas(), target, callvalue(), 0, data.length, 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  /**

   * @dev Purposefully left empty, to prevent running out of gas errors when receiving native token payments.

   */

  receive() external payable {}



  /**

   * @notice Fallback to the source contract.

   * @dev Any function call that is not covered here, will automatically be sent over to the source contract.

   */

  fallback() external payable {

    assembly {

      calldatacopy(0, 0, calldatasize())

      mstore(calldatasize(), caller())

      let result := call(gas(), sload(_sourceContractSlot), callvalue(), 0, add(calldatasize(), 0x20), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  function _sourceCall(bytes memory payload) private returns (bool output) {

    assembly {

      let pos := mload(0x40)

      mstore(0x40, add(pos, 0x20))

      mstore(add(payload, add(mload(payload), 0x20)), caller())

      // offset memory position by 32 bytes to skip the 32 bytes where bytes length is stored

      // add 32 bytes to bytes length to include the appended msg.sender to calldata

      let result := call(

        gas(),

        sload(_sourceContractSlot),

        callvalue(),

        add(payload, 0x20),

        add(mload(payload), 0x20),

        0,

        0

      )

      returndatacopy(pos, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      output := mload(pos)

    }

  }



  /**

   * @dev Although EIP-165 is not required for ERC20 contracts, we still decided to implement it.

   *

   * This makes it easier for external smart contracts to easily identify a valid ERC20 token contract.

   */

  function supportsInterface(bytes4 interfaceId) external view returns (bool) {

    HolographInterfacesInterface interfaces = HolographInterfacesInterface(_interfaces());

    ERC165 erc165Contract;

    assembly {

      erc165Contract := sload(_sourceContractSlot)

    }

    if (

      interfaces.supportsInterface(InterfaceType.GENERIC, interfaceId) || erc165Contract.supportsInterface(interfaceId) // check global interfaces // check if source supports interface

    ) {

      return true;

    } else {

      return false;

    }

  }



  function bridgeIn(uint32 fromChain, bytes calldata payload) external onlyBridge returns (bytes4) {

    if (_isEventRegistered(HolographGenericEvent.bridgeIn)) {

      require(

        _sourceCall(abi.encodeWithSelector(HolographedGeneric.bridgeIn.selector, fromChain, payload)),

        "HOLOGRAPH: bridge in failed"

      );

    }

    return Holographable.bridgeIn.selector;

  }



  function bridgeOut(

    uint32 toChain,

    address sender,

    bytes calldata payload

  ) external onlyBridge returns (bytes4 selector, bytes memory data) {

    if (_isEventRegistered(HolographGenericEvent.bridgeOut)) {

      bytes memory sourcePayload = abi.encodeWithSelector(

        HolographedGeneric.bridgeOut.selector,

        toChain,

        sender,

        payload

      );

      assembly {

        // it is important to add 32 bytes in order to accommodate the first 32 bytes being used for storing length of bytes

        mstore(add(sourcePayload, add(mload(sourcePayload), 0x20)), caller())

        let result := call(

          gas(),

          sload(_sourceContractSlot),

          callvalue(),

          // start reading data from memory position, plus 32 bytes, to skip bytes length indicator

          add(sourcePayload, 0x20),

          // add an additional 32 bytes to bytes length to include the appended caller address

          add(mload(sourcePayload), 0x20),

          0,

          0

        )

        // when reading back data, skip the first 32 bytes which is used to indicate bytes position in calldata

        // also subtract 32 bytes from returndatasize to accomodate the skipped first 32 bytes

        returndatacopy(data, 0x20, sub(returndatasize(), 0x20))

        switch result

        case 0 {

          revert(0, returndatasize())

        }

      }

    }

    return (Holographable.bridgeOut.selector, data);

  }



  /**

   * @dev Allows for source smart contract to emit events.

   */

  function sourceEmit(bytes calldata eventData) external onlySource {

    assembly {

      calldatacopy(0, eventData.offset, eventData.length)

      log0(0, eventData.length)

    }

  }



  function sourceEmit(bytes32 eventId, bytes calldata eventData) external onlySource {

    assembly {

      calldatacopy(0, eventData.offset, eventData.length)

      log1(0, eventData.length, eventId)

    }

  }



  function sourceEmit(bytes32 eventId, bytes32 topic1, bytes calldata eventData) external onlySource {

    assembly {

      calldatacopy(0, eventData.offset, eventData.length)

      log2(0, eventData.length, eventId, topic1)

    }

  }



  function sourceEmit(bytes32 eventId, bytes32 topic1, bytes32 topic2, bytes calldata eventData) external onlySource {

    assembly {

      calldatacopy(0, eventData.offset, eventData.length)

      log3(0, eventData.length, eventId, topic1, topic2)

    }

  }



  function sourceEmit(

    bytes32 eventId,

    bytes32 topic1,

    bytes32 topic2,

    bytes32 topic3,

    bytes calldata eventData

  ) external onlySource {

    assembly {

      calldatacopy(0, eventData.offset, eventData.length)

      log4(0, eventData.length, eventId, topic1, topic2, topic3)

    }

  }



  /**

   * @dev Get the source smart contract as bridgeable interface.

   */

  function SourceGeneric() private view returns (HolographedGeneric sourceContract) {

    assembly {

      sourceContract := sload(_sourceContractSlot)

    }

  }



  /**

   * @dev Get the interfaces contract address.

   */

  function _interfaces() private view returns (address) {

    return _holograph().getInterfaces();

  }



  function owner() public view override returns (address) {

    Ownable ownableContract;

    assembly {

      ownableContract := sload(_sourceContractSlot)

    }

    return ownableContract.owner();

  }



  function _holograph() private view returns (HolographInterface holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  function _isEventRegistered(HolographGenericEvent _eventName) private view returns (bool) {

    return ((_eventConfig >> uint256(_eventName)) & uint256(1) == 1 ? true : false);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographGenericEvent.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



enum HolographGenericEvent {

  UNDEFINED, // 0

  bridgeIn, //  1

  bridgeOut //  2

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographGenericInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./ERC165.sol";

import "./Holographable.sol";



interface HolographGenericInterface is ERC165, Holographable {

  function sourceEmit(bytes calldata eventData) external;



  function sourceEmit(bytes32 eventId, bytes calldata eventData) external;



  function sourceEmit(bytes32 eventId, bytes32 topic1, bytes calldata eventData) external;



  function sourceEmit(bytes32 eventId, bytes32 topic1, bytes32 topic2, bytes calldata eventData) external;



  function sourceEmit(

    bytes32 eventId,

    bytes32 topic1,

    bytes32 topic2,

    bytes32 topic3,

    bytes calldata eventData

  ) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographGenesis.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./interface/InitializableInterface.sol";



/**

 * @dev In the beginning there was a smart contract...

 */

contract HolographGenesis {

  mapping(address => bool) private _approvedDeployers;



  event Message(string message);



  modifier onlyDeployer() {

    require(_approvedDeployers[msg.sender], "HOLOGRAPH: deployer not approved");

    _;

  }



  constructor() {

    _approvedDeployers[tx.origin] = true;

    emit Message("The future of NFTs is Holograph.");

  }



  function deploy(

    uint256 chainId,

    bytes12 saltHash,

    bytes memory sourceCode,

    bytes memory initCode

  ) external onlyDeployer {

    require(chainId == block.chainid, "HOLOGRAPH: incorrect chain id");

    bytes32 salt = bytes32(abi.encodePacked(msg.sender, saltHash));

    address contractAddress = address(

      uint160(uint256(keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(sourceCode)))))

    );

    require(!_isContract(contractAddress), "HOLOGRAPH: already deployed");

    assembly {

      contractAddress := create2(0, add(sourceCode, 0x20), mload(sourceCode), salt)

    }

    require(_isContract(contractAddress), "HOLOGRAPH: deployment failed");

    require(

      InitializableInterface(contractAddress).init(initCode) == InitializableInterface.init.selector,

      "HOLOGRAPH: initialization failed"

    );

  }



  function approveDeployer(address newDeployer, bool approve) external onlyDeployer {

    _approvedDeployers[newDeployer] = approve;

  }



  function isApprovedDeployer(address deployer) external view returns (bool) {

    return _approvedDeployers[deployer];

  }



  function _isContract(address contractAddress) internal view returns (bool) {

    bytes32 codehash;

    assembly {

      codehash := extcodehash(contractAddress)

    }

    return (codehash != 0x0 && codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



/**

 * @title Holograph Protocol

 * @author https://github.com/holographxyz

 * @notice This is the primary Holograph Protocol smart contract

 * @dev This contract stores a reference to all the primary modules and variables of the protocol

 */

interface HolographInterface {

  /**

   * @notice Get the address of the Holograph Bridge module

   * @dev Used for beaming holographable assets cross-chain

   */

  function getBridge() external view returns (address bridge);



  /**

   * @notice Update the Holograph Bridge module address

   * @param bridge address of the Holograph Bridge smart contract to use

   */

  function setBridge(address bridge) external;



  /**

   * @notice Get the chain ID that the Protocol was deployed on

   * @dev Useful for checking if/when a hard fork occurs

   */

  function getChainId() external view returns (uint256 chainId);



  /**

   * @notice Update the chain ID

   * @dev Useful for updating once a hard fork has been mitigated

   * @param chainId EVM chain ID to use

   */

  function setChainId(uint256 chainId) external;



  /**

   * @notice Get the address of the Holograph Factory module

   * @dev Used for deploying holographable smart contracts

   */

  function getFactory() external view returns (address factory);



  /**

   * @notice Update the Holograph Factory module address

   * @param factory address of the Holograph Factory smart contract to use

   */

  function setFactory(address factory) external;



  /**

   * @notice Get the Holograph chain Id

   * @dev Holograph uses an internal chain id mapping

   */

  function getHolographChainId() external view returns (uint32 holographChainId);



  /**

   * @notice Update the Holograph chain ID

   * @dev Useful for updating once a hard fork was mitigated

   * @param holographChainId Holograph chain ID to use

   */

  function setHolographChainId(uint32 holographChainId) external;



  /**

   * @notice Get the address of the Holograph Interfaces module

   * @dev Holograph uses this contract to store data that needs to be accessed by a large portion of the modules

   */

  function getInterfaces() external view returns (address interfaces);



  /**

   * @notice Update the Holograph Interfaces module address

   * @param interfaces address of the Holograph Interfaces smart contract to use

   */

  function setInterfaces(address interfaces) external;



  /**

   * @notice Get the address of the Holograph Operator module

   * @dev All cross-chain Holograph Bridge beams are handled by the Holograph Operator module

   */

  function getOperator() external view returns (address operator);



  /**

   * @notice Update the Holograph Operator module address

   * @param operator address of the Holograph Operator smart contract to use

   */

  function setOperator(address operator) external;



  /**

   * @notice Get the Holograph Registry module

   * @dev This module stores a reference for all deployed holographable smart contracts

   */

  function getRegistry() external view returns (address registry);



  /**

   * @notice Update the Holograph Registry module address

   * @param registry address of the Holograph Registry smart contract to use

   */

  function setRegistry(address registry) external;



  /**

   * @notice Get the Holograph Treasury module

   * @dev All of the Holograph Protocol assets are stored and managed by this module

   */

  function getTreasury() external view returns (address treasury);



  /**

   * @notice Update the Holograph Treasury module address

   * @param treasury address of the Holograph Treasury smart contract to use

   */

  function setTreasury(address treasury) external;



  /**

   * @notice Get the Holograph Utility Token address

   * @dev This is the official utility token of the Holograph Protocol

   */

  function getUtilityToken() external view returns (address utilityToken);



  /**

   * @notice Update the Holograph Utility Token address

   * @param utilityToken address of the Holograph Utility Token smart contract to use

   */

  function setUtilityToken(address utilityToken) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographInterfaces.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./abstract/Admin.sol";

import "./abstract/Initializable.sol";



import "./enum/ChainIdType.sol";

import "./enum/InterfaceType.sol";

import "./enum/TokenUriType.sol";



import "./interface/InitializableInterface.sol";



import "./library/Base64.sol";

import "./library/Strings.sol";



/**

 * @title Holograph Interfaces

 * @author https://github.com/holographxyz

 * @notice Get universal Holograph Protocol variables

 * @dev The contract stores a reference of all supported: chains, interfaces, functions, etc.

 */

contract HolographInterfaces is Admin, Initializable {

  /**

   * @dev Internal mapping of all InterfaceType interfaces

   */

  mapping(InterfaceType => mapping(bytes4 => bool)) private _supportedInterfaces;



  /**

   * @dev Internal mapping of all ChainIdType conversions

   */

  mapping(ChainIdType => mapping(uint256 => mapping(ChainIdType => uint256))) private _chainIdMap;



  /**

   * @dev Internal mapping of all TokenUriType prepends

   */

  mapping(TokenUriType => string) private _prependURI;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    address contractAdmin = abi.decode(initPayload, (address));

    assembly {

      sstore(_adminSlot, contractAdmin)

    }

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @notice Get a base64 encoded contract URI JSON string

   * @dev Used to dynamically generate contract JSON payload

   * @param name the name of the smart contract

   * @param imageURL string pointing to the primary contract image, can be: https, ipfs, or ar (arweave)

   * @param externalLink url to website/page related to smart contract

   * @param bps basis points used for specifying royalties percentage

   * @param contractAddress address of the smart contract

   * @return a base64 encoded json string representing the smart contract

   */

  function contractURI(

    string calldata name,

    string calldata imageURL,

    string calldata externalLink,

    uint16 bps,

    address contractAddress

  ) external pure returns (string memory) {

    return

      string(

        abi.encodePacked(

          "data:application/json;base64,",

          Base64.encode(

            abi.encodePacked(

              '{"name":"',

              name,

              '","description":"',

              name,

              '","image":"',

              imageURL,

              '","external_link":"',

              externalLink,

              '","seller_fee_basis_points":',

              Strings.uint2str(bps),

              ',"fee_recipient":"0x',

              Strings.toAsciiString(contractAddress),

              '"}'

            )

          )

        )

      );

  }



  /**

   * @notice Get the prepend to use for tokenURI

   * @dev Provides the prepend to use with TokenUriType URI

   */

  function getUriPrepend(TokenUriType uriType) external view returns (string memory prepend) {

    prepend = _prependURI[uriType];

  }



  /**

   * @notice Update the tokenURI prepend

   * @param uriType specify which TokenUriType to set for

   * @param prepend the string to use for the prepend

   */

  function updateUriPrepend(TokenUriType uriType, string calldata prepend) external onlyAdmin {

    _prependURI[uriType] = prepend;

  }



  /**

   * @notice Update the tokenURI prepends

   * @param uriTypes specify array of TokenUriTypes to set for

   * @param prepends array string to use for the prepends

   */

  function updateUriPrepends(TokenUriType[] calldata uriTypes, string[] calldata prepends) external onlyAdmin {

    for (uint256 i = 0; i < uriTypes.length; i++) {

      _prependURI[uriTypes[i]] = prepends[i];

    }

  }



  function getChainId(

    ChainIdType fromChainType,

    uint256 fromChainId,

    ChainIdType toChainType

  ) external view returns (uint256 toChainId) {

    return _chainIdMap[fromChainType][fromChainId][toChainType];

  }



  function updateChainIdMap(

    ChainIdType fromChainType,

    uint256 fromChainId,

    ChainIdType toChainType,

    uint256 toChainId

  ) external onlyAdmin {

    _chainIdMap[fromChainType][fromChainId][toChainType] = toChainId;

  }



  function updateChainIdMaps(

    ChainIdType[] calldata fromChainType,

    uint256[] calldata fromChainId,

    ChainIdType[] calldata toChainType,

    uint256[] calldata toChainId

  ) external onlyAdmin {

    uint256 length = fromChainType.length;

    for (uint256 i = 0; i < length; i++) {

      _chainIdMap[fromChainType[i]][fromChainId[i]][toChainType[i]] = toChainId[i];

    }

  }



  function supportsInterface(InterfaceType interfaceType, bytes4 interfaceId) external view returns (bool) {

    return _supportedInterfaces[interfaceType][interfaceId];

  }



  function updateInterface(InterfaceType interfaceType, bytes4 interfaceId, bool supported) external onlyAdmin {

    _supportedInterfaces[interfaceType][interfaceId] = supported;

  }



  function updateInterfaces(

    InterfaceType interfaceType,

    bytes4[] calldata interfaceIds,

    bool supported

  ) external onlyAdmin {

    for (uint256 i = 0; i < interfaceIds.length; i++) {

      _supportedInterfaces[interfaceType][interfaceIds[i]] = supported;

    }

  }



  /**

   * @dev Purposefully reverts to prevent having any type of ether transfered into the contract

   */

  receive() external payable {

    revert();

  }



  /**

   * @dev Purposefully reverts to prevent any calls to undefined functions

   */

  fallback() external payable {

    revert();

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographInterfacesInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../enum/ChainIdType.sol";

import "../enum/InterfaceType.sol";

import "../enum/TokenUriType.sol";



interface HolographInterfacesInterface {

  function contractURI(

    string calldata name,

    string calldata imageURL,

    string calldata externalLink,

    uint16 bps,

    address contractAddress

  ) external pure returns (string memory);



  function getUriPrepend(TokenUriType uriType) external view returns (string memory prepend);



  function updateUriPrepend(TokenUriType uriType, string calldata prepend) external;



  function updateUriPrepends(TokenUriType[] calldata uriTypes, string[] calldata prepends) external;



  function getChainId(

    ChainIdType fromChainType,

    uint256 fromChainId,

    ChainIdType toChainType

  ) external view returns (uint256 toChainId);



  function updateChainIdMap(

    ChainIdType fromChainType,

    uint256 fromChainId,

    ChainIdType toChainType,

    uint256 toChainId

  ) external;



  function updateChainIdMaps(

    ChainIdType[] calldata fromChainType,

    uint256[] calldata fromChainId,

    ChainIdType[] calldata toChainType,

    uint256[] calldata toChainId

  ) external;



  function supportsInterface(InterfaceType interfaceType, bytes4 interfaceId) external view returns (bool);



  function updateInterface(InterfaceType interfaceType, bytes4 interfaceId, bool supported) external;



  function updateInterfaces(InterfaceType interfaceType, bytes4[] calldata interfaceIds, bool supported) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographOperator.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./abstract/Admin.sol";

import "./abstract/Initializable.sol";



import "./interface/CrossChainMessageInterface.sol";

import "./interface/HolographBridgeInterface.sol";

import "./interface/HolographERC20Interface.sol";

import "./interface/HolographInterface.sol";

import "./interface/HolographOperatorInterface.sol";

import "./interface/HolographRegistryInterface.sol";

import "./interface/InitializableInterface.sol";

import "./interface/HolographInterfacesInterface.sol";

import "./interface/Ownable.sol";



import "./struct/OperatorJob.sol";



/**

 * @title Holograph Operator

 * @author https://github.com/holographxyz

 * @notice Participate in the Holograph Protocol by becoming an Operator

 * @dev This contract allows operators to bond utility tokens and help execute operator jobs

 */

contract HolographOperator is Admin, Initializable, HolographOperatorInterface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.bridge')) - 1)

   */

  bytes32 constant _bridgeSlot = 0xeb87cbb21687feb327e3d58c6c16d552231d12c7a0e8115042a4165fac8a77f9;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)

   */

  bytes32 constant _holographSlot = 0xb4107f746e9496e8452accc7de63d1c5e14c19f510932daa04077cd49e8bd77a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.interfaces')) - 1)

   */

  bytes32 constant _interfacesSlot = 0xbd3084b8c09da87ad159c247a60e209784196be2530cecbbd8f337fdd1848827;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.jobNonce')) - 1)

   */

  bytes32 constant _jobNonceSlot = 0x1cda64803f3b43503042e00863791e8d996666552d5855a78d53ee1dd4b3286d;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.messagingModule')) - 1)

   */

  bytes32 constant _messagingModuleSlot = 0x54176250282e65985d205704ffce44a59efe61f7afd99e29fda50f55b48c061a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)

   */

  bytes32 constant _registrySlot = 0xce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e7;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.utilityToken')) - 1)

   */

  bytes32 constant _utilityTokenSlot = 0xbf76518d46db472b71aa7677a0908b8016f3dee568415ffa24055f9a670f9c37;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.minGasPrice')) - 1)

   */

  bytes32 constant _minGasPriceSlot = 0x264d744422f7427cd080572c35c848b6cd3a36da6b47519af89ef13098b12fc0;



  /**

   * @dev Internal number (in seconds), used for defining a window for operator to execute the job

   */

  uint256 private _blockTime;



  /**

   * @dev Minimum amount of tokens needed for bonding

   */

  uint256 private _baseBondAmount;



  /**

   * @dev The multiplier used for calculating bonding amount for pods

   */

  uint256 private _podMultiplier;



  /**

   * @dev The threshold used for limiting number of operators in a pod

   */

  uint256 private _operatorThreshold;



  /**

   * @dev The threshold step used for increasing bond amount once threshold is reached

   */

  uint256 private _operatorThresholdStep;



  /**

   * @dev The threshold divisor used for increasing bond amount once threshold is reached

   */

  uint256 private _operatorThresholdDivisor;



  /**

   * @dev Internal counter of all cross-chain messages received

   */

  uint256 private _inboundMessageCounter;



  /**

   * @dev Internal mapping of operator job details for a specific job hash

   */

  mapping(bytes32 => uint256) private _operatorJobs;



  /**

   * @dev Internal mapping of operator job details for a specific job hash

   */

  mapping(bytes32 => bool) private _failedJobs;



  /**

   * @dev Internal mapping of operator addresses, used for temp storage when defining an operator job

   */

  mapping(uint256 => address) private _operatorTempStorage;



  /**

   * @dev Internal index used for storing/referencing operator temp storage

   */

  uint32 private _operatorTempStorageCounter;



  /**

   * @dev Multi-dimensional array of available operators

   */

  address[][] private _operatorPods;



  /**

   * @dev Internal mapping of bonded operators, to prevent double bonding

   */

  mapping(address => uint256) private _bondedOperators;



  /**

   * @dev Internal mapping of bonded operators, to prevent double bonding

   */

  mapping(address => uint256) private _operatorPodIndex;



  /**

   * @dev Internal mapping of bonded operator amounts

   */

  mapping(address => uint256) private _bondedAmounts;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (

      address bridge,

      address holograph,

      address interfaces,

      address registry,

      address utilityToken,

      uint256 minGasPrice

    ) = abi.decode(initPayload, (address, address, address, address, address, uint256));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_bridgeSlot, bridge)

      sstore(_holographSlot, holograph)

      sstore(_interfacesSlot, interfaces)

      sstore(_registrySlot, registry)

      sstore(_utilityTokenSlot, utilityToken)

      sstore(_minGasPriceSlot, minGasPrice)

    }

    _blockTime = 60; // 60 seconds allowed for execution

    unchecked {

      _baseBondAmount = 100 * (10 ** 18); // one single token unit * 100

    }

    // how much to increase bond amount per pod

    _podMultiplier = 2; // 1, 4, 16, 64

    // starting pod max amount

    _operatorThreshold = 1000;

    // how often to increase price per each operator

    _operatorThresholdStep = 10;

    // we want to multiply by decimals, but instead will have to divide

    _operatorThresholdDivisor = 100; // == * 0.01

    // set first operator for each pod as zero address

    _operatorPods = [[address(0)]];

    // mark zero address as bonded operator, to prevent abuse

    _bondedOperators[address(0)] = 1;

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @notice Recover failed job

   * @dev If a job fails, it can be manually recovered

   * @param bridgeInRequestPayload the entire cross chain message payload

   */

  function recoverJob(bytes calldata bridgeInRequestPayload) external payable {

    bytes32 hash = keccak256(bridgeInRequestPayload);

    require(_failedJobs[hash], "HOLOGRAPH: invalid recovery job");

    (bool success, ) = _bridge().call{value: msg.value}(bridgeInRequestPayload);

    require(success, "HOLOGRAPH: recovery failed");

    delete (_failedJobs[hash]);

  }



  /**

   * @notice Execute an available operator job

   * @dev When making this call, if operating criteria is not met, the call will revert

   * @param bridgeInRequestPayload the entire cross chain message payload

   */

  function executeJob(bytes calldata bridgeInRequestPayload) external payable {

    /**

     * @dev derive the payload hash for use in mappings

     */

    bytes32 hash = keccak256(bridgeInRequestPayload);

    /**

     * @dev check that job exists

     */

    require(_operatorJobs[hash] > 0, "HOLOGRAPH: invalid job");

    uint256 gasLimit = 0;

    uint256 gasPrice = 0;

    assembly {

      /**

       * @dev extract gasLimit

       */

      gasLimit := calldataload(sub(add(bridgeInRequestPayload.offset, bridgeInRequestPayload.length), 0x40))

      /**

       * @dev extract gasPrice

       */

      gasPrice := calldataload(sub(add(bridgeInRequestPayload.offset, bridgeInRequestPayload.length), 0x20))

    }

    /**

     * @dev unpack bitwise packed operator job details

     */

    OperatorJob memory job = getJobDetails(hash);

    /**

     * @dev to prevent replay attacks, remove job from mapping

     */

    delete _operatorJobs[hash];

    /**

     * @dev operators of last resort are allowed, but they will not receive HLG rewards of any sort

     */

    bool isBonded = _bondedAmounts[msg.sender] != 0;

    /**

     * @dev check that a specific operator was selected for the job

     */

    if (job.operator != address(0)) {

      /**

       * @dev switch pod to index based value

       */

      uint256 pod = job.pod - 1;

      /**

       * @dev check if sender is not the selected primary operator

       */

      if (job.operator != msg.sender) {

        /**

         * @dev sender is not selected operator, need to check if allowed to do job

         */

        uint256 elapsedTime = block.timestamp - uint256(job.startTimestamp);

        uint256 timeDifference = elapsedTime / job.blockTimes;

        /**

         * @dev validate that initial selected operator time slot is still active

         */

        require(timeDifference > 0, "HOLOGRAPH: operator has time");

        /**

         * @dev check that the selected missed the time slot due to a gas spike

         */

        require(gasPrice >= tx.gasprice, "HOLOGRAPH: gas spike detected");

        /**

         * @dev check if time is within fallback operator slots

         */

        if (timeDifference < 6) {

          uint256 podIndex = uint256(job.fallbackOperators[timeDifference - 1]);

          /**

           * @dev do a quick sanity check to make sure operator did not leave from index or is a zero address

           */

          if (podIndex > 0 && podIndex < _operatorPods[pod].length) {

            address fallbackOperator = _operatorPods[pod][podIndex];

            /**

             * @dev ensure that sender is currently valid backup operator

             */

            require(fallbackOperator == msg.sender, "HOLOGRAPH: invalid fallback");

          } else {

            require(_bondedOperators[msg.sender] == job.pod, "HOLOGRAPH: pod only fallback");

          }

        }

        /**

         * @dev time to reward the current operator

         */

        uint256 amount = _getBaseBondAmount(pod);

        /**

         * @dev select operator that failed to do the job, is slashed the pod base fee

         */

        _bondedAmounts[job.operator] -= amount;

        /**

         * @dev only allow HLG rewards to go to bonded operators

         *      if operator is bonded, the slashed amount is sent to current operator

         *      otherwise it's sent to HolographTreasury, can be burned or distributed from there

         */

        _utilityToken().transfer((isBonded ? msg.sender : address(_holograph().getTreasury())), amount);

        /**

         * @dev check if slashed operator has enough tokens bonded to stay

         */

        if (_bondedAmounts[job.operator] >= amount) {

          /**

           * @dev enough bond amount leftover, put operator back in

           */

          _operatorPods[pod].push(job.operator);

          _operatorPodIndex[job.operator] = _operatorPods[pod].length - 1;

          _bondedOperators[job.operator] = job.pod;

        } else {

          /**

           * @dev slashed operator does not have enough tokens bonded, return remaining tokens only

           */

          uint256 leftovers = _bondedAmounts[job.operator];

          if (leftovers > 0) {

            _bondedAmounts[job.operator] = 0;

            _utilityToken().transfer(job.operator, leftovers);

          }

        }

      } else {

        /**

         * @dev the selected operator is executing the job

         */

        _operatorPods[pod].push(msg.sender);

        _operatorPodIndex[job.operator] = _operatorPods[pod].length - 1;

        _bondedOperators[msg.sender] = job.pod;

      }

    }

    /**

     * @dev every executed job (even if failed) increments total message counter by one

     */

    ++_inboundMessageCounter;

    /**

     * @dev reward operator (with HLG) for executing the job

     *      this is out of scope and is purposefully omitted from code

     *      currently no rewards are issued

     */

    //_utilityToken().transfer((isBonded ? msg.sender : address(_utilityToken())), (10**18));

    /**

     * @dev always emit an event at end of job, this helps other operators keep track of job status

     */

    emit FinishedOperatorJob(hash, msg.sender);

    /**

     * @dev ensure that there is enough has left for the job

     */

    require(gasleft() > gasLimit, "HOLOGRAPH: not enough gas left");

    /**

     * @dev execute the job

     */

    try

      HolographOperatorInterface(address(this)).nonRevertingBridgeCall{value: msg.value}(

        msg.sender,

        bridgeInRequestPayload

      )

    {

      /// @dev do nothing

    } catch {

      /// @dev return any payed funds in case of revert

      payable(msg.sender).transfer(msg.value);

      _failedJobs[hash] = true;

      emit FailedOperatorJob(hash);

    }

  }



  /*

   * @dev Purposefully made to be external so that Operator can call it during executeJob function

   *      Check the executeJob function to understand it's implementation

   */

  function nonRevertingBridgeCall(address msgSender, bytes calldata payload) external payable {

    require(msg.sender == address(this), "HOLOGRAPH: operator only call");

    assembly {

      /**

       * @dev remove gas price from end

       */

      calldatacopy(0, payload.offset, sub(payload.length, 0x20))

      /**

       * @dev hToken recipient is injected right before making the call

       */

      mstore(0x84, msgSender)

      /**

       * @dev make non-reverting call

       */

      let result := call(

        /// @dev gas limit is retrieved from last 32 bytes of payload in-memory value

        mload(sub(payload.length, 0x40)),

        /// @dev destination is bridge contract

        sload(_bridgeSlot),

        /// @dev any value is passed along

        callvalue(),

        /// @dev data is retrieved from 0 index memory position

        0,

        /// @dev everything except for last 32 bytes (gas limit) is sent

        sub(payload.length, 0x40),

        0,

        0

      )

      if eq(result, 0) {

        revert(0, 0)

      }

      return(0, 0)

    }

  }



  /**

   * @notice Receive a cross-chain message

   * @dev This function is restricted for use by Holograph Messaging Module only

   */

  function crossChainMessage(bytes calldata bridgeInRequestPayload) external payable {

    require(

      msg.sender == address(_messagingModule()) || msg.sender == 0x777C19834a1A2FF6353a1E9cfb7C799ed7943a11,

      "HOLOGRAPH: messaging only call"

    );

    uint256 gasPrice = 0;

    assembly {

      /**

       * @dev extract gasPrice

       */

      gasPrice := calldataload(sub(add(bridgeInRequestPayload.offset, bridgeInRequestPayload.length), 0x20))

    }

    bool underpriced = gasPrice < _minGasPrice();

    unchecked {

      bytes32 jobHash = keccak256(bridgeInRequestPayload);

      /**

       * @dev load and increment operator temp storage in one call

       */

      ++_operatorTempStorageCounter;

      /**

       * @dev use job hash, job nonce, block number, and block timestamp for generating a random number

       */

      uint256 random = uint256(keccak256(abi.encodePacked(jobHash, _jobNonce(), block.number, block.timestamp)));

      // use the left 128 bits of random number

      uint256 random1 = uint256(random >> 128);

      // use the right 128 bits of random number

      uint256 random2 = uint256(uint128(random));

      // combine the two new random numbers for use in additional pod operator selection logic

      random = uint256(keccak256(abi.encodePacked(random1 + random2)));

      /**

       * @dev divide by total number of pods, use modulus/remainder

       */

      uint256 pod = random1 % _operatorPods.length;

      /**

       * @dev identify the total number of available operators in pod

       */

      uint256 podSize = _operatorPods[pod].length;

      /**

       * @dev select a primary operator

       */

      uint256 operatorIndex = underpriced ? 0 : random2 % podSize;

      /**

       * @dev If operator index is 0, then it's open season! Anyone can execute this job. First come first serve

       *      pop operator to ensure that they cannot be selected for any other job until this one completes

       *      decrease pod size to accomodate popped operator

       */

      _operatorTempStorage[_operatorTempStorageCounter] = _operatorPods[pod][operatorIndex];

      _popOperator(pod, operatorIndex);

      if (podSize > 1) {

        podSize--;

      }

      _operatorJobs[jobHash] = uint256(

        ((pod + 1) << 248) |

          (uint256(_operatorTempStorageCounter) << 216) |

          (block.number << 176) |

          ((underpriced ? 0 : _randomBlockHash(random, podSize, 1)) << 160) |

          ((underpriced ? 0 : _randomBlockHash(random, podSize, 2)) << 144) |

          ((underpriced ? 0 : _randomBlockHash(random, podSize, 3)) << 128) |

          ((underpriced ? 0 : _randomBlockHash(random, podSize, 4)) << 112) |

          ((underpriced ? 0 : _randomBlockHash(random, podSize, 5)) << 96) |

          (block.timestamp << 16) |

          0

      ); // 80 next available bit position && so far 176 bits used with only 128 left

      /**

       * @dev emit event to signal to operators that a job has become available

       */

      emit AvailableOperatorJob(jobHash, bridgeInRequestPayload);

    }

  }



  /**

   * @notice Calculate the amount of gas needed to execute a bridgeInRequest

   * @dev Use this function to estimate the amount of gas that will be used by the bridgeInRequest function

   *      Set a specific gas limit when making this call, subtract return value, to get total gas used

   *      Only use this with a static call

   * @param bridgeInRequestPayload abi encoded bytes making up the bridgeInRequest payload

   * @return the gas amount remaining after the static call is returned

   */

  function jobEstimator(bytes calldata bridgeInRequestPayload) external payable returns (uint256) {

    assembly {

      calldatacopy(0, bridgeInRequestPayload.offset, sub(bridgeInRequestPayload.length, 0x40))

      /**

       * @dev bridgeInRequest doNotRevert is purposefully set to false so a rever would happen

       */

      mstore8(0xE3, 0x00)

      let result := call(gas(), sload(_bridgeSlot), callvalue(), 0, sub(bridgeInRequestPayload.length, 0x40), 0, 0)

      /**

       * @dev if for some reason the call does not revert, it is force reverted

       */

      if eq(result, 1) {

        returndatacopy(0, 0, returndatasize())

        revert(0, returndatasize())

      }

      /**

       * @dev remaining gas is set as the return value

       */

      mstore(0x00, gas())

      return(0x00, 0x20)

    }

  }



  /**

   * @notice Send cross chain bridge request message

   * @dev This function is restricted to only be callable by Holograph Bridge

   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain

   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain

   * @param toChain Holograph Chain ID where the beam is being sent to

   * @param nonce incremented number used to ensure job hashes are unique

   * @param holographableContract address of the contract for which the bridge request is being made

   * @param bridgeOutPayload bytes made up of the bridgeOutRequest payload

   */

  function send(

    uint256 gasLimit,

    uint256 gasPrice,

    uint32 toChain,

    address msgSender,

    uint256 nonce,

    address holographableContract,

    bytes calldata bridgeOutPayload

  ) external payable {

    require(msg.sender == _bridge(), "HOLOGRAPH: bridge only call");

    CrossChainMessageInterface messagingModule = _messagingModule();

    uint256 hlgFee = messagingModule.getHlgFee(toChain, gasLimit, gasPrice, bridgeOutPayload);

    address hToken = _registry().getHToken(_holograph().getHolographChainId());

    require(hlgFee < msg.value, "HOLOGRAPH: not enough value");

    payable(hToken).transfer(hlgFee);

    bytes memory encodedData = abi.encodeWithSelector(

      HolographBridgeInterface.bridgeInRequest.selector,

      /**

       * @dev job nonce is an incremented value that is assigned to each bridge request to guarantee unique hashes

       */

      nonce,

      /**

       * @dev including the current holograph chain id (origin chain)

       */

      _holograph().getHolographChainId(),

      /**

       * @dev holographable contract have the same address across all chains, so our destination address will be the same

       */

      holographableContract,

      /**

       * @dev get the current chain's hToken for native gas token

       */

      hToken,

      /**

       * @dev recipient will be defined when operator picks up the job

       */

      address(0),

      /**

       * @dev value is set to zero for now

       */

      hlgFee,

      /**

       * @dev specify that function call should not revert

       */

      true,

      /**

       * @dev attach actual holographableContract function call

       */

      bridgeOutPayload

    );

    /**

     * @dev add gas variables to the back for later extraction

     */

    encodedData = abi.encodePacked(encodedData, gasLimit, gasPrice);

    /**

     * @dev Send the data to the current Holograph Messaging Module

     *      This will be changed to dynamically select which messaging module to use based on destination network

     */

    messagingModule.send{value: msg.value - hlgFee}(

      gasLimit,

      gasPrice,

      toChain,

      msgSender,

      msg.value - hlgFee,

      encodedData

    );

    /**

     * @dev for easy indexing, an event is emitted with the payload hash for status tracking

     */

    emit CrossChainMessageSent(keccak256(encodedData));

  }



  /**

   * @notice Get the fees associated with sending specific payload

   * @dev Will provide exact costs on protocol and message side, combine the two to get total

   * @dev @param toChain holograph chain id of destination chain for payload

   * @dev @param gasLimit amount of gas to provide for executing payload on destination chain

   * @dev @param gasPrice maximum amount to pay for gas price, can be set to 0 and will be chose automatically

   * @dev @param crossChainPayload the entire packet being sent cross-chain

   * @return hlgFee the amount (in wei) of native gas token that will cost for finalizing job on destiantion chain

   * @return msgFee the amount (in wei) of native gas token that will cost for sending message to destiantion chain

   * @return dstGasPrice the amount (in wei) that destination message maximum gas price will be

   */

  function getMessageFee(uint32, uint256, uint256, bytes calldata) external view returns (uint256, uint256, uint256) {

    assembly {

      calldatacopy(0, 0, calldatasize())

      let result := staticcall(gas(), sload(_messagingModuleSlot), 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  /**

   * @notice Get the details for an available operator job

   * @dev The job hash is a keccak256 hash of the entire job payload

   * @param jobHash keccak256 hash of the job

   * @return an OperatorJob struct with details about a specific job

   */

  function getJobDetails(bytes32 jobHash) public view returns (OperatorJob memory) {

    uint256 packed = _operatorJobs[jobHash];

    /**

     * @dev The job is bitwise packed into a single 32 byte slot, this unpacks it before returning the struct

     */

    return

      OperatorJob(

        uint8(packed >> 248),

        uint16(_blockTime),

        _operatorTempStorage[uint32(packed >> 216)],

        uint40(packed >> 176),

        // TODO: move the bit-shifting around to have it be sequential

        uint64(packed >> 16),

        [

          uint16(packed >> 160),

          uint16(packed >> 144),

          uint16(packed >> 128),

          uint16(packed >> 112),

          uint16(packed >> 96)

        ]

      );

  }



  /**

   * @notice Get number of pods available

   * @dev This returns number of pods that have been opened via bonding

   */

  function getTotalPods() external view returns (uint256 totalPods) {

    return _operatorPods.length;

  }



  /**

   * @notice Get total number of operators in a pod

   * @dev Use in conjunction with paginated getPodOperators function

   * @param pod the pod to query

   * @return total operators in a pod

   */

  function getPodOperatorsLength(uint256 pod) external view returns (uint256) {

    require(_operatorPods.length >= pod, "HOLOGRAPH: pod does not exist");

    return _operatorPods[pod - 1].length;

  }



  /**

   * @notice Get list of operators in a pod

   * @dev Use paginated getPodOperators function instead if list gets too long

   * @param pod the pod to query

   * @return operators array list of operators in a pod

   */

  function getPodOperators(uint256 pod) external view returns (address[] memory operators) {

    require(_operatorPods.length >= pod, "HOLOGRAPH: pod does not exist");

    operators = _operatorPods[pod - 1];

  }



  /**

   * @notice Get paginated list of operators in a pod

   * @dev Use in conjunction with getPodOperatorsLength to know the total length of results

   * @param pod the pod to query

   * @param index the array index to start from

   * @param length the length of result set to be (will be shorter if reached end of array)

   * @return operators a paginated array of operators

   */

  function getPodOperators(

    uint256 pod,

    uint256 index,

    uint256 length

  ) external view returns (address[] memory operators) {

    require(_operatorPods.length >= pod, "HOLOGRAPH: pod does not exist");

    /**

     * @dev if pod 0 is selected, this will create a revert

     */

    pod--;

    /**

     * @dev get total length of pod operators

     */

    uint256 supply = _operatorPods[pod].length;

    /**

     * @dev check if length is out of bounds for this result set

     */

    if (index + length > supply) {

      /**

       * @dev adjust length to return remainder of the results

       */

      length = supply - index;

    }

    /**

     * @dev create in-memory array

     */

    operators = new address[](length);

    /**

     * @dev add operators to result set

     */

    for (uint256 i = 0; i < length; i++) {

      operators[i] = _operatorPods[pod][index + i];

    }

  }



  /**

   * @notice Check the base and current price for bonding to a particular pod

   * @dev Useful for understanding what is required for bonding to a pod

   * @param pod the pod to get bonding amounts for

   * @return base the base bond amount required for a pod

   * @return current the current bond amount required for a pod

   */

  function getPodBondAmounts(uint256 pod) external view returns (uint256 base, uint256 current) {

    base = _getBaseBondAmount(pod - 1);

    current = _getCurrentBondAmount(pod - 1);

  }



  /**

   * @notice Get an operator's currently bonded amount

   * @dev Useful for checking how much an operator has bonded

   * @param operator address of operator to check

   * @return amount total number of utility token bonded

   */

  function getBondedAmount(address operator) external view returns (uint256 amount) {

    return _bondedAmounts[operator];

  }



  /**

   * @notice Get an operator's currently bonded pod

   * @dev Useful for checking if an operator is currently bonded

   * @param operator address of operator to check

   * @return pod number that operator is bonded on, returns zero if not bonded or selected for job

   */

  function getBondedPod(address operator) external view returns (uint256 pod) {

    return _bondedOperators[operator];

  }



  /**

   * @notice Get an operator's currently bonded pod index

   * @dev Useful for checking if an operator is a fallback for active job

   * @param operator address of operator to check

   * @return index currently bonded pod's operator index, returns zero if not in pod or moved out for active job

   */

  function getBondedPodIndex(address operator) external view returns (uint256 index) {

    return _operatorPodIndex[operator];

  }



  /**

   * @notice Topup a bonded operator with more utility tokens

   * @dev Useful function if an operator got slashed and wants to add a safety buffer to not get unbonded

   *      This function will not work if operator has currently been selected for a job

   * @param operator address of operator to topup

   * @param amount utility token amount to add

   */

  function topupUtilityToken(address operator, uint256 amount) external {

    /**

     * @dev check that an operator is currently bonded

     */

    require(_bondedOperators[operator] != 0, "HOLOGRAPH: operator not bonded");

    unchecked {

      /**

       * @dev add the additional amount to operator

       */

      _bondedAmounts[operator] += amount;

    }

    /**

     * @dev transfer tokens last, to prevent reentrancy attacks

     */

    require(_utilityToken().transferFrom(msg.sender, address(this), amount), "HOLOGRAPH: token transfer failed");

  }



  /**

   * @notice Bond utility tokens and become an operator

   * @dev An operator can only bond to one pod at a time, per network

   * @param operator address of operator to bond (can be an ownable smart contract)

   * @param amount utility token amount to bond (can be greater than minimum)

   * @param pod number of pod to bond to (can be for one that does not exist yet)

   */

  function bondUtilityToken(address operator, uint256 amount, uint256 pod) external {

    /**

     * @dev an operator can only bond to one pod at any give time per network

     */

    require(_bondedOperators[operator] == 0 && _bondedAmounts[operator] == 0, "HOLOGRAPH: operator is bonded");

    if (_isContract(operator)) {

      require(Ownable(operator).owner() != address(0), "HOLOGRAPH: contract not ownable");

    }

    unchecked {

      /**

       * @dev get the current bonding minimum for selected pod

       */

      uint256 current = _getCurrentBondAmount(pod - 1);

      require(current <= amount, "HOLOGRAPH: bond amount too small");

      /**

       * @dev check if selected pod is greater than currently existing pods

       */

      if (_operatorPods.length < pod) {

        /**

         * @dev activate pod(s) up until the selected pod

         */

        for (uint256 i = _operatorPods.length; i < pod; i++) {

          /**

           * @dev add zero address into pod to mitigate empty pod issues

           */

          _operatorPods.push([address(0)]);

        }

      }

      /**

       * @dev prevent bonding to a pod with more than uint16 max value

       */

      require(_operatorPods[pod - 1].length < type(uint16).max, "HOLOGRAPH: too many operators");

      _operatorPods[pod - 1].push(operator);

      _operatorPodIndex[operator] = _operatorPods[pod - 1].length - 1;

      _bondedOperators[operator] = pod;

      _bondedAmounts[operator] = amount;

      /**

       * @dev transfer tokens last, to prevent reentrancy attacks

       */

      require(_utilityToken().transferFrom(msg.sender, address(this), amount), "HOLOGRAPH: token transfer failed");

    }

  }



  /**

   * @notice Unbond HLG utility tokens and stop being an operator

   * @dev A bonded operator selected for a job cannot unbond until they complete the job, or are slashed

   * @param operator address of operator to unbond

   * @param recipient address where to send the bonded tokens

   */

  function unbondUtilityToken(address operator, address recipient) external {

    /**

     * @dev validate that operator is currently bonded

     */

    require(_bondedOperators[operator] != 0, "HOLOGRAPH: operator not bonded");

    /**

     * @dev check if sender is not actual operator

     */

    if (msg.sender != operator) {

      /**

       * @dev check if operator is a smart contract

       */

      require(_isContract(operator), "HOLOGRAPH: operator not contract");

      /**

       * @dev check if smart contract is owned by sender

       */

      require(Ownable(operator).owner() == msg.sender, "HOLOGRAPH: sender not owner");

    }

    /**

     * @dev get current bonded amount by operator

     */

    uint256 amount = _bondedAmounts[operator];

    /**

     * @dev unset operator bond amount before making a transfer

     */

    _bondedAmounts[operator] = 0;

    /**

     * @dev remove all operator references

     */

    _popOperator(_bondedOperators[operator] - 1, _operatorPodIndex[operator]);

    /**

     * @dev transfer tokens to recipient

     */

    require(_utilityToken().transfer(recipient, amount), "HOLOGRAPH: token transfer failed");

  }



  /**

   * @notice Get the address of the Holograph Bridge module

   * @dev Used for beaming holographable assets cross-chain

   */

  function getBridge() external view returns (address bridge) {

    assembly {

      bridge := sload(_bridgeSlot)

    }

  }



  /**

   * @notice Update the Holograph Bridge module address

   * @param bridge address of the Holograph Bridge smart contract to use

   */

  function setBridge(address bridge) external onlyAdmin {

    assembly {

      sstore(_bridgeSlot, bridge)

    }

  }



  /**

   * @notice Get the Holograph Protocol contract

   * @dev Used for storing a reference to all the primary modules and variables of the protocol

   */

  function getHolograph() external view returns (address holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  /**

   * @notice Update the Holograph Protocol contract address

   * @param holograph address of the Holograph Protocol smart contract to use

   */

  function setHolograph(address holograph) external onlyAdmin {

    assembly {

      sstore(_holographSlot, holograph)

    }

  }



  /**

   * @notice Get the address of the Holograph Interfaces module

   * @dev Holograph uses this contract to store data that needs to be accessed by a large portion of the modules

   */

  function getInterfaces() external view returns (address interfaces) {

    assembly {

      interfaces := sload(_interfacesSlot)

    }

  }



  /**

   * @notice Update the Holograph Interfaces module address

   * @param interfaces address of the Holograph Interfaces smart contract to use

   */

  function setInterfaces(address interfaces) external onlyAdmin {

    assembly {

      sstore(_interfacesSlot, interfaces)

    }

  }



  /**

   * @notice Get the address of the Holograph Messaging Module

   * @dev All cross-chain message requests will get forwarded to this adress

   */

  function getMessagingModule() external view returns (address messagingModule) {

    assembly {

      messagingModule := sload(_messagingModuleSlot)

    }

  }



  /**

   * @notice Update the Holograph Messaging Module address

   * @param messagingModule address of the LayerZero Endpoint to use

   */

  function setMessagingModule(address messagingModule) external onlyAdmin {

    assembly {

      sstore(_messagingModuleSlot, messagingModule)

    }

  }



  /**

   * @notice Get the Holograph Registry module

   * @dev This module stores a reference for all deployed holographable smart contracts

   */

  function getRegistry() external view returns (address registry) {

    assembly {

      registry := sload(_registrySlot)

    }

  }



  /**

   * @notice Update the Holograph Registry module address

   * @param registry address of the Holograph Registry smart contract to use

   */

  function setRegistry(address registry) external onlyAdmin {

    assembly {

      sstore(_registrySlot, registry)

    }

  }



  /**

   * @notice Get the Holograph Utility Token address

   * @dev This is the official utility token of the Holograph Protocol

   */

  function getUtilityToken() external view returns (address utilityToken) {

    assembly {

      utilityToken := sload(_utilityTokenSlot)

    }

  }



  /**

   * @notice Update the Holograph Utility Token address

   * @param utilityToken address of the Holograph Utility Token smart contract to use

   */

  function setUtilityToken(address utilityToken) external onlyAdmin {

    assembly {

      sstore(_utilityTokenSlot, utilityToken)

    }

  }



  /**

   * @notice Get the Minimum Gas Price

   * @dev The minimum value required to execute a job without it being marked as under priced

   */

  function getMinGasPrice() external view returns (uint256 minGasPrice) {

    assembly {

      minGasPrice := sload(_minGasPriceSlot)

    }

  }



  /**

   * @notice Update the Minimum Gas Price

   * @param minGasPrice amount to set for minimum gas price

   */

  function setMinGasPrice(uint256 minGasPrice) external onlyAdmin {

    assembly {

      sstore(_minGasPriceSlot, minGasPrice)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Bridge Interface

   */

  function _bridge() private view returns (address bridge) {

    assembly {

      bridge := sload(_bridgeSlot)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Interface

   */

  function _holograph() private view returns (HolographInterface holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Interfaces Interface

   */

  function _interfaces() private view returns (HolographInterfacesInterface interfaces) {

    assembly {

      interfaces := sload(_interfacesSlot)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Messaging Module Interface

   */

  function _messagingModule() private view returns (CrossChainMessageInterface messagingModule) {

    assembly {

      messagingModule := sload(_messagingModuleSlot)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Registry Interface

   */

  function _registry() private view returns (HolographRegistryInterface registry) {

    assembly {

      registry := sload(_registrySlot)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Utility Token Interface

   */

  function _utilityToken() private view returns (HolographERC20Interface utilityToken) {

    assembly {

      utilityToken := sload(_utilityTokenSlot)

    }

  }



  /**

   * @dev Internal function used for getting the minimum gas price allowed

   */

  function _minGasPrice() private view returns (uint256 minGasPrice) {

    assembly {

      minGasPrice := sload(_minGasPriceSlot)

    }

  }



  /**

   * @dev Internal nonce, that increments on each call, used for randomness

   */

  function _jobNonce() private returns (uint256 jobNonce) {

    assembly {

      jobNonce := add(sload(_jobNonceSlot), 0x0000000000000000000000000000000000000000000000000000000000000001)

      sstore(_jobNonceSlot, jobNonce)

    }

  }



  /**

   * @dev Internal function used to remove an operator from a particular pod

   */

  function _popOperator(uint256 pod, uint256 operatorIndex) private {

    /**

     * @dev only pop the operator if it's not a zero address

     */

    if (operatorIndex > 0) {

      unchecked {

        address operator = _operatorPods[pod][operatorIndex];

        /**

         * @dev mark operator as no longer bonded

         */

        _bondedOperators[operator] = 0;

        /**

         * @dev remove pod reference for operator

         */

        _operatorPodIndex[operator] = 0;

        uint256 lastIndex = _operatorPods[pod].length - 1;

        if (lastIndex != operatorIndex) {

          /**

           * @dev if operator is not last index, move last index to operator's current index

           */

          _operatorPods[pod][operatorIndex] = _operatorPods[pod][lastIndex];

          _operatorPodIndex[_operatorPods[pod][operatorIndex]] = operatorIndex;

        }

        /**

         * @dev delete last index

         */

        delete _operatorPods[pod][lastIndex];

        /**

         * @dev shorten array length

         */

        _operatorPods[pod].pop();

      }

    }

  }



  /**

   * @dev Internal function used for calculating the base bonding amount for a pod

   */

  function _getBaseBondAmount(uint256 pod) private view returns (uint256) {

    return (_podMultiplier ** pod) * _baseBondAmount;

  }



  /**

   * @dev Internal function used for calculating the current bonding amount for a pod

   */

  function _getCurrentBondAmount(uint256 pod) private view returns (uint256) {

    uint256 current = (_podMultiplier ** pod) * _baseBondAmount;

    if (pod >= _operatorPods.length) {

      return current;

    }

    uint256 threshold = _operatorThreshold / (2 ** pod);

    uint256 position = _operatorPods[pod].length;

    if (position > threshold) {

      position -= threshold;

      //       current += (current / _operatorThresholdDivisor) * position;

      current += (current / _operatorThresholdDivisor) * (position / _operatorThresholdStep);

    }

    return current;

  }



  /**

   * @dev Internal function used for generating a random pod operator selection by using previously mined blocks

   */

  function _randomBlockHash(uint256 random, uint256 podSize, uint256 n) private view returns (uint256) {

    unchecked {

      return (random + uint256(blockhash(block.number - n))) % podSize;

    }

  }



  /**

   * @dev Internal function used for checking if a contract has been deployed at address

   */

  function _isContract(address contractAddress) private view returns (bool) {

    bytes32 codehash;

    assembly {

      codehash := extcodehash(contractAddress)

    }

    return (codehash != 0x0 && codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);

  }



  /**

   * @dev Purposefully left empty to ensure ether transfers use least amount of gas possible

   */

  receive() external payable {}



  /**

   * @dev Purposefully reverts to prevent any calls to undefined functions

   */

  fallback() external payable {

    revert();

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographOperatorInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../struct/OperatorJob.sol";



interface HolographOperatorInterface {

  /**

   * @dev Event is emitted for every time that a valid job is available.

   */

  event AvailableOperatorJob(bytes32 jobHash, bytes payload);



  /**

   * @dev Event is emitted for every time that a job is completed.

   */

  event FinishedOperatorJob(bytes32 jobHash, address operator);



  /**

   * @dev Event is emitted every time a cross-chain message is sent

   */

  event CrossChainMessageSent(bytes32 messageHash);



  /**

   * @dev Event is emitted if an operator job execution fails

   */

  event FailedOperatorJob(bytes32 jobHash);



  /**

   * @notice Execute an available operator job

   * @dev When making this call, if operating criteria is not met, the call will revert

   * @param bridgeInRequestPayload the entire cross chain message payload

   */

  function executeJob(bytes calldata bridgeInRequestPayload) external payable;



  function nonRevertingBridgeCall(address msgSender, bytes calldata payload) external payable;



  /**

   * @notice Receive a cross-chain message

   * @dev This function is restricted for use by Holograph Messaging Module only

   */

  function crossChainMessage(bytes calldata bridgeInRequestPayload) external payable;



  /**

   * @notice Calculate the amount of gas needed to execute a bridgeInRequest

   * @dev Use this function to estimate the amount of gas that will be used by the bridgeInRequest function

   *      Set a specific gas limit when making this call, subtract return value, to get total gas used

   *      Only use this with a static call

   * @param bridgeInRequestPayload abi encoded bytes making up the bridgeInRequest payload

   * @return the gas amount remaining after the static call is returned

   */

  function jobEstimator(bytes calldata bridgeInRequestPayload) external payable returns (uint256);



  /**

   * @notice Send cross chain bridge request message

   * @dev This function is restricted to only be callable by Holograph Bridge

   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain

   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain

   * @param toChain Holograph Chain ID where the beam is being sent to

   * @param nonce incremented number used to ensure job hashes are unique

   * @param holographableContract address of the contract for which the bridge request is being made

   * @param bridgeOutPayload bytes made up of the bridgeOutRequest payload

   */

  function send(

    uint256 gasLimit,

    uint256 gasPrice,

    uint32 toChain,

    address msgSender,

    uint256 nonce,

    address holographableContract,

    bytes calldata bridgeOutPayload

  ) external payable;



  /**

   * @notice Get the fees associated with sending specific payload

   * @dev Will provide exact costs on protocol and message side, combine the two to get total

   * @param toChain holograph chain id of destination chain for payload

   * @param gasLimit amount of gas to provide for executing payload on destination chain

   * @param gasPrice maximum amount to pay for gas price, can be set to 0 and will be chose automatically

   * @param crossChainPayload the entire packet being sent cross-chain

   * @return hlgFee the amount (in wei) of native gas token that will cost for finalizing job on destiantion chain

   * @return msgFee the amount (in wei) of native gas token that will cost for sending message to destiantion chain

   * @return dstGasPrice the amount (in wei) that destination message maximum gas price will be

   */

  function getMessageFee(

    uint32 toChain,

    uint256 gasLimit,

    uint256 gasPrice,

    bytes calldata crossChainPayload

  ) external view returns (uint256 hlgFee, uint256 msgFee, uint256 dstGasPrice);



  /**

   * @notice Get the details for an available operator job

   * @dev The job hash is a keccak256 hash of the entire job payload

   * @param jobHash keccak256 hash of the job

   * @return an OperatorJob struct with details about a specific job

   */

  function getJobDetails(bytes32 jobHash) external view returns (OperatorJob memory);



  /**

   * @notice Get number of pods available

   * @dev This returns number of pods that have been opened via bonding

   */

  function getTotalPods() external view returns (uint256 totalPods);



  /**

   * @notice Get total number of operators in a pod

   * @dev Use in conjunction with paginated getPodOperators function

   * @param pod the pod to query

   * @return total operators in a pod

   */

  function getPodOperatorsLength(uint256 pod) external view returns (uint256);



  /**

   * @notice Get list of operators in a pod

   * @dev Use paginated getPodOperators function instead if list gets too long

   * @param pod the pod to query

   * @return operators array list of operators in a pod

   */

  function getPodOperators(uint256 pod) external view returns (address[] memory operators);



  /**

   * @notice Get paginated list of operators in a pod

   * @dev Use in conjunction with getPodOperatorsLength to know the total length of results

   * @param pod the pod to query

   * @param index the array index to start from

   * @param length the length of result set to be (will be shorter if reached end of array)

   * @return operators a paginated array of operators

   */

  function getPodOperators(

    uint256 pod,

    uint256 index,

    uint256 length

  ) external view returns (address[] memory operators);



  /**

   * @notice Check the base and current price for bonding to a particular pod

   * @dev Useful for understanding what is required for bonding to a pod

   * @param pod the pod to get bonding amounts for

   * @return base the base bond amount required for a pod

   * @return current the current bond amount required for a pod

   */

  function getPodBondAmounts(uint256 pod) external view returns (uint256 base, uint256 current);



  /**

   * @notice Get an operator's currently bonded amount

   * @dev Useful for checking how much an operator has bonded

   * @param operator address of operator to check

   * @return amount total number of utility token bonded

   */

  function getBondedAmount(address operator) external view returns (uint256 amount);



  /**

   * @notice Get an operator's currently bonded pod

   * @dev Useful for checking if an operator is currently bonded

   * @param operator address of operator to check

   * @return pod number that operator is bonded on, returns zero if not bonded or selected for job

   */

  function getBondedPod(address operator) external view returns (uint256 pod);



  /**

   * @notice Get an operator's currently bonded pod index

   * @dev Useful for checking if an operator is a fallback for active job

   * @param operator address of operator to check

   * @return index currently bonded pod's operator index, returns zero if not in pod or moved out for active job

   */

  function getBondedPodIndex(address operator) external view returns (uint256 index);



  /**

   * @notice Topup a bonded operator with more utility tokens

   * @dev Useful function if an operator got slashed and wants to add a safety buffer to not get unbonded

   * @param operator address of operator to topup

   * @param amount utility token amount to add

   */

  function topupUtilityToken(address operator, uint256 amount) external;



  /**

   * @notice Bond utility tokens and become an operator

   * @dev An operator can only bond to one pod at a time, per network

   * @param operator address of operator to bond (can be an ownable smart contract)

   * @param amount utility token amount to bond (can be greater than minimum)

   * @param pod number of pod to bond to (can be for one that does not exist yet)

   */

  function bondUtilityToken(address operator, uint256 amount, uint256 pod) external;



  /**

   * @notice Unbond HLG utility tokens and stop being an operator

   * @dev A bonded operator selected for a job cannot unbond until they complete the job, or are slashed

   * @param operator address of operator to unbond

   * @param recipient address where to send the bonded tokens

   */

  function unbondUtilityToken(address operator, address recipient) external;



  /**

   * @notice Get the address of the Holograph Bridge module

   * @dev Used for beaming holographable assets cross-chain

   */

  function getBridge() external view returns (address bridge);



  /**

   * @notice Update the Holograph Bridge module address

   * @param bridge address of the Holograph Bridge smart contract to use

   */

  function setBridge(address bridge) external;



  /**

   * @notice Get the Holograph Protocol contract

   * @dev Used for storing a reference to all the primary modules and variables of the protocol

   */

  function getHolograph() external view returns (address holograph);



  /**

   * @notice Update the Holograph Protocol contract address

   * @param holograph address of the Holograph Protocol smart contract to use

   */

  function setHolograph(address holograph) external;



  /**

   * @notice Get the address of the Holograph Interfaces module

   * @dev Holograph uses this contract to store data that needs to be accessed by a large portion of the modules

   */

  function getInterfaces() external view returns (address interfaces);



  /**

   * @notice Update the Holograph Interfaces module address

   * @param interfaces address of the Holograph Interfaces smart contract to use

   */

  function setInterfaces(address interfaces) external;



  /**

   * @notice Get the address of the Holograph Messaging Module

   * @dev All cross-chain message requests will get forwarded to this adress

   */

  function getMessagingModule() external view returns (address messagingModule);



  /**

   * @notice Update the Holograph Messaging Module address

   * @param messagingModule address of the LayerZero Endpoint to use

   */

  function setMessagingModule(address messagingModule) external;



  /**

   * @notice Get the Holograph Registry module

   * @dev This module stores a reference for all deployed holographable smart contracts

   */

  function getRegistry() external view returns (address registry);



  /**

   * @notice Update the Holograph Registry module address

   * @param registry address of the Holograph Registry smart contract to use

   */

  function setRegistry(address registry) external;



  /**

   * @notice Get the Holograph Utility Token address

   * @dev This is the official utility token of the Holograph Protocol

   */

  function getUtilityToken() external view returns (address utilityToken);



  /**

   * @notice Update the Holograph Utility Token address

   * @param utilityToken address of the Holograph Utility Token smart contract to use

   */

  function setUtilityToken(address utilityToken) external;



  /**

   * @notice Get the Minimum Gas Price

   * @dev This amount is used as the value that will define a job as underpriced is lower than

   */

  function getMinGasPrice() external view returns (uint256 minGasPrice);



  /**

   * @notice Update the Minimum Gas Price

   * @param minGasPrice amount to set for minimum gas price

   */

  function setMinGasPrice(uint256 minGasPrice) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographOperatorProxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



import "../interface/InitializableInterface.sol";



contract HolographOperatorProxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.operator')) - 1)

   */

  bytes32 constant _operatorSlot = 0x7caba557ad34138fa3b7e43fb574e0e6cc10481c3073e0dffbc560db81b5c60f;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address operator, bytes memory initCode) = abi.decode(data, (address, bytes));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_operatorSlot, operator)

    }

    (bool success, bytes memory returnData) = operator.delegatecall(abi.encodeWithSignature("init(bytes)", initCode));

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == InitializableInterface.init.selector, "initialization failed");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  function getOperator() external view returns (address operator) {

    assembly {

      operator := sload(_operatorSlot)

    }

  }



  function setOperator(address operator) external onlyAdmin {

    assembly {

      sstore(_operatorSlot, operator)

    }

  }



  receive() external payable {}



  fallback() external payable {

    assembly {

      let operator := sload(_operatorSlot)

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), operator, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographRegistry.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./abstract/Admin.sol";

import "./abstract/Initializable.sol";



import "./interface/HolographInterface.sol";

import "./interface/HolographRegistryInterface.sol";

import "./interface/InitializableInterface.sol";



/**

 * @title Holograph Registry

 * @author https://github.com/holographxyz

 * @notice View and validate all deployed holographable contracts

 * @dev Use this to: validate that contracts are Holograph Protocol compliant, get source code for supported standards, and interact with hTokens

 */

contract HolographRegistry is Admin, Initializable, HolographRegistryInterface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)

   */

  bytes32 constant _holographSlot = 0xb4107f746e9496e8452accc7de63d1c5e14c19f510932daa04077cd49e8bd77a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.utilityToken')) - 1)

   */

  bytes32 constant _utilityTokenSlot = 0xbf76518d46db472b71aa7677a0908b8016f3dee568415ffa24055f9a670f9c37;



  /**

   * @dev Array of all Holographable contracts that were ever deployed on this chain

   */

  address[] private _holographableContracts;



  /**

   * @dev A mapping of hashes to contract addresses

   */

  mapping(bytes32 => address) private _holographedContractsHashMap;



  /**

   * @dev Storage slot for saving contract type to contract address references

   */

  mapping(bytes32 => address) private _contractTypeAddresses;



  /**

   * @dev Reserved type addresses for Admin

   *  Note: this is used for defining default contracts

   */

  mapping(bytes32 => bool) private _reservedTypes;



  /**

   * @dev A list of smart contracts that are guaranteed secure and holographable

   */

  mapping(address => bool) private _holographedContracts;



  /**

   * @dev Mapping of all hTokens available for the different EVM chains

   */

  mapping(uint32 => address) private _hTokens;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address holograph, bytes32[] memory reservedTypes) = abi.decode(initPayload, (address, bytes32[]));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_holographSlot, holograph)

    }

    for (uint256 i = 0; i < reservedTypes.length; i++) {

      _reservedTypes[reservedTypes[i]] = true;

    }

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  function isHolographedContract(address smartContract) external view returns (bool) {

    return _holographedContracts[smartContract];

  }



  function isHolographedHashDeployed(bytes32 hash) external view returns (bool) {

    return _holographedContractsHashMap[hash] != address(0);

  }



  function holographableEvent(bytes calldata payload) external {

    if (_holographedContracts[msg.sender]) {

      emit HolographableContractEvent(msg.sender, payload);

    }

  }



  /**

   * @dev Allows to reference a deployed smart contract, and use it's code as reference inside of Holographers

   */

  function referenceContractTypeAddress(address contractAddress) external returns (bytes32) {

    bytes32 contractType;

    assembly {

      contractType := extcodehash(contractAddress)

    }

    require(

      (// check that bytecode is not empty

      contractType != 0x0 &&

        // check that hash is not for empty bytes

        contractType != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470),

      "HOLOGRAPH: empty contract"

    );

    require(_contractTypeAddresses[contractType] == address(0), "HOLOGRAPH: contract already set");

    require(!_reservedTypes[contractType], "HOLOGRAPH: reserved address type");

    _contractTypeAddresses[contractType] = contractAddress;

    return contractType;

  }



  /**

   * @dev Returns the contract address for a contract type

   */

  function getContractTypeAddress(bytes32 contractType) external view returns (address) {

    return _contractTypeAddresses[contractType];

  }



  /**

   * @dev Sets the contract address for a contract type

   */

  function setContractTypeAddress(bytes32 contractType, address contractAddress) external onlyAdmin {

    require(_reservedTypes[contractType], "HOLOGRAPH: not reserved type");

    _contractTypeAddresses[contractType] = contractAddress;

  }



  /**

   * @notice Get the Holograph Protocol contract

   * @dev This contract stores a reference to all the primary modules and variables of the protocol

   */

  function getHolograph() external view returns (address holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  /**

   * @notice Update the Holograph Protocol contract address

   * @param holograph address of the Holograph Protocol smart contract to use

   */

  function setHolograph(address holograph) external onlyAdmin {

    assembly {

      sstore(_holographSlot, holograph)

    }

  }



  /**

   * @notice Get set length list, starting from index, for all holographable contracts

   * @param index The index to start enumeration from

   * @param length The length of returned results

   * @return contracts address[] Returns a set length array of holographable contracts deployed

   */

  function getHolographableContracts(uint256 index, uint256 length) external view returns (address[] memory contracts) {

    uint256 supply = _holographableContracts.length;

    if (index + length > supply) {

      length = supply - index;

    }

    contracts = new address[](length);

    for (uint256 i = 0; i < length; i++) {

      contracts[i] = _holographableContracts[index + i];

    }

  }



  /**

   * @notice Get total number of deployed holographable contracts

   */

  function getHolographableContractsLength() external view returns (uint256) {

    return _holographableContracts.length;

  }



  /**

   * @dev Returns the address for a holographed hash

   */

  function getHolographedHashAddress(bytes32 hash) external view returns (address) {

    return _holographedContractsHashMap[hash];

  }



  /**

   * @dev Allows Holograph Factory to register a deployed contract, referenced with deployment hash

   */

  function setHolographedHashAddress(bytes32 hash, address contractAddress) external {

    address holograph;

    assembly {

      holograph := sload(_holographSlot)

    }

    require(msg.sender == HolographInterface(holograph).getFactory(), "HOLOGRAPH: factory only function");

    _holographedContractsHashMap[hash] = contractAddress;

    _holographedContracts[contractAddress] = true;

    _holographableContracts.push(contractAddress);

  }



  /**

   * @dev Returns the hToken address for a given chain id

   */

  function getHToken(uint32 chainId) external view returns (address) {

    return _hTokens[chainId];

  }



  /**

   * @dev Sets the hToken address for a specific chain id

   */

  function setHToken(uint32 chainId, address hToken) external onlyAdmin {

    _hTokens[chainId] = hToken;

  }



  /**

   * @dev Returns the reserved contract address for a contract type

   */

  function getReservedContractTypeAddress(bytes32 contractType) external view returns (address contractTypeAddress) {

    if (_reservedTypes[contractType]) {

      contractTypeAddress = _contractTypeAddresses[contractType];

    }

  }



  /**

   * @dev Allows admin to update or toggle reserved type

   */

  function setReservedContractTypeAddress(bytes32 hash, bool reserved) external onlyAdmin {

    _reservedTypes[hash] = reserved;

  }



  /**

   * @dev Allows admin to update or toggle reserved types

   */

  function setReservedContractTypeAddresses(bytes32[] calldata hashes, bool[] calldata reserved) external onlyAdmin {

    for (uint256 i = 0; i < hashes.length; i++) {

      _reservedTypes[hashes[i]] = reserved[i];

    }

  }



  /**

   * @notice Get the Holograph Utility Token address

   * @dev This is the official utility token of the Holograph Protocol

   */

  function getUtilityToken() external view returns (address utilityToken) {

    assembly {

      utilityToken := sload(_utilityTokenSlot)

    }

  }



  /**

   * @notice Update the Holograph Utility Token address

   * @param utilityToken address of the Holograph Utility Token smart contract to use

   */

  function setUtilityToken(address utilityToken) external onlyAdmin {

    assembly {

      sstore(_utilityTokenSlot, utilityToken)

    }

  }



  /**

   * @dev Purposefully reverts to prevent having any type of ether transfered into the contract

   */

  receive() external payable {

    revert();

  }



  /**

   * @dev Purposefully reverts to prevent any calls to undefined functions

   */

  fallback() external payable {

    revert();

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographRegistryInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



interface HolographRegistryInterface {

  event HolographableContractEvent(address indexed _holographableContract, bytes _payload);



  function isHolographedContract(address smartContract) external view returns (bool);



  function isHolographedHashDeployed(bytes32 hash) external view returns (bool);



  function referenceContractTypeAddress(address contractAddress) external returns (bytes32);



  function getContractTypeAddress(bytes32 contractType) external view returns (address);



  function setContractTypeAddress(bytes32 contractType, address contractAddress) external;



  function getHolograph() external view returns (address holograph);



  function setHolograph(address holograph) external;



  function getHolographableContracts(uint256 index, uint256 length) external view returns (address[] memory contracts);



  function getHolographableContractsLength() external view returns (uint256);



  function getHolographedHashAddress(bytes32 hash) external view returns (address);



  function setHolographedHashAddress(bytes32 hash, address contractAddress) external;



  function getHToken(uint32 chainId) external view returns (address);



  function setHToken(uint32 chainId, address hToken) external;



  function getReservedContractTypeAddress(bytes32 contractType) external view returns (address contractTypeAddress);



  function setReservedContractTypeAddress(bytes32 hash, bool reserved) external;



  function setReservedContractTypeAddresses(bytes32[] calldata hashes, bool[] calldata reserved) external;



  function getUtilityToken() external view returns (address utilityToken);



  function setUtilityToken(address utilityToken) external;



  function holographableEvent(bytes calldata payload) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographRegistryProxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



import "../interface/InitializableInterface.sol";



contract HolographRegistryProxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)

   */

  bytes32 constant _registrySlot = 0xce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e7;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address registry, bytes memory initCode) = abi.decode(data, (address, bytes));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_registrySlot, registry)

    }

    (bool success, bytes memory returnData) = registry.delegatecall(abi.encodeWithSignature("init(bytes)", initCode));

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == InitializableInterface.init.selector, "initialization failed");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  function getRegistry() external view returns (address registry) {

    assembly {

      registry := sload(_registrySlot)

    }

  }



  function setRegistry(address registry) external onlyAdmin {

    assembly {

      sstore(_registrySlot, registry)

    }

  }



  receive() external payable {}



  fallback() external payable {

    assembly {

      let registry := sload(_registrySlot)

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), registry, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographRoyalties.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";

import "../abstract/Owner.sol";



import "../interface/ERC20.sol";

import "../interface/HolographerInterface.sol";

import "../interface/InitializableInterface.sol";

import "../interface/HolographRoyaltiesInterface.sol";



import "../struct/ZoraBidShares.sol";



/**

 * @title HolographRoyalties

 * @author Holograph Foundation

 * @notice A smart contract for providing royalty info, collecting royalties, and distributing it to configured payout wallets.

 * @dev This smart contract is not intended to be used directly. Apply it to any of your ERC721 or ERC1155 smart contracts through a delegatecall fallback.

 */

contract HolographRoyalties is Admin, Owner, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.ROYALTIES.defaultBp')) - 1)

   */

  bytes32 constant _defaultBpSlot = 0xff29fcf645501423fd56e0287670f6813a1e5db5cf706428bc8516381e7ffe81;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.ROYALTIES.defaultReceiver')) - 1)

   */

  bytes32 constant _defaultReceiverSlot = 0x00b381815b89a20a37ee91e8a0119be5e16f6d1668377e7ae457213a74a415bb;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.ROYALTIES.initialized')) - 1)

   */

  bytes32 constant _initializedPaidSlot = 0x91428d26cb4818e4e627ebb64c06b5a67b82f313516b5c903cf07a00681c95f6;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.ROYALTIES.payout.addresses')) - 1)

   */

  bytes32 constant _payoutAddressesSlot = 0xf31f2a3a453a7aa2f3054423a8c5474ac9817ea457b458152967bbcb12ed6a43;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.ROYALTIES.payout.bps')) - 1)

   */

  bytes32 constant _payoutBpsSlot = 0xa4023567d5b5f01c63e00d90785d7cd4ff057a237ad185c5ecade8f4059fb61a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.ROYALTIES.extendedCall')) - 1)

   * @dev extendedCall is an init config used to determine if payouts should be sent via a call or a transfer.

   */

  bytes32 constant _extendedCallSlot = 0x254926eafdecb56f669f96a3a752fbca17becd902481431df613768b1f903fa3;



  string constant _bpString = "eip1967.Holograph.ROYALTIES.bp";

  string constant _receiverString = "eip1967.Holograph.ROYALTIES.receiver";

  string constant _tokenAddressString = "eip1967.Holograph.ROYALTIES.tokenAddress";



  /**

   * @notice Event emitted when setting/updating royalty info/fees. This is used by Rarible V1.

   * @dev Emits event in order to comply with Rarible V1 royalty spec.

   * @param tokenId Specific token id for which royalty info is being set, set as 0 for all tokens inside of the smart contract.

   * @param recipients Address array of wallets that will receive tha royalties.

   * @param bps Uint256 array of base points(percentages) that each wallet(specified in recipients) will receive from the royalty payouts.

   *            Make sure that all the base points add up to a total of 10000.

   */

  event SecondarySaleFees(uint256 tokenId, address[] recipients, uint256[] bps);



  /**

   * @dev Use this modifier to lock public functions that should not be accesible to non-owners.

   */

  modifier onlyOwner() override {

    require(isOwner(), "ROYALTIES: caller not an owner");

    _;

  }



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "ROYALTIES: already initialized");

    assembly {

      sstore(_adminSlot, caller())

      sstore(_ownerSlot, caller())

    }

    uint256 bp = abi.decode(initPayload, (uint256));

    setRoyalties(0, payable(address(this)), bp);

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  function initHolographRoyalties(bytes memory initPayload) external returns (bytes4) {

    uint256 initialized;

    assembly {

      initialized := sload(_initializedPaidSlot)

    }

    require(initialized == 0, "ROYALTIES: already initialized");

    (uint256 bp, uint256 useExtenededCall) = abi.decode(initPayload, (uint256, uint256));

    if (useExtenededCall > 0) {

      useExtenededCall = 1;

    }

    assembly {

      sstore(_extendedCallSlot, useExtenededCall)

    }

    setRoyalties(0, payable(address(this)), bp);

    address payable[] memory addresses = new address payable[](1);

    addresses[0] = payable(Owner(HolographerInterface(address(this)).getSourceContract()).owner());

    uint256[] memory bps = new uint256[](1);

    bps[0] = 10000;

    _setPayoutAddresses(addresses);

    _setPayoutBps(bps);

    initialized = 1;

    assembly {

      sstore(_initializedPaidSlot, initialized)

    }

    return InitializableInterface.init.selector;

  }



  /**

   * @notice Check if message sender is a legitimate owner of the smart contract

   * @dev We check owner, admin, and identity for a more comprehensive coverage.

   * @return Returns true is message sender is an owner.

   */

  function isOwner() private view returns (bool) {

    return (msg.sender == getOwner() ||

      msg.sender == getAdmin() ||

      msg.sender == Owner(HolographerInterface(address(this)).getSourceContract()).owner());

  }



  /**

   * @dev This is here in place to prevent reverts in case contract is used outside of the protocol.

   */

  function getSourceContract() external view returns (address sourceContract) {

    sourceContract = address(this);

  }



  /**

   * @dev Gets the default royalty payment receiver address from storage slot.

   * @return receiver Wallet or smart contract that will receive the initial royalty payouts.

   */

  function _getDefaultReceiver() private view returns (address payable receiver) {

    assembly {

      receiver := sload(_defaultReceiverSlot)

    }

  }



  /**

   * @dev Sets the default royalty payment receiver address to storage slot.

   * @param receiver Wallet or smart contract that will receive the initial royalty payouts.

   */

  function _setDefaultReceiver(address receiver) private {

    assembly {

      sstore(_defaultReceiverSlot, receiver)

    }

  }



  /**

   * @dev Gets the default royalty base points(percentage) from storage slot.

   * @return bp Royalty base points(percentage) for royalty payouts.

   */

  function _getDefaultBp() private view returns (uint256 bp) {

    assembly {

      bp := sload(_defaultBpSlot)

    }

  }



  /**

   * @dev Sets the default royalty base points(percentage) to storage slot.

   * @param bp Uint256 of royalty percentage, provided in base points format.

   */

  function _setDefaultBp(uint256 bp) private {

    assembly {

      sstore(_defaultBpSlot, bp)

    }

  }



  /**

   * @dev Gets the royalty payment receiver address, for a particular token id, from storage slot.

   * @return receiver Wallet or smart contract that will receive the royalty payouts for a particular token id.

   */

  function _getReceiver(uint256 tokenId) private view returns (address payable receiver) {

    bytes32 slot = bytes32(uint256(keccak256(abi.encodePacked(_receiverString, tokenId))) - 1);

    assembly {

      receiver := sload(slot)

    }

  }



  /**

   * @dev Sets the royalty payment receiver address, for a particular token id, to storage slot.

   * @param tokenId Uint256 of the token id to set the receiver for.

   * @param receiver Wallet or smart contract that will receive the royalty payouts for a particular token id.

   */

  function _setReceiver(uint256 tokenId, address receiver) private {

    bytes32 slot = bytes32(uint256(keccak256(abi.encodePacked(_receiverString, tokenId))) - 1);

    assembly {

      sstore(slot, receiver)

    }

  }



  /**

   * @dev Gets the royalty base points(percentage), for a particular token id, from storage slot.

   * @return bp Royalty base points(percentage) for the royalty payouts of a specific token id.

   */

  function _getBp(uint256 tokenId) private view returns (uint256 bp) {

    bytes32 slot = bytes32(uint256(keccak256(abi.encodePacked(_bpString, tokenId))) - 1);

    assembly {

      bp := sload(slot)

    }

  }



  /**

   * @dev Sets the royalty base points(percentage), for a particular token id, to storage slot.

   * @param tokenId Uint256 of the token id to set the base points for.

   * @param bp Uint256 of royalty percentage, provided in base points format, for a particular token id.

   */

  function _setBp(uint256 tokenId, uint256 bp) private {

    bytes32 slot = bytes32(uint256(keccak256(abi.encodePacked(_bpString, tokenId))) - 1);

    assembly {

      sstore(slot, bp)

    }

  }



  function _getPayoutAddresses() private view returns (address payable[] memory addresses) {

    // The slot hash has been precomputed for gas optimizaion

    bytes32 slot = _payoutAddressesSlot;

    uint256 length;

    assembly {

      length := sload(slot)

    }

    addresses = new address payable[](length);

    address payable value;

    for (uint256 i = 0; i < length; i++) {

      slot = keccak256(abi.encodePacked(i, slot));

      assembly {

        value := sload(slot)

      }

      addresses[i] = value;

    }

  }



  function _setPayoutAddresses(address payable[] memory addresses) private {

    bytes32 slot = _payoutAddressesSlot;

    uint256 length = addresses.length;

    assembly {

      sstore(slot, length)

    }

    address payable value;

    for (uint256 i = 0; i < length; i++) {

      slot = keccak256(abi.encodePacked(i, slot));

      value = addresses[i];

      assembly {

        sstore(slot, value)

      }

    }

  }



  function _getPayoutBps() private view returns (uint256[] memory bps) {

    bytes32 slot = _payoutBpsSlot;

    uint256 length;

    assembly {

      length := sload(slot)

    }

    bps = new uint256[](length);

    uint256 value;

    for (uint256 i = 0; i < length; i++) {

      slot = keccak256(abi.encodePacked(i, slot));

      assembly {

        value := sload(slot)

      }

      bps[i] = value;

    }

  }



  function _setPayoutBps(uint256[] memory bps) private {

    bytes32 slot = _payoutBpsSlot;

    uint256 length = bps.length;

    assembly {

      sstore(slot, length)

    }

    uint256 value;

    for (uint256 i = 0; i < length; i++) {

      slot = keccak256(abi.encodePacked(i, slot));

      value = bps[i];

      assembly {

        sstore(slot, value)

      }

    }

  }



  function _getTokenAddress(string memory tokenName) private view returns (address tokenAddress) {

    bytes32 slot = bytes32(uint256(keccak256(abi.encodePacked(_tokenAddressString, tokenName))) - 1);

    assembly {

      tokenAddress := sload(slot)

    }

  }



  function _setTokenAddress(string memory tokenName, address tokenAddress) private {

    bytes32 slot = bytes32(uint256(keccak256(abi.encodePacked(_tokenAddressString, tokenName))) - 1);

    assembly {

      sstore(slot, tokenAddress)

    }

  }



  /**

   * @dev Private function that transfers ETH to all payout recipients.

   * @dev This contract is designed primarily to capture royalties, but is limited in payout logic.

   * @dev This function uses a push payment model, where the contract pushes the ETH to the recipients.

   * @dev The design is intended so that royalty distribution logic can be handled externally via payment distribution contracts.

   * @dev The recommended usage for royalty structures that require more complex payout logic to multiple recipients is to

   *      set 100% ownership payout with the recipient being the payment distribution contract.

   */

  function _payoutEth() private {

    address payable[] memory addresses = _getPayoutAddresses();

    uint256[] memory bps = _getPayoutBps();

    uint256 length = addresses.length;

    uint256 balance = address(this).balance;

    uint256 sending;

    bool extendedCall;

    assembly {

      extendedCall := sload(_extendedCallSlot)

    }

    for (uint256 i = 0; i < length; i++) {

      sending = ((bps[i] * balance) / 10000);

      // only send value if it is greater than 0

      if (sending > 0) {

        // If the contract enabled extended call on init then use call to transfer, otherwise use transfer

        if (extendedCall == true) {

          (bool success, ) = addresses[i].call{value: sending}("");

          require(success, "ROYALTIES: Transfer failed");

        } else {

          addresses[i].transfer(sending);

        }

      }

    }

  }



  /**

   * @dev Private function that transfers tokens to all payout recipients.

   * @dev ERC20 tokens that use fee on transfer are not supported.

   * @dev This contract is designed primarily to capture royalties, but is limited in payout logic.

   * @dev This function uses a push payment model, where the contract pushes the ETH to the recipients.

   * @dev The design is intended so that royalty distribution logic can be handled externally via payment distribution contracts.

   * @dev The recommended usage for royalty structures that require more complex payout logic to multiple recipients is to

   *      set 100% ownership payout with the recipient being the payment distribution contract.

   *

   * @param tokenAddress Smart contract address of ERC20 token.

   */

  function _payoutToken(address tokenAddress) private {

    address payable[] memory addresses = _getPayoutAddresses();

    uint256[] memory bps = _getPayoutBps();

    uint256 length = addresses.length;

    ERC20 erc20 = ERC20(tokenAddress);

    uint256 balance = erc20.balanceOf(address(this));

    uint256 sending;

    for (uint256 i = 0; i < length; i++) {

      sending = ((bps[i] * balance) / 10000);

      // Some tokens revert when transferring a zero value amount this check ensures if one recipient's

      // amount is zero, the transfer will still succeed for the other recipients.

      if (sending > 0) {

        require(

          _callOptionalReturn(

            tokenAddress,

            erc20.transfer.selector,

            abi.encode(address(addresses[i]), uint256(sending))

          ),

          "ROYALTIES: ERC20 transfer failed"

        );

      }

    }

  }



  /**

   * @dev Private function that transfers multiple tokens to all payout recipients.

   * @dev Try to use _payoutToken and handle each token individually.

   * @dev ERC20 tokens that use fee on transfer are not supported.

   * @dev This contract is designed primarily to capture royalties, but is limited in payout logic.

   * @dev This function uses a push payment model, where the contract pushes the ETH to the recipients.

   * @dev The design is intended so that royalty distribution logic can be handled externally via payment distribution contracts.

   * @dev The recommended usage for royalty structures that require more complex payout logic to multiple recipients is to

   *      set 100% ownership payout with the recipient being the payment distribution contract.

   *

   * @param tokenAddresses Array of smart contract addresses of ERC20 tokens.

   */

  function _payoutTokens(address[] memory tokenAddresses) private {

    address payable[] memory addresses = _getPayoutAddresses();

    uint256[] memory bps = _getPayoutBps();

    ERC20 erc20;

    uint256 balance;

    uint256 sending;

    for (uint256 t = 0; t < tokenAddresses.length; t++) {

      erc20 = ERC20(tokenAddresses[t]);

      balance = erc20.balanceOf(address(this));

      for (uint256 i = 0; i < addresses.length; i++) {

        sending = ((bps[i] * balance) / 10000);

        // Some tokens revert when transferring a zero value amount this check ensures if one recipient's

        // amount is zero, the transfer will still succeed for the other recipients.

        if (sending > 0) {

          require(

            _callOptionalReturn(

              tokenAddresses[t],

              erc20.transfer.selector,

              abi.encode(address(addresses[i]), uint256(sending))

            ),

            "ROYALTIES: ERC20 transfer failed"

          );

        }

      }

    }

  }



  /**

   * @dev This function validates that the call is being made by an authorised wallet.

   * @dev Will revert entire tranaction if it fails.

   */

  function _validatePayoutRequestor() private view {

    if (!isOwner()) {

      bool matched;

      address payable[] memory addresses = _getPayoutAddresses();

      address payable sender = payable(msg.sender);

      for (uint256 i = 0; i < addresses.length; i++) {

        if (addresses[i] == sender) {

          matched = true;

          break;

        }

      }

      require(matched, "ROYALTIES: sender not authorized");

    }

  }



  /**

   * @notice Set the wallets and percentages for royalty payouts.

   *         Limited to 10 wallets to prevent out of gas errors.

   *         For more complex royalty structures, set 100% ownership payout with the recipient being the payment distribution contract.

   * @dev Function can only we called by owner, admin, or identity wallet.

   * @dev Addresses and bps arrays must be equal length. Bps values added together must equal 10000 exactly.

   * @param addresses An array of all the addresses that will be receiving royalty payouts.

   * @param bps An array of the percentages that each address will receive from the royalty payouts.

   */

  function configurePayouts(address payable[] memory addresses, uint256[] memory bps) public onlyOwner {

    require(addresses.length == bps.length, "ROYALTIES: missmatched lenghts");

    require(addresses.length <= 10, "ROYALTIES: max 10 addresses");

    uint256 totalBp;

    for (uint256 i = 0; i < addresses.length; i++) {

      require(addresses[i] != address(0), "ROYALTIES: payee is zero address");

      require(bps[i] > 0, "ROYALTIES: bp is zero");

      totalBp = totalBp + bps[i];

    }

    require(totalBp == 10000, "ROYALTIES: bps must equal 10000");

    _setPayoutAddresses(addresses);

    _setPayoutBps(bps);

  }



  /**

   * @notice Show the wallets and percentages of payout recipients.

   * @dev These are the recipients that will be getting royalty payouts.

   * @return addresses An array of all the addresses that will be receiving royalty payouts.

   * @return bps An array of the percentages that each address will receive from the royalty payouts.

   */

  function getPayoutInfo() public view returns (address payable[] memory addresses, uint256[] memory bps) {

    addresses = _getPayoutAddresses();

    bps = _getPayoutBps();

  }



  /**

   * @notice Get payout of all ETH in smart contract.

   * @dev Distribute all the ETH(minus gas fees) to payout recipients.

   */

  function getEthPayout() public {

    _validatePayoutRequestor();

    _payoutEth();

  }



  /**

   * @notice Get payout for a specific token address. Token must have a positive balance!

   * @dev Contract owner, admin, identity wallet, and payout recipients can call this function.

   * @param tokenAddress An address of the token for which to issue payouts for.

   */

  function getTokenPayout(address tokenAddress) public {

    _validatePayoutRequestor();

    _payoutToken(tokenAddress);

  }



  /**

   * @notice Get payouts for tokens listed by address. Tokens must have a positive balance!

   * @dev Each token balance must be equal or greater than 10000. Otherwise calculating BP is difficult.

   * @param tokenAddresses An address array of tokens to issue payouts for.

   */

  function getTokensPayout(address[] memory tokenAddresses) public {

    _validatePayoutRequestor();

    _payoutTokens(tokenAddresses);

  }



  /**

   * @notice Set the royalty information for entire contract, or a specific token.

   * @dev Take great care to not make this function accessible by other public functions in your overlying smart contract.

   * @param tokenId Set a specific token id, or leave at 0 to set as default parameters.

   * @param receiver Wallet or smart contract that will receive the royalty payouts.

   * @param bp Uint256 of royalty percentage, provided in base points format.

   */

  function setRoyalties(uint256 tokenId, address payable receiver, uint256 bp) public onlyOwner {

    require(receiver != address(0), "ROYALTIES: receiver is zero address");

    require(bp <= 10000, "ROYALTIES: base points over 100%");

    if (tokenId == 0) {

      _setDefaultReceiver(receiver);

      _setDefaultBp(bp);

    } else {

      _setReceiver(tokenId, receiver);

      _setBp(tokenId, bp);

    }

    address[] memory receivers = new address[](1);

    receivers[0] = address(receiver);

    uint256[] memory bps = new uint256[](1);

    bps[0] = bp;

    emit SecondarySaleFees(tokenId, receivers, bps);

  }



  // IEIP2981

  function royaltyInfo(uint256 tokenId, uint256 value) public view returns (address, uint256) {

    if (_getReceiver(tokenId) == address(0)) {

      return (_getDefaultReceiver(), (_getDefaultBp() * value) / 10000);

    } else {

      return (_getReceiver(tokenId), (_getBp(tokenId) * value) / 10000);

    }

  }



  // Rarible V1

  function getFeeBps(uint256 tokenId) public view returns (uint256[] memory) {

    uint256[] memory bps = new uint256[](1);

    if (_getReceiver(tokenId) == address(0)) {

      bps[0] = _getDefaultBp();

    } else {

      bps[0] = _getBp(tokenId);

    }

    return bps;

  }



  // Rarible V1

  function getFeeRecipients(uint256 tokenId) public view returns (address payable[] memory) {

    address payable[] memory receivers = new address payable[](1);

    if (_getReceiver(tokenId) == address(0)) {

      receivers[0] = _getDefaultReceiver();

    } else {

      receivers[0] = _getReceiver(tokenId);

    }

    return receivers;

  }



  // Rarible V2(not being used since it creates a conflict with Manifold royalties)

  // struct Part {

  //     address payable account;

  //     uint96 value;

  // }



  // function getRoyalties(uint256 tokenId) public view returns (Part[] memory) {

  //     return royalties[id];

  // }



  // Manifold

  function getRoyalties(uint256 tokenId) public view returns (address payable[] memory, uint256[] memory) {

    address payable[] memory receivers = new address payable[](1);

    uint256[] memory bps = new uint256[](1);

    if (_getReceiver(tokenId) == address(0)) {

      receivers[0] = _getDefaultReceiver();

      bps[0] = _getDefaultBp();

    } else {

      receivers[0] = _getReceiver(tokenId);

      bps[0] = _getBp(tokenId);

    }

    return (receivers, bps);

  }



  // Foundation

  function getFees(uint256 tokenId) public view returns (address payable[] memory, uint256[] memory) {

    address payable[] memory receivers = new address payable[](1);

    uint256[] memory bps = new uint256[](1);

    if (_getReceiver(tokenId) == address(0)) {

      receivers[0] = _getDefaultReceiver();

      bps[0] = _getDefaultBp();

    } else {

      receivers[0] = _getReceiver(tokenId);

      bps[0] = _getBp(tokenId);

    }

    return (receivers, bps);

  }



  // SuperRare

  // Hint taken from Manifold's RoyaltyEngine(https://github.com/manifoldxyz/royalty-registry-solidity/blob/main/contracts/RoyaltyEngineV1.sol)

  // To be quite honest, SuperRare is a closed marketplace. They're working on opening it up but looks like they want to use private smart contracts.

  // We'll just leave this here for just in case they open the flood gates.

  function tokenCreator(

    address,

    /* contractAddress*/

    uint256 tokenId

  ) public view returns (address) {

    address receiver = _getReceiver(tokenId);

    if (receiver == address(0)) {

      return _getDefaultReceiver();

    }

    return receiver;

  }



  // SuperRare

  function calculateRoyaltyFee(

    address,

    /* contractAddress */

    uint256 tokenId,

    uint256 amount

  ) public view returns (uint256) {

    if (_getReceiver(tokenId) == address(0)) {

      return (_getDefaultBp() * amount) / 10000;

    } else {

      return (_getBp(tokenId) * amount) / 10000;

    }

  }



  // Holograph

  // we indicate that this contract operates market functions

  function marketContract() public view returns (address) {

    return address(this);

  }



  // Holograph

  // we indicate that the receiver is the creator, to convince the smart contract to pay

  function tokenCreators(uint256 tokenId) public view returns (address) {

    address receiver = _getReceiver(tokenId);

    if (receiver == address(0)) {

      return _getDefaultReceiver();

    }

    return receiver;

  }



  // Holograph

  // we provide the percentage that needs to be paid out from the sale

  function bidSharesForToken(uint256 tokenId) public view returns (HolographBidShares memory bidShares) {

    // this information is outside of the scope of our

    bidShares.prevOwner.value = 0;

    bidShares.owner.value = 0;

    if (_getReceiver(tokenId) == address(0)) {

      bidShares.creator.value = _getDefaultBp() * (10 ** 16);

    } else {

      bidShares.creator.value = _getBp(tokenId) * (10 ** 16);

    }

    return bidShares;

  }



  /**

   * @notice Get the smart contract address of a token by common name.

   * @dev Used only to identify really major/common tokens. Avoid using due to gas usages.

   * @param tokenName The ticker symbol of the token. For example "USDC" or "DAI".

   * @return The smart contract address of the token ticker symbol. Or zero address if not found.

   */

  function getTokenAddress(string memory tokenName) public view returns (address) {

    return _getTokenAddress(tokenName);

  }



  /**

   * @notice Used to wrap function calls to check if they return without revert regardless of return type.

   * @dev Checks if wrapped function opcode is a revert, if it is then it reverts as well, if it's not then

   *      it checks for return data, if return data exists, it is returned as a bool,

   *      if return data does not exist (0 length) then success is expected and returns true

   * @return Returns true if the wrapped function call returns without a revert even if it doesn't return true.

   */

  function _callOptionalReturn(address target, bytes4 functionSignature, bytes memory payload) internal returns (bool) {

    bytes memory data = abi.encodePacked(functionSignature, payload);

    bool success = true;

    assembly {

      let result := call(gas(), target, callvalue(), add(data, 0x20), mload(data), 0, 0)

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        if gt(returndatasize(), 0) {

          returndatacopy(success, 0, 0x20)

        }

      }

    }

    return success;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographRoyaltiesInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../struct/ZoraBidShares.sol";



interface HolographRoyaltiesInterface {

  function initHolographRoyalties(bytes memory data) external returns (bytes4);



  function configurePayouts(address payable[] memory addresses, uint256[] memory bps) external;



  function getPayoutInfo() external view returns (address payable[] memory addresses, uint256[] memory bps);



  function getEthPayout() external;



  function getTokenPayout(address tokenAddress) external;



  function getTokensPayout(address[] memory tokenAddresses) external;



  function supportsInterface(bytes4 interfaceId) external pure returns (bool);



  function setRoyalties(uint256 tokenId, address payable receiver, uint256 bp) external;



  function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);



  function getFeeBps(uint256 tokenId) external view returns (uint256[] memory);



  function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);



  function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);



  function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);



  function tokenCreator(address /* contractAddress*/, uint256 tokenId) external view returns (address);



  function calculateRoyaltyFee(

    address /* contractAddress */,

    uint256 tokenId,

    uint256 amount

  ) external view returns (uint256);



  function marketContract() external view returns (address);



  function tokenCreators(uint256 tokenId) external view returns (address);



  function bidSharesForToken(uint256 tokenId) external view returns (HolographBidShares memory bidShares);



  function getStorageSlot(string calldata slot) external pure returns (bytes32);



  function getTokenAddress(string memory tokenName) external view returns (address);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographTreasury.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./abstract/Admin.sol";

import "./abstract/Initializable.sol";



import "./interface/HolographERC20Interface.sol";

import "./interface/HolographERC721Interface.sol";

import "./interface/HolographInterface.sol";

import "./interface/HolographTreasuryInterface.sol";

import "./interface/HolographFactoryInterface.sol";

import "./interface/HolographOperatorInterface.sol";

import "./interface/HolographRegistryInterface.sol";

import "./interface/InitializableInterface.sol";



import "./struct/DeploymentConfig.sol";

import "./struct/Verification.sol";



/**

 * @title Holograph Treasury

 * @author https://github.com/holographxyz

 * @notice This contract holds and manages the protocol treasury

 * @dev As of now this is an empty zero logic contract and is still a work in progress

 */

contract HolographTreasury is Admin, Initializable, HolographTreasuryInterface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.bridge')) - 1)

   */

  bytes32 constant _bridgeSlot = 0xeb87cbb21687feb327e3d58c6c16d552231d12c7a0e8115042a4165fac8a77f9;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)

   */

  bytes32 constant _holographSlot = 0xb4107f746e9496e8452accc7de63d1c5e14c19f510932daa04077cd49e8bd77a;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.operator')) - 1)

   */

  bytes32 constant _operatorSlot = 0x7caba557ad34138fa3b7e43fb574e0e6cc10481c3073e0dffbc560db81b5c60f;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)

   */

  bytes32 constant _registrySlot = 0xce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e7;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address bridge, address holograph, address operator, address registry) = abi.decode(

      initPayload,

      (address, address, address, address)

    );

    assembly {

      sstore(_adminSlot, origin())



      sstore(_bridgeSlot, bridge)

      sstore(_holographSlot, holograph)

      sstore(_operatorSlot, operator)

      sstore(_registrySlot, registry)

    }

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @notice Get the address of the Holograph Bridge module

   * @dev Used for beaming holographable assets cross-chain

   */

  function getBridge() external view returns (address bridge) {

    assembly {

      bridge := sload(_bridgeSlot)

    }

  }



  /**

   * @notice Update the Holograph Bridge module address

   * @param bridge address of the Holograph Bridge smart contract to use

   */

  function setBridge(address bridge) external onlyAdmin {

    assembly {

      sstore(_bridgeSlot, bridge)

    }

  }



  /**

   * @notice Get the Holograph Protocol contract

   * @dev This contract stores a reference to all the primary modules and variables of the protocol

   */

  function getHolograph() external view returns (address holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  /**

   * @notice Update the Holograph Protocol contract address

   * @param holograph address of the Holograph Protocol smart contract to use

   */

  function setHolograph(address holograph) external onlyAdmin {

    assembly {

      sstore(_holographSlot, holograph)

    }

  }



  /**

   * @notice Get the address of the Holograph Operator module

   * @dev All cross-chain Holograph Bridge beams are handled by the Holograph Operator module

   */

  function getOperator() external view returns (address operator) {

    assembly {

      operator := sload(_operatorSlot)

    }

  }



  /**

   * @notice Update the Holograph Operator module address

   * @param operator address of the Holograph Operator smart contract to use

   */

  function setOperator(address operator) external onlyAdmin {

    assembly {

      sstore(_operatorSlot, operator)

    }

  }



  /**

   * @notice Get the Holograph Registry module

   * @dev This module stores a reference for all deployed holographable smart contracts

   */

  function getRegistry() external view returns (address registry) {

    assembly {

      registry := sload(_registrySlot)

    }

  }



  /**

   * @notice Update the Holograph Registry module address

   * @param registry address of the Holograph Registry smart contract to use

   */

  function setRegistry(address registry) external onlyAdmin {

    assembly {

      sstore(_registrySlot, registry)

    }

  }



  function _bridge() private view returns (address bridge) {

    assembly {

      bridge := sload(_bridgeSlot)

    }

  }



  function _holograph() private view returns (address holograph) {

    assembly {

      holograph := sload(_holographSlot)

    }

  }



  function _operator() private view returns (address operator) {

    assembly {

      operator := sload(_operatorSlot)

    }

  }



  function _registry() private view returns (address registry) {

    assembly {

      registry := sload(_registrySlot)

    }

  }



  /**

   * @notice Withdraws native tokens from the contract

   * @dev Can only be called by the admin

   */

  function withdraw() external onlyAdmin {

    uint256 balance = address(this).balance;

    require(balance > 0, "HOLOGRAPH: No balance to withdraw");



    (bool success, ) = payable(msg.sender).call{value: balance}("");

    require(success, "HOLOGRAPH: Withdraw failed");

  }



  /**

   * @notice Withdraws native tokens from the contract to a specified address

   * @dev Can only be called by the admin

   * @param recipient The address to send the withdrawn funds to

   */

  function withdrawTo(address payable recipient) external onlyAdmin {

    uint256 balance = address(this).balance;

    require(balance > 0, "HOLOGRAPH: No balance to withdraw");



    (bool success, ) = recipient.call{value: balance}("");

    require(success, "HOLOGRAPH: Withdraw failed");

  }



  /**

   * @dev Purposefully left empty to ensure ether transfers use least amount of gas possible

   */

  receive() external payable {}



  /**

   * @dev Purposefully reverts to prevent any calls to undefined functions

   */

  fallback() external payable {

    revert();

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographTreasuryInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



interface HolographTreasuryInterface {

  // purposefully left blank

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographTreasuryProxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



import "../interface/InitializableInterface.sol";



contract HolographTreasuryProxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.treasury')) - 1)

   */

  bytes32 constant _treasurySlot = 0x4215e7a38d75164ca078bbd61d0992cdeb1ba16f3b3ead5944966d3e4080e8b6;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address treasury, bytes memory initCode) = abi.decode(data, (address, bytes));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_treasurySlot, treasury)

    }

    (bool success, bytes memory returnData) = treasury.delegatecall(abi.encodeWithSignature("init(bytes)", initCode));

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == InitializableInterface.init.selector, "initialization failed");

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  function getTreasury() external view returns (address treasury) {

    assembly {

      treasury := sload(_treasurySlot)

    }

  }



  function setTreasury(address treasury) external onlyAdmin {

    assembly {

      sstore(_treasurySlot, treasury)

    }

  }



  receive() external payable {}



  fallback() external payable {

    assembly {

      let treasury := sload(_treasurySlot)

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), treasury, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\HolographUtilityToken.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/HLGERC20H.sol";



import "../interface/ERC20.sol";

import "../interface/HolographERC20Interface.sol";

import "../interface/HolographInterface.sol";

import "../interface/HolographerInterface.sol";



/**

 * @title Holograph Utility Token.

 * @author Holograph Foundation

 * @notice A smart contract for minting and managing Holograph's ERC20 Utility Tokens.

 * @dev The entire logic and functionality of the smart contract is self-contained.

 */

contract HolographUtilityToken is HLGERC20H {

  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    (address contractOwner, uint256 tokenAmount, uint256 targetChain, address tokenRecipient) = abi.decode(

      initPayload,

      (address, uint256, uint256, address)

    );

    _setOwner(contractOwner);

    /*

     * @dev Mint token only if target chain matches current chain. Or if no target chain has been selected.

     *      Goal of this is to restrict minting on Ethereum only for mainnet deployment.

     */

    if (block.chainid == targetChain || targetChain == 0) {

      if (tokenAmount > 0) {

        HolographERC20Interface(msg.sender).sourceMint(tokenRecipient, tokenAmount);

      }

    }

    // run underlying initializer logic

    return _init(initPayload);

  }



  /**

   * @dev Temporarily placed to bypass bytecode conflicts

   */

  function isHLG() external pure returns (bool) {

    return true;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\hToken.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/ERC20H.sol";



import "../interface/ERC20.sol";

import "../interface/HolographERC20Interface.sol";

import "../interface/HolographInterface.sol";

import "../interface/HolographerInterface.sol";



/**

 * @title Holograph token (aka hToken), used to wrap and bridge native tokens across blockchains.

 * @author Holograph Foundation

 * @notice A smart contract for minting and managing Holograph's Bridgeable ERC20 Tokens.

 * @dev The entire logic and functionality of the smart contract is self-contained.

 */

contract hToken is ERC20H {

  /**

   * @dev Sample fee for unwrapping.

   */

  uint16 private _feeBp; // 10000 == 100.00%



  /**

   * @dev List of supported Wrapped Tokens (equivalent), on current-chain.

   */

  mapping(address => bool) private _supportedWrappers;



  /**

   * @dev List of supported chains.

   */

  mapping(uint256 => bool) private _supportedChains;



  /**

   * @dev Event that is triggered when native token is converted into hToken.

   */

  event Deposit(address indexed from, uint256 amount);



  /**

   * @dev Event that is triggered when ERC20 token is converted into hToken.

   */

  event TokenDeposit(address indexed token, address indexed from, uint256 amount);



  /**

   * @dev Event that is triggered when hToken is converted into native token.

   */

  event Withdrawal(address indexed to, uint256 amount);



  /**

   * @dev Event that is triggered when hToken is converted into ERC20 token.

   */

  event TokenWithdrawal(address indexed token, address indexed to, uint256 amount);



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    (address contractOwner, uint16 fee) = abi.decode(initPayload, (address, uint16));

    assembly {

      /**

       * @dev bytes32(uint256(keccak256('eip1967.Holograph.admin')) - 1)

       */

      sstore(0x3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c9, contractOwner)

    }

    _setOwner(contractOwner);

    _feeBp = fee;

    // run underlying initializer logic

    return _init(initPayload);

  }



  /**

   * @dev Send native token value, get back hToken equivalent.

   * @param recipient Address of where to send the hToken(s) to.

   */

  function holographNativeToken(address recipient) external payable {

    require(_supportedChains[block.chainid], "hToken: unsupported chain");

    require(msg.value > 0, "hToken: no value received");

    address sender = msgSender();

    if (recipient == address(0)) {

      recipient = sender;

    }

    payable(holographer()).transfer(msg.value);

    HolographERC20Interface(holographer()).sourceMint(recipient, msg.value);

    emit Deposit(sender, msg.value);

  }



  /**

   * @dev Send hToken, get back native token value equivalent.

   * @param recipient Address of where to send the native token(s) to.

   */

  function extractNativeToken(address payable recipient, uint256 amount) external {

    require(_supportedChains[block.chainid], "hToken: unsupported chain");

    address sender = msgSender();

    require(ERC20(holographer()).balanceOf(sender) >= amount, "hToken: not enough hToken(s)");

    require(holographer().balance >= amount, "hToken: not enough native tokens");

    HolographERC20Interface(holographer()).sourceBurn(sender, amount);

    uint256 fee = _feeBp == 0 ? 0 : (amount / 10000) * _feeBp;

    if (fee > 0) {

      HolographERC20Interface(HolographInterface(HolographerInterface(holographer()).getHolograph()).getTreasury())

        .sourceTransfer(recipient, fee);

    }

    amount = amount - fee;

    HolographERC20Interface(holographer()).sourceTransfer(recipient, amount);

    emit Withdrawal(recipient, amount);

  }



  function isSupportedChain(uint256 chain) external view returns (bool) {

    return _supportedChains[chain];

  }



  function isSupportedWrapper(address token) external view returns (bool) {

    return _supportedWrappers[token];

  }



  function updateSupportedWrapper(address token, bool supported) external onlyOwner {

    _supportedWrappers[token] = supported;

  }



  function updateSupportedChain(uint256 chain, bool supported) external onlyOwner {

    _supportedChains[chain] = supported;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\hTokenProxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



import "../interface/HolographRegistryInterface.sol";



contract hTokenProxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.contractType')) - 1)

   */

  bytes32 constant _contractTypeSlot = 0x0b671eb65810897366dd82c4cbb7d9dff8beda8484194956e81e89b8a361d9c7;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)

   */

  bytes32 constant _registrySlot = 0xce8e75d5c5227ce29a4ee170160bb296e5dea6934b80a9bd723f7ef1e7c850e7;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (bytes32 contractType, address registry, bytes memory initCode) = abi.decode(data, (bytes32, address, bytes));

    assembly {

      sstore(_contractTypeSlot, contractType)

      sstore(_registrySlot, registry)

    }

    (bool success, bytes memory returnData) = getHTokenSource().delegatecall(

      abi.encodeWithSignature("init(bytes)", initCode)

    );

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == Initializable.init.selector, "initialization failed");



    _setInitialized();

    return Initializable.init.selector;

  }



  function getHTokenSource() public view returns (address) {

    HolographRegistryInterface registry;

    bytes32 contractType;

    assembly {

      registry := sload(_registrySlot)

      contractType := sload(_contractTypeSlot)

    }

    return registry.getContractTypeAddress(contractType);

  }



  receive() external payable {}



  fallback() external payable {

    address hTokenSource = getHTokenSource();

    assembly {

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), hTokenSource, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\IDropsPriceOracle.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



interface IDropsPriceOracle {

  function convertUsdToWei(uint256 usdAmount) external view returns (uint256 weiAmount);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\IHolographDropERC721.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {IMetadataRenderer} from "./IMetadataRenderer.sol";



import {AddressMintDetails} from "../struct/AddressMintDetails.sol";

import {SaleDetails} from "../struct/SaleDetails.sol";



/// @notice Interface for HOLOGRAPH Drops contract

interface IHolographDropERC721 {

  // Access errors



  /// @notice Only admin can access this function

  error Access_OnlyAdmin();

  /// @notice Missing the given role or admin access

  error Access_MissingRoleOrAdmin(bytes32 role);

  /// @notice Withdraw is not allowed by this user

  error Access_WithdrawNotAllowed();

  /// @notice Cannot withdraw funds due to ETH send failure.

  error Withdraw_FundsSendFailure();

  /// @notice Mint fee send failure

  error MintFee_FundsSendFailure();



  /// @notice Call to external metadata renderer failed.

  error ExternalMetadataRenderer_CallFailed();



  /// @notice Thrown when the operator for the contract is not allowed

  /// @dev Used when strict enforcement of marketplaces for creator royalties is desired.

  error OperatorNotAllowed(address operator);



  /// @notice Thrown when there is no active market filter DAO address supported for the current chain

  /// @dev Used for enabling and disabling filter for the given chain.

  error MarketFilterDAOAddressNotSupportedForChain();



  /// @notice Used when the operator filter registry external call fails

  /// @dev Used for bubbling error up to clients.

  error RemoteOperatorFilterRegistryCallFailed();



  // Sale/Purchase errors

  /// @notice Sale is inactive

  error Sale_Inactive();

  /// @notice Presale is inactive

  error Presale_Inactive();

  /// @notice Presale merkle root is invalid

  error Presale_MerkleNotApproved();

  /// @notice Wrong price for purchase

  error Purchase_WrongPrice(uint256 correctPrice);

  /// @notice NFT sold out

  error Mint_SoldOut();

  /// @notice Too many purchase for address

  error Purchase_TooManyForAddress();

  /// @notice Too many presale for address

  error Presale_TooManyForAddress();

  /// @notice Fee payout failed

  error FeePaymentFailed();



  // Admin errors

  /// @notice Royalty percentage too high

  error Setup_RoyaltyPercentageTooHigh(uint16 maxRoyaltyBPS);

  /// @notice Invalid admin upgrade address

  error Admin_InvalidUpgradeAddress(address proposedAddress);

  /// @notice Unable to finalize an edition not marked as open (size set to uint64_max_value)

  error Admin_UnableToFinalizeNotOpenEdition();



  /// @notice Event emitted for mint fee payout

  /// @param mintFeeAmount amount of the mint fee

  /// @param mintFeeRecipient recipient of the mint fee

  /// @param success if the payout succeeded

  event MintFeePayout(uint256 mintFeeAmount, address mintFeeRecipient, bool success);



  /// @notice Event emitted for each sale

  /// @param to address sale was made to

  /// @param quantity quantity of the minted nfts

  /// @param pricePerToken price for each token

  /// @param firstPurchasedTokenId first purchased token ID (to get range add to quantity for max)

  event Sale(

    address indexed to,

    uint256 indexed quantity,

    uint256 indexed pricePerToken,

    uint256 firstPurchasedTokenId

  );



  /// @notice Sales configuration has been changed

  /// @dev To access new sales configuration, use getter function.

  /// @param changedBy Changed by user

  event SalesConfigChanged(address indexed changedBy);



  /// @notice Event emitted when the funds recipient is changed

  /// @param newAddress new address for the funds recipient

  /// @param changedBy address that the recipient is changed by

  event FundsRecipientChanged(address indexed newAddress, address indexed changedBy);



  /// @notice Event emitted when the funds are withdrawn from the minting contract

  /// @param withdrawnBy address that issued the withdraw

  /// @param withdrawnTo address that the funds were withdrawn to

  /// @param amount amount that was withdrawn

  event FundsWithdrawn(address indexed withdrawnBy, address indexed withdrawnTo, uint256 amount);



  /// @notice Event emitted when an open mint is finalized and further minting is closed forever on the contract.

  /// @param sender address sending close mint

  /// @param numberOfMints number of mints the contract is finalized at

  event OpenMintFinalized(address indexed sender, uint256 numberOfMints);



  /// @notice Event emitted when metadata renderer is updated.

  /// @param sender address of the updater

  /// @param renderer new metadata renderer address

  event UpdatedMetadataRenderer(address sender, IMetadataRenderer renderer);



  /// @notice Admin function to update the sales configuration settings

  /// @param publicSalePrice public sale price in ether

  /// @param maxSalePurchasePerAddress Max # of purchases (public) per address allowed

  /// @param publicSaleStart unix timestamp when the public sale starts

  /// @param publicSaleEnd unix timestamp when the public sale ends (set to 0 to disable)

  /// @param presaleStart unix timestamp when the presale starts

  /// @param presaleEnd unix timestamp when the presale ends

  /// @param presaleMerkleRoot merkle root for the presale information

  function setSaleConfiguration(

    uint104 publicSalePrice,

    uint32 maxSalePurchasePerAddress,

    uint64 publicSaleStart,

    uint64 publicSaleEnd,

    uint64 presaleStart,

    uint64 presaleEnd,

    bytes32 presaleMerkleRoot

  ) external;



  /// @notice External purchase function (payable in eth)

  /// @param quantity to purchase

  /// @return first minted token ID

  function purchase(uint256 quantity) external payable returns (uint256);



  /// @notice External purchase presale function (takes a merkle proof and matches to root) (payable in eth)

  /// @param quantity to purchase

  /// @param maxQuantity can purchase (verified by merkle root)

  /// @param pricePerToken price per token allowed (verified by merkle root)

  /// @param merkleProof input for merkle proof leaf verified by merkle root

  /// @return first minted token ID

  function purchasePresale(

    uint256 quantity,

    uint256 maxQuantity,

    uint256 pricePerToken,

    bytes32[] memory merkleProof

  ) external payable returns (uint256);



  /// @notice Function to return the global sales details for the given drop

  function saleDetails() external view returns (SaleDetails memory);



  /// @notice Function to return the specific sales details for a given address

  /// @param minter address for minter to return mint information for

  function mintedPerAddress(address minter) external view returns (AddressMintDetails memory);



  /// @notice This is the opensea/public owner setting that can be set by the contract admin

  function owner() external view returns (address);



  /// @notice Update the metadata renderer

  /// @param newRenderer new address for renderer

  /// @param setupRenderer data to call to bootstrap data for the new renderer (optional)

  function setMetadataRenderer(IMetadataRenderer newRenderer, bytes memory setupRenderer) external;



  /// @notice This is an admin mint function to mint a quantity to a specific address

  /// @param to address to mint to

  /// @param quantity quantity to mint

  /// @return the id of the first minted NFT

  function adminMint(address to, uint256 quantity) external returns (uint256);



  /// @notice This is an admin mint function to mint a single nft each to a list of addresses

  /// @param to list of addresses to mint an NFT each to

  /// @return the id of the first minted NFT

  function adminMintAirdrop(address[] memory to) external returns (uint256);



  /// @dev Getter for admin role associated with the contract to handle metadata

  /// @return boolean if address is admin

  function isAdmin(address user) external view returns (bool);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ILBPair.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



interface ILBPair {

  function tokenX() external view returns (address);



  function tokenY() external view returns (address);



  function getReservesAndId() external view returns (uint256 reserveX, uint256 reserveY, uint256 activeId);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ILBRouter.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {ILBPair} from "./ILBPair.sol";



interface ILBRouter {

  function getSwapIn(

    ILBPair LBPair,

    uint128 amountOut,

    bool swapForY

  ) external view returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\IMetadataRenderer.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



interface IMetadataRenderer {

  function tokenURI(uint256) external view returns (string memory);



  function contractURI() external view returns (string memory);



  function initializeWithData(bytes memory initData) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Initializable.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../interface/InitializableInterface.sol";



/**

 * @title Initializable

 * @author https://github.com/holographxyz

 * @notice Use init instead of constructor

 * @dev This allows for use of init function to make one time initializations without the need for a constructor

 */

abstract contract Initializable is InitializableInterface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.initialized')) - 1)

   */

  bytes32 constant _initializedSlot = 0x4e5f991bca30eca2d4643aaefa807e88f96a4a97398933d572a3c0d973004a01;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external virtual returns (bytes4);



  function _isInitialized() internal view returns (bool initialized) {

    assembly {

      initialized := sload(_initializedSlot)

    }

  }



  function _setInitialized() internal {

    assembly {

      sstore(_initializedSlot, 0x0000000000000000000000000000000000000000000000000000000000000001)

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\InitializableInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



/**

 * @title Initializable

 * @author https://github.com/holographxyz

 * @notice Use init instead of constructor

 * @dev This allows for use of init function to make one time initializations without the need of a constructor

 */

interface InitializableInterface {

  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external returns (bytes4);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\InterfaceType.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



enum InterfaceType {

  UNDEFINED, // 0

  ERC20, //     1

  ERC721, //    2

  ERC1155, //   3

  ROYALTIES, // 4

  GENERIC //    5

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\IOperatorFilterRegistry.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



interface IOperatorFilterRegistry {

  function isOperatorAllowed(address registrant, address operator) external view returns (bool);



  function register(address registrant) external;



  function registerAndSubscribe(address registrant, address subscription) external;



  function registerAndCopyEntries(address registrant, address registrantToCopy) external;



  function updateOperator(address registrant, address operator, bool filtered) external;



  function updateOperators(address registrant, address[] calldata operators, bool filtered) external;



  function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;



  function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;



  function subscribe(address registrant, address registrantToSubscribe) external;



  function unsubscribe(address registrant, bool copyExistingEntries) external;



  function subscriptionOf(address addr) external returns (address registrant);



  function subscribers(address registrant) external returns (address[] memory);



  function subscriberAt(address registrant, uint256 index) external returns (address);



  function copyEntriesOf(address registrant, address registrantToCopy) external;



  function isOperatorFiltered(address registrant, address operator) external returns (bool);



  function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);



  function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);



  function filteredOperators(address addr) external returns (address[] memory);



  function filteredCodeHashes(address addr) external returns (bytes32[] memory);



  function filteredOperatorAt(address registrant, uint256 index) external returns (address);



  function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);



  function isRegistered(address addr) external returns (bool);



  function codeHashOf(address addr) external returns (bytes32);



  function unregister(address registrant) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\IUniswapV2Pair.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



interface IUniswapV2Pair {

  event Approval(address indexed owner, address indexed spender, uint256 value);

  event Transfer(address indexed from, address indexed to, uint256 value);



  function name() external pure returns (string memory);



  function symbol() external pure returns (string memory);



  function decimals() external pure returns (uint8);



  function totalSupply() external view returns (uint256);



  function balanceOf(address owner) external view returns (uint256);



  function allowance(address owner, address spender) external view returns (uint256);



  function approve(address spender, uint256 value) external returns (bool);



  function transfer(address to, uint256 value) external returns (bool);



  function transferFrom(address from, address to, uint256 value) external returns (bool);



  function DOMAIN_SEPARATOR() external view returns (bytes32);



  function PERMIT_TYPEHASH() external pure returns (bytes32);



  function nonces(address owner) external view returns (uint256);



  function permit(

    address owner,

    address spender,

    uint256 value,

    uint256 deadline,

    uint8 v,

    bytes32 r,

    bytes32 s

  ) external;



  event Mint(address indexed sender, uint256 amount0, uint256 amount1);

  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);

  event Swap(

    address indexed sender,

    uint256 amount0In,

    uint256 amount1In,

    uint256 amount0Out,

    uint256 amount1Out,

    address indexed to

  );

  event Sync(uint112 reserve0, uint112 reserve1);



  function MINIMUM_LIQUIDITY() external pure returns (uint256);



  function factory() external view returns (address);



  function token0() external view returns (address);



  function token1() external view returns (address);



  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);



  function price0CumulativeLast() external view returns (uint256);



  function price1CumulativeLast() external view returns (uint256);



  function kLast() external view returns (uint256);



  function mint(address to) external returns (uint256 liquidity);



  function burn(address to) external returns (uint256 amount0, uint256 amount1);



  function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;



  function skim(address to) external;



  function sync() external;



  function initialize(address, address) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\IUniswapV3Pair.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



interface IUniswapV3PoolImmutables {

  /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface

  /// @return The contract address

  function factory() external view returns (address);



  /// @notice The first of the two tokens of the pool, sorted by address

  /// @return The token contract address

  function token0() external view returns (address);



  /// @notice The second of the two tokens of the pool, sorted by address

  /// @return The token contract address

  function token1() external view returns (address);



  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6

  /// @return The fee

  function fee() external view returns (uint24);



  /// @notice The pool tick spacing

  /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive

  /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...

  /// This value is an int24 to avoid casting even though it is always positive.

  /// @return The tick spacing

  function tickSpacing() external view returns (int24);



  /// @notice The maximum amount of position liquidity that can use any tick in the range

  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and

  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool

  /// @return The max amount of liquidity per tick

  function maxLiquidityPerTick() external view returns (uint128);

}



interface IUniswapV3PoolState {

  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas

  /// when accessed externally.

  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value

  /// tick The current tick of the pool, i.e. according to the last tick transition that was run.

  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick

  /// boundary.

  /// observationIndex The index of the last oracle observation that was written,

  /// observationCardinality The current maximum number of observations stored in the pool,

  /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.

  /// feeProtocol The protocol fee for both tokens of the pool.

  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0

  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.

  /// unlocked Whether the pool is currently locked to reentrancy

  function slot0()

    external

    view

    returns (

      uint160 sqrtPriceX96,

      int24 tick,

      uint16 observationIndex,

      uint16 observationCardinality,

      uint16 observationCardinalityNext,

      uint8 feeProtocol,

      bool unlocked

    );



  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool

  /// @dev This value can overflow the uint256

  function feeGrowthGlobal0X128() external view returns (uint256);



  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool

  /// @dev This value can overflow the uint256

  function feeGrowthGlobal1X128() external view returns (uint256);



  /// @notice The amounts of token0 and token1 that are owed to the protocol

  /// @dev Protocol fees will never exceed uint128 max in either token

  function protocolFees() external view returns (uint128 token0, uint128 token1);



  /// @notice The currently in range liquidity available to the pool

  /// @dev This value has no relationship to the total liquidity across all ticks

  function liquidity() external view returns (uint128);



  /// @notice Look up information about a specific tick in the pool

  /// @param tick The tick to look up

  /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or

  /// tick upper,

  /// liquidityNet how much liquidity changes when the pool price crosses the tick,

  /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,

  /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,

  /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick

  /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,

  /// secondsOutside the seconds spent on the other side of the tick from the current tick,

  /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.

  /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.

  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for

  /// a specific position.

  function ticks(

    int24 tick

  )

    external

    view

    returns (

      uint128 liquidityGross,

      int128 liquidityNet,

      uint256 feeGrowthOutside0X128,

      uint256 feeGrowthOutside1X128,

      int56 tickCumulativeOutside,

      uint160 secondsPerLiquidityOutsideX128,

      uint32 secondsOutside,

      bool initialized

    );



  /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information

  function tickBitmap(int16 wordPosition) external view returns (uint256);



  /// @notice Returns the information about a position by the position's key

  /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper

  /// @return _liquidity The amount of liquidity in the position,

  /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,

  /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,

  /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,

  /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke

  function positions(

    bytes32 key

  )

    external

    view

    returns (

      uint128 _liquidity,

      uint256 feeGrowthInside0LastX128,

      uint256 feeGrowthInside1LastX128,

      uint128 tokensOwed0,

      uint128 tokensOwed1

    );



  /// @notice Returns data about a specific observation index

  /// @param index The element of the observations array to fetch

  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time

  /// ago, rather than at a specific index in the array.

  /// @return blockTimestamp The timestamp of the observation,

  /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,

  /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,

  /// Returns initialized whether the observation has been initialized and the values are safe to use

  function observations(

    uint256 index

  )

    external

    view

    returns (uint32 blockTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, bool initialized);

}



interface IUniswapV3PoolDerivedState {

  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp

  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing

  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,

  /// you must call it with secondsAgos = [3600, 0].

  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in

  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.

  /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned

  /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp

  /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block

  /// timestamp

  function observe(

    uint32[] calldata secondsAgos

  ) external view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);



  /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range

  /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.

  /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first

  /// snapshot is taken and the second snapshot is taken.

  /// @param tickLower The lower tick of the range

  /// @param tickUpper The upper tick of the range

  /// @return tickCumulativeInside The snapshot of the tick accumulator for the range

  /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range

  /// @return secondsInside The snapshot of seconds per liquidity for the range

  function snapshotCumulativesInside(

    int24 tickLower,

    int24 tickUpper

  ) external view returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside);

}



interface IUniswapV3PoolActions {

  /// @notice Sets the initial price for the pool

  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value

  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96

  function initialize(uint160 sqrtPriceX96) external;



  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position

  /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback

  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends

  /// on tickLower, tickUpper, the amount of liquidity, and the current price.

  /// @param recipient The address for which the liquidity will be created

  /// @param tickLower The lower tick of the position in which to add liquidity

  /// @param tickUpper The upper tick of the position in which to add liquidity

  /// @param amount The amount of liquidity to mint

  /// @param data Any data that should be passed through to the callback

  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback

  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback

  function mint(

    address recipient,

    int24 tickLower,

    int24 tickUpper,

    uint128 amount,

    bytes calldata data

  ) external returns (uint256 amount0, uint256 amount1);



  /// @notice Collects tokens owed to a position

  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.

  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or

  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the

  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.

  /// @param recipient The address which should receive the fees collected

  /// @param tickLower The lower tick of the position for which to collect fees

  /// @param tickUpper The upper tick of the position for which to collect fees

  /// @param amount0Requested How much token0 should be withdrawn from the fees owed

  /// @param amount1Requested How much token1 should be withdrawn from the fees owed

  /// @return amount0 The amount of fees collected in token0

  /// @return amount1 The amount of fees collected in token1

  function collect(

    address recipient,

    int24 tickLower,

    int24 tickUpper,

    uint128 amount0Requested,

    uint128 amount1Requested

  ) external returns (uint128 amount0, uint128 amount1);



  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position

  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0

  /// @dev Fees must be collected separately via a call to #collect

  /// @param tickLower The lower tick of the position for which to burn liquidity

  /// @param tickUpper The upper tick of the position for which to burn liquidity

  /// @param amount How much liquidity to burn

  /// @return amount0 The amount of token0 sent to the recipient

  /// @return amount1 The amount of token1 sent to the recipient

  function burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1);



  /// @notice Swap token0 for token1, or token1 for token0

  /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback

  /// @param recipient The address to receive the output of the swap

  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0

  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)

  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this

  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap

  /// @param data Any data to be passed through to the callback

  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive

  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive

  function swap(

    address recipient,

    bool zeroForOne,

    int256 amountSpecified,

    uint160 sqrtPriceLimitX96,

    bytes calldata data

  ) external returns (int256 amount0, int256 amount1);



  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback

  /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback

  /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling

  /// with 0 amount{0,1} and sending the donation amount(s) from the callback

  /// @param recipient The address which will receive the token0 and token1 amounts

  /// @param amount0 The amount of token0 to send

  /// @param amount1 The amount of token1 to send

  /// @param data Any data to be passed through to the callback

  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;



  /// @notice Increase the maximum number of price and liquidity observations that this pool will store

  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to

  /// the input observationCardinalityNext.

  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store

  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;

}



interface IUniswapV3PoolOwnerActions {

  /// @notice Set the denominator of the protocol's % share of the fees

  /// @param feeProtocol0 new protocol fee for token0 of the pool

  /// @param feeProtocol1 new protocol fee for token1 of the pool

  function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;



  /// @notice Collect the protocol fee accrued to the pool

  /// @param recipient The address to which collected protocol fees should be sent

  /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1

  /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0

  /// @return amount0 The protocol fee collected in token0

  /// @return amount1 The protocol fee collected in token1

  function collectProtocol(

    address recipient,

    uint128 amount0Requested,

    uint128 amount1Requested

  ) external returns (uint128 amount0, uint128 amount1);

}



interface IUniswapV3PoolEvents {

  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool

  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize

  /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96

  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool

  event Initialize(uint160 sqrtPriceX96, int24 tick);



  /// @notice Emitted when liquidity is minted for a given position

  /// @param sender The address that minted the liquidity

  /// @param owner The owner of the position and recipient of any minted liquidity

  /// @param tickLower The lower tick of the position

  /// @param tickUpper The upper tick of the position

  /// @param amount The amount of liquidity minted to the position range

  /// @param amount0 How much token0 was required for the minted liquidity

  /// @param amount1 How much token1 was required for the minted liquidity

  event Mint(

    address sender,

    address indexed owner,

    int24 indexed tickLower,

    int24 indexed tickUpper,

    uint128 amount,

    uint256 amount0,

    uint256 amount1

  );



  /// @notice Emitted when fees are collected by the owner of a position

  /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees

  /// @param owner The owner of the position for which fees are collected

  /// @param tickLower The lower tick of the position

  /// @param tickUpper The upper tick of the position

  /// @param amount0 The amount of token0 fees collected

  /// @param amount1 The amount of token1 fees collected

  event Collect(

    address indexed owner,

    address recipient,

    int24 indexed tickLower,

    int24 indexed tickUpper,

    uint128 amount0,

    uint128 amount1

  );



  /// @notice Emitted when a position's liquidity is removed

  /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect

  /// @param owner The owner of the position for which liquidity is removed

  /// @param tickLower The lower tick of the position

  /// @param tickUpper The upper tick of the position

  /// @param amount The amount of liquidity to remove

  /// @param amount0 The amount of token0 withdrawn

  /// @param amount1 The amount of token1 withdrawn

  event Burn(

    address indexed owner,

    int24 indexed tickLower,

    int24 indexed tickUpper,

    uint128 amount,

    uint256 amount0,

    uint256 amount1

  );



  /// @notice Emitted by the pool for any swaps between token0 and token1

  /// @param sender The address that initiated the swap call, and that received the callback

  /// @param recipient The address that received the output of the swap

  /// @param amount0 The delta of the token0 balance of the pool

  /// @param amount1 The delta of the token1 balance of the pool

  /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96

  /// @param liquidity The liquidity of the pool after the swap

  /// @param tick The log base 1.0001 of price of the pool after the swap

  event Swap(

    address indexed sender,

    address indexed recipient,

    int256 amount0,

    int256 amount1,

    uint160 sqrtPriceX96,

    uint128 liquidity,

    int24 tick

  );



  /// @notice Emitted by the pool for any flashes of token0/token1

  /// @param sender The address that initiated the swap call, and that received the callback

  /// @param recipient The address that received the tokens from flash

  /// @param amount0 The amount of token0 that was flashed

  /// @param amount1 The amount of token1 that was flashed

  /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee

  /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee

  event Flash(

    address indexed sender,

    address indexed recipient,

    uint256 amount0,

    uint256 amount1,

    uint256 paid0,

    uint256 paid1

  );



  /// @notice Emitted by the pool for increases to the number of observations that can be stored

  /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index

  /// just before a mint/swap/burn.

  /// @param observationCardinalityNextOld The previous value of the next observation cardinality

  /// @param observationCardinalityNextNew The updated value of the next observation cardinality

  event IncreaseObservationCardinalityNext(uint16 observationCardinalityNextOld, uint16 observationCardinalityNextNew);



  /// @notice Emitted when the protocol fee is changed by the pool

  /// @param feeProtocol0Old The previous value of the token0 protocol fee

  /// @param feeProtocol1Old The previous value of the token1 protocol fee

  /// @param feeProtocol0New The updated value of the token0 protocol fee

  /// @param feeProtocol1New The updated value of the token1 protocol fee

  event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);



  /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner

  /// @param sender The address that collects the protocol fees

  /// @param recipient The address that receives the collected protocol fees

  /// @param amount0 The amount of token0 protocol fees that is withdrawn

  /// @param amount0 The amount of token1 protocol fees that is withdrawn

  event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);

}



interface IUniswapV3Pool is

  IUniswapV3PoolImmutables,

  IUniswapV3PoolState,

  IUniswapV3PoolDerivedState,

  IUniswapV3PoolActions,

  IUniswapV3PoolOwnerActions,

  IUniswapV3PoolEvents

{}



interface IUniswapV3Pair is IUniswapV3Pool {}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\IUniswapV3Quoter.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



interface IUniswapV3Quoter {

  /// @notice Returns the amount out received for a given exact input swap without executing the swap

  /// @param path The path of the swap, i.e. each token pair and the pool fee

  /// @param amountIn The amount of the first token to swap

  /// @return amountOut The amount of the last token that would be received

  function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);



  /// @notice Returns the amount out received for a given exact input but for a swap of a single pool

  /// @param tokenIn The token being swapped in

  /// @param tokenOut The token being swapped out

  /// @param fee The fee of the token pool to consider for the pair

  /// @param amountIn The desired input amount

  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap

  /// @return amountOut The amount of `tokenOut` that would be received

  function quoteExactInputSingle(

    address tokenIn,

    address tokenOut,

    uint24 fee,

    uint256 amountIn,

    uint160 sqrtPriceLimitX96

  ) external returns (uint256 amountOut);



  /// @notice Returns the amount in required for a given exact output swap without executing the swap

  /// @param path The path of the swap, i.e. each token pair and the pool fee

  /// @param amountOut The amount of the last token to receive

  /// @return amountIn The amount of first token required to be paid

  function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);



  /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool

  /// @param tokenIn The token being swapped in

  /// @param tokenOut The token being swapped out

  /// @param fee The fee of the token pool to consider for the pair

  /// @param amountOut The desired output amount

  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap

  /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`

  function quoteExactOutputSingle(

    address tokenIn,

    address tokenOut,

    uint24 fee,

    uint256 amountOut,

    uint160 sqrtPriceLimitX96

  ) external returns (uint256 amountIn);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\LayerZeroEndpointInterface.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import "./LayerZeroUserApplicationConfigInterface.sol";



interface LayerZeroEndpointInterface is LayerZeroUserApplicationConfigInterface {

  // @notice send a LayerZero message to the specified address at a LayerZero endpoint.

  // @param _dstChainId - the destination chain identifier

  // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains

  // @param _payload - a custom bytes payload to send to the destination contract

  // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address

  // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction

  // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination

  function send(

    uint16 _dstChainId,

    bytes calldata _destination,

    bytes calldata _payload,

    address payable _refundAddress,

    address _zroPaymentAddress,

    bytes calldata _adapterParams

  ) external payable;



  // @notice used by the messaging library to publish verified payload

  // @param _srcChainId - the source chain identifier

  // @param _srcAddress - the source contract (as bytes) at the source chain

  // @param _dstAddress - the address on destination chain

  // @param _nonce - the unbound message ordering nonce

  // @param _gasLimit - the gas limit for external contract execution

  // @param _payload - verified payload to send to the destination contract

  function receivePayload(

    uint16 _srcChainId,

    bytes calldata _srcAddress,

    address _dstAddress,

    uint64 _nonce,

    uint256 _gasLimit,

    bytes calldata _payload

  ) external;



  // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain

  // @param _srcChainId - the source chain identifier

  // @param _srcAddress - the source chain contract address

  function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);



  // @notice get the outboundNonce from this source chain which, consequently, is always an EVM

  // @param _srcAddress - the source chain contract address

  function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);



  // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery

  // @param _dstChainId - the destination chain identifier

  // @param _userApplication - the user app address on this EVM chain

  // @param _payload - the custom message to send over LayerZero

  // @param _payInZRO - if false, user app pays the protocol fee in native token

  // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain

  function estimateFees(

    uint16 _dstChainId,

    address _userApplication,

    bytes calldata _payload,

    bool _payInZRO,

    bytes calldata _adapterParam

  ) external view returns (uint256 nativeFee, uint256 zroFee);



  // @notice get this Endpoint's immutable source identifier

  function getChainId() external view returns (uint16);



  // @notice the interface to retry failed message on this Endpoint destination

  // @param _srcChainId - the source chain identifier

  // @param _srcAddress - the source chain contract address

  // @param _payload - the payload to be retried

  function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;



  // @notice query if any STORED payload (message blocking) at the endpoint.

  // @param _srcChainId - the source chain identifier

  // @param _srcAddress - the source chain contract address

  function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);



  // @notice query if the _libraryAddress is valid for sending msgs.

  // @param _userApplication - the user app address on this EVM chain

  function getSendLibraryAddress(address _userApplication) external view returns (address);



  // @notice query if the _libraryAddress is valid for receiving msgs.

  // @param _userApplication - the user app address on this EVM chain

  function getReceiveLibraryAddress(address _userApplication) external view returns (address);



  // @notice query if the non-reentrancy guard for send() is on

  // @return true if the guard is on. false otherwise

  function isSendingPayload() external view returns (bool);



  // @notice query if the non-reentrancy guard for receive() is on

  // @return true if the guard is on. false otherwise

  function isReceivingPayload() external view returns (bool);



  // @notice get the configuration of the LayerZero messaging library of the specified version

  // @param _version - messaging library version

  // @param _chainId - the chainId for the pending config change

  // @param _userApplication - the contract address of the user application

  // @param _configType - type of configuration. every messaging library has its own convention.

  function getConfig(

    uint16 _version,

    uint16 _chainId,

    address _userApplication,

    uint256 _configType

  ) external view returns (bytes memory);



  // @notice get the send() LayerZero messaging library version

  // @param _userApplication - the contract address of the user application

  function getSendVersion(address _userApplication) external view returns (uint16);



  // @notice get the lzReceive() LayerZero messaging library version

  // @param _userApplication - the contract address of the user application

  function getReceiveVersion(address _userApplication) external view returns (uint16);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\LayerZeroModule.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



import "../enum/ChainIdType.sol";



import "../interface/CrossChainMessageInterface.sol";

import "../interface/HolographOperatorInterface.sol";

import "../interface/InitializableInterface.sol";

import "../interface/HolographInterfacesInterface.sol";

import "../interface/LayerZeroModuleInterface.sol";

import "../interface/LayerZeroOverrides.sol";



import "../struct/GasParameters.sol";



import "./OVM_GasPriceOracle.sol";



/**

 * @title Holograph LayerZero Module

 * @author https://github.com/holographxyz

 * @notice Holograph module for enabling LayerZero cross-chain messaging

 * @dev This contract abstracts all of the LayerZero specific logic into an isolated module

 */

contract LayerZeroModule is Admin, Initializable, CrossChainMessageInterface, LayerZeroModuleInterface {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.bridge')) - 1)

   */

  bytes32 constant _bridgeSlot = 0xeb87cbb21687feb327e3d58c6c16d552231d12c7a0e8115042a4165fac8a77f9;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.interfaces')) - 1)

   */

  bytes32 constant _interfacesSlot = 0xbd3084b8c09da87ad159c247a60e209784196be2530cecbbd8f337fdd1848827;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.lZEndpoint')) - 1)

   */

  bytes32 constant _lZEndpointSlot = 0x56825e447adf54cdde5f04815fcf9b1dd26ef9d5c053625147c18b7c13091686;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.operator')) - 1)

   */

  bytes32 constant _operatorSlot = 0x7caba557ad34138fa3b7e43fb574e0e6cc10481c3073e0dffbc560db81b5c60f;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.gasParameters')) - 1)

   */

  bytes32 constant _gasParametersSlot = 0x15eee82a0af3c04e4b65c3842105c973a6b0fb2a68728bf035809e13b38ce8cf;

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.gasParameters')) - 1)

   */

  bytes32 constant _optimismGasPriceOracleSlot = 0x46043c284a96474ab4a54c741ea0d0fce54e98eea878b99d4b85808fa6f71a5f;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (

      address bridge,

      address interfaces,

      address operator,

      address optimismGasPriceOracle,

      uint32[] memory chainIds,

      GasParameters[] memory gasParameters

    ) = abi.decode(initPayload, (address, address, address, address, uint32[], GasParameters[]));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_bridgeSlot, bridge)

      sstore(_interfacesSlot, interfaces)

      sstore(_operatorSlot, operator)

      sstore(_optimismGasPriceOracleSlot, optimismGasPriceOracle)

    }

    require(chainIds.length == gasParameters.length, "HOLOGRAPH: wrong array lengths");

    for (uint256 i = 0; i < chainIds.length; i++) {

      _setGasParameters(chainIds[i], gasParameters[i]);

    }

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  /**

   * @notice Receive cross-chain message from LayerZero

   * @dev This function only allows calls from the configured LayerZero endpoint address

   */

  function lzReceive(

    uint16 /* _srcChainId*/,

    bytes calldata _srcAddress,

    uint64 /* _nonce*/,

    bytes calldata _payload

  ) external payable {

    assembly {

      /**

       * @dev check if msg.sender is LayerZero Endpoint

       */

      switch eq(sload(_lZEndpointSlot), caller())

      case 0 {

        /**

         * @dev this is the assembly version of -> revert("HOLOGRAPH: LZ only endpoint");

         */

        mstore(0x80, 0x08c379a000000000000000000000000000000000000000000000000000000000)

        mstore(0xa0, 0x0000002000000000000000000000000000000000000000000000000000000000)

        mstore(0xc0, 0x0000001b484f4c4f47524150483a204c5a206f6e6c7920656e64706f696e7400)

        mstore(0xe0, 0x0000000000000000000000000000000000000000000000000000000000000000)

        revert(0x80, 0xc4)

      }

      let ptr := mload(0x40)

      calldatacopy(add(ptr, 0x0c), _srcAddress.offset, _srcAddress.length)

      /**

       * @dev check if LZ from address is same as address(this)

       */

      switch eq(mload(ptr), address())

      case 0 {

        /**

         * @dev this is the assembly version of -> revert("HOLOGRAPH: unauthorized sender");

         */

        mstore(0x80, 0x08c379a000000000000000000000000000000000000000000000000000000000)

        mstore(0xa0, 0x0000002000000000000000000000000000000000000000000000000000000000)

        mstore(0xc0, 0x0000001e484f4c4f47524150483a20756e617574686f72697a65642073656e64)

        mstore(0xe0, 0x6572000000000000000000000000000000000000000000000000000000000000)

        revert(0x80, 0xc4)

      }

    }

    /**

     * @dev if validation has passed, submit payload to Holograph Operator for converting into an operator job

     */

    _operator().crossChainMessage(_payload);

  }



  /**

   * @dev Need to add an extra function to get LZ gas amount needed for their internal cross-chain message verification

   */

  function send(

    uint256 /* gasLimit*/,

    uint256 /* gasPrice*/,

    uint32 toChain,

    address msgSender,

    uint256 msgValue,

    bytes calldata crossChainPayload

  ) external payable {

    require(msg.sender == address(_operator()), "HOLOGRAPH: operator only call");

    LayerZeroOverrides lZEndpoint;

    assembly {

      lZEndpoint := sload(_lZEndpointSlot)

    }

    GasParameters memory gasParameters = _gasParameters(toChain);

    // need to recalculate the gas amounts for LZ to deliver message

    lZEndpoint.send{value: msgValue}(

      uint16(_interfaces().getChainId(ChainIdType.HOLOGRAPH, uint256(toChain), ChainIdType.LAYERZERO)),

      abi.encodePacked(address(this), address(this)),

      crossChainPayload,

      payable(msgSender),

      address(this),

      abi.encodePacked(

        uint16(1),

        uint256(gasParameters.msgBaseGas + (crossChainPayload.length * gasParameters.msgGasPerByte))

      )

    );

  }



  function getMessageFee(

    uint32 toChain,

    uint256 gasLimit,

    uint256 gasPrice,

    bytes calldata crossChainPayload

  ) external view returns (uint256 hlgFee, uint256 msgFee, uint256 dstGasPrice) {

    uint16 lzDestChain = uint16(

      _interfaces().getChainId(ChainIdType.HOLOGRAPH, uint256(toChain), ChainIdType.LAYERZERO)

    );

    LayerZeroOverrides lz;

    assembly {

      lz := sload(_lZEndpointSlot)

    }

    // convert holograph chain id to lz chain id

    (uint128 dstPriceRatio, uint128 dstGasPriceInWei) = _getPricing(lz, lzDestChain);

    if (gasPrice == 0) {

      gasPrice = dstGasPriceInWei;

    }

    GasParameters memory gasParameters = _gasParameters(toChain);

    require(gasPrice > gasParameters.minGasPrice, "HOLOGRAPH: gas price too low");

    bytes memory adapterParams = abi.encodePacked(

      uint16(1),

      uint256(gasParameters.msgBaseGas + (crossChainPayload.length * gasParameters.msgGasPerByte))

    );

    gasLimit = gasLimit + gasParameters.jobBaseGas + (crossChainPayload.length * gasParameters.jobGasPerByte);

    gasLimit = gasLimit + (gasLimit / 10);

    require(gasLimit < gasParameters.maxGasLimit, "HOLOGRAPH: gas limit over max");

    (uint256 nativeFee, ) = lz.estimateFees(lzDestChain, address(this), crossChainPayload, false, adapterParams);

    hlgFee = ((gasPrice * gasLimit) * dstPriceRatio) / (10 ** 20);

    /*

     * @dev toChain is a ChainIdType.HOLOGRAPH, which can be found at https://github.com/holographxyz/networks/blob/main/src/networks.ts

     *      chainId 7 == optimism

     *      chainId 4000000015 == optimismTestnetGoerli

     */

    if (toChain == uint32(7) || toChain == uint32(4000000015)) {

      hlgFee += (_optimismGasPriceOracle().getL1Fee(crossChainPayload) * dstPriceRatio) / (10 ** 20);

    }

    msgFee = nativeFee;

    dstGasPrice = (dstGasPriceInWei * dstPriceRatio) / (10 ** 20);

  }



  function getHlgFee(

    uint32 toChain,

    uint256 gasLimit,

    uint256 gasPrice,

    bytes calldata crossChainPayload

  ) external view returns (uint256 hlgFee) {

    LayerZeroOverrides lz;

    assembly {

      lz := sload(_lZEndpointSlot)

    }

    uint16 lzDestChain = uint16(

      _interfaces().getChainId(ChainIdType.HOLOGRAPH, uint256(toChain), ChainIdType.LAYERZERO)

    );

    (uint128 dstPriceRatio, uint128 dstGasPriceInWei) = _getPricing(lz, lzDestChain);

    if (gasPrice == 0) {

      gasPrice = dstGasPriceInWei;

    }

    GasParameters memory gasParameters = _gasParameters(toChain);

    require(gasPrice > gasParameters.minGasPrice, "HOLOGRAPH: gas price too low");

    gasLimit = gasLimit + gasParameters.jobBaseGas + (crossChainPayload.length * gasParameters.jobGasPerByte);

    gasLimit = gasLimit + (gasLimit / 10);

    require(gasLimit < gasParameters.maxGasLimit, "HOLOGRAPH: gas limit over max");

    hlgFee = ((gasPrice * gasLimit) * dstPriceRatio) / (10 ** 20);

    /*

     * @dev toChain is a ChainIdType.HOLOGRAPH, which can be found at https://github.com/holographxyz/networks/blob/main/src/networks.ts

     *      chainId 7 == optimism

     *      chainId 4000000015 == optimismTestnetGoerli

     */

    if (toChain == uint32(7) || toChain == uint32(4000000015)) {

      hlgFee += (_optimismGasPriceOracle().getL1Fee(crossChainPayload) * dstPriceRatio) / (10 ** 20);

    }

  }



  function _getPricing(

    LayerZeroOverrides lz,

    uint16 lzDestChain

  ) private view returns (uint128 dstPriceRatio, uint128 dstGasPriceInWei) {

    return

      LayerZeroOverrides(LayerZeroOverrides(lz.defaultSendLibrary()).getAppConfig(lzDestChain, address(this)).relayer)

        .dstPriceLookup(lzDestChain);

  }



  /**

   * @notice Get the address of the Holograph Bridge module

   * @dev Used for beaming holographable assets cross-chain

   */

  function getBridge() external view returns (address bridge) {

    assembly {

      bridge := sload(_bridgeSlot)

    }

  }



  /**

   * @notice Update the Holograph Bridge module address

   * @param bridge address of the Holograph Bridge smart contract to use

   */

  function setBridge(address bridge) external onlyAdmin {

    assembly {

      sstore(_bridgeSlot, bridge)

    }

  }



  /**

   * @notice Get the address of the Holograph Interfaces module

   * @dev Holograph uses this contract to store data that needs to be accessed by a large portion of the modules

   */

  function getInterfaces() external view returns (address interfaces) {

    assembly {

      interfaces := sload(_interfacesSlot)

    }

  }



  /**

   * @notice Update the Holograph Interfaces module address

   * @param interfaces address of the Holograph Interfaces smart contract to use

   */

  function setInterfaces(address interfaces) external onlyAdmin {

    assembly {

      sstore(_interfacesSlot, interfaces)

    }

  }



  /**

   * @notice Get the address of the approved LayerZero Endpoint

   * @dev All lzReceive function calls allow only requests from this address

   */

  function getLZEndpoint() external view returns (address lZEndpoint) {

    assembly {

      lZEndpoint := sload(_lZEndpointSlot)

    }

  }



  /**

   * @notice Update the approved LayerZero Endpoint address

   * @param lZEndpoint address of the LayerZero Endpoint to use

   */

  function setLZEndpoint(address lZEndpoint) external onlyAdmin {

    assembly {

      sstore(_lZEndpointSlot, lZEndpoint)

    }

  }



  /**

   * @notice Get the address of the Holograph Operator module

   * @dev All cross-chain Holograph Bridge beams are handled by the Holograph Operator module

   */

  function getOperator() external view returns (address operator) {

    assembly {

      operator := sload(_operatorSlot)

    }

  }



  /**

   * @notice Update the Holograph Operator module address

   * @param operator address of the Holograph Operator smart contract to use

   */

  function setOperator(address operator) external onlyAdmin {

    assembly {

      sstore(_operatorSlot, operator)

    }

  }



  /**

   * @notice Get the address of the Optimism Gas Price Oracle module

   * @dev Allows to properly calculate the L1 security fee for Optimism bridge transactions

   */

  function getOptimismGasPriceOracle() external view returns (address optimismGasPriceOracle) {

    assembly {

      optimismGasPriceOracle := sload(_optimismGasPriceOracleSlot)

    }

  }



  /**

   * @notice Update the Optimism Gas Price Oracle module address

   * @param optimismGasPriceOracle address of the Optimism Gas Price Oracle smart contract to use

   */

  function setOptimismGasPriceOracle(address optimismGasPriceOracle) external onlyAdmin {

    assembly {

      sstore(_optimismGasPriceOracleSlot, optimismGasPriceOracle)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Bridge Interface

   */

  function _bridge() private view returns (address bridge) {

    assembly {

      bridge := sload(_bridgeSlot)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Interfaces Interface

   */

  function _interfaces() private view returns (HolographInterfacesInterface interfaces) {

    assembly {

      interfaces := sload(_interfacesSlot)

    }

  }



  /**

   * @dev Internal function used for getting the Holograph Operator Interface

   */

  function _operator() private view returns (HolographOperatorInterface operator) {

    assembly {

      operator := sload(_operatorSlot)

    }

  }



  /**

   * @dev Internal function used for getting the Optimism Gas Price Oracle Interface

   */

  function _optimismGasPriceOracle() private view returns (OVM_GasPriceOracle optimismGasPriceOracle) {

    assembly {

      optimismGasPriceOracle := sload(_optimismGasPriceOracleSlot)

    }

  }



  /**

   * @dev Purposefully reverts to prevent having any type of ether transfered into the contract

   */

  receive() external payable {

    revert();

  }



  /**

   * @dev Purposefully reverts to prevent any calls to undefined functions

   */

  fallback() external payable {

    revert();

  }



  /**

   * @notice Get the default or chain-specific GasParameters

   * @param chainId the Holograph ChainId to get gas parameters for, set to 0 for default

   */

  function getGasParameters(uint32 chainId) external view returns (GasParameters memory gasParameters) {

    return _gasParameters(chainId);

  }



  /**

   * @notice Update the default or chain-specific GasParameters

   * @param chainId the Holograph ChainId to set gas parameters for, set to 0 for default

   * @param gasParameters struct of all the gas parameters to set

   */

  function setGasParameters(uint32 chainId, GasParameters memory gasParameters) external onlyAdmin {

    _setGasParameters(chainId, gasParameters);

  }



  /**

   * @notice Update the default or chain-specific GasParameters

   * @param chainIds array of Holograph ChainId to set gas parameters for

   * @param gasParameters array of all the gas parameters to set

   */

  function setGasParameters(uint32[] memory chainIds, GasParameters[] memory gasParameters) external onlyAdmin {

    require(chainIds.length == gasParameters.length, "HOLOGRAPH: wrong array lengths");

    for (uint256 i = 0; i < chainIds.length; i++) {

      _setGasParameters(chainIds[i], gasParameters[i]);

    }

  }



  /**

   * @notice Internal function for setting the default or chain-specific GasParameters

   * @param chainId the Holograph ChainId to set gas parameters for, set to 0 for default

   * @param gasParameters struct of all the gas parameters to set

   */

  function _setGasParameters(uint32 chainId, GasParameters memory gasParameters) private {

    bytes32 slot = chainId == 0 ? _gasParametersSlot : keccak256(abi.encode(chainId, _gasParametersSlot));

    assembly {

      let pos := gasParameters

      for {

        let i := 0

      } lt(i, 6) {

        i := add(i, 1)

      } {

        sstore(add(slot, i), mload(pos))

        pos := add(pos, 32)

      }

    }

  }



  /**

   * @dev Internal function used for getting the default or chain-specific GasParameters

   * @param chainId the Holograph ChainId to get gas parameters for, set to 0 for default

   */

  function _gasParameters(uint32 chainId) private view returns (GasParameters memory gasParameters) {

    bytes32 slot = chainId == 0 ? _gasParametersSlot : keccak256(abi.encode(chainId, _gasParametersSlot));

    assembly {

      let pos := gasParameters

      for {

        let i := 0

      } lt(i, 6) {

        i := add(i, 1)

      } {

        mstore(pos, sload(add(slot, i)))

        pos := add(pos, 32)

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\LayerZeroModuleInterface.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



interface LayerZeroModuleInterface {

  function lzReceive(

    uint16 _srcChainId,

    bytes calldata _srcAddress,

    uint64 _nonce,

    bytes calldata _payload

  ) external payable;



  function getInterfaces() external view returns (address interfaces);



  function setInterfaces(address interfaces) external;



  function getLZEndpoint() external view returns (address lZEndpoint);



  function setLZEndpoint(address lZEndpoint) external;



  function getOperator() external view returns (address operator);



  function setOperator(address operator) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\LayerZeroModuleProxy.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



contract LayerZeroModuleProxy is Admin, Initializable {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.layerZeroModule')) - 1)

   */

  bytes32 constant _layerZeroModuleSlot = 0x7c89cf3f353cabaa2f43d6eba6b9682ecfdeedd31a3b76a8b3e17a61970fb7f0;



  constructor() {}



  function init(bytes memory data) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (address layerZeroModule, bytes memory initCode) = abi.decode(data, (address, bytes));

    assembly {

      sstore(_adminSlot, origin())

      sstore(_layerZeroModuleSlot, layerZeroModule)

    }

    (bool success, bytes memory returnData) = layerZeroModule.delegatecall(

      abi.encodeWithSignature("init(bytes)", initCode)

    );

    bytes4 selector = abi.decode(returnData, (bytes4));

    require(success && selector == Initializable.init.selector, "initialization failed");

    _setInitialized();

    return Initializable.init.selector;

  }



  function getLayerZeroModule() external view returns (address layerZeroModule) {

    assembly {

      layerZeroModule := sload(_layerZeroModuleSlot)

    }

  }



  function setLayerZeroModule(address layerZeroModule) external onlyAdmin {

    assembly {

      sstore(_layerZeroModuleSlot, layerZeroModule)

    }

  }



  receive() external payable {}



  fallback() external payable {

    assembly {

      let layerZeroModule := sload(_layerZeroModuleSlot)

      calldatacopy(0, 0, calldatasize())

      let result := delegatecall(gas(), layerZeroModule, 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\LayerZeroOverrides.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



interface LayerZeroOverrides {

  // @dev defaultAppConfig struct

  struct ApplicationConfiguration {

    uint16 inboundProofLibraryVersion;

    uint64 inboundBlockConfirmations;

    address relayer;

    uint16 outboundProofType;

    uint64 outboundBlockConfirmations;

    address oracle;

  }



  struct DstPrice {

    uint128 dstPriceRatio; // 10^10

    uint128 dstGasPriceInWei;

  }



  struct DstConfig {

    uint128 dstNativeAmtCap;

    uint64 baseGas;

    uint64 gasPerByte;

  }



  // @dev using this to retrieve UltraLightNodeV2 address

  function defaultSendLibrary() external view returns (address);



  // @dev using this to extract defaultAppConfig

  function getAppConfig(

    uint16 destinationChainId,

    address userApplicationAddress

  ) external view returns (ApplicationConfiguration memory);



  // @dev using this to extract defaultAppConfig directly from storage slot

  function defaultAppConfig(

    uint16 destinationChainId

  )

    external

    view

    returns (

      uint16 inboundProofLibraryVersion,

      uint64 inboundBlockConfirmations,

      address relayer,

      uint16 outboundProofType,

      uint64 outboundBlockConfirmations,

      address oracle

    );



  // @dev access the mapping to get base price fee

  function dstPriceLookup(

    uint16 destinationChainId

  ) external view returns (uint128 dstPriceRatio, uint128 dstGasPriceInWei);



  // @dev access the mapping to get base gas and gas per byte

  function dstConfigLookup(

    uint16 destinationChainId,

    uint16 outboundProofType

  ) external view returns (uint128 dstNativeAmtCap, uint64 baseGas, uint64 gasPerByte);



  // @dev send message to LayerZero Endpoint

  function send(

    uint16 _dstChainId,

    bytes calldata _destination,

    bytes calldata _payload,

    address payable _refundAddress,

    address _zroPaymentAddress,

    bytes calldata _adapterParams

  ) external payable;



  // @dev estimate LayerZero message cost

  function estimateFees(

    uint16 _dstChainId,

    address _userApplication,

    bytes calldata _payload,

    bool _payInZRO,

    bytes calldata _adapterParam

  ) external view returns (uint256 nativeFee, uint256 zroFee);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\LayerZeroReceiverInterface.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



interface LayerZeroReceiverInterface {

  // @notice LayerZero endpoint will invoke this function to deliver the message on the destination

  // @param _srcChainId - the source endpoint identifier

  // @param _srcAddress - the source sending contract address from the source chain

  // @param _nonce - the ordered message nonce

  // @param _payload - the signed payload is the UA bytes has encoded to be sent

  function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\LayerZeroUserApplicationConfigInterface.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



interface LayerZeroUserApplicationConfigInterface {

  // @notice set the configuration of the LayerZero messaging library of the specified version

  // @param _version - messaging library version

  // @param _chainId - the chainId for the pending config change

  // @param _configType - type of configuration. every messaging library has its own convention.

  // @param _config - configuration in the bytes. can encode arbitrary content.

  function setConfig(uint16 _version, uint16 _chainId, uint256 _configType, bytes calldata _config) external;



  // @notice set the send() LayerZero messaging library version to _version

  // @param _version - new messaging library version

  function setSendVersion(uint16 _version) external;



  // @notice set the lzReceive() LayerZero messaging library version to _version

  // @param _version - new messaging library version

  function setReceiveVersion(uint16 _version) external;



  // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload

  // @param _srcChainId - the chainId of the source chain

  // @param _srcAddress - the contract address of the source contract at the source chain

  function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\LZEndpointMock.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../interface/LayerZeroReceiverInterface.sol";

import "../interface/LayerZeroEndpointInterface.sol";



/**

mocking multi endpoint connection.

- send() will short circuit to lzReceive() directly

- no reentrancy guard. the real LayerZero endpoint on main net has a send and receive guard, respectively.

if we run a ping-pong-like application, the recursive call might use all gas limit in the block.

- not using any messaging library, hence all messaging library func, e.g. estimateFees, version, will not work

*/

contract LZEndpointMock is LayerZeroEndpointInterface {

  mapping(address => address) public lzEndpointLookup;



  uint16 public mockChainId;

  address payable public mockOracle;

  address payable public mockRelayer;

  uint256 public mockBlockConfirmations;

  uint16 public mockLibraryVersion;

  uint256 public mockStaticNativeFee;

  uint16 public mockLayerZeroVersion;

  uint256 public nativeFee;

  uint256 public zroFee;

  bool nextMsgBLocked;



  struct StoredPayload {

    uint64 payloadLength;

    address dstAddress;

    bytes32 payloadHash;

  }



  struct QueuedPayload {

    address dstAddress;

    uint64 nonce;

    bytes payload;

  }



  // inboundNonce = [srcChainId][srcAddress].

  mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;

  // outboundNonce = [dstChainId][srcAddress].

  mapping(uint16 => mapping(address => uint64)) public outboundNonce;

  // storedPayload = [srcChainId][srcAddress]

  mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;

  // msgToDeliver = [srcChainId][srcAddress]

  mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;



  event UaForceResumeReceive(uint16 chainId, bytes srcAddress);

  event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);

  event PayloadStored(

    uint16 srcChainId,

    bytes srcAddress,

    address dstAddress,

    uint64 nonce,

    bytes payload,

    bytes reason

  );



  constructor(uint16 _chainId) {

    mockStaticNativeFee = 42;

    mockLayerZeroVersion = 1;

    mockChainId = _chainId;

  }



  // mock helper to set the value returned by `estimateNativeFees`

  function setEstimatedFees(uint256 _nativeFee, uint256 _zroFee) public {

    nativeFee = _nativeFee;

    zroFee = _zroFee;

  }



  function getChainId() external view override returns (uint16) {

    return mockChainId;

  }



  function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {

    lzEndpointLookup[destAddr] = lzEndpointAddr;

  }



  function send(

    uint16 _chainId,

    bytes calldata _destination,

    bytes calldata _payload,

    address payable, // _refundAddress

    address, // _zroPaymentAddress

    bytes memory _adapterParams

  ) external payable override {

    address destAddr = packedBytesToAddr(_destination);

    address lzEndpoint = lzEndpointLookup[destAddr];



    require(lzEndpoint != address(0), "LayerZeroMock: destination LayerZero Endpoint not found");



    uint64 nonce;

    {

      nonce = ++outboundNonce[_chainId][msg.sender];

    }



    // Mock the relayer paying the dstNativeAddr the amount of extra native token

    {

      uint256 extraGas;

      uint256 dstNative;

      address dstNativeAddr;

      assembly {

        extraGas := mload(add(_adapterParams, 34))

        dstNative := mload(add(_adapterParams, 66))

        dstNativeAddr := mload(add(_adapterParams, 86))

      }



      // to simulate actually sending the ether, add a transfer call and ensure the LZEndpointMock contract has an ether balance

    }



    bytes memory bytesSourceUserApplicationAddr = addrToPackedBytes(address(msg.sender)); // cast this address to bytes



    // not using the extra gas parameter because this is a single tx call, not split between different chains

    // LZEndpointMock(lzEndpoint).receivePayload(mockChainId, bytesSourceUserApplicationAddr, destAddr, nonce, extraGas, _payload);

    LZEndpointMock(lzEndpoint).receivePayload(

      mockChainId,

      bytesSourceUserApplicationAddr,

      destAddr,

      nonce,

      0,

      _payload

    );

  }



  function receivePayload(

    uint16 _srcChainId,

    bytes calldata _srcAddress,

    address _dstAddress,

    uint64 _nonce,

    uint256 /*_gasLimit*/,

    bytes calldata _payload

  ) external override {

    StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];



    // assert and increment the nonce. no message shuffling

    require(_nonce == ++inboundNonce[_srcChainId][_srcAddress], "LayerZero: wrong nonce");



    // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst

    if (sp.payloadHash != bytes32(0)) {

      QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];

      QueuedPayload memory newMsg = QueuedPayload(_dstAddress, _nonce, _payload);



      // warning, might run into gas issues trying to forward through a bunch of queued msgs

      // shift all the msgs over so we can treat this like a fifo via array.pop()

      if (msgs.length > 0) {

        // extend the array

        msgs.push(newMsg);



        // shift all the indexes up for pop()

        for (uint256 i = 0; i < msgs.length - 1; i++) {

          msgs[i + 1] = msgs[i];

        }



        // put the newMsg at the bottom of the stack

        msgs[0] = newMsg;

      } else {

        msgs.push(newMsg);

      }

    } else if (nextMsgBLocked) {

      storedPayload[_srcChainId][_srcAddress] = StoredPayload(

        uint64(_payload.length),

        _dstAddress,

        keccak256(_payload)

      );

      emit PayloadStored(_srcChainId, _srcAddress, _dstAddress, _nonce, _payload, bytes(""));

      // ensure the next msgs that go through are no longer blocked

      nextMsgBLocked = false;

    } else {

      // we ignore the gas limit because this call is made in one tx due to being "same chain"

      // LayerZeroReceiverInterface(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive

      LayerZeroReceiverInterface(_dstAddress).lzReceive(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive

    }

  }



  // used to simulate messages received get stored as a payload

  function blockNextMsg() external {

    nextMsgBLocked = true;

  }



  function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint256) {

    return msgsToDeliver[_srcChainId][_srcAddress].length;

  }



  // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery

  // @param _dstChainId - the destination chain identifier

  // @param _userApplication - the user app address on this EVM chain

  // @param _payload - the custom message to send over LayerZero

  // @param _payInZRO - if false, user app pays the protocol fee in native token

  // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain

  function estimateFees(

    uint16,

    address,

    bytes memory,

    bool,

    bytes memory

  ) external view override returns (uint256 _nativeFee, uint256 _zroFee) {

    _nativeFee = nativeFee;

    _zroFee = zroFee;

  }



  // give 20 bytes, return the decoded address

  function packedBytesToAddr(bytes calldata _b) public pure returns (address) {

    address addr;

    assembly {

      let ptr := mload(0x40)

      calldatacopy(ptr, sub(_b.offset, 2), add(_b.length, 2))

      addr := mload(sub(ptr, 10))

    }

    return addr;

  }



  // given an address, return the 20 bytes

  function addrToPackedBytes(address _a) public pure returns (bytes memory) {

    bytes memory data = abi.encodePacked(_a);

    return data;

  }



  function setConfig(

    uint16 /*_version*/,

    uint16 /*_chainId*/,

    uint256 /*_configType*/,

    bytes memory /*_config*/

  ) external override {}



  function getConfig(

    uint16 /*_version*/,

    uint16 /*_chainId*/,

    address /*_ua*/,

    uint256 /*_configType*/

  ) external pure override returns (bytes memory) {

    return "";

  }



  function setSendVersion(uint16 /*version*/) external override {}



  function setReceiveVersion(uint16 /*version*/) external override {}



  function getSendVersion(address /*_userApplication*/) external pure override returns (uint16) {

    return 1;

  }



  function getReceiveVersion(address /*_userApplication*/) external pure override returns (uint16) {

    return 1;

  }



  function getInboundNonce(uint16 _chainID, bytes calldata _srcAddress) external view override returns (uint64) {

    return inboundNonce[_chainID][_srcAddress];

  }



  function getOutboundNonce(uint16 _chainID, address _srcAddress) external view override returns (uint64) {

    return outboundNonce[_chainID][_srcAddress];

  }



  // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload

  function _clearMsgQue(uint16 _srcChainId, bytes calldata _srcAddress) internal {

    QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];



    // warning, might run into gas issues trying to forward through a bunch of queued msgs

    while (msgs.length > 0) {

      QueuedPayload memory payload = msgs[msgs.length - 1];

      LayerZeroReceiverInterface(payload.dstAddress).lzReceive(

        _srcChainId,

        _srcAddress,

        payload.nonce,

        payload.payload

      );

      msgs.pop();

    }

  }



  function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override {

    StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];

    // revert if no messages are cached. safeguard malicious UA behaviour

    require(sp.payloadHash != bytes32(0), "LayerZero: no stored payload");

    require(sp.dstAddress == msg.sender, "LayerZero: invalid caller");



    // empty the storedPayload

    sp.payloadLength = 0;

    sp.dstAddress = address(0);

    sp.payloadHash = bytes32(0);



    emit UaForceResumeReceive(_srcChainId, _srcAddress);



    // resume the receiving of msgs after we force clear the "stuck" msg

    _clearMsgQue(_srcChainId, _srcAddress);

  }



  function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external override {

    StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];

    require(sp.payloadHash != bytes32(0), "LayerZero: no stored payload");

    require(_payload.length == sp.payloadLength && keccak256(_payload) == sp.payloadHash, "LayerZero: invalid payload");



    address dstAddress = sp.dstAddress;

    // empty the storedPayload

    sp.payloadLength = 0;

    sp.dstAddress = address(0);

    sp.payloadHash = bytes32(0);



    uint64 nonce = inboundNonce[_srcChainId][_srcAddress];



    LayerZeroReceiverInterface(dstAddress).lzReceive(_srcChainId, _srcAddress, nonce, _payload);

    emit PayloadCleared(_srcChainId, _srcAddress, nonce, dstAddress);

  }



  function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view override returns (bool) {

    StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];

    return sp.payloadHash != bytes32(0);

  }



  function isSendingPayload() external pure override returns (bool) {

    return false;

  }



  function isReceivingPayload() external pure override returns (bool) {

    return false;

  }



  function getSendLibraryAddress(address) external view override returns (address) {

    return address(this);

  }



  function getReceiveLibraryAddress(address) external view override returns (address) {

    return address(this);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\MerkleProof.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



library MerkleProof {

  /**

   * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree

   * defined by `root`. For this, a `proof` must be provided, containing

   * sibling hashes on the branch from the leaf to the root of the tree. Each

   * pair of leaves and each pair of pre-images are assumed to be sorted.

   */

  function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {

    return processProof(proof, leaf) == root;

  }



  /**

   * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up

   * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt

   * hash matches the root of the tree. When processing the proof, the pairs

   * of leafs & pre-images are assumed to be sorted.

   *

   * _Available since v4.4._

   */

  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {

    bytes32 computedHash = leaf;

    for (uint256 i = 0; i < proof.length; i++) {

      bytes32 proofElement = proof[i];

      if (computedHash <= proofElement) {

        // Hash(current computed hash + current element of the proof)

        computedHash = _efficientHash(computedHash, proofElement);

      } else {

        // Hash(current element of the proof + current computed hash)

        computedHash = _efficientHash(proofElement, computedHash);

      }

    }

    return computedHash;

  }



  function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {

    assembly {

      mstore(0x00, a)

      mstore(0x20, b)

      value := keccak256(0x00, 0x40)

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\MetadataRenderAdminCheck.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import {IHolographDropERC721} from "../interface/IHolographDropERC721.sol";



contract MetadataRenderAdminCheck {

  error Access_OnlyAdmin();



  /// @notice Modifier to require the sender to be an admin

  /// @param target address that the user wants to modify

  modifier requireSenderAdmin(address target) {

    if (target != msg.sender && !IHolographDropERC721(target).isAdmin(msg.sender)) {

      revert Access_OnlyAdmin();

    }



    _;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Mock.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Initializable.sol";

import "../abstract/Owner.sol";



import "../interface/InitializableInterface.sol";



contract Mock is Initializable, Owner {

  constructor() {}



  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "MOCK: already initialized");

    bytes32 arbitraryData = abi.decode(initPayload, (bytes32));

    bool shouldFail = false;

    assembly {

      // we leave slot 0 available for fallback calls

      sstore(0x01, arbitraryData)

      switch arbitraryData

      case 0 {

        shouldFail := 0x01

      }

      sstore(_ownerSlot, caller())

    }

    _setInitialized();

    if (shouldFail) {

      return bytes4(0x12345678);

    } else {

      return InitializableInterface.init.selector;

    }

  }



  function getStorage(uint256 slot) public view returns (bytes32 data) {

    assembly {

      data := sload(slot)

    }

  }



  function setStorage(uint256 slot, bytes32 data) public {

    assembly {

      sstore(slot, data)

    }

  }



  function mockCall(address target, bytes calldata data) public payable {

    assembly {

      calldatacopy(0, data.offset, data.length)

      let result := call(gas(), target, callvalue(), 0, data.length, 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  function mockStaticCall(address target, bytes calldata data) public view returns (bytes memory) {

    assembly {

      calldatacopy(0, data.offset, data.length)

      let result := staticcall(gas(), target, 0, data.length, 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  function mockDelegateCall(address target, bytes calldata data) public returns (bytes memory) {

    assembly {

      calldatacopy(0, data.offset, data.length)

      let result := delegatecall(gas(), target, 0, data.length, 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }



  receive() external payable {}



  fallback() external payable {

    assembly {

      calldatacopy(0, 0, calldatasize())

      let result := call(gas(), sload(0), callvalue(), 0, calldatasize(), 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\MockERC721Receiver.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../interface/ERC721.sol";

import "../interface/ERC165.sol";

import "../interface/ERC721TokenReceiver.sol";



contract MockERC721Receiver is ERC165, ERC721TokenReceiver {

  bool private _works;



  constructor() {

    _works = true;

  }



  function toggleWorks(bool active) external {

    _works = active;

  }



  function supportsInterface(bytes4 interfaceID) external pure returns (bool) {

    if (interfaceID == 0x01ffc9a7 || interfaceID == 0x150b7a02) {

      return true;

    } else {

      return false;

    }

  }



  function onERC721Received(

    address /*operator*/,

    address /*from*/,

    uint256 /*tokenId*/,

    bytes calldata /*data*/

  ) external view returns (bytes4) {

    if (_works) {

      return 0x150b7a02;

    } else {

      return 0x00000000;

    }

  }



  function transferNFT(address payable token, uint256 tokenId, address to) external {

    ERC721(token).safeTransferFrom(address(this), to, tokenId);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\MockExternalCall.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



contract MockExternalCall {

  function callExternalFn(address contractAddress, bytes calldata encodedSignature) public {

    (bool success, ) = address(contractAddress).call(encodedSignature);

    require(success, "Failed");

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\MockHolographChild.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../Holograph.sol";



contract MockHolographChild is Holograph {

  constructor() {}



  function emptyFunction() external pure returns (string memory) {

    return "on purpose to remove verification conflict";

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\MockHolographGenesisChild.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../HolographGenesis.sol";



contract MockHolographGenesisChild is HolographGenesis {

  constructor() {}



  function approveDeployerMock(address newDeployer, bool approve) external onlyDeployer {

    return this.approveDeployer(newDeployer, approve);

  }



  function isApprovedDeployerMock(address deployer) external view returns (bool) {

    return this.isApprovedDeployer(deployer);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\MockLZEndpoint.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/Admin.sol";



import "../interface/HolographOperatorInterface.sol";

import "../interface/LayerZeroOverrides.sol";



contract MockLZEndpoint is Admin {

  event LzEvent(uint16 _dstChainId, bytes _destination, bytes _payload);



  constructor() {

    assembly {

      sstore(_adminSlot, origin())

    }

  }



  function send(

    uint16 _dstChainId,

    bytes calldata _destination,

    bytes calldata _payload,

    address payable /* _refundAddress*/,

    address /* _zroPaymentAddress*/,

    bytes calldata /* _adapterParams*/

  ) external payable {

    // we really don't care about anything and just emit an event that we can leverage for multichain replication

    emit LzEvent(_dstChainId, _destination, _payload);

  }



  function estimateFees(

    uint16,

    address,

    bytes calldata,

    bool,

    bytes calldata

  ) external pure returns (uint256 nativeFee, uint256 zroFee) {

    nativeFee = 10 ** 15;

    zroFee = 10 ** 7;

  }



  function defaultSendLibrary() external view returns (address) {

    return address(this);

  }



  function getAppConfig(uint16, address) external view returns (LayerZeroOverrides.ApplicationConfiguration memory) {

    return LayerZeroOverrides.ApplicationConfiguration(0, 0, address(this), 0, 0, address(this));

  }



  function dstPriceLookup(uint16) external pure returns (uint128 dstPriceRatio, uint128 dstGasPriceInWei) {

    dstPriceRatio = 10 ** 10;

    dstGasPriceInWei = 1000000000;

  }



  function dstConfigLookup(

    uint16,

    uint16

  ) external pure returns (uint128 dstNativeAmtCap, uint64 baseGas, uint64 gasPerByte) {

    dstNativeAmtCap = 10 ** 18;

    baseGas = 50000;

    gasPerByte = 25;

  }



  function crossChainMessage(address target, uint256 gasLimit, bytes calldata payload) external {

    HolographOperatorInterface(target).crossChainMessage{gas: gasLimit}(payload);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\NFTMetadataRenderer.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



library Math {

  enum Rounding {

    Down, // Toward negative infinity

    Up, // Toward infinity

    Zero // Toward zero

  }



  /**

   * @dev Returns the largest of two numbers.

   */

  function max(uint256 a, uint256 b) internal pure returns (uint256) {

    return a > b ? a : b;

  }



  /**

   * @dev Returns the smallest of two numbers.

   */

  function min(uint256 a, uint256 b) internal pure returns (uint256) {

    return a < b ? a : b;

  }



  /**

   * @dev Returns the average of two numbers. The result is rounded towards

   * zero.

   */

  function average(uint256 a, uint256 b) internal pure returns (uint256) {

    // (a + b) / 2 can overflow.

    return (a & b) + (a ^ b) / 2;

  }



  /**

   * @dev Returns the ceiling of the division of two numbers.

   *

   * This differs from standard division with `/` in that it rounds up instead

   * of rounding down.

   */

  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {

    // (a + b - 1) / b can overflow on addition, so we distribute.

    return a == 0 ? 0 : (a - 1) / b + 1;

  }



  /**

   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0

   * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)

   * with further edits by Uniswap Labs also under MIT license.

   */

  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {

    unchecked {

      // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use

      // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256

      // variables such that product = prod1 * 2^256 + prod0.

      uint256 prod0; // Least significant 256 bits of the product

      uint256 prod1; // Most significant 256 bits of the product

      assembly {

        let mm := mulmod(x, y, not(0))

        prod0 := mul(x, y)

        prod1 := sub(sub(mm, prod0), lt(mm, prod0))

      }



      // Handle non-overflow cases, 256 by 256 division.

      if (prod1 == 0) {

        return prod0 / denominator;

      }



      // Make sure the result is less than 2^256. Also prevents denominator == 0.

      require(denominator > prod1);



      ///////////////////////////////////////////////

      // 512 by 256 division.

      ///////////////////////////////////////////////



      // Make division exact by subtracting the remainder from [prod1 prod0].

      uint256 remainder;

      assembly {

        // Compute remainder using mulmod.

        remainder := mulmod(x, y, denominator)



        // Subtract 256 bit number from 512 bit number.

        prod1 := sub(prod1, gt(remainder, prod0))

        prod0 := sub(prod0, remainder)

      }



      // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.

      // See https://cs.stackexchange.com/q/138556/92363.



      // Does not overflow because the denominator cannot be zero at this stage in the function.

      uint256 twos = denominator & (~denominator + 1);

      assembly {

        // Divide denominator by twos.

        denominator := div(denominator, twos)



        // Divide [prod1 prod0] by twos.

        prod0 := div(prod0, twos)



        // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.

        twos := add(div(sub(0, twos), twos), 1)

      }



      // Shift in bits from prod1 into prod0.

      prod0 |= prod1 * twos;



      // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such

      // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for

      // four bits. That is, denominator * inv = 1 mod 2^4.

      uint256 inverse = (3 * denominator) ^ 2;



      // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works

      // in modular arithmetic, doubling the correct bits in each step.

      inverse *= 2 - denominator * inverse; // inverse mod 2^8

      inverse *= 2 - denominator * inverse; // inverse mod 2^16

      inverse *= 2 - denominator * inverse; // inverse mod 2^32

      inverse *= 2 - denominator * inverse; // inverse mod 2^64

      inverse *= 2 - denominator * inverse; // inverse mod 2^128

      inverse *= 2 - denominator * inverse; // inverse mod 2^256



      // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.

      // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is

      // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1

      // is no longer required.

      result = prod0 * inverse;

      return result;

    }

  }



  /**

   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.

   */

  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {

    uint256 result = mulDiv(x, y, denominator);

    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {

      result += 1;

    }

    return result;

  }



  /**

   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.

   *

   * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).

   */

  function sqrt(uint256 a) internal pure returns (uint256) {

    if (a == 0) {

      return 0;

    }



    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.

    //

    // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have

    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.

    //

    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`

    // ?┣ `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`

    // ?┣ `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`

    //

    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.

    uint256 result = 1 << (log2(a) >> 1);



    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,

    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at

    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision

    // into the expected uint128 result.

    unchecked {

      result = (result + a / result) >> 1;

      result = (result + a / result) >> 1;

      result = (result + a / result) >> 1;

      result = (result + a / result) >> 1;

      result = (result + a / result) >> 1;

      result = (result + a / result) >> 1;

      result = (result + a / result) >> 1;

      return min(result, a / result);

    }

  }



  /**

   * @notice Calculates sqrt(a), following the selected rounding direction.

   */

  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {

    unchecked {

      uint256 result = sqrt(a);

      return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);

    }

  }



  /**

   * @dev Return the log in base 2, rounded down, of a positive value.

   * Returns 0 if given 0.

   */

  function log2(uint256 value) internal pure returns (uint256) {

    uint256 result = 0;

    unchecked {

      if (value >> 128 > 0) {

        value >>= 128;

        result += 128;

      }

      if (value >> 64 > 0) {

        value >>= 64;

        result += 64;

      }

      if (value >> 32 > 0) {

        value >>= 32;

        result += 32;

      }

      if (value >> 16 > 0) {

        value >>= 16;

        result += 16;

      }

      if (value >> 8 > 0) {

        value >>= 8;

        result += 8;

      }

      if (value >> 4 > 0) {

        value >>= 4;

        result += 4;

      }

      if (value >> 2 > 0) {

        value >>= 2;

        result += 2;

      }

      if (value >> 1 > 0) {

        result += 1;

      }

    }

    return result;

  }



  /**

   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.

   * Returns 0 if given 0.

   */

  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {

    unchecked {

      uint256 result = log2(value);

      return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);

    }

  }



  /**

   * @dev Return the log in base 10, rounded down, of a positive value.

   * Returns 0 if given 0.

   */

  function log10(uint256 value) internal pure returns (uint256) {

    uint256 result = 0;

    unchecked {

      if (value >= 10 ** 64) {

        value /= 10 ** 64;

        result += 64;

      }

      if (value >= 10 ** 32) {

        value /= 10 ** 32;

        result += 32;

      }

      if (value >= 10 ** 16) {

        value /= 10 ** 16;

        result += 16;

      }

      if (value >= 10 ** 8) {

        value /= 10 ** 8;

        result += 8;

      }

      if (value >= 10 ** 4) {

        value /= 10 ** 4;

        result += 4;

      }

      if (value >= 10 ** 2) {

        value /= 10 ** 2;

        result += 2;

      }

      if (value >= 10 ** 1) {

        result += 1;

      }

    }

    return result;

  }



  /**

   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.

   * Returns 0 if given 0.

   */

  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {

    unchecked {

      uint256 result = log10(value);

      return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);

    }

  }



  /**

   * @dev Return the log in base 256, rounded down, of a positive value.

   * Returns 0 if given 0.

   *

   * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.

   */

  function log256(uint256 value) internal pure returns (uint256) {

    uint256 result = 0;

    unchecked {

      if (value >> 128 > 0) {

        value >>= 128;

        result += 16;

      }

      if (value >> 64 > 0) {

        value >>= 64;

        result += 8;

      }

      if (value >> 32 > 0) {

        value >>= 32;

        result += 4;

      }

      if (value >> 16 > 0) {

        value >>= 16;

        result += 2;

      }

      if (value >> 8 > 0) {

        result += 1;

      }

    }

    return result;

  }



  /**

   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.

   * Returns 0 if given 0.

   */

  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {

    unchecked {

      uint256 result = log256(value);

      return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);

    }

  }

}



library Strings {

  bytes16 private constant _SYMBOLS = "0123456789abcdef";

  uint8 private constant _ADDRESS_LENGTH = 20;



  /**

   * @dev Converts a `uint256` to its ASCII `string` decimal representation.

   */

  function toString(uint256 value) internal pure returns (string memory) {

    unchecked {

      uint256 length = Math.log10(value) + 1;

      string memory buffer = new string(length);

      uint256 ptr;

      /// @solidity memory-safe-assembly

      assembly {

        ptr := add(buffer, add(32, length))

      }

      while (true) {

        ptr--;

        /// @solidity memory-safe-assembly

        assembly {

          mstore8(ptr, byte(mod(value, 10), _SYMBOLS))

        }

        value /= 10;

        if (value == 0) break;

      }

      return buffer;

    }

  }



  /**

   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.

   */

  function toHexString(uint256 value) internal pure returns (string memory) {

    unchecked {

      return toHexString(value, Math.log256(value) + 1);

    }

  }



  /**

   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.

   */

  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {

    bytes memory buffer = new bytes(2 * length + 2);

    buffer[0] = "0";

    buffer[1] = "x";

    for (uint256 i = 2 * length + 1; i > 1; --i) {

      buffer[i] = _SYMBOLS[value & 0xf];

      value >>= 4;

    }

    require(value == 0, "Strings: hex length insufficient");

    return string(buffer);

  }



  /**

   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.

   */

  function toHexString(address addr) internal pure returns (string memory) {

    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);

  }

}



library Base64 {

  /**

   * @dev Base64 Encoding/Decoding Table

   */

  string internal constant _TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";



  /**

   * @dev Converts a `bytes` to its Bytes64 `string` representation.

   */

  function encode(bytes memory data) internal pure returns (string memory) {

    /**

     * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence

     * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol

     */

    if (data.length == 0) return "";



    // Loads the table into memory

    string memory table = _TABLE;



    // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter

    // and split into 4 numbers of 6 bits.

    // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up

    // - `data.length + 2`  -> Round up

    // - `/ 3`              -> Number of 3-bytes chunks

    // - `4 *`              -> 4 characters for each chunk

    string memory result = new string(4 * ((data.length + 2) / 3));



    /// @solidity memory-safe-assembly

    assembly {

      // Prepare the lookup table (skip the first "length" byte)

      let tablePtr := add(table, 1)



      // Prepare result pointer, jump over length

      let resultPtr := add(result, 32)



      // Run over the input, 3 bytes at a time

      for {

        let dataPtr := data

        let endPtr := add(data, mload(data))

      } lt(dataPtr, endPtr) {



      } {

        // Advance 3 bytes

        dataPtr := add(dataPtr, 3)

        let input := mload(dataPtr)



        // To write each character, shift the 3 bytes (18 bits) chunk

        // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)

        // and apply logical AND with 0x3F which is the number of

        // the previous character in the ASCII table prior to the Base64 Table

        // The result is then added to the table to get the character to write,

        // and finally write it in the result pointer but with a left shift

        // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits



        mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))

        resultPtr := add(resultPtr, 1) // Advance



        mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))

        resultPtr := add(resultPtr, 1) // Advance



        mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))

        resultPtr := add(resultPtr, 1) // Advance



        mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))

        resultPtr := add(resultPtr, 1) // Advance

      }



      // When data `bytes` is not exactly 3 bytes long

      // it is padded with `=` characters at the end

      switch mod(mload(data), 3)

      case 1 {

        mstore8(sub(resultPtr, 1), 0x3d)

        mstore8(sub(resultPtr, 2), 0x3d)

      }

      case 2 {

        mstore8(sub(resultPtr, 1), 0x3d)

      }

    }



    return result;

  }

}



/// NFT metadata library for rendering metadata associated with editions

library NFTMetadataRenderer {

  /// Generate edition metadata from storage information as base64-json blob

  /// Combines the media data and metadata

  /// @param name Name of NFT in metadata

  /// @param description Description of NFT in metadata

  /// @param imageURI URI of image to render for edition

  /// @param animationURI URI of animation to render for edition

  /// @param tokenOfEdition Token ID for specific token

  /// @param editionSize Size of entire edition to show

  function createMetadataEdition(

    string memory name,

    string memory description,

    string memory imageURI,

    string memory animationURI,

    uint256 tokenOfEdition,

    uint256 editionSize

  ) internal pure returns (string memory) {

    string memory _tokenMediaData = tokenMediaData(imageURI, animationURI);

    bytes memory json = createMetadataJSON(name, description, _tokenMediaData, tokenOfEdition, editionSize);

    return encodeMetadataJSON(json);

  }



  function encodeContractURIJSON(

    string memory name,

    string memory description,

    string memory imageURI,

    string memory animationURI,

    uint256 royaltyBPS,

    address royaltyRecipient

  ) internal pure returns (string memory) {

    bytes memory imageSpace = bytes("");

    if (bytes(imageURI).length > 0) {

      imageSpace = abi.encodePacked('", "image": "', imageURI);

    }

    bytes memory animationSpace = bytes("");

    if (bytes(animationURI).length > 0) {

      animationSpace = abi.encodePacked('", "animation_url": "', animationURI);

    }



    return

      string(

        encodeMetadataJSON(

          abi.encodePacked(

            '{"name": "',

            name,

            '", "description": "',

            description,

            // this is for opensea since they don't respect ERC2981 right now

            '", "seller_fee_basis_points": ',

            Strings.toString(royaltyBPS),

            ', "fee_recipient": "',

            Strings.toHexString(uint256(uint160(royaltyRecipient)), 20),

            imageSpace,

            animationSpace,

            '"}'

          )

        )

      );

  }



  /// Function to create the metadata json string for the nft edition

  /// @param name Name of NFT in metadata

  /// @param description Description of NFT in metadata

  /// @param mediaData Data for media to include in json object

  /// @param tokenOfEdition Token ID for specific token

  /// @param editionSize Size of entire edition to show

  function createMetadataJSON(

    string memory name,

    string memory description,

    string memory mediaData,

    uint256 tokenOfEdition,

    uint256 editionSize

  ) internal pure returns (bytes memory) {

    bytes memory editionSizeText;

    if (editionSize > 0) {

      editionSizeText = abi.encodePacked("/", Strings.toString(editionSize));

    }

    return

      abi.encodePacked(

        '{"name": "',

        name,

        " ",

        Strings.toString(tokenOfEdition),

        editionSizeText,

        '", "',

        'description": "',

        description,

        '", "',

        mediaData,

        'properties": {"number": ',

        Strings.toString(tokenOfEdition),

        ', "name": "',

        name,

        '"}}'

      );

  }



  /// Encodes the argument json bytes into base64-data uri format

  /// @param json Raw json to base64 and turn into a data-uri

  function encodeMetadataJSON(bytes memory json) internal pure returns (string memory) {

    return string(abi.encodePacked("data:application/json;base64,", Base64.encode(json)));

  }



  /// Generates edition metadata from storage information as base64-json blob

  /// Combines the media data and metadata

  /// @param imageUrl URL of image to render for edition

  /// @param animationUrl URL of animation to render for edition

  function tokenMediaData(string memory imageUrl, string memory animationUrl) internal pure returns (string memory) {

    bool hasImage = bytes(imageUrl).length > 0;

    bool hasAnimation = bytes(animationUrl).length > 0;

    if (hasImage && hasAnimation) {

      return string(abi.encodePacked('image": "', imageUrl, '", "animation_url": "', animationUrl, '", "'));

    }

    if (hasImage) {

      return string(abi.encodePacked('image": "', imageUrl, '", "'));

    }

    if (hasAnimation) {

      return string(abi.encodePacked('animation_url": "', animationUrl, '", "'));

    }



    return "";

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\NonReentrant.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



abstract contract NonReentrant {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.reentrant')) - 1)

   */

  bytes32 constant _reentrantSlot = 0x04b524dd539523930d3901481aa9455d7752b49add99e1647adb8b09a3137279;



  modifier nonReentrant() {

    require(getStatus() != 2, "HOLOGRAPH: reentrant call");

    setStatus(2);

    _;

    setStatus(1);

  }



  constructor() {}



  function getStatus() internal view returns (uint256 status) {

    assembly {

      status := sload(_reentrantSlot)

    }

  }



  function setStatus(uint256 status) internal {

    assembly {

      sstore(_reentrantSlot, status)

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\OperatorJob.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



struct OperatorJob {

  uint8 pod;

  uint16 blockTimes;

  address operator;

  uint40 startBlock;

  uint64 startTimestamp;

  uint16[5] fallbackOperators;

}



/*



uint		Digits	Max value

-----------------------------

uint8		3		255

uint16		5		65,535

uint24		8		16,777,215

uint32		10		4,294,967,295

uint40		13		1,099,511,627,775

uint48		15		281,474,976,710,655

uint56		17		72,057,594,037,927,935

uint64		20		18,446,744,073,709,551,615

uint72		22		4,722,366,482,869,645,213,695

uint80		25		1,208,925,819,614,629,174,706,175

uint88		27		309,485,009,821,345,068,724,781,055

uint96		29		79,228,162,514,264,337,593,543,950,335

...

uint128		39		340,282,366,920,938,463,463,374,607,431,768,211,455

...

uint256		78		115,792,089,237,316,195,423,570,985,008,687,907,853,269,984,665,640,564,039,457,584,007,913,129,639,935



*/



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\OVM_GasPriceOracle.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



import "../abstract/Admin.sol";

import "../abstract/Initializable.sol";



/**

 * @title OVM_GasPriceOracle

 * @dev This contract exposes the current l2 gas price, a measure of how congested the network

 * currently is. This measure is used by the Sequencer to determine what fee to charge for

 * transactions. When the system is more congested, the l2 gas price will increase and fees

 * will also increase as a result.

 *

 * All public variables are set while generating the initial L2 state. The

 * constructor doesn't run in practice as the L2 state generation script uses

 * the deployed bytecode instead of running the initcode.

 */

contract OVM_GasPriceOracle is Admin, Initializable {

  // Current L2 gas price

  uint256 public gasPrice;

  // Current L1 base fee

  uint256 public l1BaseFee;

  // Amortized cost of batch submission per transaction

  uint256 public overhead;

  // Value to scale the fee up by

  uint256 public scalar;

  // Number of decimals of the scalar

  uint256 public decimals;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    require(!_isInitialized(), "HOLOGRAPH: already initialized");

    (uint256 _gasPrice, uint256 _l1BaseFee, uint256 _overhead, uint256 _scalar, uint256 _decimals) = abi.decode(

      initPayload,

      (uint256, uint256, uint256, uint256, uint256)

    );

    gasPrice = _gasPrice;

    l1BaseFee = _l1BaseFee;

    overhead = _overhead;

    scalar = _scalar;

    decimals = _decimals;

    assembly {

      sstore(_adminSlot, origin())

    }

    _setInitialized();

    return InitializableInterface.init.selector;

  }



  event GasPriceUpdated(uint256);

  event L1BaseFeeUpdated(uint256);

  event OverheadUpdated(uint256);

  event ScalarUpdated(uint256);

  event DecimalsUpdated(uint256);



  /**

   * Allows the owner to modify the l2 gas price.

   * @param _gasPrice New l2 gas price.

   */

  function setGasPrice(uint256 _gasPrice) external onlyAdmin {

    gasPrice = _gasPrice;

    emit GasPriceUpdated(_gasPrice);

  }



  /**

   * Allows the owner to modify the l1 base fee.

   * @param _baseFee New l1 base fee

   */

  function setL1BaseFee(uint256 _baseFee) external onlyAdmin {

    l1BaseFee = _baseFee;

    emit L1BaseFeeUpdated(_baseFee);

  }



  /**

   * Allows the owner to modify the overhead.

   * @param _overhead New overhead

   */

  function setOverhead(uint256 _overhead) external onlyAdmin {

    overhead = _overhead;

    emit OverheadUpdated(_overhead);

  }



  /**

   * Allows the owner to modify the scalar.

   * @param _scalar New scalar

   */

  function setScalar(uint256 _scalar) external onlyAdmin {

    scalar = _scalar;

    emit ScalarUpdated(_scalar);

  }



  /**

   * Allows the owner to modify the decimals.

   * @param _decimals New decimals

   */

  function setDecimals(uint256 _decimals) external onlyAdmin {

    decimals = _decimals;

    emit DecimalsUpdated(_decimals);

  }



  /**

   * Computes the L1 portion of the fee

   * based on the size of the RLP encoded tx

   * and the current l1BaseFee

   * @param _data Unsigned RLP encoded tx, 6 elements

   * @return L1 fee that should be paid for the tx

   */

  function getL1Fee(bytes memory _data) external view returns (uint256) {

    uint256 l1GasUsed = getL1GasUsed(_data);

    uint256 l1Fee = l1GasUsed * l1BaseFee;

    uint256 divisor = 10 ** decimals;

    uint256 unscaled = l1Fee * scalar;

    uint256 scaled = unscaled / divisor;

    return scaled;

  }



  /**

   * Computes the amount of L1 gas used for a transaction

   * The overhead represents the per batch gas overhead of

   * posting both transaction and state roots to L1 given larger

   * batch sizes.

   * 4 gas for 0 byte

   * https://github.com/ethereum/go-ethereum/blob/9ada4a2e2c415e6b0b51c50e901336872e028872/params/protocol_params.go#L33

   * 16 gas for non zero byte

   * https://github.com/ethereum/go-ethereum/blob/9ada4a2e2c415e6b0b51c50e901336872e028872/params/protocol_params.go#L87

   * This will need to be updated if calldata gas prices change

   * Account for the transaction being unsigned

   * Padding is added to account for lack of signature on transaction

   * 1 byte for RLP V prefix

   * 1 byte for V

   * 1 byte for RLP R prefix

   * 32 bytes for R

   * 1 byte for RLP S prefix

   * 32 bytes for S

   * Total: 68 bytes of padding

   * @param _data Unsigned RLP encoded tx, 6 elements

   * @return Amount of L1 gas used for a transaction

   */

  function getL1GasUsed(bytes memory _data) public view returns (uint256) {

    uint256 total = 0;

    for (uint256 i = 0; i < _data.length; i++) {

      if (_data[i] == 0) {

        total += 4;

      } else {

        total += 16;

      }

    }

    uint256 unsigned = total + overhead;

    return unsigned + (68 * 16);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Ownable.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



interface Ownable {

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);



  function owner() external view returns (address);



  function transferOwnership(address _newOwner) external;



  function isOwner() external view returns (bool);



  function isOwner(address wallet) external view returns (bool);

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Owner.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



abstract contract Owner {

  /**

   * @dev bytes32(uint256(keccak256('eip1967.Holograph.owner')) - 1)

   */

  bytes32 constant _ownerSlot = 0xb56711ba6bd3ded7639fc335ee7524fe668a79d7558c85992e3f8494cf772777;



  /**

   * @dev Event emitted when contract owner is changed.

   */

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);



  modifier onlyOwner() virtual {

    require(msg.sender == getOwner(), "HOLOGRAPH: owner only function");

    _;

  }



  function owner() external view virtual returns (address) {

    return getOwner();

  }



  constructor() {}



  function getOwner() public view returns (address ownerAddress) {

    assembly {

      ownerAddress := sload(_ownerSlot)

    }

  }



  function setOwner(address ownerAddress) public virtual onlyOwner {

    address previousOwner = getOwner();

    assembly {

      sstore(_ownerSlot, ownerAddress)

    }

    emit OwnershipTransferred(previousOwner, ownerAddress);

  }



  function transferOwnership(address newOwner) public onlyOwner {

    require(newOwner != address(0), "HOLOGRAPH: zero address");

    assembly {

      sstore(_ownerSlot, newOwner)

    }

  }



  function ownerCall(address target, bytes calldata data) external payable onlyOwner {

    assembly {

      calldatacopy(0, data.offset, data.length)

      let result := call(gas(), target, callvalue(), 0, data.length, 0, 0)

      returndatacopy(0, 0, returndatasize())

      switch result

      case 0 {

        revert(0, returndatasize())

      }

      default {

        return(0, returndatasize())

      }

    }

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\SaleDetails.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



/// @notice Return value for sales details to use with front-ends

struct SaleDetails {

  // Synthesized status variables for sale and presale

  bool publicSaleActive;

  bool presaleActive;

  // Price for public sale

  uint256 publicSalePrice;

  // Timed sale actions for public sale

  uint64 publicSaleStart;

  uint64 publicSaleEnd;

  // Timed sale actions for presale

  uint64 presaleStart;

  uint64 presaleEnd;

  // Merkle root (includes address, quantity, and price data for each entry)

  bytes32 presaleMerkleRoot;

  // Limit public sale to a specific number of mints per wallet

  uint256 maxSalePurchasePerAddress;

  // Information about the rest of the supply

  // Total that have been minted

  uint256 totalMinted;

  // The total supply available

  uint256 maxSupply;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\SalesConfiguration.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



/// @notice Sales states and configuration

/// @dev Uses 3 storage slots

struct SalesConfiguration {

  /// @dev Public sale price (max ether value > 1000 ether with this value)

  uint104 publicSalePrice;

  /// @notice Purchase mint limit per address (if set to 0 === unlimited mints)

  /// @dev Max purchase number per txn (90+32 = 122)

  uint32 maxSalePurchasePerAddress;

  /// @dev uint64 type allows for dates into 292 billion years

  /// @notice Public sale start timestamp (136+64 = 186)

  uint64 publicSaleStart;

  /// @notice Public sale end timestamp (186+64 = 250)

  uint64 publicSaleEnd;

  /// @notice Presale start timestamp

  /// @dev new storage slot

  uint64 presaleStart;

  /// @notice Presale end timestamp

  uint64 presaleEnd;

  /// @notice Presale merkle root

  bytes32 presaleMerkleRoot;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\SampleERC20.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/StrictERC20H.sol";



import "../interface/HolographERC20Interface.sol";



/**

 * @title Sample ERC-20 token that is bridgeable via Holograph

 * @author Holograph Foundation

 * @notice A smart contract for minting and managing Holograph Bridgeable ERC20 Tokens.

 * @dev The entire logic and functionality of the smart contract is self-contained.

 */

contract SampleERC20 is StrictERC20H {

  /**

   * @dev Just a dummy value for now to test transferring of data.

   */

  mapping(address => bytes32) private _walletSalts;



  /**

   * @dev Temporary implementation to suppress compiler state mutability warnings.

   */

  bool private _dummy;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    // do your own custom logic here

    address contractOwner = abi.decode(initPayload, (address));

    _setOwner(contractOwner);

    // run underlying initializer logic

    return _init(initPayload);

  }



  /**

   * @dev Sample mint where anyone can mint any amounts of tokens.

   */

  function mint(address to, uint256 amount) external onlyHolographer onlyOwner {

    HolographERC20Interface(holographer()).sourceMint(to, amount);

    if (_walletSalts[to] == bytes32(0)) {

      _walletSalts[to] = keccak256(

        abi.encodePacked(to, amount, block.timestamp, block.number, blockhash(block.number - 1))

      );

    }

  }



  function bridgeIn(

    uint32 /* _chainId*/,

    address /* _from*/,

    address _to,

    uint256 /* _amount*/,

    bytes calldata _data

  ) external override onlyHolographer returns (bool) {

    bytes32 salt = abi.decode(_data, (bytes32));

    _walletSalts[_to] = salt;

    return true;

  }



  function bridgeOut(

    uint32 /* _chainId*/,

    address /* _from*/,

    address _to,

    uint256 /* _amount*/

  ) external override onlyHolographer returns (bytes memory _data) {

    _dummy = false;

    _data = abi.encode(_walletSalts[_to]);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\SampleERC721.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../abstract/StrictERC721H.sol";



import "../interface/HolographERC721Interface.sol";



/**

 * @title Sample ERC-721 Collection that is bridgeable via Holograph

 * @author Holograph Foundation

 * @notice A smart contract for minting and managing Holograph Bridgeable ERC721 NFTs.

 * @dev The entire logic and functionality of the smart contract is self-contained.

 */

contract SampleERC721 is StrictERC721H {

  /**

   * @dev Mapping of all token URIs.

   */

  mapping(uint256 => string) private _tokenURIs;



  /**

   * @dev Internal reference used for minting incremental token ids.

   */

  uint224 private _currentTokenId;



  /**

   * @dev Temporary implementation to suppress compiler state mutability warnings.

   */

  bool private _dummy;



  /**

   * @dev Constructor is left empty and init is used instead

   */

  constructor() {}



  /**

   * @notice Used internally to initialize the contract instead of through a constructor

   * @dev This function is called by the deployer/factory when creating a contract

   * @param initPayload abi encoded payload to use for contract initilaization

   */

  function init(bytes memory initPayload) external override returns (bytes4) {

    // do your own custom logic here

    address contractOwner = abi.decode(initPayload, (address));

    _setOwner(contractOwner);

    // run underlying initializer logic

    return _init(initPayload);

  }



  /**

   * @notice Get's the URI of the token.

   * @dev Defaults the the Arweave URI

   * @return string The URI.

   */

  function tokenURI(uint256 _tokenId) external view onlyHolographer returns (string memory) {

    return _tokenURIs[_tokenId];

  }



  /**

   * @dev Sample mint where anyone can mint specific token, with a custom URI

   */

  function mint(address to, uint224 tokenId, string calldata URI) external onlyHolographer onlyOwner {

    HolographERC721Interface H721 = HolographERC721Interface(holographer());

    if (tokenId == 0) {

      _currentTokenId += 1;

      while (H721.exists(uint256(_currentTokenId)) || H721.burned(uint256(_currentTokenId))) {

        _currentTokenId += 1;

      }

      tokenId = _currentTokenId;

    }

    H721.sourceMint(to, tokenId);

    uint256 id = H721.sourceGetChainPrepend() + uint256(tokenId);

    _tokenURIs[id] = URI;

  }



  function bridgeIn(

    uint32 /* _chainId*/,

    address /* _from*/,

    address /* _to*/,

    uint256 _tokenId,

    bytes calldata _data

  ) external override onlyHolographer returns (bool) {

    string memory URI = abi.decode(_data, (string));

    _tokenURIs[_tokenId] = URI;

    return true;

  }



  function bridgeOut(

    uint32 /* _chainId*/,

    address /* _from*/,

    address /* _to*/,

    uint256 _tokenId

  ) external override onlyHolographer returns (bytes memory _data) {

    _dummy = false;

    _data = abi.encode(_tokenURIs[_tokenId]);

  }



  function afterBurn(address /* _owner*/, uint256 _tokenId) external override onlyHolographer returns (bool) {

    delete _tokenURIs[_tokenId];

    return true;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\StrictERC1155H.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../interface/HolographedERC1155.sol";



import "./ERC1155H.sol";



abstract contract StrictERC1155H is ERC1155H, HolographedERC1155 {

  /**

   * @dev Dummy variable to prevent empty functions from making "switch to pure" warnings.

   */

  bool private _success;



  function bridgeIn(

    uint32 /* _chainId*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool) {

    _success = true;

    return true;

  }



  function bridgeOut(

    uint32 /* _chainId*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bytes memory _data) {

    _success = true;

    _data = abi.encode(holographer());

  }



  function afterApprove(

    address /* _owner*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeApprove(

    address /* _owner*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterApprovalAll(

    address /* _to*/,

    bool /* _approved*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeApprovalAll(

    address /* _to*/,

    bool /* _approved*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterBurn(

    address /* _owner*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeBurn(

    address /* _owner*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterMint(

    address /* _owner*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeMint(

    address /* _owner*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterSafeTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeSafeTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterOnERC1155Received(

    address /* _operator*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeOnERC1155Received(

    address /* _operator*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\StrictERC20H.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../interface/HolographedERC20.sol";



import "./ERC20H.sol";



abstract contract StrictERC20H is ERC20H, HolographedERC20 {

  /**

   * @dev Dummy variable to prevent empty functions from making "switch to pure" warnings.

   */

  bool private _success;



  function bridgeIn(

    uint32 /* _chainId*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool) {

    _success = true;

    return true;

  }



  function bridgeOut(

    uint32 /* _chainId*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bytes memory _data) {

    /**

     * @dev This is just here to suppress unused parameter warning

     */

    _data = abi.encodePacked(holographer());

    _success = true;

  }



  function afterApprove(

    address /* _owner*/,

    address /* _to*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeApprove(

    address /* _owner*/,

    address /* _to*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterOnERC20Received(

    address /* _token*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeOnERC20Received(

    address /* _token*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterBurn(

    address /* _owner*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeBurn(

    address /* _owner*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterMint(

    address /* _owner*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeMint(

    address /* _owner*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterSafeTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeSafeTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _amount*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function onAllowance(

    address /* _owner*/,

    address /* _to*/,

    uint256 /* _amount*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = false;

    return _success;

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\StrictERC721H.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "../interface/HolographedERC721.sol";



import "./ERC721H.sol";



abstract contract StrictERC721H is ERC721H, HolographedERC721 {

  /**

   * @dev Dummy variable to prevent empty functions from making "switch to pure" warnings.

   */

  bool private _success;



  function bridgeIn(

    uint32 /* _chainId*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool) {

    _success = true;

    return true;

  }



  function bridgeOut(

    uint32 /* _chainId*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/

  ) external virtual onlyHolographer returns (bytes memory _data) {

    _success = true;

    _data = abi.encode(holographer());

  }



  function afterApprove(

    address /* _owner*/,

    address /* _to*/,

    uint256 /* _tokenId*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeApprove(

    address /* _owner*/,

    address /* _to*/,

    uint256 /* _tokenId*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterApprovalAll(

    address /* _sender*/,

    address /* _to*/,

    bool /* _approved*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeApprovalAll(

    address /* _sender*/,

    address /* _to*/,

    bool /* _approved*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterBurn(

    address /* _owner*/,

    uint256 /* _tokenId*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeBurn(

    address /* _owner*/,

    uint256 /* _tokenId*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterMint(

    address /* _owner*/,

    uint256 /* _tokenId*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeMint(

    address /* _owner*/,

    uint256 /* _tokenId*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterSafeTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeSafeTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeTransfer(

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function afterOnERC721Received(

    address /* _operator*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function beforeOnERC721Received(

    address /* _operator*/,

    address /* _from*/,

    address /* _to*/,

    uint256 /* _tokenId*/,

    bytes calldata /* _data*/

  ) external virtual onlyHolographer returns (bool success) {

    _success = true;

    return _success;

  }



  function onIsApprovedForAll(

    address /* _wallet*/,

    address /* _operator*/

  ) external view virtual onlyHolographer returns (bool approved) {

    approved = _success;

    return false;

  }



  function contractURI() external view virtual onlyHolographer returns (string memory contractJSON) {

    contractJSON = _success ? "" : "";

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Strings.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.8.13;



library Strings {

  bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";



  /**

   * @dev Converts a `uint256` to its ASCII `string` decimal representation.

   */

  function toString(uint256 value) internal pure returns (string memory) {

    // Inspired by OraclizeAPI's implementation - MIT licence

    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol



    if (value == 0) {

      return "0";

    }

    uint256 temp = value;

    uint256 digits;

    while (temp != 0) {

      digits++;

      temp /= 10;

    }

    bytes memory buffer = new bytes(digits);

    while (value != 0) {

      digits -= 1;

      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));

      value /= 10;

    }

    return string(buffer);

  }



  /**

   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.

   */

  function toHexString(uint256 value) internal pure returns (string memory) {

    if (value == 0) {

      return "0x00";

    }

    uint256 temp = value;

    uint256 length = 0;

    while (temp != 0) {

      length++;

      temp >>= 8;

    }

    return toHexString(value, length);

  }



  /**

   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.

   */

  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {

    bytes memory buffer = new bytes(2 * length + 2);

    buffer[0] = "0";

    buffer[1] = "x";

    for (uint256 i = 2 * length + 1; i > 1; --i) {

      buffer[i] = _HEX_SYMBOLS[value & 0xf];

      value >>= 4;

    }

    require(value == 0, "Strings: hex length insufficient");

    return string(buffer);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\TempHtokenFix.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED



pragma solidity 0.8.13;



import {InitializableInterface} from "./interface/InitializableInterface.sol";



contract TempHtokenFix {

  constructor() {}



  function init(bytes memory) external returns (bytes4) {

    return InitializableInterface.init.selector;

  }



  function withdraw() external {

    payable(address(0xC0FFEE78121f208475ABDd2cf0853a7afED64749)).transfer(address(this).balance);

  }

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\TokenUriType.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



enum TokenUriType {

  UNDEFINED, //   0

  IPFS, //        1

  HTTPS, //       2

  ARWEAVE //      3

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\Verification.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



struct Verification {

  bytes32 r;

  bytes32 s;

  uint8 v;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ZoraBidShares.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



import "./ZoraDecimal.sol";



struct HolographBidShares {

  // % of sale value that goes to the _previous_ owner of the nft

  HolographDecimal prevOwner;

  // % of sale value that goes to the original creator of the nft

  HolographDecimal creator;

  // % of sale value that goes to the seller (current owner) of the nft

  HolographDecimal owner;

}



--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\Holograph Bridge\contracts\ZoraDecimal.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

/*



                         ?＜?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

                         ?? HOLOGRAPH ??

                         ???∴?∴?∴?∴?∴?∴?∴?∴?∴?∴?∴??

：X：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：[

：U                                                             ：U

：U                            / ^ \                            ：U

：U                            ~~*~~            ?               ：U

：U                         [ '<>:<>' ]         ?????            ：U

：U               ：X：[           _/"\_           ：X：g               ：U

：U             ?＜?∴：p：p?∴??          """          ?＜?∴：p：p?∴??             ：U

：U          ?＜?∴???? ：d：g ?????∴??       \_/       ?＜?∴???? ：d：g ?????∴??          ：U

：U       ?＜?∴???? ??  ：d：g  ?? ?????∴??           ?＜?∴???? ??  ：d：g  ?? ?????∴??       ：U

：U    ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??     ?＜?∴???? ??  ??  ：d：g  ??  ?? ?????∴??    ：U

：U ?＜?∴???? ??  ??  ??  ：d：g  ??  ??  ?? ?????? ?＜???? ??  ??  ??  ：d：g  ??  ??  ?? ?????∴?? ：U

：d???? ??  ??  ??  ??  ：d：g  ??  ??  ??  ?????┬????  ??  ??  ??  ：d：g  ??  ??  ??  ?? ????：g

：U??  ??  ??  ??  ??  ：d：g  ??  ??  ??  ??   ??  ??  ??  ??  ：d：g  ??  ??  ??  ??  ??：U

：d：m：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：T：m：T：T：m：T：T：m：T：T：m：T：T：p：p：T：T：m：T：T：m：T：T：m：T：T：m：T：T：m：g

：d??????????????????????????????：p：p??????????????????????????????????????????????????????：p：p??????????????????????????????：g

：U               ：d：g                           ：d：g               ：U

：U               ：d：g                           ：d：g               ：U

：U    ,          ：d：g     ,        ,'      *    ：d：g               ：U

：U~~~~~^~~~~~~~~?＜：p：p??~~~^~~~~~~~~^^~~~~~~~~^~~?＜：p：p??~~~~~~~^~~~~~~：U

：^：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：T：m：m：m：m：T：T：T：T：T：T：T：T：T：T：T：T：T：T：a

     - one protocol, one bridge = infinite possibilities -





 ***************************************************************



 DISCLAIMER: U.S Patent Pending



 LICENSE: Holograph Limited Public License (H-LPL)



 https://holograph.xyz/licenses/h-lpl/1.0.0



 This license governs use of the accompanying software. If you

 use the software, you accept this license. If you do not accept

 the license, you are not permitted to use the software.



 1. Definitions



 The terms "reproduce," "reproduction," "derivative works," and

 "distribution" have the same meaning here as under U.S.

 copyright law. A "contribution" is the original software, or

 any additions or changes to the software. A "contributor" is

 any person that distributes its contribution under this

 license. "Licensed patents" are a contributor??s patent claims

 that read directly on its contribution.



 2. Grant of Rights



 A) Copyright Grant- Subject to the terms of this license,

 including the license conditions and limitations in sections 3

 and 4, each contributor grants you a non-exclusive, worldwide,

 royalty-free copyright license to reproduce its contribution,

 prepare derivative works of its contribution, and distribute

 its contribution or any derivative works that you create.

 B) Patent Grant- Subject to the terms of this license,

 including the license conditions and limitations in section 3,

 each contributor grants you a non-exclusive, worldwide,

 royalty-free license under its licensed patents to make, have

 made, use, sell, offer for sale, import, and/or otherwise

 dispose of its contribution in the software or derivative works

 of the contribution in the software.



 3. Conditions and Limitations



 A) No Trademark License- This license does not grant you rights

 to use any contributors?? name, logo, or trademarks.

 B) If you bring a patent claim against any contributor over

 patents that you claim are infringed by the software, your

 patent license from such contributor is terminated with

 immediate effect.

 C) If you distribute any portion of the software, you must

 retain all copyright, patent, trademark, and attribution

 notices that are present in the software.

 D) If you distribute any portion of the software in source code

 form, you may do so only under this license by including a

 complete copy of this license with your distribution. If you

 distribute any portion of the software in compiled or object

 code form, you may only do so under a license that complies

 with this license.

 E) The software is licensed ?＜as-is.?＼ You bear all risks of

 using it. The contributors give no express warranties,

 guarantees, or conditions. You may have additional consumer

 rights under your local laws which this license cannot change.

 To the extent permitted under your local laws, the contributors

 exclude all implied warranties, including those of

 merchantability, fitness for a particular purpose and

 non-infringement.



 4. (F) Platform Limitation- The licenses granted in sections

 2.A & 2.B extend only to the software or derivative works that

 you create that run on a Holograph system product.



 ***************************************************************



*/



pragma solidity 0.8.13;



struct HolographDecimal {

  uint256 value;

}



--------------------------------------------------
File End
--------------------------------------------------

{
    "src_chain": {
        "Transfer1": [
            {
                "mint": "function mint(\n address to,\n uint256 id,\n bytes calldata\n ) external override onlyOwner {\n _safeMint(to, id);\n }"
            },
            {
                "_safeMint": "function _safeMint(address to, uint256 tokenId) internal virtual {\n _safeMint(to, tokenId, \"\");\n }"
            },
            {
                "_mint": "function _mint(address to, uint256 tokenId) internal virtual {\n require(to != address(0), \"ERC721: mint to the zero address\");\n\n function _exists(...) {...}\nfunction _beforeTokenTransfer(...) {...}\nfunction _afterTokenTransfer(...) {...}\nrequire(!_exists(tokenId), \"ERC721: token already minted\");\n\n _beforeTokenTransfer(address(0), to, tokenId);\n\n _balances[to] += 1;\n\n _owners[tokenId] = to;\n\n emit Transfer(address(0), to, tokenId);\n\n _afterTokenTransfer(address(0), to, tokenId);\n }"
            }
        ]
    },
    "rel_chain": {},
    "det_chain": {
        "Transfer1": [
            {
                "burnFor": "function burnFor(address from, uint256 id) external override onlyOwner {\n require(ownerOf(id) == from, \"You don't own this nft!\");\n\n _burn(id);\n }"
            },
            {
                "_burn": "function _burn(uint256 tokenId) internal virtual {\n function ownerOf(...) {...}\nfunction _beforeTokenTransfer(...) {...}\nfunction _approve(...) {...}\nfunction _afterTokenTransfer(...) {...}\naddress owner = ERC721.ownerOf(tokenId);\n\n _beforeTokenTransfer(owner, address(0), tokenId);\n\n \n\n _approve(address(0), tokenId);\n\n _balances[owner] -= 1;\n\n delete _owners[tokenId];\n\n emit Transfer(owner, address(0), tokenId);\n\n _afterTokenTransfer(owner, address(0), tokenId);\n }"
            }
        ]
    }
}
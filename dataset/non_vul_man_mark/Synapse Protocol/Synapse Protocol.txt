Folder Structure
--------------------------------------------------
contracts/
    AccessControl.sol
    AccessControlUpgradeable.sol
    Address.sol
    AddressUpgradeable.sol
    AmplificationUtils.sol
    BoringBatchable.sol
    BoringERC20.sol
    BoringMath.sol
    BoringOwnable.sol
    BridgeConfig.sol
    BridgeConfigV2.sol
    BridgeConfigV3.sol
    Clones.sol
    Context.sol
    ContextUpgradeable.sol
    CountersUpgradeable.sol
    ECDSAUpgradeable.sol
    EIP712Upgradeable.sol
    EnumerableSet.sol
    EnumerableSetUpgradeable.sol
    EnumerableStringMap.sol
    ERC165.sol
    ERC20.sol
    ERC20Burnable.sol
    ERC20BurnableUpgradeable.sol
    ERC20PermitUpgradeable.sol
    ERC20Upgradeable.sol
    IAccessControl.sol
    IERC165.sol
    IERC20.sol
    IERC20PermitUpgradeable.sol
    IERC20Upgradeable.sol
    IFlashLoanReceiver.sol
    IMasterChef.sol
    IMetaSwap.sol
    IMetaSwapDeposit.sol
    Initializable.sol
    IRewarder.sol
    ISwap.sol
    ISynapseBridge.sol
    IWETH9.sol
    L1BridgeZap.sol
    LPToken.sol
    MathUtils.sol
    MetaSwap.sol
    MetaSwapDeployer.sol
    MetaSwapDeposit.sol
    MetaSwapUtils.sol
    MiniChefV2.sol
    Multicall2.sol
    NerveBridgeZap.sol
    NodeEnv.sol
    Ownable.sol
    OwnableUpgradeable.sol
    OwnerPausableUpgradeable.sol
    PausableUpgradeable.sol
    PoolConfig.sol
    Proxy.sol
    ReentrancyGuardUpgradeable.sol
    SafeERC20.sol
    SafeMath.sol
    SafeMathUpgradeable.sol
    SignedSafeMath.sol
    Strings.sol
    Swap.sol
    SwapDeployer.sol
    SwapFlashLoan.sol
    SwapUtils.sol
    SynapseBridge.sol
    SynapseERC20.sol
    TimelockController.sol
    TokenVesting.sol
    TransparentUpgradeableProxy.sol
    UpgradeableProxy.sol


File Contents
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\AccessControl.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../utils/EnumerableSet.sol";

import "../utils/Address.sol";

import "../utils/Context.sol";



/**

 * @dev Contract module that allows children to implement role-based access

 * control mechanisms.

 *

 * Roles are referred to by their `bytes32` identifier. These should be exposed

 * in the external API and be unique. The best way to achieve this is by

 * using `public constant` hash digests:

 *

 * ```

 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");

 * ```

 *

 * Roles can be used to represent a set of permissions. To restrict access to a

 * function call, use {hasRole}:

 *

 * ```

 * function foo() public {

 *     require(hasRole(MY_ROLE, msg.sender));

 *     ...

 * }

 * ```

 *

 * Roles can be granted and revoked dynamically via the {grantRole} and

 * {revokeRole} functions. Each role has an associated admin role, and only

 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.

 *

 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means

 * that only accounts with this role will be able to grant or revoke other

 * roles. More complex role relationships can be created by using

 * {_setRoleAdmin}.

 *

 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to

 * grant and revoke this role. Extra precautions should be taken to secure

 * accounts that have been granted it.

 */

abstract contract AccessControl is Context {

    using EnumerableSet for EnumerableSet.AddressSet;

    using Address for address;



    struct RoleData {

        EnumerableSet.AddressSet members;

        bytes32 adminRole;

    }



    mapping (bytes32 => RoleData) private _roles;



    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;



    /**

     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`

     *

     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite

     * {RoleAdminChanged} not being emitted signaling this.

     *

     * _Available since v3.1._

     */

    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);



    /**

     * @dev Emitted when `account` is granted `role`.

     *

     * `sender` is the account that originated the contract call, an admin role

     * bearer except when using {_setupRole}.

     */

    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);



    /**

     * @dev Emitted when `account` is revoked `role`.

     *

     * `sender` is the account that originated the contract call:

     *   - if using `revokeRole`, it is the admin role bearer

     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)

     */

    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);



    /**

     * @dev Returns `true` if `account` has been granted `role`.

     */

    function hasRole(bytes32 role, address account) public view returns (bool) {

        return _roles[role].members.contains(account);

    }



    /**

     * @dev Returns the number of accounts that have `role`. Can be used

     * together with {getRoleMember} to enumerate all bearers of a role.

     */

    function getRoleMemberCount(bytes32 role) public view returns (uint256) {

        return _roles[role].members.length();

    }



    /**

     * @dev Returns one of the accounts that have `role`. `index` must be a

     * value between 0 and {getRoleMemberCount}, non-inclusive.

     *

     * Role bearers are not sorted in any particular way, and their ordering may

     * change at any point.

     *

     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure

     * you perform all queries on the same block. See the following

     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]

     * for more information.

     */

    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {

        return _roles[role].members.at(index);

    }



    /**

     * @dev Returns the admin role that controls `role`. See {grantRole} and

     * {revokeRole}.

     *

     * To change a role's admin, use {_setRoleAdmin}.

     */

    function getRoleAdmin(bytes32 role) public view returns (bytes32) {

        return _roles[role].adminRole;

    }



    /**

     * @dev Grants `role` to `account`.

     *

     * If `account` had not been already granted `role`, emits a {RoleGranted}

     * event.

     *

     * Requirements:

     *

     * - the caller must have ``role``'s admin role.

     */

    function grantRole(bytes32 role, address account) public virtual {

        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");



        _grantRole(role, account);

    }



    /**

     * @dev Revokes `role` from `account`.

     *

     * If `account` had been granted `role`, emits a {RoleRevoked} event.

     *

     * Requirements:

     *

     * - the caller must have ``role``'s admin role.

     */

    function revokeRole(bytes32 role, address account) public virtual {

        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");



        _revokeRole(role, account);

    }



    /**

     * @dev Revokes `role` from the calling account.

     *

     * Roles are often managed via {grantRole} and {revokeRole}: this function's

     * purpose is to provide a mechanism for accounts to lose their privileges

     * if they are compromised (such as when a trusted device is misplaced).

     *

     * If the calling account had been granted `role`, emits a {RoleRevoked}

     * event.

     *

     * Requirements:

     *

     * - the caller must be `account`.

     */

    function renounceRole(bytes32 role, address account) public virtual {

        require(account == _msgSender(), "AccessControl: can only renounce roles for self");



        _revokeRole(role, account);

    }



    /**

     * @dev Grants `role` to `account`.

     *

     * If `account` had not been already granted `role`, emits a {RoleGranted}

     * event. Note that unlike {grantRole}, this function doesn't perform any

     * checks on the calling account.

     *

     * [WARNING]

     * ====

     * This function should only be called from the constructor when setting

     * up the initial roles for the system.

     *

     * Using this function in any other way is effectively circumventing the admin

     * system imposed by {AccessControl}.

     * ====

     */

    function _setupRole(bytes32 role, address account) internal virtual {

        _grantRole(role, account);

    }



    /**

     * @dev Sets `adminRole` as ``role``'s admin role.

     *

     * Emits a {RoleAdminChanged} event.

     */

    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {

        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);

        _roles[role].adminRole = adminRole;

    }



    function _grantRole(bytes32 role, address account) private {

        if (_roles[role].members.add(account)) {

            emit RoleGranted(role, account, _msgSender());

        }

    }



    function _revokeRole(bytes32 role, address account) private {

        if (_roles[role].members.remove(account)) {

            emit RoleRevoked(role, account, _msgSender());

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\AccessControlUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../utils/EnumerableSetUpgradeable.sol";

import "../utils/AddressUpgradeable.sol";

import "../utils/ContextUpgradeable.sol";

import "../proxy/Initializable.sol";



/**

 * @dev Contract module that allows children to implement role-based access

 * control mechanisms.

 *

 * Roles are referred to by their `bytes32` identifier. These should be exposed

 * in the external API and be unique. The best way to achieve this is by

 * using `public constant` hash digests:

 *

 * ```

 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");

 * ```

 *

 * Roles can be used to represent a set of permissions. To restrict access to a

 * function call, use {hasRole}:

 *

 * ```

 * function foo() public {

 *     require(hasRole(MY_ROLE, msg.sender));

 *     ...

 * }

 * ```

 *

 * Roles can be granted and revoked dynamically via the {grantRole} and

 * {revokeRole} functions. Each role has an associated admin role, and only

 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.

 *

 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means

 * that only accounts with this role will be able to grant or revoke other

 * roles. More complex role relationships can be created by using

 * {_setRoleAdmin}.

 *

 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to

 * grant and revoke this role. Extra precautions should be taken to secure

 * accounts that have been granted it.

 */

abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {

    function __AccessControl_init() internal initializer {

        __Context_init_unchained();

        __AccessControl_init_unchained();

    }



    function __AccessControl_init_unchained() internal initializer {

    }

    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;

    using AddressUpgradeable for address;



    struct RoleData {

        EnumerableSetUpgradeable.AddressSet members;

        bytes32 adminRole;

    }



    mapping (bytes32 => RoleData) private _roles;



    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;



    /**

     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`

     *

     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite

     * {RoleAdminChanged} not being emitted signaling this.

     *

     * _Available since v3.1._

     */

    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);



    /**

     * @dev Emitted when `account` is granted `role`.

     *

     * `sender` is the account that originated the contract call, an admin role

     * bearer except when using {_setupRole}.

     */

    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);



    /**

     * @dev Emitted when `account` is revoked `role`.

     *

     * `sender` is the account that originated the contract call:

     *   - if using `revokeRole`, it is the admin role bearer

     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)

     */

    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);



    /**

     * @dev Returns `true` if `account` has been granted `role`.

     */

    function hasRole(bytes32 role, address account) public view returns (bool) {

        return _roles[role].members.contains(account);

    }



    /**

     * @dev Returns the number of accounts that have `role`. Can be used

     * together with {getRoleMember} to enumerate all bearers of a role.

     */

    function getRoleMemberCount(bytes32 role) public view returns (uint256) {

        return _roles[role].members.length();

    }



    /**

     * @dev Returns one of the accounts that have `role`. `index` must be a

     * value between 0 and {getRoleMemberCount}, non-inclusive.

     *

     * Role bearers are not sorted in any particular way, and their ordering may

     * change at any point.

     *

     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure

     * you perform all queries on the same block. See the following

     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]

     * for more information.

     */

    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {

        return _roles[role].members.at(index);

    }



    /**

     * @dev Returns the admin role that controls `role`. See {grantRole} and

     * {revokeRole}.

     *

     * To change a role's admin, use {_setRoleAdmin}.

     */

    function getRoleAdmin(bytes32 role) public view returns (bytes32) {

        return _roles[role].adminRole;

    }



    /**

     * @dev Grants `role` to `account`.

     *

     * If `account` had not been already granted `role`, emits a {RoleGranted}

     * event.

     *

     * Requirements:

     *

     * - the caller must have ``role``'s admin role.

     */

    function grantRole(bytes32 role, address account) public virtual {

        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");



        _grantRole(role, account);

    }



    /**

     * @dev Revokes `role` from `account`.

     *

     * If `account` had been granted `role`, emits a {RoleRevoked} event.

     *

     * Requirements:

     *

     * - the caller must have ``role``'s admin role.

     */

    function revokeRole(bytes32 role, address account) public virtual {

        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");



        _revokeRole(role, account);

    }



    /**

     * @dev Revokes `role` from the calling account.

     *

     * Roles are often managed via {grantRole} and {revokeRole}: this function's

     * purpose is to provide a mechanism for accounts to lose their privileges

     * if they are compromised (such as when a trusted device is misplaced).

     *

     * If the calling account had been granted `role`, emits a {RoleRevoked}

     * event.

     *

     * Requirements:

     *

     * - the caller must be `account`.

     */

    function renounceRole(bytes32 role, address account) public virtual {

        require(account == _msgSender(), "AccessControl: can only renounce roles for self");



        _revokeRole(role, account);

    }



    /**

     * @dev Grants `role` to `account`.

     *

     * If `account` had not been already granted `role`, emits a {RoleGranted}

     * event. Note that unlike {grantRole}, this function doesn't perform any

     * checks on the calling account.

     *

     * [WARNING]

     * ====

     * This function should only be called from the constructor when setting

     * up the initial roles for the system.

     *

     * Using this function in any other way is effectively circumventing the admin

     * system imposed by {AccessControl}.

     * ====

     */

    function _setupRole(bytes32 role, address account) internal virtual {

        _grantRole(role, account);

    }



    /**

     * @dev Sets `adminRole` as ``role``'s admin role.

     *

     * Emits a {RoleAdminChanged} event.

     */

    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {

        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);

        _roles[role].adminRole = adminRole;

    }



    function _grantRole(bytes32 role, address account) private {

        if (_roles[role].members.add(account)) {

            emit RoleGranted(role, account, _msgSender());

        }

    }



    function _revokeRole(bytes32 role, address account) private {

        if (_roles[role].members.remove(account)) {

            emit RoleRevoked(role, account, _msgSender());

        }

    }

    uint256[49] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\Address.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.2 <0.8.0;



/**

 * @dev Collection of functions related to the address type

 */

library Address {

    /**

     * @dev Returns true if `account` is a contract.

     *

     * [IMPORTANT]

     * ====

     * It is unsafe to assume that an address for which this function returns

     * false is an externally-owned account (EOA) and not a contract.

     *

     * Among others, `isContract` will return false for the following

     * types of addresses:

     *

     *  - an externally-owned account

     *  - a contract in construction

     *  - an address where a contract will be created

     *  - an address where a contract lived, but was destroyed

     * ====

     */

    function isContract(address account) internal view returns (bool) {

        // This method relies on extcodesize, which returns 0 for contracts in

        // construction, since the code is only stored at the end of the

        // constructor execution.



        uint256 size;

        // solhint-disable-next-line no-inline-assembly

        assembly { size := extcodesize(account) }

        return size > 0;

    }



    /**

     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to

     * `recipient`, forwarding all available gas and reverting on errors.

     *

     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost

     * of certain opcodes, possibly making contracts go over the 2300 gas limit

     * imposed by `transfer`, making them unable to receive funds via

     * `transfer`. {sendValue} removes this limitation.

     *

     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].

     *

     * IMPORTANT: because control is transferred to `recipient`, care must be

     * taken to not create reentrancy vulnerabilities. Consider using

     * {ReentrancyGuard} or the

     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].

     */

    function sendValue(address payable recipient, uint256 amount) internal {

        require(address(this).balance >= amount, "Address: insufficient balance");



        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value

        (bool success, ) = recipient.call{ value: amount }("");

        require(success, "Address: unable to send value, recipient may have reverted");

    }



    /**

     * @dev Performs a Solidity function call using a low level `call`. A

     * plain`call` is an unsafe replacement for a function call: use this

     * function instead.

     *

     * If `target` reverts with a revert reason, it is bubbled up by this

     * function (like regular Solidity function calls).

     *

     * Returns the raw returned data. To convert to the expected return value,

     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].

     *

     * Requirements:

     *

     * - `target` must be a contract.

     * - calling `target` with `data` must not revert.

     *

     * _Available since v3.1._

     */

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {

      return functionCall(target, data, "Address: low-level call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with

     * `errorMessage` as a fallback revert reason when `target` reverts.

     *

     * _Available since v3.1._

     */

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        return functionCallWithValue(target, data, 0, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but also transferring `value` wei to `target`.

     *

     * Requirements:

     *

     * - the calling contract must have an ETH balance of at least `value`.

     * - the called Solidity function must be `payable`.

     *

     * _Available since v3.1._

     */

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {

        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");

    }



    /**

     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but

     * with `errorMessage` as a fallback revert reason when `target` reverts.

     *

     * _Available since v3.1._

     */

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {

        require(address(this).balance >= value, "Address: insufficient balance for call");

        require(isContract(target), "Address: call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.call{ value: value }(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but performing a static call.

     *

     * _Available since v3.3._

     */

    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {

        return functionStaticCall(target, data, "Address: low-level static call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],

     * but performing a static call.

     *

     * _Available since v3.3._

     */

    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {

        require(isContract(target), "Address: static call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.staticcall(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but performing a delegate call.

     *

     * _Available since v3.4._

     */

    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {

        return functionDelegateCall(target, data, "Address: low-level delegate call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],

     * but performing a delegate call.

     *

     * _Available since v3.4._

     */

    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        require(isContract(target), "Address: delegate call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.delegatecall(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {

        if (success) {

            return returndata;

        } else {

            // Look for revert reason and bubble it up if present

            if (returndata.length > 0) {

                // The easiest way to bubble the revert reason is using memory via assembly



                // solhint-disable-next-line no-inline-assembly

                assembly {

                    let returndata_size := mload(returndata)

                    revert(add(32, returndata), returndata_size)

                }

            } else {

                revert(errorMessage);

            }

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\AddressUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.2 <0.8.0;



/**

 * @dev Collection of functions related to the address type

 */

library AddressUpgradeable {

    /**

     * @dev Returns true if `account` is a contract.

     *

     * [IMPORTANT]

     * ====

     * It is unsafe to assume that an address for which this function returns

     * false is an externally-owned account (EOA) and not a contract.

     *

     * Among others, `isContract` will return false for the following

     * types of addresses:

     *

     *  - an externally-owned account

     *  - a contract in construction

     *  - an address where a contract will be created

     *  - an address where a contract lived, but was destroyed

     * ====

     */

    function isContract(address account) internal view returns (bool) {

        // This method relies on extcodesize, which returns 0 for contracts in

        // construction, since the code is only stored at the end of the

        // constructor execution.



        uint256 size;

        // solhint-disable-next-line no-inline-assembly

        assembly { size := extcodesize(account) }

        return size > 0;

    }



    /**

     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to

     * `recipient`, forwarding all available gas and reverting on errors.

     *

     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost

     * of certain opcodes, possibly making contracts go over the 2300 gas limit

     * imposed by `transfer`, making them unable to receive funds via

     * `transfer`. {sendValue} removes this limitation.

     *

     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].

     *

     * IMPORTANT: because control is transferred to `recipient`, care must be

     * taken to not create reentrancy vulnerabilities. Consider using

     * {ReentrancyGuard} or the

     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].

     */

    function sendValue(address payable recipient, uint256 amount) internal {

        require(address(this).balance >= amount, "Address: insufficient balance");



        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value

        (bool success, ) = recipient.call{ value: amount }("");

        require(success, "Address: unable to send value, recipient may have reverted");

    }



    /**

     * @dev Performs a Solidity function call using a low level `call`. A

     * plain`call` is an unsafe replacement for a function call: use this

     * function instead.

     *

     * If `target` reverts with a revert reason, it is bubbled up by this

     * function (like regular Solidity function calls).

     *

     * Returns the raw returned data. To convert to the expected return value,

     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].

     *

     * Requirements:

     *

     * - `target` must be a contract.

     * - calling `target` with `data` must not revert.

     *

     * _Available since v3.1._

     */

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {

      return functionCall(target, data, "Address: low-level call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with

     * `errorMessage` as a fallback revert reason when `target` reverts.

     *

     * _Available since v3.1._

     */

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        return functionCallWithValue(target, data, 0, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but also transferring `value` wei to `target`.

     *

     * Requirements:

     *

     * - the calling contract must have an ETH balance of at least `value`.

     * - the called Solidity function must be `payable`.

     *

     * _Available since v3.1._

     */

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {

        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");

    }



    /**

     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but

     * with `errorMessage` as a fallback revert reason when `target` reverts.

     *

     * _Available since v3.1._

     */

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {

        require(address(this).balance >= value, "Address: insufficient balance for call");

        require(isContract(target), "Address: call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.call{ value: value }(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but performing a static call.

     *

     * _Available since v3.3._

     */

    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {

        return functionStaticCall(target, data, "Address: low-level static call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],

     * but performing a static call.

     *

     * _Available since v3.3._

     */

    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {

        require(isContract(target), "Address: static call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.staticcall(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {

        if (success) {

            return returndata;

        } else {

            // Look for revert reason and bubble it up if present

            if (returndata.length > 0) {

                // The easiest way to bubble the revert reason is using memory via assembly



                // solhint-disable-next-line no-inline-assembly

                assembly {

                    let returndata_size := mload(returndata)

                    revert(add(32, returndata), returndata_size)

                }

            } else {

                revert(errorMessage);

            }

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\AmplificationUtils.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

import "./SwapUtils.sol";



/**

 * @title AmplificationUtils library

 * @notice A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct.

 * This library assumes the struct is fully validated.

 */

library AmplificationUtils {

    using SafeMath for uint256;



    event RampA(

        uint256 oldA,

        uint256 newA,

        uint256 initialTime,

        uint256 futureTime

    );

    event StopRampA(uint256 currentA, uint256 time);



    // Constant values used in ramping A calculations

    uint256 public constant A_PRECISION = 100;

    uint256 public constant MAX_A = 10**6;

    uint256 private constant MAX_A_CHANGE = 2;

    uint256 private constant MIN_RAMP_TIME = 14 days;



    /**

     * @notice Return A, the amplification coefficient * n * (n - 1)

     * @dev See the StableSwap paper for details

     * @param self Swap struct to read from

     * @return A parameter

     */

    function getA(SwapUtils.Swap storage self) external view returns (uint256) {

        return _getAPrecise(self).div(A_PRECISION);

    }



    /**

     * @notice Return A in its raw precision

     * @dev See the StableSwap paper for details

     * @param self Swap struct to read from

     * @return A parameter in its raw precision form

     */

    function getAPrecise(SwapUtils.Swap storage self)

        external

        view

        returns (uint256)

    {

        return _getAPrecise(self);

    }



    /**

     * @notice Return A in its raw precision

     * @dev See the StableSwap paper for details

     * @param self Swap struct to read from

     * @return A parameter in its raw precision form

     */

    function _getAPrecise(SwapUtils.Swap storage self)

        internal

        view

        returns (uint256)

    {

        uint256 t1 = self.futureATime; // time when ramp is finished

        uint256 a1 = self.futureA; // final A value when ramp is finished



        if (block.timestamp < t1) {

            uint256 t0 = self.initialATime; // time when ramp is started

            uint256 a0 = self.initialA; // initial A value when ramp is started

            if (a1 > a0) {

                // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)

                return

                    a0.add(

                        a1.sub(a0).mul(block.timestamp.sub(t0)).div(t1.sub(t0))

                    );

            } else {

                // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)

                return

                    a0.sub(

                        a0.sub(a1).mul(block.timestamp.sub(t0)).div(t1.sub(t0))

                    );

            }

        } else {

            return a1;

        }

    }



    /**

     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_

     * Checks if the change is too rapid, and commits the new A value only when it falls under

     * the limit range.

     * @param self Swap struct to update

     * @param futureA_ the new A to ramp towards

     * @param futureTime_ timestamp when the new A should be reached

     */

    function rampA(

        SwapUtils.Swap storage self,

        uint256 futureA_,

        uint256 futureTime_

    ) external {

        require(

            block.timestamp >= self.initialATime.add(1 days),

            "Wait 1 day before starting ramp"

        );

        require(

            futureTime_ >= block.timestamp.add(MIN_RAMP_TIME),

            "Insufficient ramp time"

        );

        require(

            futureA_ > 0 && futureA_ < MAX_A,

            "futureA_ must be > 0 and < MAX_A"

        );



        uint256 initialAPrecise = _getAPrecise(self);

        uint256 futureAPrecise = futureA_.mul(A_PRECISION);



        if (futureAPrecise < initialAPrecise) {

            require(

                futureAPrecise.mul(MAX_A_CHANGE) >= initialAPrecise,

                "futureA_ is too small"

            );

        } else {

            require(

                futureAPrecise <= initialAPrecise.mul(MAX_A_CHANGE),

                "futureA_ is too large"

            );

        }



        self.initialA = initialAPrecise;

        self.futureA = futureAPrecise;

        self.initialATime = block.timestamp;

        self.futureATime = futureTime_;



        emit RampA(

            initialAPrecise,

            futureAPrecise,

            block.timestamp,

            futureTime_

        );

    }



    /**

     * @notice Stops ramping A immediately. Once this function is called, rampA()

     * cannot be called for another 24 hours

     * @param self Swap struct to update

     */

    function stopRampA(SwapUtils.Swap storage self) external {

        require(self.futureATime > block.timestamp, "Ramp is already stopped");



        uint256 currentA = _getAPrecise(self);

        self.initialA = currentA;

        self.futureA = currentA;

        self.initialATime = block.timestamp;

        self.futureATime = block.timestamp;



        emit StopRampA(currentA, block.timestamp);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\BoringBatchable.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

// Audit on 5-Jan-2021 by Keno and BoringCrypto



// P1 - P3: OK

pragma solidity 0.6.12;

pragma experimental ABIEncoderV2;

// solhint-disable avoid-low-level-calls



import "./libraries/BoringERC20.sol";



// T1 - T4: OK

contract BaseBoringBatchable {

    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {

        // If the _res length is less than 68, then the transaction failed silently (without a revert message)

        if (_returnData.length < 68) return "Transaction reverted silently";



        assembly {

            // Slice the sighash.

            _returnData := add(_returnData, 0x04)

        }

        return abi.decode(_returnData, (string)); // All that remains is the revert string

    }    

    

    // F3 - F9: OK

    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense

    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value

    // C1 - C21: OK

    // C3: The length of the loop is fully under user control, so can't be exploited

    // C7: Delegatecall is only used on the same contract, so it's safe

    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns(bool[] memory successes, bytes[] memory results) {

        // Interactions

        successes = new bool[](calls.length);

        results = new bytes[](calls.length);

        for (uint256 i = 0; i < calls.length; i++) {

            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);

            require(success || !revertOnFail, _getRevertMsg(result));

            successes[i] = success;

            results[i] = result;

        }

    }

}



// T1 - T4: OK

contract BoringBatchable is BaseBoringBatchable {

    // F1 - F9: OK

    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)

    //     if part of a batch this could be used to grief once as the second call would not need the permit

    // C1 - C21: OK

    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {

        // Interactions

        // X1 - X5

        token.permit(from, to, amount, deadline, v, r, s);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\BoringERC20.sol
File type: .sol
// SPDX-License-Identifier: UNLICENSED

pragma solidity 0.6.12;



import "../interfaces/IERC20.sol";



library BoringERC20 {

    function safeSymbol(IERC20 token) internal view returns(string memory) {

        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));

        return success && data.length > 0 ? abi.decode(data, (string)) : "???";

    }



    function safeName(IERC20 token) internal view returns(string memory) {

        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));

        return success && data.length > 0 ? abi.decode(data, (string)) : "???";

    }



    function safeDecimals(IERC20 token) internal view returns (uint8) {

        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));

        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;

    }



    function safeTransfer(IERC20 token, address to, uint256 amount) internal {

        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));

        require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: Transfer failed");

    }



    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {

        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));

        require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: TransferFrom failed");

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\BoringMath.sol
File type: .sol
// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)

library BoringMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}

    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, "BoringMath: Underflow");}

    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, "BoringMath: Mul Overflow");}

    function to128(uint256 a) internal pure returns (uint128 c) {

        require(a <= uint128(-1), "BoringMath: uint128 Overflow");

        c = uint128(a);

    }

    function to64(uint256 a) internal pure returns (uint64 c) {

        require(a <= uint64(-1), "BoringMath: uint64 Overflow");

        c = uint64(a);

    }

    function to32(uint256 a) internal pure returns (uint32 c) {

        require(a <= uint32(-1), "BoringMath: uint32 Overflow");

        c = uint32(a);

    }

}



library BoringMath128 {

    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}

    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, "BoringMath: Underflow");}

}



library BoringMath64 {

    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}

    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a - b) <= a, "BoringMath: Underflow");}

}



library BoringMath32 {

    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}

    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a - b) <= a, "BoringMath: Underflow");}

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\BoringOwnable.sol
File type: .sol
// SPDX-License-Identifier: MIT

// Audit on 5-Jan-2021 by Keno and BoringCrypto



// P1 - P3: OK

pragma solidity 0.6.12;



// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol

// Edited by BoringCrypto



// T1 - T4: OK

contract BoringOwnableData {

    // V1 - V5: OK

    address public owner;

    // V1 - V5: OK

    address public pendingOwner;

}



// T1 - T4: OK

contract BoringOwnable is BoringOwnableData {

    // E1: OK

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);



    constructor () public {

        owner = msg.sender;

        emit OwnershipTransferred(address(0), msg.sender);

    }



    // F1 - F9: OK

    // C1 - C21: OK

    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {

        if (direct) {

            // Checks

            require(newOwner != address(0) || renounce, "Ownable: zero address");



            // Effects

            emit OwnershipTransferred(owner, newOwner);

            owner = newOwner;

            pendingOwner = address(0);

        } else {

            // Effects

            pendingOwner = newOwner;

        }

    }



    // F1 - F9: OK

    // C1 - C21: OK

    function claimOwnership() public {

        address _pendingOwner = pendingOwner;

        

        // Checks

        require(msg.sender == _pendingOwner, "Ownable: caller != pending owner");



        // Effects

        emit OwnershipTransferred(owner, _pendingOwner);

        owner = _pendingOwner;

        pendingOwner = address(0);

    }



    // M1 - M5: OK

    // C1 - C21: OK

    modifier onlyOwner() {

        require(msg.sender == owner, "Ownable: caller is not the owner");

        _;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\BridgeConfig.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;

pragma experimental ABIEncoderV2;



import '@openzeppelin/contracts/access/AccessControl.sol';

import '@openzeppelin/contracts/math/SafeMath.sol';



/**

 * @title BridgeConfig contract

 * @notice This token is used for configuring different tokens on the bridge and mapping them across chains.

**/



contract BridgeConfig is AccessControl {

    using SafeMath for uint256;

    bytes32 public constant BRIDGEMANAGER_ROLE = keccak256('BRIDGEMANAGER_ROLE');

    bytes32[] private _allTokenIDs;

    mapping(bytes32 => Token[]) private _allTokens; // key is tokenID

    mapping(uint256 => mapping(address => bytes32)) private _tokenIDMap; // key is chainID,tokenAddress

    mapping(bytes32 => mapping(uint256 => Token)) private _tokens; // key is tokenID,chainID



    // the denominator used to calculate fees. For example, an

    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)

    uint256 private constant FEE_DENOMINATOR = 10**10;



    // this struct must be initialized using setTokenConfig for each token that directly interacts with the bridge

    struct Token {

        uint256 chainId;

        address tokenAddress;

        uint8 tokenDecimals;

        uint256 maxSwap;

        uint256 minSwap;

        uint256 swapFee;

        uint256 maxSwapFee;

        uint256 minSwapFee;

        bool hasUnderlying;

        bool isUnderlying;

    }





    constructor() public {

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);

    }



    /**

     * @notice Returns a list of all existing token IDs converted to strings

     */

    function getAllTokenIDs() public view returns (string[] memory result) {

        uint256 length = _allTokenIDs.length;

        result = new string[](length);

        for (uint256 i = 0; i < length; ++i) {

            result[i] = bytes32ToString(_allTokenIDs[i]);

        }

    }



    /**

     * @notice Returns the token ID (string) of the cross-chain token inputted

     * @param tokenAddress address of token to get ID for

     * @param chainID chainID of which to get token ID for

     */

    function getTokenID(address tokenAddress, uint256 chainID) public view returns (string memory)  {

        return bytes32ToString(_tokenIDMap[chainID][tokenAddress]);

    }



    /**

     * @notice Returns the full token config struct 

     * @param tokenID String input of the token ID for the token

     * @param chainID Chain ID of which token address + config to get

     */

    function getToken(string calldata tokenID, uint256 chainID) public view returns (Token memory token) {

        return _tokens[stringToBytes32(tokenID)][chainID];

    }



    /**

     * @notice Returns token config struct, given an address and chainID

     * @param tokenAddress Matches the token ID by using a combo of address + chain ID

     * @param chainID Chain ID of which token to get config for

     */

    function getToken(address tokenAddress, uint256 chainID) public view returns (Token memory token) {

        string memory tokenID = getTokenID(tokenAddress, chainID);

        return _tokens[stringToBytes32(tokenID)][chainID];

    }



    /**

     * @notice Returns true if the token has an underlying token -- meaning the token is deposited into the bridge

     * @param tokenID String to check if it is a withdraw/underlying token

     */

    function hasUnderlyingToken(string calldata tokenID) public view returns (bool) {

        bytes32 bytesTokenID = stringToBytes32(tokenID);

        Token[] memory _mcTokens = _allTokens[bytesTokenID];

        for (uint256 i = 0; i < _mcTokens.length; ++i) {

            if (_mcTokens[i].hasUnderlying) {

                return true;

            }

        }

        return false;

    }



    /**

     * @notice Returns which token is the underlying token to withdraw

     * @param tokenID string token ID

     */

    function getUnderlyingToken(string calldata tokenID) public view returns (Token memory token) {

        bytes32 bytesTokenID = stringToBytes32(tokenID);

        Token[] memory _mcTokens = _allTokens[bytesTokenID];

        for (uint256 i = 0; i < _mcTokens.length; ++i) {

            if (_mcTokens[i].isUnderlying) {

                return _mcTokens[i];

            }

        }

    }

    

    /**

     @notice Public function returning if token ID exists given a string

     */

    function isTokenIDExist(string calldata tokenID) public view returns (bool) {

        return _isTokenIDExist(stringToBytes32(tokenID));

    }



    /**

     @notice Internal function returning if token ID exists given bytes32 version of the ID

     */

    function _isTokenIDExist(bytes32 tokenID) internal view returns(bool) {

        for (uint256 i = 0; i < _allTokenIDs.length; ++i) {

            if (_allTokenIDs[i] == tokenID) {

                return true;

            }

        }

        return false;

    }



    /**

     * @notice Internal function which handles logic of setting token ID and dealing with mappings

     * @param tokenID bytes32 version of ID

     * @param chainID which chain to set the token config for

     * @param tokenToAdd Token object to set the mapping to

     */

    function _setTokenConfig(bytes32 tokenID, uint256 chainID, Token memory tokenToAdd) internal returns(bool) {

        _tokens[tokenID][chainID] = tokenToAdd;

         if (!_isTokenIDExist(tokenID)) {

            _allTokenIDs.push(tokenID);

        }



        Token[] storage _mcTokens = _allTokens[tokenID];

        for (uint256 i = 0; i < _mcTokens.length; ++i) {

            if (_mcTokens[i].chainId == chainID) {

                address oldToken = _mcTokens[i].tokenAddress;

                if (tokenToAdd.tokenAddress != oldToken) {

                _mcTokens[i].tokenAddress = tokenToAdd.tokenAddress ;

                _tokenIDMap[chainID][oldToken] = keccak256('');

                _tokenIDMap[chainID][tokenToAdd.tokenAddress] = tokenID;

                }

            }

        }

        _mcTokens.push(tokenToAdd);

        _tokenIDMap[chainID][tokenToAdd.tokenAddress] = tokenID;

        return true;

    }



    /**

     * @notice Main write function of this contract - Handles creating the struct and passing it to the internal logic function

     * @param tokenID string ID to set the token config object form

     * @param chainID chain ID to use for the token config object

     * @param tokenAddress token address of the token on the given chain

     * @param tokenDecimals decimals of token 

     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals

     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals

     * @param swapFee percent based swap fee -- 10e6 == 10bps

     * @param maxSwapFee max swap fee to be charged - in native token decimals

     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH

     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()

     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain

     */

    function setTokenConfig(

        string calldata tokenID,

        uint256 chainID,

        address tokenAddress,

        uint8 tokenDecimals,

        uint256 maxSwap,

        uint256 minSwap,

        uint256 swapFee,

        uint256 maxSwapFee,

        uint256 minSwapFee,

        bool hasUnderlying,

        bool isUnderlying

    ) public returns (bool) {

        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));

        Token memory tokenToAdd;

        tokenToAdd.tokenAddress = tokenAddress;

        tokenToAdd.tokenDecimals = tokenDecimals;

        tokenToAdd.maxSwap = maxSwap;

        tokenToAdd.minSwap = minSwap;

        tokenToAdd.swapFee = swapFee;

        tokenToAdd.maxSwapFee = maxSwapFee;

        tokenToAdd.minSwapFee = minSwapFee;

        tokenToAdd.hasUnderlying = hasUnderlying;

        tokenToAdd.isUnderlying = isUnderlying;



        return _setTokenConfig(stringToBytes32(tokenID), chainID, tokenToAdd);

    }



    /** 

     * @notice Calculates bridge swap fee based on the destination chain's token transfer.

     * @dev This means the fee should be calculated based on the chain that the nodes emit a tx on

     * @param tokenAddress address of the destination token to query token config for

     * @param chainID destination chain ID to query the token config for

     * @param amount in native token decimals

     * @return Fee calculated in token decimals

     */

    function calculateSwapFee(

        address tokenAddress,

        uint256 chainID,

        uint256 amount

    ) external view returns (uint256) {

        Token memory token = getToken(tokenAddress, chainID);

        uint256 calculatedSwapFee = amount.mul(token.swapFee).div(FEE_DENOMINATOR);

        if (calculatedSwapFee > token.minSwapFee && calculatedSwapFee < token.maxSwapFee) {

            return calculatedSwapFee;

        } else if (calculatedSwapFee > token.maxSwapFee) {

            return token.maxSwapFee;

        } else {

            return token.minSwapFee;

        }

    }

    

    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {

        assembly {

            result := mload(add(str, 32))

        }

    }



    function bytes32ToString(bytes32 data) internal pure returns (string memory) {

        uint8 i = 0;

        while (i < 32 && data[i] != 0) {

            ++i;

        }

        bytes memory bs = new bytes(i);

        for (uint8 j = 0; j < i; ++j) {

            bs[j] = data[j];

        }

        return string(bs);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\BridgeConfigV2.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;

pragma experimental ABIEncoderV2;



import {BridgeConfig} from './BridgeConfig.sol';

import {AccessControl} from './BridgeConfig.sol';

import {SafeMath} from './BridgeConfig.sol';

import {PoolConfig} from './PoolConfig.sol';



/**

 * @title BridgeConfigV2 contract

 * @notice This token is used for configuring different tokens on the bridge and mapping them across chains.

 * It wraps bridge config for data storage

**/



contract BridgeConfigV2 is AccessControl {

    using SafeMath for uint256;

    bytes32 public constant BRIDGEMANAGER_ROLE = keccak256('BRIDGEMANAGER_ROLE');

    BridgeConfig public BRIDGECONFIG_V1;

    PoolConfig public POOLCONFIG_V1;

    mapping(uint256 => uint256) private _maxGasPrice; // key is tokenID,chainID



    constructor() public {

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);

    }



    function setBridgeConfig(BridgeConfig bridgeconfig, PoolConfig poolconfig) public {

        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));

        BRIDGECONFIG_V1 = bridgeconfig;

        POOLCONFIG_V1 = poolconfig;

    }



    /**

     * @notice Returns a list of all existing token IDs converted to strings

     */

    function getAllTokenIDs() public view returns (string[] memory result) {

        return BRIDGECONFIG_V1.getAllTokenIDs();

    }



    /**

     * @notice Returns the token ID (string) of the cross-chain token inputted

     * @param tokenAddress address of token to get ID for

     * @param chainID chainID of which to get token ID for

     */

    function getTokenID(address tokenAddress, uint256 chainID) public view returns (string memory)  {

        return BRIDGECONFIG_V1.getTokenID(tokenAddress, chainID);

    }



    /**

     * @notice Returns the full token config struct

     * @param tokenID String input of the token ID for the token

     * @param chainID Chain ID of which token address + config to get

     */

    function getToken(string calldata tokenID, uint256 chainID) public view returns (BridgeConfig.Token memory token) {

        return BRIDGECONFIG_V1.getToken(tokenID, chainID);

    }



    /**

     * @notice Returns token config struct, given an address and chainID

     * @param tokenAddress Matches the token ID by using a combo of address + chain ID

     * @param chainID Chain ID of which token to get config for

     */

    function getToken(address tokenAddress, uint256 chainID) public view returns (BridgeConfig.Token memory token) {

        return BRIDGECONFIG_V1.getToken(tokenAddress, chainID);

    }



    /**

     * @notice Returns true if the token has an underlying token -- meaning the token is deposited into the bridge

     * @param tokenID String to check if it is a withdraw/underlying token

     */

    function hasUnderlyingToken(string calldata tokenID) public view returns (bool) {

        return BRIDGECONFIG_V1.hasUnderlyingToken(tokenID);

    }



    /**

     * @notice Returns which token is the underlying token to withdraw

     * @param tokenID string token ID

     */

    function getUnderlyingToken(string calldata tokenID) public view returns (BridgeConfig.Token memory token) {

        return BRIDGECONFIG_V1.getUnderlyingToken(tokenID);

    }



    /**

     @notice Public function returning if token ID exists given a string

     */

    function isTokenIDExist(string calldata tokenID) public view returns (bool) {

        return BRIDGECONFIG_V1.isTokenIDExist(tokenID);

    }



    /**

     * @notice Calculates bridge swap fee based on the destination chain's token transfer.

     * @dev This means the fee should be calculated based on the chain that the nodes emit a tx on

     * @param tokenAddress address of the destination token to query token config for

     * @param chainID destination chain ID to query the token config for

     * @param amount in native token decimals

     * @return Fee calculated in token decimals

     */

    function calculateSwapFee(

        address tokenAddress,

        uint256 chainID,

        uint256 amount

    ) external view returns (uint256) {

        return BRIDGECONFIG_V1.calculateSwapFee(tokenAddress, chainID, amount);

    }



    function getPoolConfig(address tokenAddress, uint256 chainID) external view

    returns (PoolConfig.Pool memory) {

        return POOLCONFIG_V1.getPoolConfig(tokenAddress, chainID);

    }



    /**

    * @notice sets the max gas price for a chain

    */

    function setMaxGasPrice(uint256 chainID, uint256 maxPrice) public {

        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));

        _maxGasPrice[chainID] = maxPrice;

    }



    /**

    * @notice gets the max gas price for a chain

    */

    function getMaxGasPrice(uint256 chainID) public view returns (uint256){

        return _maxGasPrice[chainID];

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\BridgeConfigV3.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;

pragma experimental ABIEncoderV2;



import '@openzeppelin/contracts/access/AccessControl.sol';

import '@openzeppelin/contracts/math/SafeMath.sol';



/**

 * @title BridgeConfig contract

 * @notice This token is used for configuring different tokens on the bridge and mapping them across chains.

**/



contract BridgeConfigV3 is AccessControl {

    using SafeMath for uint256;

    bytes32 public constant BRIDGEMANAGER_ROLE = keccak256('BRIDGEMANAGER_ROLE');

    bytes32[] private _allTokenIDs;

    mapping(bytes32 => Token[]) private _allTokens; // key is tokenID

    mapping(uint256 => mapping(string => bytes32)) private _tokenIDMap; // key is chainID,tokenAddress

    mapping(bytes32 => mapping(uint256 => Token)) private _tokens; // key is tokenID,chainID

    mapping(address => mapping(uint256 => Pool)) private _pool; // key is tokenAddress,chainID

    mapping(uint256 => uint256) private _maxGasPrice; // key is tokenID,chainID

    uint256 public constant bridgeConfigVersion = 3;



    // the denominator used to calculate fees. For example, an

    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)

    uint256 private constant FEE_DENOMINATOR = 10**10;



    // this struct must be initialized using setTokenConfig for each token that directly interacts with the bridge

    struct Token {

        uint256 chainId;

        string tokenAddress;

        uint8 tokenDecimals;

        uint256 maxSwap;

        uint256 minSwap;

        uint256 swapFee;

        uint256 maxSwapFee;

        uint256 minSwapFee;

        bool hasUnderlying;

        bool isUnderlying;

    }





    struct Pool {

        address tokenAddress;

        uint256 chainId;

        address poolAddress;

        bool metaswap;

    }





    constructor() public {

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);

    }



    /**

     * @notice Returns a list of all existing token IDs converted to strings

     */

    function getAllTokenIDs() public view returns (string[] memory result) {

        uint256 length = _allTokenIDs.length;

        result = new string[](length);

        for (uint256 i = 0; i < length; ++i) {

            result[i] = toString(_allTokenIDs[i]);

        }

    }



    function _getTokenID(string memory tokenAddress, uint256 chainID) internal view returns (string memory)  {

        return toString(_tokenIDMap[chainID][tokenAddress]);

    }



    function getTokenID(string memory tokenAddress, uint256 chainID) public view returns (string memory)  {

        return _getTokenID(_toLower(tokenAddress), chainID);

    }



    /**

     * @notice Returns the token ID (string) of the cross-chain token inputted

     * @param tokenAddress address of token to get ID for

     * @param chainID chainID of which to get token ID for

     */

    function getTokenID(address tokenAddress, uint256 chainID) public view returns (string memory)  {

        return _getTokenID(toString(tokenAddress), chainID);

    }



    /**

     * @notice Returns the full token config struct

     * @param tokenID String input of the token ID for the token

     * @param chainID Chain ID of which token address + config to get

     */

    function getToken(string memory tokenID, uint256 chainID) public view returns (Token memory token) {

        return _tokens[toBytes32(tokenID)][chainID];

    }



    /**

    * @notice Returns the full token config struct

     * @param tokenID String input of the token ID for the token

     * @param chainID Chain ID of which token address + config to get

     */

    function getTokenByID(string memory tokenID, uint256 chainID) public view returns (Token memory token) {

        return _tokens[toBytes32(tokenID)][chainID];

    }



    /**

     * @notice Returns token config struct, given an address and chainID

     * @param tokenAddress Matches the token ID by using a combo of address + chain ID

     * @param chainID Chain ID of which token to get config for

     */

    function getTokenByAddress(string memory tokenAddress, uint256 chainID) public view returns (Token memory token) {

        return _tokens[_tokenIDMap[chainID][tokenAddress]][chainID];

    }



    function getTokenByEVMAddress(address tokenAddress, uint256 chainID) public view returns (Token memory token) {

        return _tokens[_tokenIDMap[chainID][_toLower(toString(tokenAddress))]][chainID];

    }



    /**

     * @notice Returns true if the token has an underlying token -- meaning the token is deposited into the bridge

     * @param tokenID String to check if it is a withdraw/underlying token

     */

    function hasUnderlyingToken(string memory tokenID) public view returns (bool) {

        bytes32 bytesTokenID = toBytes32(tokenID);

        Token[] memory _mcTokens = _allTokens[bytesTokenID];

        for (uint256 i = 0; i < _mcTokens.length; ++i) {

            if (_mcTokens[i].hasUnderlying) {

                return true;

            }

        }

        return false;

    }



    /**

     * @notice Returns which token is the underlying token to withdraw

     * @param tokenID string token ID

     */

    function getUnderlyingToken(string memory tokenID) public view returns (Token memory token) {

        bytes32 bytesTokenID = toBytes32(tokenID);

        Token[] memory _mcTokens = _allTokens[bytesTokenID];

        for (uint256 i = 0; i < _mcTokens.length; ++i) {

            if (_mcTokens[i].isUnderlying) {

                return _mcTokens[i];

            }

        }

    }



    /**

     @notice Public function returning if token ID exists given a string

     */

    function isTokenIDExist(string memory tokenID) public view returns (bool) {

        return _isTokenIDExist(toBytes32(tokenID));

    }



    /**

     @notice Internal function returning if token ID exists given bytes32 version of the ID

     */

    function _isTokenIDExist(bytes32 tokenID) internal view returns(bool) {

        for (uint256 i = 0; i < _allTokenIDs.length; ++i) {

            if (_allTokenIDs[i] == tokenID) {

                return true;

            }

        }

        return false;

    }



    /**

     * @notice Internal function which handles logic of setting token ID and dealing with mappings

     * @param tokenID bytes32 version of ID

     * @param chainID which chain to set the token config for

     * @param tokenToAdd Token object to set the mapping to

     */

    function _setTokenConfig(bytes32 tokenID, uint256 chainID, Token memory tokenToAdd) internal returns(bool) {

        _tokens[tokenID][chainID] = tokenToAdd;

        if (!_isTokenIDExist(tokenID)) {

            _allTokenIDs.push(tokenID);

        }



        Token[] storage _mcTokens = _allTokens[tokenID];

        for (uint256 i = 0; i < _mcTokens.length; ++i) {

            if (_mcTokens[i].chainId == chainID) {

                string memory oldToken = _mcTokens[i].tokenAddress;

                if (compareStrings(tokenToAdd.tokenAddress, oldToken)) {

                    _mcTokens[i].tokenAddress = tokenToAdd.tokenAddress ;

                    _tokenIDMap[chainID][oldToken] = keccak256('');

                    _tokenIDMap[chainID][tokenToAdd.tokenAddress] = tokenID;

                }

            }

        }

        _mcTokens.push(tokenToAdd);

        _tokenIDMap[chainID][tokenToAdd.tokenAddress] = tokenID;

        return true;

    }



    /**

 * @notice Main write function of this contract - Handles creating the struct and passing it to the internal logic function

     * @param tokenID string ID to set the token config object form

     * @param chainID chain ID to use for the token config object

     * @param tokenAddress token address of the token on the given chain

     * @param tokenDecimals decimals of token

     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals

     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals

     * @param swapFee percent based swap fee -- 10e6 == 10bps

     * @param maxSwapFee max swap fee to be charged - in native token decimals

     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH

     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()

     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain

     */

    function setTokenConfig(

        string calldata tokenID,

        uint256 chainID,

        address tokenAddress,

        uint8 tokenDecimals,

        uint256 maxSwap,

        uint256 minSwap,

        uint256 swapFee,

        uint256 maxSwapFee,

        uint256 minSwapFee,

        bool hasUnderlying,

        bool isUnderlying

    ) public returns (bool) {

        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));

        return setTokenConfig(

            tokenID,

            chainID,

            toString(tokenAddress),

            tokenDecimals,

            maxSwap,

            minSwap,

            swapFee,

            maxSwapFee,

            minSwapFee,

            hasUnderlying,

            isUnderlying

        );

    }



    /**

     * @notice Main write function of this contract - Handles creating the struct and passing it to the internal logic function

     * @param tokenID string ID to set the token config object form

     * @param chainID chain ID to use for the token config object

     * @param tokenAddress token address of the token on the given chain

     * @param tokenDecimals decimals of token

     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals

     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals

     * @param swapFee percent based swap fee -- 10e6 == 10bps

     * @param maxSwapFee max swap fee to be charged - in native token decimals

     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH

     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()

     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain

     */

    function setTokenConfig(

        string calldata tokenID,

        uint256 chainID,

        string memory tokenAddress,

        uint8 tokenDecimals,

        uint256 maxSwap,

        uint256 minSwap,

        uint256 swapFee,

        uint256 maxSwapFee,

        uint256 minSwapFee,

        bool hasUnderlying,

        bool isUnderlying

    ) public returns (bool) {

        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));

        Token memory tokenToAdd;

        tokenToAdd.tokenAddress = _toLower(tokenAddress);

        tokenToAdd.tokenDecimals = tokenDecimals;

        tokenToAdd.maxSwap = maxSwap;

        tokenToAdd.minSwap = minSwap;

        tokenToAdd.swapFee = swapFee;

        tokenToAdd.maxSwapFee = maxSwapFee;

        tokenToAdd.minSwapFee = minSwapFee;

        tokenToAdd.hasUnderlying = hasUnderlying;

        tokenToAdd.isUnderlying = isUnderlying;

        tokenToAdd.chainId = chainID;



        return _setTokenConfig(toBytes32(tokenID), chainID, tokenToAdd);

    }



    function _calculateSwapFee(

        string memory tokenAddress,

        uint256 chainID,

        uint256 amount

    ) internal view returns (uint256) {

        Token memory token = _tokens[_tokenIDMap[chainID][tokenAddress]][chainID];

        uint256 calculatedSwapFee = amount.mul(token.swapFee).div(FEE_DENOMINATOR);

        if (calculatedSwapFee > token.minSwapFee && calculatedSwapFee < token.maxSwapFee) {

            return calculatedSwapFee;

        } else if (calculatedSwapFee > token.maxSwapFee) {

            return token.maxSwapFee;

        } else {

            return token.minSwapFee;

        }

    }





    /**

     * @notice Calculates bridge swap fee based on the destination chain's token transfer.

     * @dev This means the fee should be calculated based on the chain that the nodes emit a tx on

     * @param tokenAddress address of the destination token to query token config for

     * @param chainID destination chain ID to query the token config for

     * @param amount in native token decimals

     * @return Fee calculated in token decimals

     */

    function calculateSwapFee(

        string memory tokenAddress,

        uint256 chainID,

        uint256 amount

    ) external view returns (uint256) {

        return _calculateSwapFee(tokenAddress, chainID, amount);

    }



    /**

    * @notice Calculates bridge swap fee based on the destination chain's token transfer.

     * @dev This means the fee should be calculated based on the chain that the nodes emit a tx on

     * @param tokenAddress address of the destination token to query token config for

     * @param chainID destination chain ID to query the token config for

     * @param amount in native token decimals

     * @return Fee calculated in token decimals

     */

    function calculateSwapFee(

        address tokenAddress,

        uint256 chainID,

        uint256 amount

    ) external view returns (uint256) {

        return _calculateSwapFee(toString(tokenAddress), chainID, amount);

    }





    // GAS PRICING



    /**

    * @notice sets the max gas price for a chain

    */

    function setMaxGasPrice(uint256 chainID, uint256 maxPrice) public {

        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));

        _maxGasPrice[chainID] = maxPrice;

    }



    /**

    * @notice gets the max gas price for a chain

    */

    function getMaxGasPrice(uint256 chainID) public view returns (uint256){

        return _maxGasPrice[chainID];

    }





    // POOL CONFIG



    function getPoolConfig(address tokenAddress, uint256 chainID) external view returns (Pool memory) {

        return _pool[tokenAddress][chainID];

    }



    function setPoolConfig(

        address tokenAddress,

        uint256 chainID,

        address poolAddress,

        bool metaswap

    ) external returns (Pool memory) {

        require(

            hasRole(BRIDGEMANAGER_ROLE, msg.sender),

            'Caller is not Bridge Manager'

        );

        Pool memory newPool = Pool(tokenAddress, chainID, poolAddress, metaswap);

        _pool[tokenAddress][chainID] = newPool;

        return newPool;

    }



    // UTILITY FUNCTIONS



    function toString(bytes32 data) internal pure returns (string memory) {

        uint8 i = 0;

        while (i < 32 && data[i] != 0) {

            ++i;

        }

        bytes memory bs = new bytes(i);

        for (uint8 j = 0; j < i; ++j) {

            bs[j] = data[j];

        }

        return string(bs);

    }



    // toBytes32 converts a string to a bytes 32

    function toBytes32(string memory str) internal pure returns (bytes32 result) {

        require(bytes(str).length <= 32);

        assembly {

            result := mload(add(str, 32))

        }

    }





    function toString(address x)

    internal

    pure

    returns (string memory)

    {

        bytes memory s = new bytes(40);

        for (uint i = 0; i < 20; i++) {

            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));

            bytes1 hi = bytes1(uint8(b) / 16);

            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));

            s[2*i] = char(hi);

            s[2*i+1] = char(lo);

        }



        string memory addrPrefix = '0x';



        return concat(addrPrefix, string(s));

    }



    function concat(string memory _x, string memory _y) pure internal returns (string memory) {

        bytes memory _xBytes = bytes(_x);

        bytes memory _yBytes = bytes(_y);



        string memory _tmpValue = new string(_xBytes.length + _yBytes.length);

        bytes memory _newValue = bytes(_tmpValue);



        uint i;

        uint j;



        for(i=0;i<_xBytes.length;i++) {

            _newValue[j++] = _xBytes[i];

        }



        for(i=0;i<_yBytes.length;i++) {

            _newValue[j++] = _yBytes[i];

        }



        return string(_newValue);

    }



    function char(bytes1 b)

    pure internal

    returns (bytes1 c)

    {

        if (uint8(b) < 10) {

            c = bytes1(uint8(b) + 0x30);

        } else {

            c = bytes1(uint8(b) + 0x57);

        }

    }



    function compareStrings(string memory a, string memory b) pure internal returns (bool) {

        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));

    }



    function _toLower(string memory str) pure internal returns (string memory) {

        bytes memory bStr = bytes(str);

        bytes memory bLower = new bytes(bStr.length);

        for (uint i = 0; i < bStr.length; i++) {

            // Uppercase character...

            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {

                // So we add 32 to make it lowercase

                bLower[i] = bytes1(uint8(bStr[i]) + 32);

            } else {

                bLower[i] = bStr[i];

            }

        }

        return string(bLower);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\Clones.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for

 * deploying minimal proxy contracts, also known as "clones".

 *

 * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies

 * > a minimal bytecode implementation that delegates all calls to a known, fixed address.

 *

 * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`

 * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the

 * deterministic method.

 *

 * _Available since v3.4._

 */

library Clones {

    /**

     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.

     *

     * This function uses the create opcode, which should never revert.

     */

    function clone(address master) internal returns (address instance) {

        // solhint-disable-next-line no-inline-assembly

        assembly {

            let ptr := mload(0x40)

            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)

            mstore(add(ptr, 0x14), shl(0x60, master))

            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)

            instance := create(0, ptr, 0x37)

        }

        require(instance != address(0), "ERC1167: create failed");

    }



    /**

     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.

     *

     * This function uses the create2 opcode and a `salt` to deterministically deploy

     * the clone. Using the same `master` and `salt` multiple time will revert, since

     * the clones cannot be deployed twice at the same address.

     */

    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {

        // solhint-disable-next-line no-inline-assembly

        assembly {

            let ptr := mload(0x40)

            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)

            mstore(add(ptr, 0x14), shl(0x60, master))

            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)

            instance := create2(0, ptr, 0x37, salt)

        }

        require(instance != address(0), "ERC1167: create2 failed");

    }



    /**

     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.

     */

    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {

        // solhint-disable-next-line no-inline-assembly

        assembly {

            let ptr := mload(0x40)

            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)

            mstore(add(ptr, 0x14), shl(0x60, master))

            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)

            mstore(add(ptr, 0x38), shl(0x60, deployer))

            mstore(add(ptr, 0x4c), salt)

            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))

            predicted := keccak256(add(ptr, 0x37), 0x55)

        }

    }



    /**

     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.

     */

    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {

        return predictDeterministicAddress(master, salt, address(this));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\Context.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/*

 * @dev Provides information about the current execution context, including the

 * sender of the transaction and its data. While these are generally available

 * via msg.sender and msg.data, they should not be accessed in such a direct

 * manner, since when dealing with GSN meta-transactions the account sending and

 * paying for execution may not be the actual sender (as far as an application

 * is concerned).

 *

 * This contract is only required for intermediate, library-like contracts.

 */

abstract contract Context {

    function _msgSender() internal view virtual returns (address payable) {

        return msg.sender;

    }



    function _msgData() internal view virtual returns (bytes memory) {

        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691

        return msg.data;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ContextUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;

import "../proxy/Initializable.sol";



/*

 * @dev Provides information about the current execution context, including the

 * sender of the transaction and its data. While these are generally available

 * via msg.sender and msg.data, they should not be accessed in such a direct

 * manner, since when dealing with GSN meta-transactions the account sending and

 * paying for execution may not be the actual sender (as far as an application

 * is concerned).

 *

 * This contract is only required for intermediate, library-like contracts.

 */

abstract contract ContextUpgradeable is Initializable {

    function __Context_init() internal initializer {

        __Context_init_unchained();

    }



    function __Context_init_unchained() internal initializer {

    }

    function _msgSender() internal view virtual returns (address payable) {

        return msg.sender;

    }



    function _msgData() internal view virtual returns (bytes memory) {

        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691

        return msg.data;

    }

    uint256[50] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\CountersUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../math/SafeMathUpgradeable.sol";



/**

 * @title Counters

 * @author Matt Condon (@shrugs)

 * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number

 * of elements in a mapping, issuing ERC721 ids, or counting request ids.

 *

 * Include with `using Counters for Counters.Counter;`

 * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}

 * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never

 * directly accessed.

 */

library CountersUpgradeable {

    using SafeMathUpgradeable for uint256;



    struct Counter {

        // This variable should never be directly accessed by users of the library: interactions must be restricted to

        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add

        // this feature: see https://github.com/ethereum/solidity/issues/4637

        uint256 _value; // default: 0

    }



    function current(Counter storage counter) internal view returns (uint256) {

        return counter._value;

    }



    function increment(Counter storage counter) internal {

        // The {SafeMath} overflow check can be skipped here, see the comment at the top

        counter._value += 1;

    }



    function decrement(Counter storage counter) internal {

        counter._value = counter._value.sub(1);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ECDSAUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.

 *

 * These functions can be used to verify that a message was signed by the holder

 * of the private keys of a given address.

 */

library ECDSAUpgradeable {

    /**

     * @dev Returns the address that signed a hashed message (`hash`) with

     * `signature`. This address can then be used for verification purposes.

     *

     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:

     * this function rejects them by requiring the `s` value to be in the lower

     * half order, and the `v` value to be either 27 or 28.

     *

     * IMPORTANT: `hash` _must_ be the result of a hash operation for the

     * verification to be secure: it is possible to craft signatures that

     * recover to arbitrary addresses for non-hashed data. A safe way to ensure

     * this is by receiving a hash of the original message (which may otherwise

     * be too long), and then calling {toEthSignedMessageHash} on it.

     */

    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {

        // Check the signature length

        if (signature.length != 65) {

            revert("ECDSA: invalid signature length");

        }



        // Divide the signature in r, s and v variables

        bytes32 r;

        bytes32 s;

        uint8 v;



        // ecrecover takes the signature parameters, and the only way to get them

        // currently is to use assembly.

        // solhint-disable-next-line no-inline-assembly

        assembly {

            r := mload(add(signature, 0x20))

            s := mload(add(signature, 0x40))

            v := byte(0, mload(add(signature, 0x60)))

        }



        return recover(hash, v, r, s);

    }



    /**

     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,

     * `r` and `s` signature fields separately.

     */

    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {

        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature

        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines

        // the valid range for s in (281): 0 < s < secp256k1n ?? 2 + 1, and for v in (282): v ?? {27, 28}. Most

        // signatures from current libraries generate a unique signature with an s-value in the lower half order.

        //

        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value

        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or

        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept

        // these malleable signatures as well.

        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature 's' value");

        require(v == 27 || v == 28, "ECDSA: invalid signature 'v' value");



        // If the signature is valid (and not malleable), return the signer address

        address signer = ecrecover(hash, v, r, s);

        require(signer != address(0), "ECDSA: invalid signature");



        return signer;

    }



    /**

     * @dev Returns an Ethereum Signed Message, created from a `hash`. This

     * replicates the behavior of the

     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]

     * JSON-RPC method.

     *

     * See {recover}.

     */

    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {

        // 32 is the length in bytes of hash,

        // enforced by the type signature above

        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\EIP712Upgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;

import "../proxy/Initializable.sol";



/**

 * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.

 *

 * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,

 * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding

 * they need in their contracts using a combination of `abi.encode` and `keccak256`.

 *

 * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding

 * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA

 * ({_hashTypedDataV4}).

 *

 * The implementation of the domain separator was designed to be as efficient as possible while still properly updating

 * the chain id to protect against replay attacks on an eventual fork of the chain.

 *

 * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method

 * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].

 *

 * _Available since v3.4._

 */

abstract contract EIP712Upgradeable is Initializable {

    /* solhint-disable var-name-mixedcase */

    bytes32 private _HASHED_NAME;

    bytes32 private _HASHED_VERSION;

    bytes32 private constant _TYPE_HASH = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");

    /* solhint-enable var-name-mixedcase */



    /**

     * @dev Initializes the domain separator and parameter caches.

     *

     * The meaning of `name` and `version` is specified in

     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:

     *

     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.

     * - `version`: the current major version of the signing domain.

     *

     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart

     * contract upgrade].

     */

    function __EIP712_init(string memory name, string memory version) internal initializer {

        __EIP712_init_unchained(name, version);

    }



    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {

        bytes32 hashedName = keccak256(bytes(name));

        bytes32 hashedVersion = keccak256(bytes(version));

        _HASHED_NAME = hashedName;

        _HASHED_VERSION = hashedVersion;

    }



    /**

     * @dev Returns the domain separator for the current chain.

     */

    function _domainSeparatorV4() internal view returns (bytes32) {

        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());

    }



    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {

        return keccak256(

            abi.encode(

                typeHash,

                name,

                version,

                _getChainId(),

                address(this)

            )

        );

    }



    /**

     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this

     * function returns the hash of the fully encoded EIP712 message for this domain.

     *

     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:

     *

     * ```solidity

     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(

     *     keccak256("Mail(address to,string contents)"),

     *     mailTo,

     *     keccak256(bytes(mailContents))

     * )));

     * address signer = ECDSA.recover(digest, signature);

     * ```

     */

    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {

        return keccak256(abi.encodePacked("\x19\x01", _domainSeparatorV4(), structHash));

    }



    function _getChainId() private view returns (uint256 chainId) {

        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691

        // solhint-disable-next-line no-inline-assembly

        assembly {

            chainId := chainid()

        }

    }



    /**

     * @dev The hash of the name parameter for the EIP712 domain.

     *

     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs

     * are a concern.

     */

    function _EIP712NameHash() internal virtual view returns (bytes32) {

        return _HASHED_NAME;

    }



    /**

     * @dev The hash of the version parameter for the EIP712 domain.

     *

     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs

     * are a concern.

     */

    function _EIP712VersionHash() internal virtual view returns (bytes32) {

        return _HASHED_VERSION;

    }

    uint256[50] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\EnumerableSet.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Library for managing

 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive

 * types.

 *

 * Sets have the following properties:

 *

 * - Elements are added, removed, and checked for existence in constant time

 * (O(1)).

 * - Elements are enumerated in O(n). No guarantees are made on the ordering.

 *

 * ```

 * contract Example {

 *     // Add the library methods

 *     using EnumerableSet for EnumerableSet.AddressSet;

 *

 *     // Declare a set state variable

 *     EnumerableSet.AddressSet private mySet;

 * }

 * ```

 *

 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)

 * and `uint256` (`UintSet`) are supported.

 */

library EnumerableSet {

    // To implement this library for multiple types with as little code

    // repetition as possible, we write it in terms of a generic Set type with

    // bytes32 values.

    // The Set implementation uses private functions, and user-facing

    // implementations (such as AddressSet) are just wrappers around the

    // underlying Set.

    // This means that we can only create new EnumerableSets for types that fit

    // in bytes32.



    struct Set {

        // Storage of set values

        bytes32[] _values;



        // Position of the value in the `values` array, plus 1 because index 0

        // means a value is not in the set.

        mapping (bytes32 => uint256) _indexes;

    }



    /**

     * @dev Add a value to a set. O(1).

     *

     * Returns true if the value was added to the set, that is if it was not

     * already present.

     */

    function _add(Set storage set, bytes32 value) private returns (bool) {

        if (!_contains(set, value)) {

            set._values.push(value);

            // The value is stored at length-1, but we add 1 to all indexes

            // and use 0 as a sentinel value

            set._indexes[value] = set._values.length;

            return true;

        } else {

            return false;

        }

    }



    /**

     * @dev Removes a value from a set. O(1).

     *

     * Returns true if the value was removed from the set, that is if it was

     * present.

     */

    function _remove(Set storage set, bytes32 value) private returns (bool) {

        // We read and store the value's index to prevent multiple reads from the same storage slot

        uint256 valueIndex = set._indexes[value];



        if (valueIndex != 0) { // Equivalent to contains(set, value)

            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in

            // the array, and then remove the last element (sometimes called as 'swap and pop').

            // This modifies the order of the array, as noted in {at}.



            uint256 toDeleteIndex = valueIndex - 1;

            uint256 lastIndex = set._values.length - 1;



            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs

            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.



            bytes32 lastvalue = set._values[lastIndex];



            // Move the last value to the index where the value to delete is

            set._values[toDeleteIndex] = lastvalue;

            // Update the index for the moved value

            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based



            // Delete the slot where the moved value was stored

            set._values.pop();



            // Delete the index for the deleted slot

            delete set._indexes[value];



            return true;

        } else {

            return false;

        }

    }



    /**

     * @dev Returns true if the value is in the set. O(1).

     */

    function _contains(Set storage set, bytes32 value) private view returns (bool) {

        return set._indexes[value] != 0;

    }



    /**

     * @dev Returns the number of values on the set. O(1).

     */

    function _length(Set storage set) private view returns (uint256) {

        return set._values.length;

    }



   /**

    * @dev Returns the value stored at position `index` in the set. O(1).

    *

    * Note that there are no guarantees on the ordering of values inside the

    * array, and it may change when more values are added or removed.

    *

    * Requirements:

    *

    * - `index` must be strictly less than {length}.

    */

    function _at(Set storage set, uint256 index) private view returns (bytes32) {

        require(set._values.length > index, "EnumerableSet: index out of bounds");

        return set._values[index];

    }



    // Bytes32Set



    struct Bytes32Set {

        Set _inner;

    }



    /**

     * @dev Add a value to a set. O(1).

     *

     * Returns true if the value was added to the set, that is if it was not

     * already present.

     */

    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {

        return _add(set._inner, value);

    }



    /**

     * @dev Removes a value from a set. O(1).

     *

     * Returns true if the value was removed from the set, that is if it was

     * present.

     */

    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {

        return _remove(set._inner, value);

    }



    /**

     * @dev Returns true if the value is in the set. O(1).

     */

    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {

        return _contains(set._inner, value);

    }



    /**

     * @dev Returns the number of values in the set. O(1).

     */

    function length(Bytes32Set storage set) internal view returns (uint256) {

        return _length(set._inner);

    }



   /**

    * @dev Returns the value stored at position `index` in the set. O(1).

    *

    * Note that there are no guarantees on the ordering of values inside the

    * array, and it may change when more values are added or removed.

    *

    * Requirements:

    *

    * - `index` must be strictly less than {length}.

    */

    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {

        return _at(set._inner, index);

    }



    // AddressSet



    struct AddressSet {

        Set _inner;

    }



    /**

     * @dev Add a value to a set. O(1).

     *

     * Returns true if the value was added to the set, that is if it was not

     * already present.

     */

    function add(AddressSet storage set, address value) internal returns (bool) {

        return _add(set._inner, bytes32(uint256(uint160(value))));

    }



    /**

     * @dev Removes a value from a set. O(1).

     *

     * Returns true if the value was removed from the set, that is if it was

     * present.

     */

    function remove(AddressSet storage set, address value) internal returns (bool) {

        return _remove(set._inner, bytes32(uint256(uint160(value))));

    }



    /**

     * @dev Returns true if the value is in the set. O(1).

     */

    function contains(AddressSet storage set, address value) internal view returns (bool) {

        return _contains(set._inner, bytes32(uint256(uint160(value))));

    }



    /**

     * @dev Returns the number of values in the set. O(1).

     */

    function length(AddressSet storage set) internal view returns (uint256) {

        return _length(set._inner);

    }



   /**

    * @dev Returns the value stored at position `index` in the set. O(1).

    *

    * Note that there are no guarantees on the ordering of values inside the

    * array, and it may change when more values are added or removed.

    *

    * Requirements:

    *

    * - `index` must be strictly less than {length}.

    */

    function at(AddressSet storage set, uint256 index) internal view returns (address) {

        return address(uint160(uint256(_at(set._inner, index))));

    }





    // UintSet



    struct UintSet {

        Set _inner;

    }



    /**

     * @dev Add a value to a set. O(1).

     *

     * Returns true if the value was added to the set, that is if it was not

     * already present.

     */

    function add(UintSet storage set, uint256 value) internal returns (bool) {

        return _add(set._inner, bytes32(value));

    }



    /**

     * @dev Removes a value from a set. O(1).

     *

     * Returns true if the value was removed from the set, that is if it was

     * present.

     */

    function remove(UintSet storage set, uint256 value) internal returns (bool) {

        return _remove(set._inner, bytes32(value));

    }



    /**

     * @dev Returns true if the value is in the set. O(1).

     */

    function contains(UintSet storage set, uint256 value) internal view returns (bool) {

        return _contains(set._inner, bytes32(value));

    }



    /**

     * @dev Returns the number of values on the set. O(1).

     */

    function length(UintSet storage set) internal view returns (uint256) {

        return _length(set._inner);

    }



   /**

    * @dev Returns the value stored at position `index` in the set. O(1).

    *

    * Note that there are no guarantees on the ordering of values inside the

    * array, and it may change when more values are added or removed.

    *

    * Requirements:

    *

    * - `index` must be strictly less than {length}.

    */

    function at(UintSet storage set, uint256 index) internal view returns (uint256) {

        return uint256(_at(set._inner, index));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\EnumerableSetUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Library for managing

 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive

 * types.

 *

 * Sets have the following properties:

 *

 * - Elements are added, removed, and checked for existence in constant time

 * (O(1)).

 * - Elements are enumerated in O(n). No guarantees are made on the ordering.

 *

 * ```

 * contract Example {

 *     // Add the library methods

 *     using EnumerableSet for EnumerableSet.AddressSet;

 *

 *     // Declare a set state variable

 *     EnumerableSet.AddressSet private mySet;

 * }

 * ```

 *

 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)

 * and `uint256` (`UintSet`) are supported.

 */

library EnumerableSetUpgradeable {

    // To implement this library for multiple types with as little code

    // repetition as possible, we write it in terms of a generic Set type with

    // bytes32 values.

    // The Set implementation uses private functions, and user-facing

    // implementations (such as AddressSet) are just wrappers around the

    // underlying Set.

    // This means that we can only create new EnumerableSets for types that fit

    // in bytes32.



    struct Set {

        // Storage of set values

        bytes32[] _values;



        // Position of the value in the `values` array, plus 1 because index 0

        // means a value is not in the set.

        mapping (bytes32 => uint256) _indexes;

    }



    /**

     * @dev Add a value to a set. O(1).

     *

     * Returns true if the value was added to the set, that is if it was not

     * already present.

     */

    function _add(Set storage set, bytes32 value) private returns (bool) {

        if (!_contains(set, value)) {

            set._values.push(value);

            // The value is stored at length-1, but we add 1 to all indexes

            // and use 0 as a sentinel value

            set._indexes[value] = set._values.length;

            return true;

        } else {

            return false;

        }

    }



    /**

     * @dev Removes a value from a set. O(1).

     *

     * Returns true if the value was removed from the set, that is if it was

     * present.

     */

    function _remove(Set storage set, bytes32 value) private returns (bool) {

        // We read and store the value's index to prevent multiple reads from the same storage slot

        uint256 valueIndex = set._indexes[value];



        if (valueIndex != 0) { // Equivalent to contains(set, value)

            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in

            // the array, and then remove the last element (sometimes called as 'swap and pop').

            // This modifies the order of the array, as noted in {at}.



            uint256 toDeleteIndex = valueIndex - 1;

            uint256 lastIndex = set._values.length - 1;



            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs

            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.



            bytes32 lastvalue = set._values[lastIndex];



            // Move the last value to the index where the value to delete is

            set._values[toDeleteIndex] = lastvalue;

            // Update the index for the moved value

            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based



            // Delete the slot where the moved value was stored

            set._values.pop();



            // Delete the index for the deleted slot

            delete set._indexes[value];



            return true;

        } else {

            return false;

        }

    }



    /**

     * @dev Returns true if the value is in the set. O(1).

     */

    function _contains(Set storage set, bytes32 value) private view returns (bool) {

        return set._indexes[value] != 0;

    }



    /**

     * @dev Returns the number of values on the set. O(1).

     */

    function _length(Set storage set) private view returns (uint256) {

        return set._values.length;

    }



   /**

    * @dev Returns the value stored at position `index` in the set. O(1).

    *

    * Note that there are no guarantees on the ordering of values inside the

    * array, and it may change when more values are added or removed.

    *

    * Requirements:

    *

    * - `index` must be strictly less than {length}.

    */

    function _at(Set storage set, uint256 index) private view returns (bytes32) {

        require(set._values.length > index, "EnumerableSet: index out of bounds");

        return set._values[index];

    }



    // Bytes32Set



    struct Bytes32Set {

        Set _inner;

    }



    /**

     * @dev Add a value to a set. O(1).

     *

     * Returns true if the value was added to the set, that is if it was not

     * already present.

     */

    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {

        return _add(set._inner, value);

    }



    /**

     * @dev Removes a value from a set. O(1).

     *

     * Returns true if the value was removed from the set, that is if it was

     * present.

     */

    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {

        return _remove(set._inner, value);

    }



    /**

     * @dev Returns true if the value is in the set. O(1).

     */

    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {

        return _contains(set._inner, value);

    }



    /**

     * @dev Returns the number of values in the set. O(1).

     */

    function length(Bytes32Set storage set) internal view returns (uint256) {

        return _length(set._inner);

    }



   /**

    * @dev Returns the value stored at position `index` in the set. O(1).

    *

    * Note that there are no guarantees on the ordering of values inside the

    * array, and it may change when more values are added or removed.

    *

    * Requirements:

    *

    * - `index` must be strictly less than {length}.

    */

    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {

        return _at(set._inner, index);

    }



    // AddressSet



    struct AddressSet {

        Set _inner;

    }



    /**

     * @dev Add a value to a set. O(1).

     *

     * Returns true if the value was added to the set, that is if it was not

     * already present.

     */

    function add(AddressSet storage set, address value) internal returns (bool) {

        return _add(set._inner, bytes32(uint256(uint160(value))));

    }



    /**

     * @dev Removes a value from a set. O(1).

     *

     * Returns true if the value was removed from the set, that is if it was

     * present.

     */

    function remove(AddressSet storage set, address value) internal returns (bool) {

        return _remove(set._inner, bytes32(uint256(uint160(value))));

    }



    /**

     * @dev Returns true if the value is in the set. O(1).

     */

    function contains(AddressSet storage set, address value) internal view returns (bool) {

        return _contains(set._inner, bytes32(uint256(uint160(value))));

    }



    /**

     * @dev Returns the number of values in the set. O(1).

     */

    function length(AddressSet storage set) internal view returns (uint256) {

        return _length(set._inner);

    }



   /**

    * @dev Returns the value stored at position `index` in the set. O(1).

    *

    * Note that there are no guarantees on the ordering of values inside the

    * array, and it may change when more values are added or removed.

    *

    * Requirements:

    *

    * - `index` must be strictly less than {length}.

    */

    function at(AddressSet storage set, uint256 index) internal view returns (address) {

        return address(uint160(uint256(_at(set._inner, index))));

    }





    // UintSet



    struct UintSet {

        Set _inner;

    }



    /**

     * @dev Add a value to a set. O(1).

     *

     * Returns true if the value was added to the set, that is if it was not

     * already present.

     */

    function add(UintSet storage set, uint256 value) internal returns (bool) {

        return _add(set._inner, bytes32(value));

    }



    /**

     * @dev Removes a value from a set. O(1).

     *

     * Returns true if the value was removed from the set, that is if it was

     * present.

     */

    function remove(UintSet storage set, uint256 value) internal returns (bool) {

        return _remove(set._inner, bytes32(value));

    }



    /**

     * @dev Returns true if the value is in the set. O(1).

     */

    function contains(UintSet storage set, uint256 value) internal view returns (bool) {

        return _contains(set._inner, bytes32(value));

    }



    /**

     * @dev Returns the number of values on the set. O(1).

     */

    function length(UintSet storage set) internal view returns (uint256) {

        return _length(set._inner);

    }



   /**

    * @dev Returns the value stored at position `index` in the set. O(1).

    *

    * Note that there are no guarantees on the ordering of values inside the

    * array, and it may change when more values are added or removed.

    *

    * Requirements:

    *

    * - `index` must be strictly less than {length}.

    */

    function at(UintSet storage set, uint256 index) internal view returns (uint256) {

        return uint256(_at(set._inner, index));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\EnumerableStringMap.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "@openzeppelin/contracts/utils/EnumerableSet.sol";



/**

 * @title EnumerableStringMap

 * @dev Library for managing an enumerable variant of Solidity's

 * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]

 * type.

 *

 * Maps have the following properties:

 *

 * - Entries are added, removed, and checked for existence in constant time

 * (O(1)).

 * - Entries are enumerated in O(n). No guarantees are made on the ordering.

 *

 * this isn't a terribly gas efficient implementation because it emphasizes usability over gas efficiency

 * by allowing arbitrary length string memorys. If Gettetrs/Setters are going to be used frequently in contracts

 * consider using the OpenZeppeling Bytes32 implementation

 *

 * this also differs from the OpenZeppelin implementation by keccac256 hashing the string memorys

 * so we can use enumerable bytes32 set

 */

library EnumerableStringMap {

    using EnumerableSet for EnumerableSet.Bytes32Set;



    // To implement this library for multiple types with as little code

    // repetition as possible, we write it in terms of a generic Map type with

    // bytes32 keys and values.

    // The Map implementation uses private functions, and user-facing

    // implementations (such as Uint256ToAddressMap) are just wrappers around

    // the underlying Map.

    // This means that we can only create new EnumerableMaps for types that fit

    // in bytes32.



    struct Map {

        // Storage of keys as a set

        EnumerableSet.Bytes32Set _keys;

        // Mapping of keys to resulting values to allow key lookup in the set

        mapping(bytes32 => string) _hashKeyMap;

        // values

        mapping(bytes32 => string) _values;

    }



    /**

     * @dev Adds a key-value pair to a map, or updates the value for an existing

     * key. O(1).

     *

     * Returns true if the key was added to the map, that is if it was not

     * already present.

     */

    function _set(

        Map storage map,

        string memory key,

        string memory value

    ) private returns (bool) {

        bytes32 keyHash = keccak256(abi.encodePacked(key));

        map._values[keyHash] = value;

        map._hashKeyMap[keyHash] = key;

        return map._keys.add(keyHash);

    }



    /**

     * @dev Removes a key-value pair from a map. O(1).

     *

     * Returns true if the key was removed from the map, that is if it was present.

     */

    function _remove(Map storage map, bytes32 keyHash) private returns (bool) {

        delete map._values[keyHash];

        delete map._hashKeyMap[keyHash];

        return map._keys.remove(keyHash);

    }



    /**

     * @dev Returns true if the key is in the map. O(1).

     */

    function _contains(Map storage map, bytes32 keyHash) private view returns (bool) {

        return map._keys.contains(keyHash);

    }



    /**

     * @dev Returns the number of key-value pairs in the map. O(1).

     */

    function _length(Map storage map) private view returns (uint256) {

        return map._keys.length();

    }



    /**

     * @dev Returns the key-value pair stored at position `index` in the map. O(1).

     *

     * Note that there are no guarantees on the ordering of entries inside the

     * array, and it may change when more entries are added or removed.

     *

     * Requirements:

     *

     * - `index` must be strictly less than {length}.

     */

    function _at(Map storage map, uint256 index) private view returns (string memory, string memory) {

        bytes32 keyHash = map._keys.at(index);

        return (map._hashKeyMap[keyHash], map._values[keyHash]);

    }



    /**

     * @dev Tries to returns the value associated with `key`.  O(1).

     * Does not revert if `key` is not in the map.

     */

    function _tryGet(Map storage map, bytes32 keyHash) private view returns (bool, string memory) {

        string memory value = map._values[keyHash];

        if (keccak256(bytes(value)) == keccak256(bytes(""))) {

            return (_contains(map, keyHash), "");

        } else {

            return (true, value);

        }

    }



    /**

     * @dev Returns the value associated with `key`.  O(1).

     *

     * Requirements:

     *

     * - `key` must be in the map.

     */

    function _get(Map storage map, bytes32 keyHash) private view returns (string memory) {

        string memory value = map._values[keyHash];

        require(_contains(map, keyHash), "EnumerableMap: nonexistent key");

        return value;

    }



    // StringToStringMap

    struct StringToStringMap {

        Map _inner;

    }



    /**

     * @dev Adds a key-value pair to a map, or updates the value for an existing

     * key. O(1).

     *

     * Returns true if the key was added to the map, that is if it was not

     * already present.

     */

    function set(

        StringToStringMap storage map,

        string memory key,

        string memory value

    ) internal returns (bool) {

        return _set(map._inner, key, value);

    }



    /**

     * @dev Removes a value from a set. O(1).

     *

     * Returns true if the key was removed from the map, that is if it was present.

     */

    function remove(StringToStringMap storage map, string memory key) internal returns (bool) {

        return _remove(map._inner, keccak256(abi.encodePacked(key)));

    }



    /**

     * @dev Returns true if the key is in the map. O(1).

     */

    function contains(StringToStringMap storage map, string memory key) internal view returns (bool) {

        return _contains(map._inner, keccak256(abi.encodePacked(key)));

    }



    /**

     * @dev Returns the number of elements in the map. O(1).

     */

    function length(StringToStringMap storage map) internal view returns (uint256) {

        return _length(map._inner);

    }



    /**

     * @dev Returns the element stored at position `index` in the set. O(1).

     * Note that there are no guarantees on the ordering of values inside the

     * array, and it may change when more values are added or removed.

     *

     * Requirements:

     *

     * - `index` must be strictly less than {length}.

     */

    function at(StringToStringMap storage map, uint256 index) internal view returns (string memory, string memory) {

        return _at(map._inner, index);

    }



    /**

     * @dev Tries to returns the value associated with `key`.  O(1).

     * Does not revert if `key` is not in the map.

     *

     * _Available since v3.4._

     */

    function tryGet(StringToStringMap storage map, uint256 key) internal view returns (bool, string memory) {

        (bool success, string memory value) = _tryGet(map._inner, bytes32(key));

        return (success, value);

    }



    /**

     * @dev Returns the value associated with `key`.  O(1).

     *

     * Requirements:

     *

     * - `key` must be in the map.

     */

    function get(StringToStringMap storage map, string memory key) internal view returns (string memory) {

        return _get(map._inner, keccak256(abi.encodePacked(key)));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ERC165.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity ^0.8.0;



import "./IERC165.sol";



/**

 * @dev Implementation of the {IERC165} interface.

 *

 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check

 * for the additional interface id that will be supported. For example:

 *

 * ```solidity

 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {

 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);

 * }

 * ```

 *

 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.

 */

abstract contract ERC165 is IERC165 {

    /**

     * @dev See {IERC165-supportsInterface}.

     */

    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {

        return interfaceId == type(IERC165).interfaceId;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ERC20.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../../utils/Context.sol";

import "./IERC20.sol";

import "../../math/SafeMath.sol";



/**

 * @dev Implementation of the {IERC20} interface.

 *

 * This implementation is agnostic to the way tokens are created. This means

 * that a supply mechanism has to be added in a derived contract using {_mint}.

 * For a generic mechanism see {ERC20PresetMinterPauser}.

 *

 * TIP: For a detailed writeup see our guide

 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How

 * to implement supply mechanisms].

 *

 * We have followed general OpenZeppelin guidelines: functions revert instead

 * of returning `false` on failure. This behavior is nonetheless conventional

 * and does not conflict with the expectations of ERC20 applications.

 *

 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.

 * This allows applications to reconstruct the allowance for all accounts just

 * by listening to said events. Other implementations of the EIP may not emit

 * these events, as it isn't required by the specification.

 *

 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}

 * functions have been added to mitigate the well-known issues around setting

 * allowances. See {IERC20-approve}.

 */

contract ERC20 is Context, IERC20 {

    using SafeMath for uint256;



    mapping (address => uint256) private _balances;



    mapping (address => mapping (address => uint256)) private _allowances;



    uint256 private _totalSupply;



    string private _name;

    string private _symbol;

    uint8 private _decimals;



    /**

     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with

     * a default value of 18.

     *

     * To select a different value for {decimals}, use {_setupDecimals}.

     *

     * All three of these values are immutable: they can only be set once during

     * construction.

     */

    constructor (string memory name_, string memory symbol_) public {

        _name = name_;

        _symbol = symbol_;

        _decimals = 18;

    }



    /**

     * @dev Returns the name of the token.

     */

    function name() public view virtual returns (string memory) {

        return _name;

    }



    /**

     * @dev Returns the symbol of the token, usually a shorter version of the

     * name.

     */

    function symbol() public view virtual returns (string memory) {

        return _symbol;

    }



    /**

     * @dev Returns the number of decimals used to get its user representation.

     * For example, if `decimals` equals `2`, a balance of `505` tokens should

     * be displayed to a user as `5,05` (`505 / 10 ** 2`).

     *

     * Tokens usually opt for a value of 18, imitating the relationship between

     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is

     * called.

     *

     * NOTE: This information is only used for _display_ purposes: it in

     * no way affects any of the arithmetic of the contract, including

     * {IERC20-balanceOf} and {IERC20-transfer}.

     */

    function decimals() public view virtual returns (uint8) {

        return _decimals;

    }



    /**

     * @dev See {IERC20-totalSupply}.

     */

    function totalSupply() public view virtual override returns (uint256) {

        return _totalSupply;

    }



    /**

     * @dev See {IERC20-balanceOf}.

     */

    function balanceOf(address account) public view virtual override returns (uint256) {

        return _balances[account];

    }



    /**

     * @dev See {IERC20-transfer}.

     *

     * Requirements:

     *

     * - `recipient` cannot be the zero address.

     * - the caller must have a balance of at least `amount`.

     */

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {

        _transfer(_msgSender(), recipient, amount);

        return true;

    }



    /**

     * @dev See {IERC20-allowance}.

     */

    function allowance(address owner, address spender) public view virtual override returns (uint256) {

        return _allowances[owner][spender];

    }



    /**

     * @dev See {IERC20-approve}.

     *

     * Requirements:

     *

     * - `spender` cannot be the zero address.

     */

    function approve(address spender, uint256 amount) public virtual override returns (bool) {

        _approve(_msgSender(), spender, amount);

        return true;

    }



    /**

     * @dev See {IERC20-transferFrom}.

     *

     * Emits an {Approval} event indicating the updated allowance. This is not

     * required by the EIP. See the note at the beginning of {ERC20}.

     *

     * Requirements:

     *

     * - `sender` and `recipient` cannot be the zero address.

     * - `sender` must have a balance of at least `amount`.

     * - the caller must have allowance for ``sender``'s tokens of at least

     * `amount`.

     */

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {

        _transfer(sender, recipient, amount);

        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));

        return true;

    }



    /**

     * @dev Atomically increases the allowance granted to `spender` by the caller.

     *

     * This is an alternative to {approve} that can be used as a mitigation for

     * problems described in {IERC20-approve}.

     *

     * Emits an {Approval} event indicating the updated allowance.

     *

     * Requirements:

     *

     * - `spender` cannot be the zero address.

     */

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {

        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

        return true;

    }



    /**

     * @dev Atomically decreases the allowance granted to `spender` by the caller.

     *

     * This is an alternative to {approve} that can be used as a mitigation for

     * problems described in {IERC20-approve}.

     *

     * Emits an {Approval} event indicating the updated allowance.

     *

     * Requirements:

     *

     * - `spender` cannot be the zero address.

     * - `spender` must have allowance for the caller of at least

     * `subtractedValue`.

     */

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {

        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

        return true;

    }



    /**

     * @dev Moves tokens `amount` from `sender` to `recipient`.

     *

     * This is internal function is equivalent to {transfer}, and can be used to

     * e.g. implement automatic token fees, slashing mechanisms, etc.

     *

     * Emits a {Transfer} event.

     *

     * Requirements:

     *

     * - `sender` cannot be the zero address.

     * - `recipient` cannot be the zero address.

     * - `sender` must have a balance of at least `amount`.

     */

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {

        require(sender != address(0), "ERC20: transfer from the zero address");

        require(recipient != address(0), "ERC20: transfer to the zero address");



        _beforeTokenTransfer(sender, recipient, amount);



        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");

        _balances[recipient] = _balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);

    }



    /** @dev Creates `amount` tokens and assigns them to `account`, increasing

     * the total supply.

     *

     * Emits a {Transfer} event with `from` set to the zero address.

     *

     * Requirements:

     *

     * - `to` cannot be the zero address.

     */

    function _mint(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: mint to the zero address");



        _beforeTokenTransfer(address(0), account, amount);



        _totalSupply = _totalSupply.add(amount);

        _balances[account] = _balances[account].add(amount);

        emit Transfer(address(0), account, amount);

    }



    /**

     * @dev Destroys `amount` tokens from `account`, reducing the

     * total supply.

     *

     * Emits a {Transfer} event with `to` set to the zero address.

     *

     * Requirements:

     *

     * - `account` cannot be the zero address.

     * - `account` must have at least `amount` tokens.

     */

    function _burn(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: burn from the zero address");



        _beforeTokenTransfer(account, address(0), amount);



        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");

        _totalSupply = _totalSupply.sub(amount);

        emit Transfer(account, address(0), amount);

    }



    /**

     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.

     *

     * This internal function is equivalent to `approve`, and can be used to

     * e.g. set automatic allowances for certain subsystems, etc.

     *

     * Emits an {Approval} event.

     *

     * Requirements:

     *

     * - `owner` cannot be the zero address.

     * - `spender` cannot be the zero address.

     */

    function _approve(address owner, address spender, uint256 amount) internal virtual {

        require(owner != address(0), "ERC20: approve from the zero address");

        require(spender != address(0), "ERC20: approve to the zero address");



        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);

    }



    /**

     * @dev Sets {decimals} to a value other than the default one of 18.

     *

     * WARNING: This function should only be called from the constructor. Most

     * applications that interact with token contracts will not expect

     * {decimals} to ever change, and may work incorrectly if it does.

     */

    function _setupDecimals(uint8 decimals_) internal virtual {

        _decimals = decimals_;

    }



    /**

     * @dev Hook that is called before any transfer of tokens. This includes

     * minting and burning.

     *

     * Calling conditions:

     *

     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens

     * will be to transferred to `to`.

     * - when `from` is zero, `amount` tokens will be minted for `to`.

     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.

     * - `from` and `to` are never both zero.

     *

     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].

     */

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ERC20Burnable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../../utils/Context.sol";

import "./ERC20.sol";



/**

 * @dev Extension of {ERC20} that allows token holders to destroy both their own

 * tokens and those that they have an allowance for, in a way that can be

 * recognized off-chain (via event analysis).

 */

abstract contract ERC20Burnable is Context, ERC20 {

    using SafeMath for uint256;



    /**

     * @dev Destroys `amount` tokens from the caller.

     *

     * See {ERC20-_burn}.

     */

    function burn(uint256 amount) public virtual {

        _burn(_msgSender(), amount);

    }



    /**

     * @dev Destroys `amount` tokens from `account`, deducting from the caller's

     * allowance.

     *

     * See {ERC20-_burn} and {ERC20-allowance}.

     *

     * Requirements:

     *

     * - the caller must have allowance for ``accounts``'s tokens of at least

     * `amount`.

     */

    function burnFrom(address account, uint256 amount) public virtual {

        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");



        _approve(account, _msgSender(), decreasedAllowance);

        _burn(account, amount);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ERC20BurnableUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../../utils/ContextUpgradeable.sol";

import "./ERC20Upgradeable.sol";

import "../../proxy/Initializable.sol";



/**

 * @dev Extension of {ERC20} that allows token holders to destroy both their own

 * tokens and those that they have an allowance for, in a way that can be

 * recognized off-chain (via event analysis).

 */

abstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {

    function __ERC20Burnable_init() internal initializer {

        __Context_init_unchained();

        __ERC20Burnable_init_unchained();

    }



    function __ERC20Burnable_init_unchained() internal initializer {

    }

    using SafeMathUpgradeable for uint256;



    /**

     * @dev Destroys `amount` tokens from the caller.

     *

     * See {ERC20-_burn}.

     */

    function burn(uint256 amount) public virtual {

        _burn(_msgSender(), amount);

    }



    /**

     * @dev Destroys `amount` tokens from `account`, deducting from the caller's

     * allowance.

     *

     * See {ERC20-_burn} and {ERC20-allowance}.

     *

     * Requirements:

     *

     * - the caller must have allowance for ``accounts``'s tokens of at least

     * `amount`.

     */

    function burnFrom(address account, uint256 amount) public virtual {

        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");



        _approve(account, _msgSender(), decreasedAllowance);

        _burn(account, amount);

    }

    uint256[50] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ERC20PermitUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.5 <0.8.0;



import "../token/ERC20/ERC20Upgradeable.sol";

import "./IERC20PermitUpgradeable.sol";

import "../cryptography/ECDSAUpgradeable.sol";

import "../utils/CountersUpgradeable.sol";

import "./EIP712Upgradeable.sol";

import "../proxy/Initializable.sol";



/**

 * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in

 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].

 *

 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by

 * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't

 * need to send a transaction, and thus is not required to hold Ether at all.

 *

 * _Available since v3.4._

 */

abstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {

    using CountersUpgradeable for CountersUpgradeable.Counter;



    mapping (address => CountersUpgradeable.Counter) private _nonces;



    // solhint-disable-next-line var-name-mixedcase

    bytes32 private _PERMIT_TYPEHASH;



    /**

     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `"1"`.

     *

     * It's a good idea to use the same `name` that is defined as the ERC20 token name.

     */

    function __ERC20Permit_init(string memory name) internal initializer {

        __Context_init_unchained();

        __EIP712_init_unchained(name, "1");

        __ERC20Permit_init_unchained(name);

    }



    function __ERC20Permit_init_unchained(string memory name) internal initializer {

        _PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");

    }



    /**

     * @dev See {IERC20Permit-permit}.

     */

    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {

        // solhint-disable-next-line not-rely-on-time

        require(block.timestamp <= deadline, "ERC20Permit: expired deadline");



        bytes32 structHash = keccak256(

            abi.encode(

                _PERMIT_TYPEHASH,

                owner,

                spender,

                value,

                _nonces[owner].current(),

                deadline

            )

        );



        bytes32 hash = _hashTypedDataV4(structHash);



        address signer = ECDSAUpgradeable.recover(hash, v, r, s);

        require(signer == owner, "ERC20Permit: invalid signature");



        _nonces[owner].increment();

        _approve(owner, spender, value);

    }



    /**

     * @dev See {IERC20Permit-nonces}.

     */

    function nonces(address owner) public view override returns (uint256) {

        return _nonces[owner].current();

    }



    /**

     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.

     */

    // solhint-disable-next-line func-name-mixedcase

    function DOMAIN_SEPARATOR() external view override returns (bytes32) {

        return _domainSeparatorV4();

    }

    uint256[49] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ERC20Upgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../../utils/ContextUpgradeable.sol";

import "./IERC20Upgradeable.sol";

import "../../math/SafeMathUpgradeable.sol";

import "../../proxy/Initializable.sol";



/**

 * @dev Implementation of the {IERC20} interface.

 *

 * This implementation is agnostic to the way tokens are created. This means

 * that a supply mechanism has to be added in a derived contract using {_mint}.

 * For a generic mechanism see {ERC20PresetMinterPauser}.

 *

 * TIP: For a detailed writeup see our guide

 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How

 * to implement supply mechanisms].

 *

 * We have followed general OpenZeppelin guidelines: functions revert instead

 * of returning `false` on failure. This behavior is nonetheless conventional

 * and does not conflict with the expectations of ERC20 applications.

 *

 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.

 * This allows applications to reconstruct the allowance for all accounts just

 * by listening to said events. Other implementations of the EIP may not emit

 * these events, as it isn't required by the specification.

 *

 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}

 * functions have been added to mitigate the well-known issues around setting

 * allowances. See {IERC20-approve}.

 */

contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {

    using SafeMathUpgradeable for uint256;



    mapping (address => uint256) private _balances;



    mapping (address => mapping (address => uint256)) private _allowances;



    uint256 private _totalSupply;



    string private _name;

    string private _symbol;

    uint8 private _decimals;



    /**

     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with

     * a default value of 18.

     *

     * To select a different value for {decimals}, use {_setupDecimals}.

     *

     * All three of these values are immutable: they can only be set once during

     * construction.

     */

    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {

        __Context_init_unchained();

        __ERC20_init_unchained(name_, symbol_);

    }



    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {

        _name = name_;

        _symbol = symbol_;

        _decimals = 18;

    }



    /**

     * @dev Returns the name of the token.

     */

    function name() public view virtual returns (string memory) {

        return _name;

    }



    /**

     * @dev Returns the symbol of the token, usually a shorter version of the

     * name.

     */

    function symbol() public view virtual returns (string memory) {

        return _symbol;

    }



    /**

     * @dev Returns the number of decimals used to get its user representation.

     * For example, if `decimals` equals `2`, a balance of `505` tokens should

     * be displayed to a user as `5,05` (`505 / 10 ** 2`).

     *

     * Tokens usually opt for a value of 18, imitating the relationship between

     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is

     * called.

     *

     * NOTE: This information is only used for _display_ purposes: it in

     * no way affects any of the arithmetic of the contract, including

     * {IERC20-balanceOf} and {IERC20-transfer}.

     */

    function decimals() public view virtual returns (uint8) {

        return _decimals;

    }



    /**

     * @dev See {IERC20-totalSupply}.

     */

    function totalSupply() public view virtual override returns (uint256) {

        return _totalSupply;

    }



    /**

     * @dev See {IERC20-balanceOf}.

     */

    function balanceOf(address account) public view virtual override returns (uint256) {

        return _balances[account];

    }



    /**

     * @dev See {IERC20-transfer}.

     *

     * Requirements:

     *

     * - `recipient` cannot be the zero address.

     * - the caller must have a balance of at least `amount`.

     */

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {

        _transfer(_msgSender(), recipient, amount);

        return true;

    }



    /**

     * @dev See {IERC20-allowance}.

     */

    function allowance(address owner, address spender) public view virtual override returns (uint256) {

        return _allowances[owner][spender];

    }



    /**

     * @dev See {IERC20-approve}.

     *

     * Requirements:

     *

     * - `spender` cannot be the zero address.

     */

    function approve(address spender, uint256 amount) public virtual override returns (bool) {

        _approve(_msgSender(), spender, amount);

        return true;

    }



    /**

     * @dev See {IERC20-transferFrom}.

     *

     * Emits an {Approval} event indicating the updated allowance. This is not

     * required by the EIP. See the note at the beginning of {ERC20}.

     *

     * Requirements:

     *

     * - `sender` and `recipient` cannot be the zero address.

     * - `sender` must have a balance of at least `amount`.

     * - the caller must have allowance for ``sender``'s tokens of at least

     * `amount`.

     */

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {

        _transfer(sender, recipient, amount);

        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));

        return true;

    }



    /**

     * @dev Atomically increases the allowance granted to `spender` by the caller.

     *

     * This is an alternative to {approve} that can be used as a mitigation for

     * problems described in {IERC20-approve}.

     *

     * Emits an {Approval} event indicating the updated allowance.

     *

     * Requirements:

     *

     * - `spender` cannot be the zero address.

     */

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {

        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

        return true;

    }



    /**

     * @dev Atomically decreases the allowance granted to `spender` by the caller.

     *

     * This is an alternative to {approve} that can be used as a mitigation for

     * problems described in {IERC20-approve}.

     *

     * Emits an {Approval} event indicating the updated allowance.

     *

     * Requirements:

     *

     * - `spender` cannot be the zero address.

     * - `spender` must have allowance for the caller of at least

     * `subtractedValue`.

     */

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {

        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

        return true;

    }



    /**

     * @dev Moves tokens `amount` from `sender` to `recipient`.

     *

     * This is internal function is equivalent to {transfer}, and can be used to

     * e.g. implement automatic token fees, slashing mechanisms, etc.

     *

     * Emits a {Transfer} event.

     *

     * Requirements:

     *

     * - `sender` cannot be the zero address.

     * - `recipient` cannot be the zero address.

     * - `sender` must have a balance of at least `amount`.

     */

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {

        require(sender != address(0), "ERC20: transfer from the zero address");

        require(recipient != address(0), "ERC20: transfer to the zero address");



        _beforeTokenTransfer(sender, recipient, amount);



        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");

        _balances[recipient] = _balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);

    }



    /** @dev Creates `amount` tokens and assigns them to `account`, increasing

     * the total supply.

     *

     * Emits a {Transfer} event with `from` set to the zero address.

     *

     * Requirements:

     *

     * - `to` cannot be the zero address.

     */

    function _mint(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: mint to the zero address");



        _beforeTokenTransfer(address(0), account, amount);



        _totalSupply = _totalSupply.add(amount);

        _balances[account] = _balances[account].add(amount);

        emit Transfer(address(0), account, amount);

    }



    /**

     * @dev Destroys `amount` tokens from `account`, reducing the

     * total supply.

     *

     * Emits a {Transfer} event with `to` set to the zero address.

     *

     * Requirements:

     *

     * - `account` cannot be the zero address.

     * - `account` must have at least `amount` tokens.

     */

    function _burn(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: burn from the zero address");



        _beforeTokenTransfer(account, address(0), amount);



        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");

        _totalSupply = _totalSupply.sub(amount);

        emit Transfer(account, address(0), amount);

    }



    /**

     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.

     *

     * This internal function is equivalent to `approve`, and can be used to

     * e.g. set automatic allowances for certain subsystems, etc.

     *

     * Emits an {Approval} event.

     *

     * Requirements:

     *

     * - `owner` cannot be the zero address.

     * - `spender` cannot be the zero address.

     */

    function _approve(address owner, address spender, uint256 amount) internal virtual {

        require(owner != address(0), "ERC20: approve from the zero address");

        require(spender != address(0), "ERC20: approve to the zero address");



        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);

    }



    /**

     * @dev Sets {decimals} to a value other than the default one of 18.

     *

     * WARNING: This function should only be called from the constructor. Most

     * applications that interact with token contracts will not expect

     * {decimals} to ever change, and may work incorrectly if it does.

     */

    function _setupDecimals(uint8 decimals_) internal virtual {

        _decimals = decimals_;

    }



    /**

     * @dev Hook that is called before any transfer of tokens. This includes

     * minting and burning.

     *

     * Calling conditions:

     *

     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens

     * will be to transferred to `to`.

     * - when `from` is zero, `amount` tokens will be minted for `to`.

     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.

     * - `from` and `to` are never both zero.

     *

     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].

     */

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }

    uint256[44] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IAccessControl.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity ^0.8.0;



/**

 * @dev External interface of AccessControl declared to support ERC165 detection.

 */

interface IAccessControl {

    /**

     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`

     *

     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite

     * {RoleAdminChanged} not being emitted signaling this.

     *

     * _Available since v3.1._

     */

    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);



    /**

     * @dev Emitted when `account` is granted `role`.

     *

     * `sender` is the account that originated the contract call, an admin role

     * bearer except when using {AccessControl-_setupRole}.

     */

    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);



    /**

     * @dev Emitted when `account` is revoked `role`.

     *

     * `sender` is the account that originated the contract call:

     *   - if using `revokeRole`, it is the admin role bearer

     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)

     */

    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);



    /**

     * @dev Returns `true` if `account` has been granted `role`.

     */

    function hasRole(bytes32 role, address account) external view returns (bool);



    /**

     * @dev Returns the admin role that controls `role`. See {grantRole} and

     * {revokeRole}.

     *

     * To change a role's admin, use {AccessControl-_setRoleAdmin}.

     */

    function getRoleAdmin(bytes32 role) external view returns (bytes32);



    /**

     * @dev Grants `role` to `account`.

     *

     * If `account` had not been already granted `role`, emits a {RoleGranted}

     * event.

     *

     * Requirements:

     *

     * - the caller must have ``role``'s admin role.

     */

    function grantRole(bytes32 role, address account) external;



    /**

     * @dev Revokes `role` from `account`.

     *

     * If `account` had been granted `role`, emits a {RoleRevoked} event.

     *

     * Requirements:

     *

     * - the caller must have ``role``'s admin role.

     */

    function revokeRole(bytes32 role, address account) external;



    /**

     * @dev Revokes `role` from the calling account.

     *

     * Roles are often managed via {grantRole} and {revokeRole}: this function's

     * purpose is to provide a mechanism for accounts to lose their privileges

     * if they are compromised (such as when a trusted device is misplaced).

     *

     * If the calling account had been granted `role`, emits a {RoleRevoked}

     * event.

     *

     * Requirements:

     *

     * - the caller must be `account`.

     */

    function renounceRole(bytes32 role, address account) external;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IERC165.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity ^0.8.0;



/**

 * @dev Interface of the ERC165 standard, as defined in the

 * https://eips.ethereum.org/EIPS/eip-165[EIP].

 *

 * Implementers can declare support of contract interfaces, which can then be

 * queried by others ({ERC165Checker}).

 *

 * For an implementation, see {ERC165}.

 */

interface IERC165 {

    /**

     * @dev Returns true if this contract implements the interface defined by

     * `interfaceId`. See the corresponding

     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]

     * to learn more about how these ids are created.

     *

     * This function call must use less than 30 000 gas.

     */

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IERC20.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Interface of the ERC20 standard as defined in the EIP.

 */

interface IERC20 {

    /**

     * @dev Returns the amount of tokens in existence.

     */

    function totalSupply() external view returns (uint256);



    /**

     * @dev Returns the amount of tokens owned by `account`.

     */

    function balanceOf(address account) external view returns (uint256);



    /**

     * @dev Moves `amount` tokens from the caller's account to `recipient`.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * Emits a {Transfer} event.

     */

    function transfer(address recipient, uint256 amount) external returns (bool);



    /**

     * @dev Returns the remaining number of tokens that `spender` will be

     * allowed to spend on behalf of `owner` through {transferFrom}. This is

     * zero by default.

     *

     * This value changes when {approve} or {transferFrom} are called.

     */

    function allowance(address owner, address spender) external view returns (uint256);



    /**

     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * IMPORTANT: Beware that changing an allowance with this method brings the risk

     * that someone may use both the old and the new allowance by unfortunate

     * transaction ordering. One possible solution to mitigate this race

     * condition is to first reduce the spender's allowance to 0 and set the

     * desired value afterwards:

     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729

     *

     * Emits an {Approval} event.

     */

    function approve(address spender, uint256 amount) external returns (bool);



    /**

     * @dev Moves `amount` tokens from `sender` to `recipient` using the

     * allowance mechanism. `amount` is then deducted from the caller's

     * allowance.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * Emits a {Transfer} event.

     */

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);



    /**

     * @dev Emitted when `value` tokens are moved from one account (`from`) to

     * another (`to`).

     *

     * Note that `value` may be zero.

     */

    event Transfer(address indexed from, address indexed to, uint256 value);



    /**

     * @dev Emitted when the allowance of a `spender` for an `owner` is set by

     * a call to {approve}. `value` is the new allowance.

     */

    event Approval(address indexed owner, address indexed spender, uint256 value);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IERC20PermitUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in

 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].

 *

 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by

 * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't

 * need to send a transaction, and thus is not required to hold Ether at all.

 */

interface IERC20PermitUpgradeable {

    /**

     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,

     * given `owner`'s signed approval.

     *

     * IMPORTANT: The same issues {IERC20-approve} has related to transaction

     * ordering also apply here.

     *

     * Emits an {Approval} event.

     *

     * Requirements:

     *

     * - `spender` cannot be the zero address.

     * - `deadline` must be a timestamp in the future.

     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`

     * over the EIP712-formatted function arguments.

     * - the signature must use ``owner``'s current nonce (see {nonces}).

     *

     * For more information on the signature format, see the

     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP

     * section].

     */

    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;



    /**

     * @dev Returns the current nonce for `owner`. This value must be

     * included whenever a signature is generated for {permit}.

     *

     * Every successful call to {permit} increases ``owner``'s nonce by one. This

     * prevents a signature from being used multiple times.

     */

    function nonces(address owner) external view returns (uint256);



    /**

     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.

     */

    // solhint-disable-next-line func-name-mixedcase

    function DOMAIN_SEPARATOR() external view returns (bytes32);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IERC20Upgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Interface of the ERC20 standard as defined in the EIP.

 */

interface IERC20Upgradeable {

    /**

     * @dev Returns the amount of tokens in existence.

     */

    function totalSupply() external view returns (uint256);



    /**

     * @dev Returns the amount of tokens owned by `account`.

     */

    function balanceOf(address account) external view returns (uint256);



    /**

     * @dev Moves `amount` tokens from the caller's account to `recipient`.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * Emits a {Transfer} event.

     */

    function transfer(address recipient, uint256 amount) external returns (bool);



    /**

     * @dev Returns the remaining number of tokens that `spender` will be

     * allowed to spend on behalf of `owner` through {transferFrom}. This is

     * zero by default.

     *

     * This value changes when {approve} or {transferFrom} are called.

     */

    function allowance(address owner, address spender) external view returns (uint256);



    /**

     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * IMPORTANT: Beware that changing an allowance with this method brings the risk

     * that someone may use both the old and the new allowance by unfortunate

     * transaction ordering. One possible solution to mitigate this race

     * condition is to first reduce the spender's allowance to 0 and set the

     * desired value afterwards:

     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729

     *

     * Emits an {Approval} event.

     */

    function approve(address spender, uint256 amount) external returns (bool);



    /**

     * @dev Moves `amount` tokens from `sender` to `recipient` using the

     * allowance mechanism. `amount` is then deducted from the caller's

     * allowance.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * Emits a {Transfer} event.

     */

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);



    /**

     * @dev Emitted when `value` tokens are moved from one account (`from`) to

     * another (`to`).

     *

     * Note that `value` may be zero.

     */

    event Transfer(address indexed from, address indexed to, uint256 value);



    /**

     * @dev Emitted when the allowance of a `spender` for an `owner` is set by

     * a call to {approve}. `value` is the new allowance.

     */

    event Approval(address indexed owner, address indexed spender, uint256 value);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IFlashLoanReceiver.sol
File type: .sol
// SPDX-License-Identifier: AGPL-3.0-only



pragma solidity 0.6.12;



/**

 * @title IFlashLoanReceiver interface

 * @notice Interface for the Nerve fee IFlashLoanReceiver. Modified from Aave's IFlashLoanReceiver interface.

 * https://github.com/aave/aave-protocol/blob/4b4545fb583fd4f400507b10f3c3114f45b8a037/contracts/flashloan/interfaces/IFlashLoanReceiver.sol

 * @author Aave

 * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract

 **/

interface IFlashLoanReceiver {

    function executeOperation(

        address pool,

        address token,

        uint256 amount,

        uint256 fee,

        bytes calldata params

    ) external;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IMasterChef.sol
File type: .sol
// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

pragma experimental ABIEncoderV2;

import "@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol";



interface IMasterChef {

    using BoringERC20 for IERC20;

    struct UserInfo {

        uint256 amount;     // How many LP tokens the user has provided.

        uint256 rewardDebt; // Reward debt. See explanation below.

    }



    struct PoolInfo {

        IERC20 lpToken;           // Address of LP token contract.

        uint256 allocPoint;       // How many allocation points assigned to this pool. SYNAPSE to distribute per block.

        uint256 lastRewardBlock;  // Last block number that SYNAPSE distribution occurs.

        uint256 accSynapsePerShare; // Accumulated SYNAPSE per share, times 1e12. See below.

    }



    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);

    function totalAllocPoint() external view returns (uint256);

    function deposit(uint256 _pid, uint256 _amount) external;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IMetaSwap.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts/token/ERC20/ERC20.sol";



interface IMetaSwap {

    // pool data view functions

    function getA() external view returns (uint256);



    function getToken(uint8 index) external view returns (IERC20);



    function getTokenIndex(address tokenAddress) external view returns (uint8);



    function getTokenBalance(uint8 index) external view returns (uint256);



    function getVirtualPrice() external view returns (uint256);



    function isGuarded() external view returns (bool);



    // min return calculation functions

    function calculateSwap(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx

    ) external view returns (uint256);



    function calculateSwapUnderlying(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx

    ) external view returns (uint256);



    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)

        external

        view

        returns (uint256);



    function calculateRemoveLiquidity(uint256 amount)

        external

        view

        returns (uint256[] memory);



    function calculateRemoveLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex

    ) external view returns (uint256 availableTokenAmount);



    // state modifying functions

    function initializeMetaSwap(

        IERC20[] memory pooledTokens,

        uint8[] memory decimals,

        string memory lpTokenName,

        string memory lpTokenSymbol,

        uint256 a,

        uint256 fee,

        uint256 adminFee,

        address lpTokenTargetAddress,

        address baseSwap

    ) external;



    function swap(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 minDy,

        uint256 deadline

    ) external returns (uint256);



    function swapUnderlying(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 minDy,

        uint256 deadline

    ) external returns (uint256);



    function addLiquidity(

        uint256[] calldata amounts,

        uint256 minToMint,

        uint256 deadline

    ) external returns (uint256);



    function removeLiquidity(

        uint256 amount,

        uint256[] calldata minAmounts,

        uint256 deadline

    ) external returns (uint256[] memory);



    function removeLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex,

        uint256 minAmount,

        uint256 deadline

    ) external returns (uint256);



    function removeLiquidityImbalance(

        uint256[] calldata amounts,

        uint256 maxBurnAmount,

        uint256 deadline

    ) external returns (uint256);



    function swapStorage()

        external

        view

        returns (

            uint256 initialA,

            uint256 futureA,

            uint256 initialATime,

            uint256 futureATime,

            uint256 swapFee,

            uint256 adminFee,

            address lpToken

        );

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IMetaSwapDeposit.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;

import '@openzeppelin/contracts/token/ERC20/ERC20.sol';



/**

 * @title IMetaSwapDeposit interface

 * @notice Interface for the meta swap contract.

 * @dev implement this interface to develop a a factory-patterned ECDSA node management contract

 **/

interface IMetaSwapDeposit {

  // min return calculation functions

  function calculateSwap(

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 dx

  ) external view returns (uint256);



  function swap(

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 dx,

    uint256 minDy,

    uint256 deadline

  ) external returns (uint256);



  function getToken(uint256 index) external view returns (IERC20);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\Initializable.sol
File type: .sol
// SPDX-License-Identifier: MIT



// solhint-disable-next-line compiler-version

pragma solidity >=0.4.24 <0.8.0;



import "../utils/AddressUpgradeable.sol";



/**

 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed

 * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an

 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer

 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.

 *

 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as

 * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.

 *

 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure

 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.

 */

abstract contract Initializable {



    /**

     * @dev Indicates that the contract has been initialized.

     */

    bool private _initialized;



    /**

     * @dev Indicates that the contract is in the process of being initialized.

     */

    bool private _initializing;



    /**

     * @dev Modifier to protect an initializer function from being invoked twice.

     */

    modifier initializer() {

        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");



        bool isTopLevelCall = !_initializing;

        if (isTopLevelCall) {

            _initializing = true;

            _initialized = true;

        }



        _;



        if (isTopLevelCall) {

            _initializing = false;

        }

    }



    /// @dev Returns true if and only if the function is running in the constructor

    function _isConstructor() private view returns (bool) {

        return !AddressUpgradeable.isContract(address(this));

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IRewarder.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;

import "@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol";

interface IRewarder {

    using BoringERC20 for IERC20;

    function onSynapseReward(uint256 pid, address user, address recipient, uint256 synapseAmount, uint256 newLpAmount) external;

    function pendingTokens(uint256 pid, address user, uint256 synapseAmount) external view returns (IERC20[] memory, uint256[] memory);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ISwap.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts/token/ERC20/ERC20.sol";



interface ISwap {

    // pool data view functions

    function getA() external view returns (uint256);



    function getToken(uint8 index) external view returns (IERC20);



    function getTokenIndex(address tokenAddress) external view returns (uint8);



    function getTokenBalance(uint8 index) external view returns (uint256);



    function getVirtualPrice() external view returns (uint256);



    // min return calculation functions

    function calculateSwap(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx

    ) external view returns (uint256);



    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)

        external

        view

        returns (uint256);



    function calculateRemoveLiquidity(uint256 amount)

        external

        view

        returns (uint256[] memory);



    function calculateRemoveLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex

    ) external view returns (uint256 availableTokenAmount);



    // state modifying functions

    function initialize(

        IERC20[] memory pooledTokens,

        uint8[] memory decimals,

        string memory lpTokenName,

        string memory lpTokenSymbol,

        uint256 a,

        uint256 fee,

        uint256 adminFee,

        address lpTokenTargetAddress

    ) external;



    function swap(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 minDy,

        uint256 deadline

    ) external returns (uint256);



    function addLiquidity(

        uint256[] calldata amounts,

        uint256 minToMint,

        uint256 deadline

    ) external returns (uint256);



    function removeLiquidity(

        uint256 amount,

        uint256[] calldata minAmounts,

        uint256 deadline

    ) external returns (uint256[] memory);



    function removeLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex,

        uint256 minAmount,

        uint256 deadline

    ) external returns (uint256);



    function removeLiquidityImbalance(

        uint256[] calldata amounts,

        uint256 maxBurnAmount,

        uint256 deadline

    ) external returns (uint256);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ISynapseBridge.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';

import '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';



interface ISynapseBridge {

  using SafeERC20 for IERC20;



  function deposit(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount

  ) external;



  function depositAndSwap(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

  ) external;



  function redeem(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount

  ) external;



  function redeemAndSwap(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

  ) external;



  function redeemAndRemove(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 liqTokenIndex,

    uint256 liqMinAmount,

    uint256 liqDeadline

  ) external;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\IWETH9.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.4.0;



interface IWETH9 {

    function name() external view returns (string memory);



    function symbol() external view returns (string memory);



    function decimals() external view returns (uint8);



    function balanceOf(address) external view returns (uint256);



    function allowance(address, address) external view returns (uint256);



    receive() external payable;



    function deposit() external payable;



    function withdraw(uint256 wad) external;



    function totalSupply() external view returns (uint256);



    function approve(address guy, uint256 wad) external returns (bool);



    function transfer(address dst, uint256 wad) external returns (bool);



    function transferFrom(

        address src,

        address dst,

        uint256 wad

    ) external returns (bool);

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\L1BridgeZap.sol
File type: .sol
/**

 *Submitted for verification at Etherscan.io on 2021-11-24

*/



// Sources flattened with hardhat v2.6.8 https://hardhat.org



// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.1



// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Interface of the ERC20 standard as defined in the EIP.

 */

interface IERC20 {

    /**

     * @dev Returns the amount of tokens in existence.

     */

    function totalSupply() external view returns (uint256);



    /**

     * @dev Returns the amount of tokens owned by `account`.

     */

    function balanceOf(address account) external view returns (uint256);



    /**

     * @dev Moves `amount` tokens from the caller's account to `recipient`.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * Emits a {Transfer} event.

     */

    function transfer(address recipient, uint256 amount) external returns (bool);



    /**

     * @dev Returns the remaining number of tokens that `spender` will be

     * allowed to spend on behalf of `owner` through {transferFrom}. This is

     * zero by default.

     *

     * This value changes when {approve} or {transferFrom} are called.

     */

    function allowance(address owner, address spender) external view returns (uint256);



    /**

     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * IMPORTANT: Beware that changing an allowance with this method brings the risk

     * that someone may use both the old and the new allowance by unfortunate

     * transaction ordering. One possible solution to mitigate this race

     * condition is to first reduce the spender's allowance to 0 and set the

     * desired value afterwards:

     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729

     *

     * Emits an {Approval} event.

     */

    function approve(address spender, uint256 amount) external returns (bool);



    /**

     * @dev Moves `amount` tokens from `sender` to `recipient` using the

     * allowance mechanism. `amount` is then deducted from the caller's

     * allowance.

     *

     * Returns a boolean value indicating whether the operation succeeded.

     *

     * Emits a {Transfer} event.

     */

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);



    /**

     * @dev Emitted when `value` tokens are moved from one account (`from`) to

     * another (`to`).

     *

     * Note that `value` may be zero.

     */

    event Transfer(address indexed from, address indexed to, uint256 value);



    /**

     * @dev Emitted when the allowance of a `spender` for an `owner` is set by

     * a call to {approve}. `value` is the new allowance.

     */

    event Approval(address indexed owner, address indexed spender, uint256 value);

}





// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1







pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Wrappers over Solidity's arithmetic operations with added overflow

 * checks.

 *

 * Arithmetic operations in Solidity wrap on overflow. This can easily result

 * in bugs, because programmers usually assume that an overflow raises an

 * error, which is the standard behavior in high level programming languages.

 * `SafeMath` restores this intuition by reverting the transaction when an

 * operation overflows.

 *

 * Using this library instead of the unchecked operations eliminates an entire

 * class of bugs, so it's recommended to use it always.

 */

library SafeMath {

    /**

     * @dev Returns the addition of two unsigned integers, with an overflow flag.

     *

     * _Available since v3.4._

     */

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        uint256 c = a + b;

        if (c < a) return (false, 0);

        return (true, c);

    }



    /**

     * @dev Returns the substraction of two unsigned integers, with an overflow flag.

     *

     * _Available since v3.4._

     */

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        if (b > a) return (false, 0);

        return (true, a - b);

    }



    /**

     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.

     *

     * _Available since v3.4._

     */

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the

        // benefit is lost if 'b' is also tested.

        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522

        if (a == 0) return (true, 0);

        uint256 c = a * b;

        if (c / a != b) return (false, 0);

        return (true, c);

    }



    /**

     * @dev Returns the division of two unsigned integers, with a division by zero flag.

     *

     * _Available since v3.4._

     */

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        if (b == 0) return (false, 0);

        return (true, a / b);

    }



    /**

     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.

     *

     * _Available since v3.4._

     */

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        if (b == 0) return (false, 0);

        return (true, a % b);

    }



    /**

     * @dev Returns the addition of two unsigned integers, reverting on

     * overflow.

     *

     * Counterpart to Solidity's `+` operator.

     *

     * Requirements:

     *

     * - Addition cannot overflow.

     */

    function add(uint256 a, uint256 b) internal pure returns (uint256) {

        uint256 c = a + b;

        require(c >= a, "SafeMath: addition overflow");

        return c;

    }



    /**

     * @dev Returns the subtraction of two unsigned integers, reverting on

     * overflow (when the result is negative).

     *

     * Counterpart to Solidity's `-` operator.

     *

     * Requirements:

     *

     * - Subtraction cannot overflow.

     */

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b <= a, "SafeMath: subtraction overflow");

        return a - b;

    }



    /**

     * @dev Returns the multiplication of two unsigned integers, reverting on

     * overflow.

     *

     * Counterpart to Solidity's `*` operator.

     *

     * Requirements:

     *

     * - Multiplication cannot overflow.

     */

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a == 0) return 0;

        uint256 c = a * b;

        require(c / a == b, "SafeMath: multiplication overflow");

        return c;

    }



    /**

     * @dev Returns the integer division of two unsigned integers, reverting on

     * division by zero. The result is rounded towards zero.

     *

     * Counterpart to Solidity's `/` operator. Note: this function uses a

     * `revert` opcode (which leaves remaining gas untouched) while Solidity

     * uses an invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b > 0, "SafeMath: division by zero");

        return a / b;

    }



    /**

     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),

     * reverting when dividing by zero.

     *

     * Counterpart to Solidity's `%` operator. This function uses a `revert`

     * opcode (which leaves remaining gas untouched) while Solidity uses an

     * invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b > 0, "SafeMath: modulo by zero");

        return a % b;

    }



    /**

     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on

     * overflow (when the result is negative).

     *

     * CAUTION: This function is deprecated because it requires allocating memory for the error

     * message unnecessarily. For custom revert reasons use {trySub}.

     *

     * Counterpart to Solidity's `-` operator.

     *

     * Requirements:

     *

     * - Subtraction cannot overflow.

     */

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b <= a, errorMessage);

        return a - b;

    }



    /**

     * @dev Returns the integer division of two unsigned integers, reverting with custom message on

     * division by zero. The result is rounded towards zero.

     *

     * CAUTION: This function is deprecated because it requires allocating memory for the error

     * message unnecessarily. For custom revert reasons use {tryDiv}.

     *

     * Counterpart to Solidity's `/` operator. Note: this function uses a

     * `revert` opcode (which leaves remaining gas untouched) while Solidity

     * uses an invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b > 0, errorMessage);

        return a / b;

    }



    /**

     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),

     * reverting with custom message when dividing by zero.

     *

     * CAUTION: This function is deprecated because it requires allocating memory for the error

     * message unnecessarily. For custom revert reasons use {tryMod}.

     *

     * Counterpart to Solidity's `%` operator. This function uses a `revert`

     * opcode (which leaves remaining gas untouched) while Solidity uses an

     * invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b > 0, errorMessage);

        return a % b;

    }

}





// File @openzeppelin/contracts/utils/Address.sol@v3.4.1







pragma solidity >=0.6.2 <0.8.0;



/**

 * @dev Collection of functions related to the address type

 */

library Address {

    /**

     * @dev Returns true if `account` is a contract.

     *

     * [IMPORTANT]

     * ====

     * It is unsafe to assume that an address for which this function returns

     * false is an externally-owned account (EOA) and not a contract.

     *

     * Among others, `isContract` will return false for the following

     * types of addresses:

     *

     *  - an externally-owned account

     *  - a contract in construction

     *  - an address where a contract will be created

     *  - an address where a contract lived, but was destroyed

     * ====

     */

    function isContract(address account) internal view returns (bool) {

        // This method relies on extcodesize, which returns 0 for contracts in

        // construction, since the code is only stored at the end of the

        // constructor execution.



        uint256 size;

        // solhint-disable-next-line no-inline-assembly

        assembly { size := extcodesize(account) }

        return size > 0;

    }



    /**

     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to

     * `recipient`, forwarding all available gas and reverting on errors.

     *

     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost

     * of certain opcodes, possibly making contracts go over the 2300 gas limit

     * imposed by `transfer`, making them unable to receive funds via

     * `transfer`. {sendValue} removes this limitation.

     *

     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].

     *

     * IMPORTANT: because control is transferred to `recipient`, care must be

     * taken to not create reentrancy vulnerabilities. Consider using

     * {ReentrancyGuard} or the

     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].

     */

    function sendValue(address payable recipient, uint256 amount) internal {

        require(address(this).balance >= amount, "Address: insufficient balance");



        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value

        (bool success, ) = recipient.call{ value: amount }("");

        require(success, "Address: unable to send value, recipient may have reverted");

    }



    /**

     * @dev Performs a Solidity function call using a low level `call`. A

     * plain`call` is an unsafe replacement for a function call: use this

     * function instead.

     *

     * If `target` reverts with a revert reason, it is bubbled up by this

     * function (like regular Solidity function calls).

     *

     * Returns the raw returned data. To convert to the expected return value,

     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].

     *

     * Requirements:

     *

     * - `target` must be a contract.

     * - calling `target` with `data` must not revert.

     *

     * _Available since v3.1._

     */

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {

      return functionCall(target, data, "Address: low-level call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with

     * `errorMessage` as a fallback revert reason when `target` reverts.

     *

     * _Available since v3.1._

     */

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        return functionCallWithValue(target, data, 0, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but also transferring `value` wei to `target`.

     *

     * Requirements:

     *

     * - the calling contract must have an ETH balance of at least `value`.

     * - the called Solidity function must be `payable`.

     *

     * _Available since v3.1._

     */

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {

        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");

    }



    /**

     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but

     * with `errorMessage` as a fallback revert reason when `target` reverts.

     *

     * _Available since v3.1._

     */

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {

        require(address(this).balance >= value, "Address: insufficient balance for call");

        require(isContract(target), "Address: call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.call{ value: value }(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but performing a static call.

     *

     * _Available since v3.3._

     */

    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {

        return functionStaticCall(target, data, "Address: low-level static call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],

     * but performing a static call.

     *

     * _Available since v3.3._

     */

    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {

        require(isContract(target), "Address: static call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.staticcall(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],

     * but performing a delegate call.

     *

     * _Available since v3.4._

     */

    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {

        return functionDelegateCall(target, data, "Address: low-level delegate call failed");

    }



    /**

     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],

     * but performing a delegate call.

     *

     * _Available since v3.4._

     */

    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        require(isContract(target), "Address: delegate call to non-contract");



        // solhint-disable-next-line avoid-low-level-calls

        (bool success, bytes memory returndata) = target.delegatecall(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {

        if (success) {

            return returndata;

        } else {

            // Look for revert reason and bubble it up if present

            if (returndata.length > 0) {

                // The easiest way to bubble the revert reason is using memory via assembly



                // solhint-disable-next-line no-inline-assembly

                assembly {

                    let returndata_size := mload(returndata)

                    revert(add(32, returndata), returndata_size)

                }

            } else {

                revert(errorMessage);

            }

        }

    }

}





// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.1







pragma solidity >=0.6.0 <0.8.0;







/**

 * @title SafeERC20

 * @dev Wrappers around ERC20 operations that throw on failure (when the token

 * contract returns false). Tokens that return no value (and instead revert or

 * throw on failure) are also supported, non-reverting calls are assumed to be

 * successful.

 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,

 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.

 */

library SafeERC20 {

    using SafeMath for uint256;

    using Address for address;



    function safeTransfer(IERC20 token, address to, uint256 value) internal {

        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));

    }



    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {

        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));

    }



    /**

     * @dev Deprecated. This function has issues similar to the ones found in

     * {IERC20-approve}, and its usage is discouraged.

     *

     * Whenever possible, use {safeIncreaseAllowance} and

     * {safeDecreaseAllowance} instead.

     */

    function safeApprove(IERC20 token, address spender, uint256 value) internal {

        // safeApprove should only be called when setting an initial allowance,

        // or when resetting it to zero. To increase and decrease it, use

        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'

        // solhint-disable-next-line max-line-length

        require((value == 0) || (token.allowance(address(this), spender) == 0),

            "SafeERC20: approve from non-zero to non-zero allowance"

        );

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));

    }



    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {

        uint256 newAllowance = token.allowance(address(this), spender).add(value);

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

    }



    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {

        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

    }



    /**

     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement

     * on the return value: the return value is optional (but if data is returned, it must not be false).

     * @param token The token targeted by the call.

     * @param data The call data (encoded using abi.encode or one of its variants).

     */

    function _callOptionalReturn(IERC20 token, bytes memory data) private {

        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that

        // the target address contains contract code and also asserts for success in the low-level call.



        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional

            // solhint-disable-next-line max-line-length

            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");

        }

    }

}





// File @openzeppelin/contracts/utils/Context.sol@v3.4.1







pragma solidity >=0.6.0 <0.8.0;



/*

 * @dev Provides information about the current execution context, including the

 * sender of the transaction and its data. While these are generally available

 * via msg.sender and msg.data, they should not be accessed in such a direct

 * manner, since when dealing with GSN meta-transactions the account sending and

 * paying for execution may not be the actual sender (as far as an application

 * is concerned).

 *

 * This contract is only required for intermediate, library-like contracts.

 */

abstract contract Context {

    function _msgSender() internal view virtual returns (address payable) {

        return msg.sender;

    }



    function _msgData() internal view virtual returns (bytes memory) {

        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691

        return msg.data;

    }

}





// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v3.4.1







pragma solidity >=0.6.0 <0.8.0;







/**

 * @dev Implementation of the {IERC20} interface.

 *

 * This implementation is agnostic to the way tokens are created. This means

 * that a supply mechanism has to be added in a derived contract using {_mint}.

 * For a generic mechanism see {ERC20PresetMinterPauser}.

 *

 * TIP: For a detailed writeup see our guide

 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How

 * to implement supply mechanisms].

 *

 * We have followed general OpenZeppelin guidelines: functions revert instead

 * of returning `false` on failure. This behavior is nonetheless conventional

 * and does not conflict with the expectations of ERC20 applications.

 *

 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.

 * This allows applications to reconstruct the allowance for all accounts just

 * by listening to said events. Other implementations of the EIP may not emit

 * these events, as it isn't required by the specification.

 *

 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}

 * functions have been added to mitigate the well-known issues around setting

 * allowances. See {IERC20-approve}.

 */

contract ERC20 is Context, IERC20 {

    using SafeMath for uint256;



    mapping (address => uint256) private _balances;



    mapping (address => mapping (address => uint256)) private _allowances;



    uint256 private _totalSupply;



    string private _name;

    string private _symbol;

    uint8 private _decimals;



    /**

     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with

     * a default value of 18.

     *

     * To select a different value for {decimals}, use {_setupDecimals}.

     *

     * All three of these values are immutable: they can only be set once during

     * construction.

     */

    constructor (string memory name_, string memory symbol_) public {

        _name = name_;

        _symbol = symbol_;

        _decimals = 18;

    }



    /**

     * @dev Returns the name of the token.

     */

    function name() public view virtual returns (string memory) {

        return _name;

    }



    /**

     * @dev Returns the symbol of the token, usually a shorter version of the

     * name.

     */

    function symbol() public view virtual returns (string memory) {

        return _symbol;

    }



    /**

     * @dev Returns the number of decimals used to get its user representation.

     * For example, if `decimals` equals `2`, a balance of `505` tokens should

     * be displayed to a user as `5,05` (`505 / 10 ** 2`).

     *

     * Tokens usually opt for a value of 18, imitating the relationship between

     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is

     * called.

     *

     * NOTE: This information is only used for _display_ purposes: it in

     * no way affects any of the arithmetic of the contract, including

     * {IERC20-balanceOf} and {IERC20-transfer}.

     */

    function decimals() public view virtual returns (uint8) {

        return _decimals;

    }



    /**

     * @dev See {IERC20-totalSupply}.

     */

    function totalSupply() public view virtual override returns (uint256) {

        return _totalSupply;

    }



    /**

     * @dev See {IERC20-balanceOf}.

     */

    function balanceOf(address account) public view virtual override returns (uint256) {

        return _balances[account];

    }



    /**

     * @dev See {IERC20-transfer}.

     *

     * Requirements:

     *

     * - `recipient` cannot be the zero address.

     * - the caller must have a balance of at least `amount`.

     */

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {

        _transfer(_msgSender(), recipient, amount);

        return true;

    }



    /**

     * @dev See {IERC20-allowance}.

     */

    function allowance(address owner, address spender) public view virtual override returns (uint256) {

        return _allowances[owner][spender];

    }



    /**

     * @dev See {IERC20-approve}.

     *

     * Requirements:

     *

     * - `spender` cannot be the zero address.

     */

    function approve(address spender, uint256 amount) public virtual override returns (bool) {

        _approve(_msgSender(), spender, amount);

        return true;

    }



    /**

     * @dev See {IERC20-transferFrom}.

     *

     * Emits an {Approval} event indicating the updated allowance. This is not

     * required by the EIP. See the note at the beginning of {ERC20}.

     *

     * Requirements:

     *

     * - `sender` and `recipient` cannot be the zero address.

     * - `sender` must have a balance of at least `amount`.

     * - the caller must have allowance for ``sender``'s tokens of at least

     * `amount`.

     */

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {

        _transfer(sender, recipient, amount);

        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));

        return true;

    }



    /**

     * @dev Atomically increases the allowance granted to `spender` by the caller.

     *

     * This is an alternative to {approve} that can be used as a mitigation for

     * problems described in {IERC20-approve}.

     *

     * Emits an {Approval} event indicating the updated allowance.

     *

     * Requirements:

     *

     * - `spender` cannot be the zero address.

     */

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {

        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

        return true;

    }



    /**

     * @dev Atomically decreases the allowance granted to `spender` by the caller.

     *

     * This is an alternative to {approve} that can be used as a mitigation for

     * problems described in {IERC20-approve}.

     *

     * Emits an {Approval} event indicating the updated allowance.

     *

     * Requirements:

     *

     * - `spender` cannot be the zero address.

     * - `spender` must have allowance for the caller of at least

     * `subtractedValue`.

     */

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {

        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

        return true;

    }



    /**

     * @dev Moves tokens `amount` from `sender` to `recipient`.

     *

     * This is internal function is equivalent to {transfer}, and can be used to

     * e.g. implement automatic token fees, slashing mechanisms, etc.

     *

     * Emits a {Transfer} event.

     *

     * Requirements:

     *

     * - `sender` cannot be the zero address.

     * - `recipient` cannot be the zero address.

     * - `sender` must have a balance of at least `amount`.

     */

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {

        require(sender != address(0), "ERC20: transfer from the zero address");

        require(recipient != address(0), "ERC20: transfer to the zero address");



        _beforeTokenTransfer(sender, recipient, amount);



        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");

        _balances[recipient] = _balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);

    }



    /** @dev Creates `amount` tokens and assigns them to `account`, increasing

     * the total supply.

     *

     * Emits a {Transfer} event with `from` set to the zero address.

     *

     * Requirements:

     *

     * - `to` cannot be the zero address.

     */

    function _mint(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: mint to the zero address");



        _beforeTokenTransfer(address(0), account, amount);



        _totalSupply = _totalSupply.add(amount);

        _balances[account] = _balances[account].add(amount);

        emit Transfer(address(0), account, amount);

    }



    /**

     * @dev Destroys `amount` tokens from `account`, reducing the

     * total supply.

     *

     * Emits a {Transfer} event with `to` set to the zero address.

     *

     * Requirements:

     *

     * - `account` cannot be the zero address.

     * - `account` must have at least `amount` tokens.

     */

    function _burn(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: burn from the zero address");



        _beforeTokenTransfer(account, address(0), amount);



        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");

        _totalSupply = _totalSupply.sub(amount);

        emit Transfer(account, address(0), amount);

    }



    /**

     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.

     *

     * This internal function is equivalent to `approve`, and can be used to

     * e.g. set automatic allowances for certain subsystems, etc.

     *

     * Emits an {Approval} event.

     *

     * Requirements:

     *

     * - `owner` cannot be the zero address.

     * - `spender` cannot be the zero address.

     */

    function _approve(address owner, address spender, uint256 amount) internal virtual {

        require(owner != address(0), "ERC20: approve from the zero address");

        require(spender != address(0), "ERC20: approve to the zero address");



        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);

    }



    /**

     * @dev Sets {decimals} to a value other than the default one of 18.

     *

     * WARNING: This function should only be called from the constructor. Most

     * applications that interact with token contracts will not expect

     * {decimals} to ever change, and may work incorrectly if it does.

     */

    function _setupDecimals(uint8 decimals_) internal virtual {

        _decimals = decimals_;

    }



    /**

     * @dev Hook that is called before any transfer of tokens. This includes

     * minting and burning.

     *

     * Calling conditions:

     *

     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens

     * will be to transferred to `to`.

     * - when `from` is zero, `amount` tokens will be minted for `to`.

     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.

     * - `from` and `to` are never both zero.

     *

     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].

     */

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }

}





// File contracts/bridge/interfaces/ISwap.sol







pragma solidity 0.6.12;



interface ISwap {

  // pool data view functions

  function getA() external view returns (uint256);



  function getToken(uint8 index) external view returns (IERC20);



  function getTokenIndex(address tokenAddress) external view returns (uint8);



  function getTokenBalance(uint8 index) external view returns (uint256);



  function getVirtualPrice() external view returns (uint256);



  // min return calculation functions

  function calculateSwap(

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 dx

  ) external view returns (uint256);



  function calculateTokenAmount(uint256[] calldata amounts, bool deposit)

    external

    view

    returns (uint256);



  function calculateRemoveLiquidity(uint256 amount)

    external

    view

    returns (uint256[] memory);



  function calculateRemoveLiquidityOneToken(

    uint256 tokenAmount,

    uint8 tokenIndex

  ) external view returns (uint256 availableTokenAmount);



  // state modifying functions

  function initialize(

    IERC20[] memory pooledTokens,

    uint8[] memory decimals,

    string memory lpTokenName,

    string memory lpTokenSymbol,

    uint256 a,

    uint256 fee,

    uint256 adminFee,

    address lpTokenTargetAddress

  ) external;



  function swap(

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 dx,

    uint256 minDy,

    uint256 deadline

  ) external returns (uint256);



  function addLiquidity(

    uint256[] calldata amounts,

    uint256 minToMint,

    uint256 deadline

  ) external returns (uint256);



  function removeLiquidity(

    uint256 amount,

    uint256[] calldata minAmounts,

    uint256 deadline

  ) external returns (uint256[] memory);



  function removeLiquidityOneToken(

    uint256 tokenAmount,

    uint8 tokenIndex,

    uint256 minAmount,

    uint256 deadline

  ) external returns (uint256);



  function removeLiquidityImbalance(

    uint256[] calldata amounts,

    uint256 maxBurnAmount,

    uint256 deadline

  ) external returns (uint256);

}





// File @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol@v3.4.1







pragma solidity >=0.6.0 <0.8.0;





/**

 * @dev Extension of {ERC20} that allows token holders to destroy both their own

 * tokens and those that they have an allowance for, in a way that can be

 * recognized off-chain (via event analysis).

 */

abstract contract ERC20Burnable is Context, ERC20 {

    using SafeMath for uint256;



    /**

     * @dev Destroys `amount` tokens from the caller.

     *

     * See {ERC20-_burn}.

     */

    function burn(uint256 amount) public virtual {

        _burn(_msgSender(), amount);

    }



    /**

     * @dev Destroys `amount` tokens from `account`, deducting from the caller's

     * allowance.

     *

     * See {ERC20-_burn} and {ERC20-allowance}.

     *

     * Requirements:

     *

     * - the caller must have allowance for ``accounts``'s tokens of at least

     * `amount`.

     */

    function burnFrom(address account, uint256 amount) public virtual {

        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");



        _approve(account, _msgSender(), decreasedAllowance);

        _burn(account, amount);

    }

}





// File contracts/bridge/interfaces/ISynapseBridge.sol







pragma solidity 0.6.12;





interface ISynapseBridge {

  using SafeERC20 for IERC20;



  function deposit(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount

  ) external;



  function depositAndSwap(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

  ) external;



  function redeem(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount

  ) external;



  function redeemAndSwap(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

  ) external;



  function redeemAndRemove(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 liqTokenIndex,

    uint256 liqMinAmount,

    uint256 liqDeadline

  ) external;

}





// File contracts/bridge/interfaces/IWETH9.sol







pragma solidity >=0.4.0;



interface IWETH9 {

    function name() external view returns (string memory);



    function symbol() external view returns (string memory);



    function decimals() external view returns (uint8);



    function balanceOf(address) external view returns (uint256);



    function allowance(address, address) external view returns (uint256);



    receive() external payable;



    function deposit() external payable;



    function withdraw(uint256 wad) external;



    function totalSupply() external view returns (uint256);



    function approve(address guy, uint256 wad) external returns (bool);



    function transfer(address dst, uint256 wad) external returns (bool);



    function transferFrom(

        address src,

        address dst,

        uint256 wad

    ) external returns (bool);

}





// File contracts/bridge/wrappers/L1BridgeZap.sol





pragma solidity 0.6.12;











/**

 * @title L1BridgeZap

 * @notice This contract is responsible for handling user Zaps into the SynapseBridge contract, through the Synapse Swap contracts. It does so

 * It does so by combining the action of addLiquidity() to the base swap pool, and then calling either deposit() or depositAndSwap() on the bridge.

 * This is done in hopes of automating portions of the bridge user experience to users, while keeping the SynapseBridge contract logic small.

 *

 * @dev This contract should be deployed with a base Swap.sol address and a SynapseBridge.sol address, otherwise, it will not function.

 */

contract L1BridgeZap {

  using SafeERC20 for IERC20;



  uint256 constant MAX_UINT256 = 2**256 - 1;

  

  ISwap baseSwap;

  ISynapseBridge synapseBridge;

  IERC20[] public baseTokens;

  address payable public immutable WETH_ADDRESS;

  



  /**

   * @notice Constructs the contract, approves each token inside of baseSwap to be used by baseSwap (needed for addLiquidity())

   */

  constructor(address payable _wethAddress, ISwap _baseSwap, ISynapseBridge _synapseBridge) public {

    WETH_ADDRESS = _wethAddress;

    baseSwap = _baseSwap;

    synapseBridge = _synapseBridge;

    IERC20(_wethAddress).safeIncreaseAllowance(address(_synapseBridge), MAX_UINT256);

    {

      uint8 i;

      for (; i < 32; i++) {

        try _baseSwap.getToken(i) returns (IERC20 token) {

          baseTokens.push(token);

          token.safeIncreaseAllowance(address(_baseSwap), MAX_UINT256);

        } catch {

          break;

        }

      }

      require(i > 1, 'baseSwap must have at least 2 tokens');

    }

  }

  

  /**

   * @notice Wraps SynapseBridge deposit() function to make it compatible w/ ETH -> WETH conversions

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   **/

  function depositETH(

    address to,

    uint256 chainId,

    uint256 amount

    ) external payable {

      require(msg.value > 0 && msg.value == amount, 'INCORRECT MSG VALUE');

      IWETH9(WETH_ADDRESS).deposit{value: msg.value}();

      synapseBridge.deposit(to, chainId, IERC20(WETH_ADDRESS), amount);

    }



  /**

   * @notice Wraps SynapseBridge depositAndSwap() function to make it compatible w/ ETH -> WETH conversions

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   * @param tokenIndexFrom the token the user wants to swap from

   * @param tokenIndexTo the token the user wants to swap to

   * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.

   * @param deadline latest timestamp to accept this transaction

   **/

  function depositETHAndSwap(

    address to,

    uint256 chainId,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

    ) external payable {

      require(msg.value > 0 && msg.value == amount, 'INCORRECT MSG VALUE');

      IWETH9(WETH_ADDRESS).deposit{value: msg.value}();

      synapseBridge.depositAndSwap(to, chainId, IERC20(WETH_ADDRESS), amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);

    }





  /**

   * @notice A simple method to calculate prices from deposits or

   * withdrawals, excluding fees but including slippage. This is

   * helpful as an input into the various "min" parameters on calls

   * to fight front-running

   *

   * @dev This shouldn't be used outside frontends for user estimates.

   *

   * @param amounts an array of token amounts to deposit or withdrawal,

   * corresponding to pooledTokens. The amount should be in each

   * pooled token's native precision.

   * @param deposit whether this is a deposit or a withdrawal

   * @return token amount the user will receive

   */

  function calculateTokenAmount(uint256[] calldata amounts, bool deposit)

    external

    view

    virtual

    returns (uint256)

  {

    return baseSwap.calculateTokenAmount(amounts, deposit);

  }



      /**

     * @notice Calculate the amount of underlying token available to withdraw

     * when withdrawing via only single token

     * @param tokenAmount the amount of LP token to burn

     * @param tokenIndex index of which token will be withdrawn

     * @return availableTokenAmount calculated amount of underlying token

     * available to withdraw

     */

    function calculateRemoveLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex

    ) external view virtual returns (uint256 availableTokenAmount) {

        return baseSwap.calculateRemoveLiquidityOneToken(tokenAmount, tokenIndex);

    }





  /**

   * @notice Combines adding liquidity to the given Swap, and calls deposit() on the bridge using that LP token

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param liquidityAmounts the amounts of each token to add, in their native precision

   * @param minToMint the minimum LP tokens adding this amount of liquidity

   * should mint, otherwise revert. Handy for front-running mitigation

   * @param deadline latest timestamp to accept this transaction

   **/

  function zapAndDeposit(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256[] calldata liquidityAmounts,

    uint256 minToMint,

    uint256 deadline

  ) external {

    // add liquidity

    for (uint256 i = 0; i < baseTokens.length; i++) {

      if (liquidityAmounts[i] != 0) {

        baseTokens[i].safeTransferFrom(

          msg.sender,

          address(this),

          liquidityAmounts[i]

        );

      }

    }



    uint256 liqAdded = baseSwap.addLiquidity(

      liquidityAmounts,

      minToMint,

      deadline

    );

    // deposit into bridge, gets nUSD

    if (token.allowance(address(this), address(synapseBridge)) < liqAdded) {

      token.safeApprove(address(synapseBridge), MAX_UINT256);

    }

    synapseBridge.deposit(to, chainId, token, liqAdded);

  }



  /**

   * @notice Combines adding liquidity to the given Swap, and calls depositAndSwap() on the bridge using that LP token

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param liquidityAmounts the amounts of each token to add, in their native precision

   * @param minToMint the minimum LP tokens adding this amount of liquidity

   * should mint, otherwise revert. Handy for front-running mitigation

   * @param liqDeadline latest timestamp to accept this transaction

   * @param tokenIndexFrom the token the user wants to swap from

   * @param tokenIndexTo the token the user wants to swap to

   * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.

   * @param swapDeadline latest timestamp to accept this transaction

   **/

  function zapAndDepositAndSwap(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256[] calldata liquidityAmounts,

    uint256 minToMint,

    uint256 liqDeadline,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 swapDeadline

  ) external {

    // add liquidity

    for (uint256 i = 0; i < baseTokens.length; i++) {

      if (liquidityAmounts[i] != 0) {

        baseTokens[i].safeTransferFrom(

          msg.sender,

          address(this),

          liquidityAmounts[i]

        );

      }

    }



    uint256 liqAdded = baseSwap.addLiquidity(

      liquidityAmounts,

      minToMint,

      liqDeadline

    );

    // deposit into bridge, bridge attemps to swap into desired asset

    if (token.allowance(address(this), address(synapseBridge)) < liqAdded) {

      token.safeApprove(address(synapseBridge), MAX_UINT256);

    }

    synapseBridge.depositAndSwap(

      to,

      chainId,

      token,

      liqAdded,

      tokenIndexFrom,

      tokenIndexTo,

      minDy,

      swapDeadline

    );

  }



    /**

   * @notice Wraps SynapseBridge deposit() function

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   **/

  function deposit(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount

    ) external {

      token.safeTransferFrom(msg.sender, address(this), amount);



      if (token.allowance(address(this), address(synapseBridge)) < amount) {

        token.safeApprove(address(synapseBridge), MAX_UINT256);

      }

      synapseBridge.deposit(to, chainId, token, amount);

  }

  

  /**

   * @notice Wraps SynapseBridge depositAndSwap() function

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   * @param tokenIndexFrom the token the user wants to swap from

   * @param tokenIndexTo the token the user wants to swap to

   * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.

   * @param deadline latest timestamp to accept this transaction

   **/

  function depositAndSwap(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

  ) external {

      token.safeTransferFrom(msg.sender, address(this), amount);

      

      if (token.allowance(address(this), address(synapseBridge)) < amount) {

        token.safeApprove(address(synapseBridge), MAX_UINT256);

      }

      synapseBridge.depositAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);

  }





    /**

   * @notice Wraps SynapseBridge redeem() function

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to redeem into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   **/

  function redeem(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount

    ) external {

      token.safeTransferFrom(msg.sender, address(this), amount);



      if (token.allowance(address(this), address(synapseBridge)) < amount) {

        token.safeApprove(address(synapseBridge), MAX_UINT256);

      }

      synapseBridge.redeem(to, chainId, token, amount);

  }

  

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\LPToken.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol";

import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

import "./interfaces/ISwap.sol";



/**

 * @title Liquidity Provider Token

 * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.

 * It is used to represent user's shares when providing liquidity to swap contracts.

 * @dev Only Swap contracts should initialize and own LPToken contracts.

 */

contract LPToken is ERC20BurnableUpgradeable, OwnableUpgradeable {

    using SafeMathUpgradeable for uint256;



    /**

     * @notice Initializes this LPToken contract with the given name and symbol

     * @dev The caller of this function will become the owner. A Swap contract should call this

     * in its initializer function.

     * @param name name of this token

     * @param symbol symbol of this token

     */

    function initialize(string memory name, string memory symbol)

        external

        initializer

        returns (bool)

    {

        __Context_init_unchained();

        __ERC20_init_unchained(name, symbol);

        __Ownable_init_unchained();

        return true;

    }



    /**

     * @notice Mints the given amount of LPToken to the recipient.

     * @dev only owner can call this mint function

     * @param recipient address of account to receive the tokens

     * @param amount amount of tokens to mint

     */

    function mint(address recipient, uint256 amount) external onlyOwner {

        require(amount != 0, "LPToken: cannot mint 0");

        _mint(recipient, amount);

    }



    /**

     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including

     * minting and burning. * This assumes the owner is set to a Swap contract's address.

     */

    function _beforeTokenTransfer(

        address from,

        address to,

        uint256 amount

    ) internal virtual override(ERC20Upgradeable) {

        super._beforeTokenTransfer(from, to, amount);

        require(to != address(this), "LPToken: cannot send to itself");

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\MathUtils.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts/math/SafeMath.sol";



/**

 * @title MathUtils library

 * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating

 * differences between two uint256.

 */

library MathUtils {

    /**

     * @notice Compares a and b and returns true if the difference between a and b

     *         is less than 1 or equal to each other.

     * @param a uint256 to compare with

     * @param b uint256 to compare with

     * @return True if the difference between a and b is less than 1 or equal,

     *         otherwise return false

     */

    function within1(uint256 a, uint256 b) internal pure returns (bool) {

        return (difference(a, b) <= 1);

    }



    /**

     * @notice Calculates absolute difference between a and b

     * @param a uint256 to compare with

     * @param b uint256 to compare with

     * @return Difference between a and b

     */

    function difference(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a > b) {

            return a - b;

        }

        return b - a;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\MetaSwap.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "../Swap.sol";

import "./MetaSwapUtils.sol";



/**

 * @title MetaSwap - A StableSwap implementation in solidity.

 * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)

 * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens

 * in desired ratios for an exchange of the pool token that represents their share of the pool.

 * Users can burn pool tokens and withdraw their share of token(s).

 *

 * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets

 * distributed to the LPs.

 *

 * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which

 * stops the ratio of the tokens in the pool from changing.

 * Users can always withdraw their tokens via multi-asset withdraws.

 *

 * MetaSwap is a modified version of Swap that allows Swap's LP token to be utilized in pooling with other tokens.

 * As an example, if there is a Swap pool consisting of [DAI, USDC, USDT], then a MetaSwap pool can be created

 * with [sUSD, BaseSwapLPToken] to allow trades between either the LP token or the underlying tokens and sUSD.

 * Note that when interacting with MetaSwap, users cannot deposit or withdraw via underlying tokens. In that case,

 * `MetaSwapDeposit.sol` can be additionally deployed to allow interacting with unwrapped representations of the tokens.

 *

 * @dev Most of the logic is stored as a library `MetaSwapUtils` for the sake of reducing contract's

 * deployment size.

 */

contract MetaSwap is Swap {

    using MetaSwapUtils for SwapUtils.Swap;



    MetaSwapUtils.MetaSwap public metaSwapStorage;



    uint256 constant MAX_UINT256 = 2**256 - 1;



    /*** EVENTS ***/



    // events replicated from SwapUtils to make the ABI easier for dumb

    // clients

    event TokenSwapUnderlying(

        address indexed buyer,

        uint256 tokensSold,

        uint256 tokensBought,

        uint128 soldId,

        uint128 boughtId

    );



    /**

     * @notice Get the virtual price, to help calculate profit

     * @return the virtual price, scaled to the POOL_PRECISION_DECIMALS

     */

    function getVirtualPrice()

        external

        view

        virtual

        override

        returns (uint256)

    {

        return MetaSwapUtils.getVirtualPrice(swapStorage, metaSwapStorage);

    }



    /**

     * @notice Calculate amount of tokens you receive on swap

     * @param tokenIndexFrom the token the user wants to sell

     * @param tokenIndexTo the token the user wants to buy

     * @param dx the amount of tokens the user wants to sell. If the token charges

     * a fee on transfers, use the amount that gets transferred after the fee.

     * @return amount of tokens the user will receive

     */

    function calculateSwap(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx

    ) external view virtual override returns (uint256) {

        return

            MetaSwapUtils.calculateSwap(

                swapStorage,

                metaSwapStorage,

                tokenIndexFrom,

                tokenIndexTo,

                dx

            );

    }



    /**

     * @notice Calculate amount of tokens you receive on swap. For this function,

     * the token indices are flattened out so that underlying tokens are represented.

     * @param tokenIndexFrom the token the user wants to sell

     * @param tokenIndexTo the token the user wants to buy

     * @param dx the amount of tokens the user wants to sell. If the token charges

     * a fee on transfers, use the amount that gets transferred after the fee.

     * @return amount of tokens the user will receive

     */

    function calculateSwapUnderlying(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx

    ) external view virtual returns (uint256) {

        return

            MetaSwapUtils.calculateSwapUnderlying(

                swapStorage,

                metaSwapStorage,

                tokenIndexFrom,

                tokenIndexTo,

                dx

            );

    }



    /**

     * @notice A simple method to calculate prices from deposits or

     * withdrawals, excluding fees but including slippage. This is

     * helpful as an input into the various "min" parameters on calls

     * to fight front-running

     *

     * @dev This shouldn't be used outside frontends for user estimates.

     *

     * @param amounts an array of token amounts to deposit or withdrawal,

     * corresponding to pooledTokens. The amount should be in each

     * pooled token's native precision. If a token charges a fee on transfers,

     * use the amount that gets transferred after the fee.

     * @param deposit whether this is a deposit or a withdrawal

     * @return token amount the user will receive

     */

    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)

        external

        view

        virtual

        override

        returns (uint256)

    {

        return

            MetaSwapUtils.calculateTokenAmount(

                swapStorage,

                metaSwapStorage,

                amounts,

                deposit

            );

    }



    /**

     * @notice Calculate the amount of underlying token available to withdraw

     * when withdrawing via only single token

     * @param tokenAmount the amount of LP token to burn

     * @param tokenIndex index of which token will be withdrawn

     * @return availableTokenAmount calculated amount of underlying token

     * available to withdraw

     */

    function calculateRemoveLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex

    ) external view virtual override returns (uint256) {

        return

            MetaSwapUtils.calculateWithdrawOneToken(

                swapStorage,

                metaSwapStorage,

                tokenAmount,

                tokenIndex

            );

    }



    /*** STATE MODIFYING FUNCTIONS ***/



    /**

     * @notice This overrides Swap's initialize function to prevent initializing

     * without the address of the base Swap contract.

     *

     * @param _pooledTokens an array of ERC20s this pool will accept

     * @param decimals the decimals to use for each pooled token,

     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS

     * @param lpTokenName the long-form name of the token to be deployed

     * @param lpTokenSymbol the short symbol for the token to be deployed

     * @param _a the amplification coefficient * n * (n - 1). See the

     * StableSwap paper for details

     * @param _fee default swap fee to be initialized with

     * @param _adminFee default adminFee to be initialized with

     */

    function initialize(

        IERC20[] memory _pooledTokens,

        uint8[] memory decimals,

        string memory lpTokenName,

        string memory lpTokenSymbol,

        uint256 _a,

        uint256 _fee,

        uint256 _adminFee,

        address lpTokenTargetAddress

    ) public virtual override initializer {

        revert("use initializeMetaSwap() instead");

    }



    /**

     * @notice Initializes this MetaSwap contract with the given parameters.

     * MetaSwap uses an existing Swap pool to expand the available liquidity.

     * _pooledTokens array should contain the base Swap pool's LP token as

     * the last element. For example, if there is a Swap pool consisting of

     * [DAI, USDC, USDT]. Then a MetaSwap pool can be created with [sUSD, BaseSwapLPToken]

     * as _pooledTokens.

     *

     * This will also deploy the LPToken that represents users'

     * LP position. The owner of LPToken will be this contract - which means

     * only this contract is allowed to mint new tokens.

     *

     * @param _pooledTokens an array of ERC20s this pool will accept. The last

     * element must be an existing Swap pool's LP token's address.

     * @param decimals the decimals to use for each pooled token,

     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS

     * @param lpTokenName the long-form name of the token to be deployed

     * @param lpTokenSymbol the short symbol for the token to be deployed

     * @param _a the amplification coefficient * n * (n - 1). See the

     * StableSwap paper for details

     * @param _fee default swap fee to be initialized with

     * @param _adminFee default adminFee to be initialized with

     */

    function initializeMetaSwap(

        IERC20[] memory _pooledTokens,

        uint8[] memory decimals,

        string memory lpTokenName,

        string memory lpTokenSymbol,

        uint256 _a,

        uint256 _fee,

        uint256 _adminFee,

        address lpTokenTargetAddress,

        ISwap baseSwap

    ) external virtual initializer {

        Swap.initialize(

            _pooledTokens,

            decimals,

            lpTokenName,

            lpTokenSymbol,

            _a,

            _fee,

            _adminFee,

            lpTokenTargetAddress

        );



        // MetaSwap initializer

        metaSwapStorage.baseSwap = baseSwap;

        metaSwapStorage.baseVirtualPrice = baseSwap.getVirtualPrice();

        metaSwapStorage.baseCacheLastUpdated = block.timestamp;



        // Read all tokens that belong to baseSwap

        {

            uint8 i;

            for (; i < 32; i++) {

                try baseSwap.getToken(i) returns (IERC20 token) {

                    metaSwapStorage.baseTokens.push(token);

                    token.safeApprove(address(baseSwap), MAX_UINT256);

                } catch {

                    break;

                }

            }

            require(i > 1, "baseSwap must pool at least 2 tokens");

        }



        // Check the last element of _pooledTokens is owned by baseSwap

        IERC20 baseLPToken = _pooledTokens[_pooledTokens.length - 1];

        require(

            LPToken(address(baseLPToken)).owner() == address(baseSwap),

            "baseLPToken is not owned by baseSwap"

        );



        // Pre-approve the baseLPToken to be used by baseSwap

        baseLPToken.safeApprove(address(baseSwap), MAX_UINT256);

    }



    /**

     * @notice Swap two tokens using this pool

     * @param tokenIndexFrom the token the user wants to swap from

     * @param tokenIndexTo the token the user wants to swap to

     * @param dx the amount of tokens the user wants to swap from

     * @param minDy the min amount the user would like to receive, or revert.

     * @param deadline latest timestamp to accept this transaction

     */

    function swap(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 minDy,

        uint256 deadline

    )

        external

        virtual

        override

        nonReentrant

        whenNotPaused

        deadlineCheck(deadline)

        returns (uint256)

    {

        return

            MetaSwapUtils.swap(

                swapStorage,

                metaSwapStorage,

                tokenIndexFrom,

                tokenIndexTo,

                dx,

                minDy

            );

    }



    /**

     * @notice Swap two tokens using this pool and the base pool.

     * @param tokenIndexFrom the token the user wants to swap from

     * @param tokenIndexTo the token the user wants to swap to

     * @param dx the amount of tokens the user wants to swap from

     * @param minDy the min amount the user would like to receive, or revert.

     * @param deadline latest timestamp to accept this transaction

     */

    function swapUnderlying(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 minDy,

        uint256 deadline

    )

        external

        virtual

        nonReentrant

        whenNotPaused

        deadlineCheck(deadline)

        returns (uint256)

    {

        return

            MetaSwapUtils.swapUnderlying(

                swapStorage,

                metaSwapStorage,

                tokenIndexFrom,

                tokenIndexTo,

                dx,

                minDy

            );

    }



    /**

     * @notice Add liquidity to the pool with the given amounts of tokens

     * @param amounts the amounts of each token to add, in their native precision

     * @param minToMint the minimum LP tokens adding this amount of liquidity

     * should mint, otherwise revert. Handy for front-running mitigation

     * @param deadline latest timestamp to accept this transaction

     * @return amount of LP token user minted and received

     */

    function addLiquidity(

        uint256[] calldata amounts,

        uint256 minToMint,

        uint256 deadline

    )

        external

        virtual

        override

        nonReentrant

        whenNotPaused

        deadlineCheck(deadline)

        returns (uint256)

    {

        return

            MetaSwapUtils.addLiquidity(

                swapStorage,

                metaSwapStorage,

                amounts,

                minToMint

            );

    }



    /**

     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly

     * over period of 4 weeks since last deposit will apply.

     * @param tokenAmount the amount of the token you want to receive

     * @param tokenIndex the index of the token you want to receive

     * @param minAmount the minimum amount to withdraw, otherwise revert

     * @param deadline latest timestamp to accept this transaction

     * @return amount of chosen token user received

     */

    function removeLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex,

        uint256 minAmount,

        uint256 deadline

    )

        external

        virtual

        override

        nonReentrant

        whenNotPaused

        deadlineCheck(deadline)

        returns (uint256)

    {

        return

            MetaSwapUtils.removeLiquidityOneToken(

                swapStorage,

                metaSwapStorage,

                tokenAmount,

                tokenIndex,

                minAmount

            );

    }



    /**

     * @notice Remove liquidity from the pool, weighted differently than the

     * pool's current balances. Withdraw fee that decays linearly

     * over period of 4 weeks since last deposit will apply.

     * @param amounts how much of each token to withdraw

     * @param maxBurnAmount the max LP token provider is willing to pay to

     * remove liquidity. Useful as a front-running mitigation.

     * @param deadline latest timestamp to accept this transaction

     * @return amount of LP tokens burned

     */

    function removeLiquidityImbalance(

        uint256[] calldata amounts,

        uint256 maxBurnAmount,

        uint256 deadline

    )

        external

        virtual

        override

        nonReentrant

        whenNotPaused

        deadlineCheck(deadline)

        returns (uint256)

    {

        return

            MetaSwapUtils.removeLiquidityImbalance(

                swapStorage,

                metaSwapStorage,

                amounts,

                maxBurnAmount

            );

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\MetaSwapDeployer.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;

pragma experimental ABIEncoderV2;



import "@openzeppelin/contracts/access/Ownable.sol";

import "@openzeppelin/contracts/proxy/Clones.sol";

import "../interfaces/ISwap.sol";

import "../interfaces/IMetaSwap.sol";

import "../interfaces/IMetaSwapDeposit.sol";



/**

 * @title MetaSwapDeployer

 * @notice A library to be used to permissionlessly deploy Metapools.

 */



contract MetaSwapDeployer is Ownable {

    event NewMetaSwapPool(

        address indexed deployer,

        address metaSwapAddress,

        address metaSwapDepositAddress

    );



    struct MetaSwapPoolInfo {

        address metaSwapAddress;

        address metaSwapDepositAddress;

    }



    MetaSwapPoolInfo[] public metaSwapPoolInfo;

    address public metaSwapAddress;

    address public metaSwapDepositAddress;



    constructor(address _swapAddress, address _swapDepositAddress)

        public

        Ownable()

    {

        metaSwapAddress = _swapAddress;

        metaSwapDepositAddress = _swapDepositAddress;

    }



    function metaSwapPoolLength() external view returns (uint256) {

        return metaSwapPoolInfo.length;

    }



    function deploy(

        IERC20[] memory _pooledTokens,

        uint8[] memory decimals,

        string memory lpTokenName,

        string memory lpTokenSymbol,

        uint256 _a,

        uint256 _fee,

        uint256 _adminFee,

        address lpTokenTargetAddress,

        address baseSwap

    ) external returns (address) {

        address metaSwapClone = Clones.clone(metaSwapAddress);

        address metaSwapDepositClone = Clones.clone(metaSwapDepositAddress);

        IMetaSwap(metaSwapClone).initializeMetaSwap(

            _pooledTokens,

            decimals,

            lpTokenName,

            lpTokenSymbol,

            _a,

            _fee,

            _adminFee,

            lpTokenTargetAddress,

            baseSwap

        );

        (, , , , , , address lpToken) = IMetaSwap(metaSwapClone).swapStorage();



        IMetaSwapDeposit(metaSwapDepositClone).initialize(

            ISwap(baseSwap),

            IMetaSwap(metaSwapClone),

            IERC20(lpToken)

        );

        Ownable(metaSwapClone).transferOwnership(owner());

        metaSwapPoolInfo.push(

            MetaSwapPoolInfo({

                metaSwapAddress: metaSwapClone,

                metaSwapDepositAddress: metaSwapDepositClone

            })

        );

        emit NewMetaSwapPool(msg.sender, metaSwapClone, metaSwapDepositClone);

        return metaSwapClone;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\MetaSwapDeposit.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts/math/SafeMath.sol";

import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

import "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";

import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";

import "../LPToken.sol";

import "../interfaces/ISwap.sol";

import "../interfaces/IMetaSwap.sol";



/**

 * @title MetaSwapDeposit

 * @notice This contract flattens the LP token in a MetaSwap pool for easier user access. MetaSwap must be

 * deployed before this contract can be initialized successfully.

 *

 * For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT].

 * Then a MetaSwap pool can be created with [sUSD, BaseSwapLPToken] to allow trades between either

 * the LP token or the underlying tokens and sUSD.

 *

 * MetaSwapDeposit flattens the LP token and remaps them to a single array, allowing users

 * to ignore the dependency on BaseSwapLPToken. Using the above example, MetaSwapDeposit can act

 * as a Swap containing [sUSD, DAI, USDC, USDT] tokens.

 */

contract MetaSwapDeposit is Initializable, ReentrancyGuardUpgradeable {

    using SafeERC20 for IERC20;

    using SafeMath for uint256;



    ISwap public baseSwap;

    IMetaSwap public metaSwap;

    IERC20[] public baseTokens;

    IERC20[] public metaTokens;

    IERC20[] public tokens;

    IERC20 public metaLPToken;



    uint256 constant MAX_UINT256 = 2**256 - 1;



    struct RemoveLiquidityImbalanceInfo {

        ISwap baseSwap;

        IMetaSwap metaSwap;

        IERC20 metaLPToken;

        uint8 baseLPTokenIndex;

        bool withdrawFromBase;

        uint256 leftoverMetaLPTokenAmount;

    }



    /**

     * @notice Sets the address for the base Swap contract, MetaSwap contract, and the

     * MetaSwap LP token contract.

     * @param _baseSwap the address of the base Swap contract

     * @param _metaSwap the address of the MetaSwap contract

     * @param _metaLPToken the address of the MetaSwap LP token contract

     */

    function initialize(

        ISwap _baseSwap,

        IMetaSwap _metaSwap,

        IERC20 _metaLPToken

    ) external initializer {

        __ReentrancyGuard_init();

        // Check and approve base level tokens to be deposited to the base Swap contract

        {

            uint8 i;

            for (; i < 32; i++) {

                try _baseSwap.getToken(i) returns (IERC20 token) {

                    baseTokens.push(token);

                    token.safeApprove(address(_baseSwap), MAX_UINT256);

                    token.safeApprove(address(_metaSwap), MAX_UINT256);

                } catch {

                    break;

                }

            }

            require(i > 1, "baseSwap must have at least 2 tokens");

        }



        // Check and approve meta level tokens to be deposited to the MetaSwap contract

        IERC20 baseLPToken;

        {

            uint8 i;

            for (; i < 32; i++) {

                try _metaSwap.getToken(i) returns (IERC20 token) {

                    baseLPToken = token;

                    metaTokens.push(token);

                    tokens.push(token);

                    token.safeApprove(address(_metaSwap), MAX_UINT256);

                } catch {

                    break;

                }

            }

            require(i > 1, "metaSwap must have at least 2 tokens");

        }



        // Flatten baseTokens and append it to tokens array

        tokens[tokens.length - 1] = baseTokens[0];

        for (uint8 i = 1; i < baseTokens.length; i++) {

            tokens.push(baseTokens[i]);

        }



        // Approve base Swap LP token to be burned by the base Swap contract for withdrawing

        baseLPToken.safeApprove(address(_baseSwap), MAX_UINT256);

        // Approve MetaSwap LP token to be burned by the MetaSwap contract for withdrawing

        _metaLPToken.safeApprove(address(_metaSwap), MAX_UINT256);



        // Initialize storage variables

        baseSwap = _baseSwap;

        metaSwap = _metaSwap;

        metaLPToken = _metaLPToken;

    }



    // Mutative functions



    /**

     * @notice Swap two underlying tokens using the meta pool and the base pool

     * @param tokenIndexFrom the token the user wants to swap from

     * @param tokenIndexTo the token the user wants to swap to

     * @param dx the amount of tokens the user wants to swap from

     * @param minDy the min amount the user would like to receive, or revert.

     * @param deadline latest timestamp to accept this transaction

     */

    function swap(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 minDy,

        uint256 deadline

    ) external nonReentrant returns (uint256) {

        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);

        uint256 tokenToAmount =

            metaSwap.swapUnderlying(

                tokenIndexFrom,

                tokenIndexTo,

                dx,

                minDy,

                deadline

            );

        tokens[tokenIndexTo].safeTransfer(msg.sender, tokenToAmount);

        return tokenToAmount;

    }



    /**

     * @notice Add liquidity to the pool with the given amounts of tokens

     * @param amounts the amounts of each token to add, in their native precision

     * @param minToMint the minimum LP tokens adding this amount of liquidity

     * should mint, otherwise revert. Handy for front-running mitigation

     * @param deadline latest timestamp to accept this transaction

     * @return amount of LP token user minted and received

     */

    function addLiquidity(

        uint256[] calldata amounts,

        uint256 minToMint,

        uint256 deadline

    ) external nonReentrant returns (uint256) {

        // Read to memory to save on gas

        IERC20[] memory memBaseTokens = baseTokens;

        IERC20[] memory memMetaTokens = metaTokens;

        uint256 baseLPTokenIndex = memMetaTokens.length - 1;



        require(amounts.length == memBaseTokens.length + baseLPTokenIndex);



        uint256 baseLPTokenAmount;

        {

            // Transfer base tokens from the caller and deposit to the base Swap pool

            uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);

            bool shouldDepositBaseTokens;

            for (uint8 i = 0; i < memBaseTokens.length; i++) {

                IERC20 token = memBaseTokens[i];

                uint256 depositAmount = amounts[baseLPTokenIndex + i];

                if (depositAmount > 0) {

                    token.safeTransferFrom(

                        msg.sender,

                        address(this),

                        depositAmount

                    );

                    baseAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer

                    // if there are any base Swap level tokens, flag it for deposits

                    shouldDepositBaseTokens = true;

                }

            }

            if (shouldDepositBaseTokens) {

                // Deposit any base Swap level tokens and receive baseLPToken

                baseLPTokenAmount = baseSwap.addLiquidity(

                    baseAmounts,

                    0,

                    deadline

                );

            }

        }



        uint256 metaLPTokenAmount;

        {

            // Transfer remaining meta level tokens from the caller

            uint256[] memory metaAmounts = new uint256[](metaTokens.length);

            for (uint8 i = 0; i < baseLPTokenIndex; i++) {

                IERC20 token = memMetaTokens[i];

                uint256 depositAmount = amounts[i];

                if (depositAmount > 0) {

                    token.safeTransferFrom(

                        msg.sender,

                        address(this),

                        depositAmount

                    );

                    metaAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer

                }

            }

            // Update the baseLPToken amount that will be deposited

            metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;



            // Deposit the meta level tokens and the baseLPToken

            metaLPTokenAmount = metaSwap.addLiquidity(

                metaAmounts,

                minToMint,

                deadline

            );

        }



        // Transfer the meta lp token to the caller

        metaLPToken.safeTransfer(msg.sender, metaLPTokenAmount);



        return metaLPTokenAmount;

    }



    /**

     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly

     * over period of 4 weeks since last deposit will apply.

     * @dev Liquidity can always be removed, even when the pool is paused.

     * @param amount the amount of LP tokens to burn

     * @param minAmounts the minimum amounts of each token in the pool

     *        acceptable for this burn. Useful as a front-running mitigation

     * @param deadline latest timestamp to accept this transaction

     * @return amounts of tokens user received

     */

    function removeLiquidity(

        uint256 amount,

        uint256[] calldata minAmounts,

        uint256 deadline

    ) external nonReentrant returns (uint256[] memory) {

        IERC20[] memory memBaseTokens = baseTokens;

        IERC20[] memory memMetaTokens = metaTokens;

        uint256[] memory totalRemovedAmounts;



        {

            uint256 numOfAllTokens =

                memBaseTokens.length + memMetaTokens.length - 1;

            require(minAmounts.length == numOfAllTokens, "out of range");

            totalRemovedAmounts = new uint256[](numOfAllTokens);

        }



        // Transfer meta lp token from the caller to this

        metaLPToken.safeTransferFrom(msg.sender, address(this), amount);



        uint256 baseLPTokenAmount;

        {

            // Remove liquidity from the MetaSwap pool

            uint256[] memory removedAmounts;

            uint256 baseLPTokenIndex = memMetaTokens.length - 1;

            {

                uint256[] memory metaMinAmounts =

                    new uint256[](memMetaTokens.length);

                for (uint8 i = 0; i < baseLPTokenIndex; i++) {

                    metaMinAmounts[i] = minAmounts[i];

                }

                removedAmounts = metaSwap.removeLiquidity(

                    amount,

                    metaMinAmounts,

                    deadline

                );

            }



            // Send the meta level tokens to the caller

            for (uint8 i = 0; i < baseLPTokenIndex; i++) {

                totalRemovedAmounts[i] = removedAmounts[i];

                memMetaTokens[i].safeTransfer(msg.sender, removedAmounts[i]);

            }

            baseLPTokenAmount = removedAmounts[baseLPTokenIndex];



            // Remove liquidity from the base Swap pool

            {

                uint256[] memory baseMinAmounts =

                    new uint256[](memBaseTokens.length);

                for (uint8 i = 0; i < baseLPTokenIndex; i++) {

                    baseMinAmounts[i] = minAmounts[baseLPTokenIndex + i];

                }

                removedAmounts = baseSwap.removeLiquidity(

                    baseLPTokenAmount,

                    baseMinAmounts,

                    deadline

                );

            }



            // Send the base level tokens to the caller

            for (uint8 i = 0; i < memBaseTokens.length; i++) {

                totalRemovedAmounts[baseLPTokenIndex + i] = removedAmounts[i];

                memBaseTokens[i].safeTransfer(msg.sender, removedAmounts[i]);

            }

        }



        return totalRemovedAmounts;

    }



    /**

     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly

     * over period of 4 weeks since last deposit will apply.

     * @param tokenAmount the amount of the token you want to receive

     * @param tokenIndex the index of the token you want to receive

     * @param minAmount the minimum amount to withdraw, otherwise revert

     * @param deadline latest timestamp to accept this transaction

     * @return amount of chosen token user received

     */

    function removeLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex,

        uint256 minAmount,

        uint256 deadline

    ) external nonReentrant returns (uint256) {

        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);

        uint8 baseTokensLength = uint8(baseTokens.length);



        // Transfer metaLPToken from the caller

        metaLPToken.safeTransferFrom(msg.sender, address(this), tokenAmount);



        IERC20 token;

        if (tokenIndex < baseLPTokenIndex) {

            // When the desired token is meta level token, we can just call `removeLiquidityOneToken` directly

            metaSwap.removeLiquidityOneToken(

                tokenAmount,

                tokenIndex,

                minAmount,

                deadline

            );

            token = metaTokens[tokenIndex];

        } else if (tokenIndex < baseLPTokenIndex + baseTokensLength) {

            // When the desired token is a base level token, we need to first withdraw via baseLPToken, then withdraw

            // the desired token from the base Swap contract.

            uint256 removedBaseLPTokenAmount =

                metaSwap.removeLiquidityOneToken(

                    tokenAmount,

                    baseLPTokenIndex,

                    0,

                    deadline

                );



            baseSwap.removeLiquidityOneToken(

                removedBaseLPTokenAmount,

                tokenIndex - baseLPTokenIndex,

                minAmount,

                deadline

            );

            token = baseTokens[tokenIndex - baseLPTokenIndex];

        } else {

            revert("out of range");

        }



        uint256 amountWithdrawn = token.balanceOf(address(this));

        token.safeTransfer(msg.sender, amountWithdrawn);

        return amountWithdrawn;

    }



    /**

     * @notice Remove liquidity from the pool, weighted differently than the

     * pool's current balances. Withdraw fee that decays linearly

     * over period of 4 weeks since last deposit will apply.

     * @param amounts how much of each token to withdraw

     * @param maxBurnAmount the max LP token provider is willing to pay to

     * remove liquidity. Useful as a front-running mitigation.

     * @param deadline latest timestamp to accept this transaction

     * @return amount of LP tokens burned

     */

    function removeLiquidityImbalance(

        uint256[] calldata amounts,

        uint256 maxBurnAmount,

        uint256 deadline

    ) external nonReentrant returns (uint256) {

        IERC20[] memory memBaseTokens = baseTokens;

        IERC20[] memory memMetaTokens = metaTokens;

        uint256[] memory metaAmounts = new uint256[](memMetaTokens.length);

        uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);



        require(

            amounts.length == memBaseTokens.length + memMetaTokens.length - 1,

            "out of range"

        );



        RemoveLiquidityImbalanceInfo memory v =

            RemoveLiquidityImbalanceInfo(

                baseSwap,

                metaSwap,

                metaLPToken,

                uint8(metaAmounts.length - 1),

                false,

                0

            );



        for (uint8 i = 0; i < v.baseLPTokenIndex; i++) {

            metaAmounts[i] = amounts[i];

        }



        for (uint8 i = 0; i < baseAmounts.length; i++) {

            baseAmounts[i] = amounts[v.baseLPTokenIndex + i];

            if (baseAmounts[i] > 0) {

                v.withdrawFromBase = true;

            }

        }



        // Calculate how much base LP token we need to get the desired amount of underlying tokens

        if (v.withdrawFromBase) {

            metaAmounts[v.baseLPTokenIndex] = v

                .baseSwap

                .calculateTokenAmount(baseAmounts, false)

                .mul(10005)

                .div(10000);

        }



        // Transfer MetaSwap LP token from the caller to this contract

        v.metaLPToken.safeTransferFrom(

            msg.sender,

            address(this),

            maxBurnAmount

        );



        // Withdraw the paired meta level tokens and the base LP token from the MetaSwap pool

        uint256 burnedMetaLPTokenAmount =

            v.metaSwap.removeLiquidityImbalance(

                metaAmounts,

                maxBurnAmount,

                deadline

            );

        v.leftoverMetaLPTokenAmount = maxBurnAmount.sub(

            burnedMetaLPTokenAmount

        );



        // If underlying tokens are desired, withdraw them from the base Swap pool

        if (v.withdrawFromBase) {

            v.baseSwap.removeLiquidityImbalance(

                baseAmounts,

                metaAmounts[v.baseLPTokenIndex],

                deadline

            );



            // Base Swap may require LESS base LP token than the amount we have

            // In that case, deposit it to the MetaSwap pool.

            uint256[] memory leftovers = new uint256[](metaAmounts.length);

            IERC20 baseLPToken = memMetaTokens[v.baseLPTokenIndex];

            uint256 leftoverBaseLPTokenAmount =

                baseLPToken.balanceOf(address(this));

            if (leftoverBaseLPTokenAmount > 0) {

                leftovers[v.baseLPTokenIndex] = leftoverBaseLPTokenAmount;

                v.leftoverMetaLPTokenAmount = v.leftoverMetaLPTokenAmount.add(

                    v.metaSwap.addLiquidity(leftovers, 0, deadline)

                );

            }

        }



        // Transfer all withdrawn tokens to the caller

        for (uint8 i = 0; i < amounts.length; i++) {

            IERC20 token;

            if (i < v.baseLPTokenIndex) {

                token = memMetaTokens[i];

            } else {

                token = memBaseTokens[i - v.baseLPTokenIndex];

            }

            if (amounts[i] > 0) {

                token.safeTransfer(msg.sender, amounts[i]);

            }

        }



        // If there were any extra meta lp token, transfer them back to the caller as well

        if (v.leftoverMetaLPTokenAmount > 0) {

            v.metaLPToken.safeTransfer(msg.sender, v.leftoverMetaLPTokenAmount);

        }



        return maxBurnAmount - v.leftoverMetaLPTokenAmount;

    }



    // VIEW FUNCTIONS



    /**

     * @notice A simple method to calculate prices from deposits or

     * withdrawals, excluding fees but including slippage. This is

     * helpful as an input into the various "min" parameters on calls

     * to fight front-running. When withdrawing from the base pool in imbalanced

     * fashion, the recommended slippage setting is 0.2% or higher.

     *

     * @dev This shouldn't be used outside frontends for user estimates.

     *

     * @param amounts an array of token amounts to deposit or withdrawal,

     * corresponding to pooledTokens. The amount should be in each

     * pooled token's native precision. If a token charges a fee on transfers,

     * use the amount that gets transferred after the fee.

     * @param deposit whether this is a deposit or a withdrawal

     * @return token amount the user will receive

     */

    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)

        external

        view

        returns (uint256)

    {

        uint256[] memory metaAmounts = new uint256[](metaTokens.length);

        uint256[] memory baseAmounts = new uint256[](baseTokens.length);

        uint256 baseLPTokenIndex = metaAmounts.length - 1;



        for (uint8 i = 0; i < baseLPTokenIndex; i++) {

            metaAmounts[i] = amounts[i];

        }



        for (uint8 i = 0; i < baseAmounts.length; i++) {

            baseAmounts[i] = amounts[baseLPTokenIndex + i];

        }



        uint256 baseLPTokenAmount =

            baseSwap.calculateTokenAmount(baseAmounts, deposit);

        metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;



        return metaSwap.calculateTokenAmount(metaAmounts, deposit);

    }



    /**

     * @notice A simple method to calculate amount of each underlying

     * tokens that is returned upon burning given amount of LP tokens

     * @param amount the amount of LP tokens that would be burned on withdrawal

     * @return array of token balances that the user will receive

     */

    function calculateRemoveLiquidity(uint256 amount)

        external

        view

        returns (uint256[] memory)

    {

        uint256[] memory metaAmounts =

            metaSwap.calculateRemoveLiquidity(amount);

        uint8 baseLPTokenIndex = uint8(metaAmounts.length - 1);

        uint256[] memory baseAmounts =

            baseSwap.calculateRemoveLiquidity(metaAmounts[baseLPTokenIndex]);



        uint256[] memory totalAmounts =

            new uint256[](baseLPTokenIndex + baseAmounts.length);

        for (uint8 i = 0; i < baseLPTokenIndex; i++) {

            totalAmounts[i] = metaAmounts[i];

        }

        for (uint8 i = 0; i < baseAmounts.length; i++) {

            totalAmounts[baseLPTokenIndex + i] = baseAmounts[i];

        }



        return totalAmounts;

    }



    /**

     * @notice Calculate the amount of underlying token available to withdraw

     * when withdrawing via only single token

     * @param tokenAmount the amount of LP token to burn

     * @param tokenIndex index of which token will be withdrawn

     * @return availableTokenAmount calculated amount of underlying token

     * available to withdraw

     */

    function calculateRemoveLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex

    ) external view returns (uint256) {

        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);



        if (tokenIndex < baseLPTokenIndex) {

            return

                metaSwap.calculateRemoveLiquidityOneToken(

                    tokenAmount,

                    tokenIndex

                );

        } else {

            uint256 baseLPTokenAmount =

                metaSwap.calculateRemoveLiquidityOneToken(

                    tokenAmount,

                    baseLPTokenIndex

                );

            return

                baseSwap.calculateRemoveLiquidityOneToken(

                    baseLPTokenAmount,

                    tokenIndex - baseLPTokenIndex

                );

        }

    }



    /**

     * @notice Returns the address of the pooled token at given index. Reverts if tokenIndex is out of range.

     * This is a flattened representation of the pooled tokens.

     * @param index the index of the token

     * @return address of the token at given index

     */

    function getToken(uint256 index) external view returns (IERC20) {

        require(index < tokens.length, "index out of range");

        return tokens[index];

    }



    /**

     * @notice Calculate amount of tokens you receive on swap

     * @param tokenIndexFrom the token the user wants to sell

     * @param tokenIndexTo the token the user wants to buy

     * @param dx the amount of tokens the user wants to sell. If the token charges

     * a fee on transfers, use the amount that gets transferred after the fee.

     * @return amount of tokens the user will receive

     */

    function calculateSwap(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx

    ) external view returns (uint256) {

        return

            metaSwap.calculateSwapUnderlying(tokenIndexFrom, tokenIndexTo, dx);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\MetaSwapUtils.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts/math/SafeMath.sol";

import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

import "../LPToken.sol";

import "../interfaces/ISwap.sol";

import "../MathUtils.sol";

import "../SwapUtils.sol";



/**

 * @title MetaSwapUtils library

 * @notice A library to be used within MetaSwap.sol. Contains functions responsible for custody and AMM functionalities.

 *

 * MetaSwap is a modified version of Swap that allows Swap's LP token to be utilized in pooling with other tokens.

 * As an example, if there is a Swap pool consisting of [DAI, USDC, USDT]. Then a MetaSwap pool can be created

 * with [sUSD, BaseSwapLPToken] to allow trades between either the LP token or the underlying tokens and sUSD.

 *

 * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library

 * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.

 * Admin functions should be protected within contracts using this library.

 */

library MetaSwapUtils {

    using SafeERC20 for IERC20;

    using SafeMath for uint256;

    using MathUtils for uint256;

    using AmplificationUtils for SwapUtils.Swap;



    /*** EVENTS ***/



    event TokenSwap(

        address indexed buyer,

        uint256 tokensSold,

        uint256 tokensBought,

        uint128 soldId,

        uint128 boughtId

    );

    event TokenSwapUnderlying(

        address indexed buyer,

        uint256 tokensSold,

        uint256 tokensBought,

        uint128 soldId,

        uint128 boughtId

    );

    event AddLiquidity(

        address indexed provider,

        uint256[] tokenAmounts,

        uint256[] fees,

        uint256 invariant,

        uint256 lpTokenSupply

    );

    event RemoveLiquidityOne(

        address indexed provider,

        uint256 lpTokenAmount,

        uint256 lpTokenSupply,

        uint256 boughtId,

        uint256 tokensBought

    );

    event RemoveLiquidityImbalance(

        address indexed provider,

        uint256[] tokenAmounts,

        uint256[] fees,

        uint256 invariant,

        uint256 lpTokenSupply

    );

    event NewAdminFee(uint256 newAdminFee);

    event NewSwapFee(uint256 newSwapFee);



    struct MetaSwap {

        // Meta-Swap related parameters

        ISwap baseSwap;

        uint256 baseVirtualPrice;

        uint256 baseCacheLastUpdated;

        IERC20[] baseTokens;

    }



    // Struct storing variables used in calculations in the

    // calculateWithdrawOneTokenDY function to avoid stack too deep errors

    struct CalculateWithdrawOneTokenDYInfo {

        uint256 d0;

        uint256 d1;

        uint256 newY;

        uint256 feePerToken;

        uint256 preciseA;

        uint256 xpi;

    }



    // Struct storing variables used in calculation in removeLiquidityImbalance function

    // to avoid stack too deep error

    struct ManageLiquidityInfo {

        uint256 d0;

        uint256 d1;

        uint256 d2;

        LPToken lpToken;

        uint256 totalSupply;

        uint256 preciseA;

        uint256 baseVirtualPrice;

        uint256[] tokenPrecisionMultipliers;

        uint256[] newBalances;

    }



    struct SwapUnderlyingInfo {

        uint256 x;

        uint256 dx;

        uint256 dy;

        uint256[] tokenPrecisionMultipliers;

        uint256[] oldBalances;

        IERC20[] baseTokens;

        IERC20 tokenFrom;

        uint8 metaIndexFrom;

        IERC20 tokenTo;

        uint8 metaIndexTo;

        uint256 baseVirtualPrice;

    }



    struct CalculateSwapUnderlyingInfo {

        uint256 baseVirtualPrice;

        ISwap baseSwap;

        uint8 baseLPTokenIndex;

        uint8 baseTokensLength;

        uint8 metaIndexTo;

        uint256 x;

        uint256 dy;

    }



    // the denominator used to calculate admin and LP fees. For example, an

    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)

    uint256 private constant FEE_DENOMINATOR = 10**10;



    // Cache expire time for the stored value of base Swap's virtual price

    uint256 public constant BASE_CACHE_EXPIRE_TIME = 10 minutes;

    uint256 public constant BASE_VIRTUAL_PRICE_PRECISION = 10**18;



    /*** VIEW & PURE FUNCTIONS ***/



    /**

     * @notice Return the stored value of base Swap's virtual price. If

     * value was updated past BASE_CACHE_EXPIRE_TIME, then read it directly

     * from the base Swap contract.

     * @param metaSwapStorage MetaSwap struct to read from

     * @return base Swap's virtual price

     */

    function _getBaseVirtualPrice(MetaSwap storage metaSwapStorage)

        internal

        view

        returns (uint256)

    {

        if (

            block.timestamp >

            metaSwapStorage.baseCacheLastUpdated + BASE_CACHE_EXPIRE_TIME

        ) {

            return metaSwapStorage.baseSwap.getVirtualPrice();

        }

        return metaSwapStorage.baseVirtualPrice;

    }



    /**

     * @notice Calculate how much the user would receive when withdrawing via single token

     * @param self Swap struct to read from

     * @param metaSwapStorage MetaSwap struct to read from

     * @param tokenAmount the amount to withdraw in the pool's precision

     * @param tokenIndex which token will be withdrawn

     * @return dy the amount of token user will receive

     */

    function calculateWithdrawOneToken(

        SwapUtils.Swap storage self,

        MetaSwap storage metaSwapStorage,

        uint256 tokenAmount,

        uint8 tokenIndex

    ) external view returns (uint256 dy) {

        (dy, ) = _calculateWithdrawOneToken(

            self,

            tokenAmount,

            tokenIndex,

            _getBaseVirtualPrice(metaSwapStorage),

            self.lpToken.totalSupply()

        );

    }



    function _calculateWithdrawOneToken(

        SwapUtils.Swap storage self,

        uint256 tokenAmount,

        uint8 tokenIndex,

        uint256 baseVirtualPrice,

        uint256 totalSupply

    ) internal view returns (uint256, uint256) {

        uint256 dy;

        uint256 dySwapFee;



        {

            uint256 currentY;

            uint256 newY;



            // Calculate how much to withdraw

            (dy, newY, currentY) = _calculateWithdrawOneTokenDY(

                self,

                tokenIndex,

                tokenAmount,

                baseVirtualPrice,

                totalSupply

            );



            // Calculate the associated swap fee

            dySwapFee = currentY

                .sub(newY)

                .div(self.tokenPrecisionMultipliers[tokenIndex])

                .sub(dy);

        }



        return (dy, dySwapFee);

    }



    /**

     * @notice Calculate the dy of withdrawing in one token

     * @param self Swap struct to read from

     * @param tokenIndex which token will be withdrawn

     * @param tokenAmount the amount to withdraw in the pools precision

     * @param baseVirtualPrice the virtual price of the base swap's LP token

     * @return the dy excluding swap fee, the new y after withdrawing one token, and current y

     */

    function _calculateWithdrawOneTokenDY(

        SwapUtils.Swap storage self,

        uint8 tokenIndex,

        uint256 tokenAmount,

        uint256 baseVirtualPrice,

        uint256 totalSupply

    )

        internal

        view

        returns (

            uint256,

            uint256,

            uint256

        )

    {

        // Get the current D, then solve the stableswap invariant

        // y_i for D - tokenAmount

        uint256[] memory xp = _xp(self, baseVirtualPrice);

        require(tokenIndex < xp.length, "Token index out of range");



        CalculateWithdrawOneTokenDYInfo memory v =

            CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, self._getAPrecise(), 0);

        v.d0 = SwapUtils.getD(xp, v.preciseA);

        v.d1 = v.d0.sub(tokenAmount.mul(v.d0).div(totalSupply));



        require(tokenAmount <= xp[tokenIndex], "Withdraw exceeds available");



        v.newY = SwapUtils.getYD(v.preciseA, tokenIndex, xp, v.d1);



        uint256[] memory xpReduced = new uint256[](xp.length);



        v.feePerToken = SwapUtils._feePerToken(self.swapFee, xp.length);

        for (uint256 i = 0; i < xp.length; i++) {

            v.xpi = xp[i];

            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY

            // else dxExpected = xp[i] - (xp[i] * d1 / d0)

            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR

            xpReduced[i] = v.xpi.sub(

                (

                    (i == tokenIndex)

                        ? v.xpi.mul(v.d1).div(v.d0).sub(v.newY)

                        : v.xpi.sub(v.xpi.mul(v.d1).div(v.d0))

                )

                    .mul(v.feePerToken)

                    .div(FEE_DENOMINATOR)

            );

        }



        uint256 dy =

            xpReduced[tokenIndex].sub(

                SwapUtils.getYD(v.preciseA, tokenIndex, xpReduced, v.d1)

            );



        if (tokenIndex == xp.length.sub(1)) {

            dy = dy.mul(BASE_VIRTUAL_PRICE_PRECISION).div(baseVirtualPrice);

        }

        dy = dy.sub(1).div(self.tokenPrecisionMultipliers[tokenIndex]);



        return (dy, v.newY, xp[tokenIndex]);

    }



    /**

     * @notice Given a set of balances and precision multipliers, return the

     * precision-adjusted balances. The last element will also get scaled up by

     * the given baseVirtualPrice.

     *

     * @param balances an array of token balances, in their native precisions.

     * These should generally correspond with pooled tokens.

     *

     * @param precisionMultipliers an array of multipliers, corresponding to

     * the amounts in the balances array. When multiplied together they

     * should yield amounts at the pool's precision.

     *

     * @param baseVirtualPrice the base virtual price to scale the balance of the

     * base Swap's LP token.

     *

     * @return an array of amounts "scaled" to the pool's precision

     */

    function _xp(

        uint256[] memory balances,

        uint256[] memory precisionMultipliers,

        uint256 baseVirtualPrice

    ) internal pure returns (uint256[] memory) {

        uint256[] memory xp = SwapUtils._xp(balances, precisionMultipliers);

        uint256 baseLPTokenIndex = balances.length.sub(1);

        xp[baseLPTokenIndex] = xp[baseLPTokenIndex].mul(baseVirtualPrice).div(

            BASE_VIRTUAL_PRICE_PRECISION

        );

        return xp;

    }



    /**

     * @notice Return the precision-adjusted balances of all tokens in the pool

     * @param self Swap struct to read from

     * @return the pool balances "scaled" to the pool's precision, allowing

     * them to be more easily compared.

     */

    function _xp(SwapUtils.Swap storage self, uint256 baseVirtualPrice)

        internal

        view

        returns (uint256[] memory)

    {

        return

            _xp(

                self.balances,

                self.tokenPrecisionMultipliers,

                baseVirtualPrice

            );

    }



    /**

     * @notice Get the virtual price, to help calculate profit

     * @param self Swap struct to read from

     * @param metaSwapStorage MetaSwap struct to read from

     * @return the virtual price, scaled to precision of BASE_VIRTUAL_PRICE_PRECISION

     */

    function getVirtualPrice(

        SwapUtils.Swap storage self,

        MetaSwap storage metaSwapStorage

    ) external view returns (uint256) {

        uint256 d =

            SwapUtils.getD(

                _xp(

                    self.balances,

                    self.tokenPrecisionMultipliers,

                    _getBaseVirtualPrice(metaSwapStorage)

                ),

                self._getAPrecise()

            );

        uint256 supply = self.lpToken.totalSupply();

        if (supply != 0) {

            return d.mul(BASE_VIRTUAL_PRICE_PRECISION).div(supply);

        }

        return 0;

    }



    /**

     * @notice Externally calculates a swap between two tokens. The SwapUtils.Swap storage and

     * MetaSwap storage should be from the same MetaSwap contract.

     * @param self Swap struct to read from

     * @param metaSwapStorage MetaSwap struct from the same contract

     * @param tokenIndexFrom the token to sell

     * @param tokenIndexTo the token to buy

     * @param dx the number of tokens to sell. If the token charges a fee on transfers,

     * use the amount that gets transferred after the fee.

     * @return dy the number of tokens the user will get

     */

    function calculateSwap(

        SwapUtils.Swap storage self,

        MetaSwap storage metaSwapStorage,

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx

    ) external view returns (uint256 dy) {

        (dy, ) = _calculateSwap(

            self,

            tokenIndexFrom,

            tokenIndexTo,

            dx,

            _getBaseVirtualPrice(metaSwapStorage)

        );

    }



    /**

     * @notice Internally calculates a swap between two tokens.

     *

     * @dev The caller is expected to transfer the actual amounts (dx and dy)

     * using the token contracts.

     *

     * @param self Swap struct to read from

     * @param tokenIndexFrom the token to sell

     * @param tokenIndexTo the token to buy

     * @param dx the number of tokens to sell. If the token charges a fee on transfers,

     * use the amount that gets transferred after the fee.

     * @param baseVirtualPrice the virtual price of the base LP token

     * @return dy the number of tokens the user will get and dyFee the associated fee

     */

    function _calculateSwap(

        SwapUtils.Swap storage self,

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 baseVirtualPrice

    ) internal view returns (uint256 dy, uint256 dyFee) {

        uint256[] memory xp = _xp(self, baseVirtualPrice);

        require(

            tokenIndexFrom < xp.length && tokenIndexTo < xp.length,

            "Token index out of range"

        );

        uint256 x =

            dx.mul(self.tokenPrecisionMultipliers[tokenIndexFrom]).add(

                xp[tokenIndexFrom]

            );

        uint256 y =

            SwapUtils.getY(

                self._getAPrecise(),

                tokenIndexFrom,

                tokenIndexTo,

                x,

                xp

            );

        dy = xp[tokenIndexTo].sub(y).sub(1);

        dyFee = dy.mul(self.swapFee).div(FEE_DENOMINATOR);

        dy = dy.sub(dyFee).div(self.tokenPrecisionMultipliers[tokenIndexTo]);

    }



    /**

     * @notice Calculates the expected return amount from swapping between

     * the pooled tokens and the underlying tokens of the base Swap pool.

     *

     * @param self Swap struct to read from

     * @param metaSwapStorage MetaSwap struct from the same contract

     * @param tokenIndexFrom the token to sell

     * @param tokenIndexTo the token to buy

     * @param dx the number of tokens to sell. If the token charges a fee on transfers,

     * use the amount that gets transferred after the fee.

     * @return dy the number of tokens the user will get

     */

    function calculateSwapUnderlying(

        SwapUtils.Swap storage self,

        MetaSwap storage metaSwapStorage,

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx

    ) external view returns (uint256) {

        CalculateSwapUnderlyingInfo memory v =

            CalculateSwapUnderlyingInfo(

                _getBaseVirtualPrice(metaSwapStorage),

                metaSwapStorage.baseSwap,

                0,

                uint8(metaSwapStorage.baseTokens.length),

                0,

                0,

                0

            );



        uint256[] memory xp = _xp(self, v.baseVirtualPrice);

        v.baseLPTokenIndex = uint8(xp.length.sub(1));

        {

            uint8 maxRange = v.baseLPTokenIndex + v.baseTokensLength;

            require(

                tokenIndexFrom < maxRange && tokenIndexTo < maxRange,

                "Token index out of range"

            );

        }



        if (tokenIndexFrom < v.baseLPTokenIndex) {

            // tokenFrom is from this pool

            v.x = xp[tokenIndexFrom].add(

                dx.mul(self.tokenPrecisionMultipliers[tokenIndexFrom])

            );

        } else {

            // tokenFrom is from the base pool

            tokenIndexFrom = tokenIndexFrom - v.baseLPTokenIndex;

            if (tokenIndexTo < v.baseLPTokenIndex) {

                uint256[] memory baseInputs = new uint256[](v.baseTokensLength);

                baseInputs[tokenIndexFrom] = dx;

                v.x = v

                    .baseSwap

                    .calculateTokenAmount(baseInputs, true)

                    .mul(v.baseVirtualPrice)

                    .div(BASE_VIRTUAL_PRICE_PRECISION)

                    .add(xp[v.baseLPTokenIndex]);

            } else {

                // both from and to are from the base pool

                return

                    v.baseSwap.calculateSwap(

                        tokenIndexFrom,

                        tokenIndexTo - v.baseLPTokenIndex,

                        dx

                    );

            }

            tokenIndexFrom = v.baseLPTokenIndex;

        }



        v.metaIndexTo = v.baseLPTokenIndex;

        if (tokenIndexTo < v.baseLPTokenIndex) {

            v.metaIndexTo = tokenIndexTo;

        }



        {

            uint256 y =

                SwapUtils.getY(

                    self._getAPrecise(),

                    tokenIndexFrom,

                    v.metaIndexTo,

                    v.x,

                    xp

                );

            v.dy = xp[v.metaIndexTo].sub(y).sub(1);

            uint256 dyFee = v.dy.mul(self.swapFee).div(FEE_DENOMINATOR);

            v.dy = v.dy.sub(dyFee);

        }



        if (tokenIndexTo < v.baseLPTokenIndex) {

            // tokenTo is from this pool

            v.dy = v.dy.div(self.tokenPrecisionMultipliers[v.metaIndexTo]);

        } else {

            // tokenTo is from the base pool

            v.dy = v.baseSwap.calculateRemoveLiquidityOneToken(

                v.dy.mul(BASE_VIRTUAL_PRICE_PRECISION).div(v.baseVirtualPrice),

                tokenIndexTo - v.baseLPTokenIndex

            );

        }



        return v.dy;

    }



    /**

     * @notice A simple method to calculate prices from deposits or

     * withdrawals, excluding fees but including slippage. This is

     * helpful as an input into the various "min" parameters on calls

     * to fight front-running

     *

     * @dev This shouldn't be used outside frontends for user estimates.

     *

     * @param self Swap struct to read from

     * @param metaSwapStorage MetaSwap struct to read from

     * @param amounts an array of token amounts to deposit or withdrawal,

     * corresponding to pooledTokens. The amount should be in each

     * pooled token's native precision. If a token charges a fee on transfers,

     * use the amount that gets transferred after the fee.

     * @param deposit whether this is a deposit or a withdrawal

     * @return if deposit was true, total amount of lp token that will be minted and if

     * deposit was false, total amount of lp token that will be burned

     */

    function calculateTokenAmount(

        SwapUtils.Swap storage self,

        MetaSwap storage metaSwapStorage,

        uint256[] calldata amounts,

        bool deposit

    ) external view returns (uint256) {

        uint256 a = self._getAPrecise();

        uint256 d0;

        uint256 d1;

        {

            uint256 baseVirtualPrice = _getBaseVirtualPrice(metaSwapStorage);

            uint256[] memory balances1 = self.balances;

            uint256[] memory tokenPrecisionMultipliers =

                self.tokenPrecisionMultipliers;

            uint256 numTokens = balances1.length;

            d0 = SwapUtils.getD(

                _xp(balances1, tokenPrecisionMultipliers, baseVirtualPrice),

                a

            );

            for (uint256 i = 0; i < numTokens; i++) {

                if (deposit) {

                    balances1[i] = balances1[i].add(amounts[i]);

                } else {

                    balances1[i] = balances1[i].sub(

                        amounts[i],

                        "Cannot withdraw more than available"

                    );

                }

            }

            d1 = SwapUtils.getD(

                _xp(balances1, tokenPrecisionMultipliers, baseVirtualPrice),

                a

            );

        }

        uint256 totalSupply = self.lpToken.totalSupply();



        if (deposit) {

            return d1.sub(d0).mul(totalSupply).div(d0);

        } else {

            return d0.sub(d1).mul(totalSupply).div(d0);

        }

    }



    /*** STATE MODIFYING FUNCTIONS ***/



    /**

     * @notice swap two tokens in the pool

     * @param self Swap struct to read from and write to

     * @param metaSwapStorage MetaSwap struct to read from and write to

     * @param tokenIndexFrom the token the user wants to sell

     * @param tokenIndexTo the token the user wants to buy

     * @param dx the amount of tokens the user wants to sell

     * @param minDy the min amount the user would like to receive, or revert.

     * @return amount of token user received on swap

     */

    function swap(

        SwapUtils.Swap storage self,

        MetaSwap storage metaSwapStorage,

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 minDy

    ) external returns (uint256) {

        {

            uint256 pooledTokensLength = self.pooledTokens.length;

            require(

                tokenIndexFrom < pooledTokensLength &&

                    tokenIndexTo < pooledTokensLength,

                "Token index is out of range"

            );

        }



        uint256 transferredDx;

        {

            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];

            require(

                dx <= tokenFrom.balanceOf(msg.sender),

                "Cannot swap more than you own"

            );



            {

                // Transfer tokens first to see if a fee was charged on transfer

                uint256 beforeBalance = tokenFrom.balanceOf(address(this));

                tokenFrom.safeTransferFrom(msg.sender, address(this), dx);



                // Use the actual transferred amount for AMM math

                transferredDx = tokenFrom.balanceOf(address(this)).sub(

                    beforeBalance

                );

            }

        }



        (uint256 dy, uint256 dyFee) =

            _calculateSwap(

                self,

                tokenIndexFrom,

                tokenIndexTo,

                transferredDx,

                _updateBaseVirtualPrice(metaSwapStorage)

            );

        require(dy >= minDy, "Swap didn't result in min tokens");



        uint256 dyAdminFee =

            dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(

                self.tokenPrecisionMultipliers[tokenIndexTo]

            );



        self.balances[tokenIndexFrom] = self.balances[tokenIndexFrom].add(

            transferredDx

        );

        self.balances[tokenIndexTo] = self.balances[tokenIndexTo].sub(dy).sub(

            dyAdminFee

        );



        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);



        emit TokenSwap(

            msg.sender,

            transferredDx,

            dy,

            tokenIndexFrom,

            tokenIndexTo

        );



        return dy;

    }



    /**

     * @notice Swaps with the underlying tokens of the base Swap pool. For this function,

     * the token indices are flattened out so that underlying tokens are represented

     * in the indices.

     * @dev Since this calls multiple external functions during the execution,

     * it is recommended to protect any function that depends on this with reentrancy guards.

     * @param self Swap struct to read from and write to

     * @param metaSwapStorage MetaSwap struct to read from and write to

     * @param tokenIndexFrom the token the user wants to sell

     * @param tokenIndexTo the token the user wants to buy

     * @param dx the amount of tokens the user wants to sell

     * @param minDy the min amount the user would like to receive, or revert.

     * @return amount of token user received on swap

     */

    function swapUnderlying(

        SwapUtils.Swap storage self,

        MetaSwap storage metaSwapStorage,

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 minDy

    ) external returns (uint256) {

        SwapUnderlyingInfo memory v =

            SwapUnderlyingInfo(

                0,

                0,

                0,

                self.tokenPrecisionMultipliers,

                self.balances,

                metaSwapStorage.baseTokens,

                IERC20(address(0)),

                0,

                IERC20(address(0)),

                0,

                _updateBaseVirtualPrice(metaSwapStorage)

            );



        uint8 baseLPTokenIndex = uint8(v.oldBalances.length.sub(1));



        {

            uint8 maxRange = uint8(baseLPTokenIndex + v.baseTokens.length);

            require(

                tokenIndexFrom < maxRange && tokenIndexTo < maxRange,

                "Token index out of range"

            );

        }



        ISwap baseSwap = metaSwapStorage.baseSwap;



        // Find the address of the token swapping from and the index in MetaSwap's token list

        if (tokenIndexFrom < baseLPTokenIndex) {

            v.tokenFrom = self.pooledTokens[tokenIndexFrom];

            v.metaIndexFrom = tokenIndexFrom;

        } else {

            v.tokenFrom = v.baseTokens[tokenIndexFrom - baseLPTokenIndex];

            v.metaIndexFrom = baseLPTokenIndex;

        }



        // Find the address of the token swapping to and the index in MetaSwap's token list

        if (tokenIndexTo < baseLPTokenIndex) {

            v.tokenTo = self.pooledTokens[tokenIndexTo];

            v.metaIndexTo = tokenIndexTo;

        } else {

            v.tokenTo = v.baseTokens[tokenIndexTo - baseLPTokenIndex];

            v.metaIndexTo = baseLPTokenIndex;

        }



        // Check for possible fee on transfer

        v.dx = v.tokenFrom.balanceOf(address(this));

        v.tokenFrom.safeTransferFrom(msg.sender, address(this), dx);

        v.dx = v.tokenFrom.balanceOf(address(this)).sub(v.dx); // update dx in case of fee on transfer



        if (

            tokenIndexFrom < baseLPTokenIndex || tokenIndexTo < baseLPTokenIndex

        ) {

            // Either one of the tokens belongs to the MetaSwap tokens list

            uint256[] memory xp =

                _xp(

                    v.oldBalances,

                    v.tokenPrecisionMultipliers,

                    v.baseVirtualPrice

                );



            if (tokenIndexFrom < baseLPTokenIndex) {

                // Swapping from a MetaSwap token

                v.x = xp[tokenIndexFrom].add(

                    dx.mul(v.tokenPrecisionMultipliers[tokenIndexFrom])

                );

            } else {

                // Swapping from a base Swap token

                // This case requires adding the underlying token to the base Swap, then

                // using the base LP token to swap to the desired token

                uint256[] memory baseAmounts =

                    new uint256[](v.baseTokens.length);

                baseAmounts[tokenIndexFrom - baseLPTokenIndex] = v.dx;



                // Add liquidity to the underlying Swap contract and receive base LP token

                v.dx = baseSwap.addLiquidity(baseAmounts, 0, block.timestamp);



                // Calculate the value of total amount of baseLPToken we end up with

                v.x = v

                    .dx

                    .mul(v.baseVirtualPrice)

                    .div(BASE_VIRTUAL_PRICE_PRECISION)

                    .add(xp[baseLPTokenIndex]);

            }



            // Calculate how much to withdraw in MetaSwap level and the the associated swap fee

            uint256 dyFee;

            {

                uint256 y =

                    SwapUtils.getY(

                        self._getAPrecise(),

                        v.metaIndexFrom,

                        v.metaIndexTo,

                        v.x,

                        xp

                    );

                v.dy = xp[v.metaIndexTo].sub(y).sub(1);

                dyFee = v.dy.mul(self.swapFee).div(FEE_DENOMINATOR);

                v.dy = v.dy.sub(dyFee).div(

                    v.tokenPrecisionMultipliers[v.metaIndexTo]

                );

            }



            if (tokenIndexTo >= baseLPTokenIndex) {

                // When swapping to a base Swap token, scale down dy by its virtual price

                v.dy = v.dy.mul(BASE_VIRTUAL_PRICE_PRECISION).div(

                    v.baseVirtualPrice

                );

            }



            // Update the balances array according to the calculated input and output amount

            {

                uint256 dyAdminFee =

                    dyFee.mul(self.adminFee).div(FEE_DENOMINATOR);

                dyAdminFee = dyAdminFee.div(

                    v.tokenPrecisionMultipliers[v.metaIndexTo]

                );

                self.balances[v.metaIndexFrom] = v.oldBalances[v.metaIndexFrom]

                    .add(v.dx);

                self.balances[v.metaIndexTo] = v.oldBalances[v.metaIndexTo]

                    .sub(v.dy)

                    .sub(dyAdminFee);

            }



            if (tokenIndexTo >= baseLPTokenIndex) {

                // When swapping to a token that belongs to the base Swap, burn the LP token

                // and withdraw the desired token from the base pool

                uint256 oldBalance = v.tokenTo.balanceOf(address(this));

                baseSwap.removeLiquidityOneToken(

                    v.dy,

                    tokenIndexTo - baseLPTokenIndex,

                    0,

                    block.timestamp

                );

                v.dy = v.tokenTo.balanceOf(address(this)) - oldBalance;

            }



            // Check the amount of token to send meets minDy

            require(v.dy >= minDy, "Swap didn't result in min tokens");

        } else {

            // Both tokens are from the base Swap pool

            // Do a swap through the base Swap

            v.dy = v.tokenTo.balanceOf(address(this));

            baseSwap.swap(

                tokenIndexFrom - baseLPTokenIndex,

                tokenIndexTo - baseLPTokenIndex,

                v.dx,

                minDy,

                block.timestamp

            );

            v.dy = v.tokenTo.balanceOf(address(this)).sub(v.dy);

        }



        // Send the desired token to the caller

        v.tokenTo.safeTransfer(msg.sender, v.dy);



        emit TokenSwapUnderlying(

            msg.sender,

            dx,

            v.dy,

            tokenIndexFrom,

            tokenIndexTo

        );



        return v.dy;

    }



    /**

     * @notice Add liquidity to the pool

     * @param self Swap struct to read from and write to

     * @param metaSwapStorage MetaSwap struct to read from and write to

     * @param amounts the amounts of each token to add, in their native precision

     * @param minToMint the minimum LP tokens adding this amount of liquidity

     * should mint, otherwise revert. Handy for front-running mitigation

     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.

     * @return amount of LP token user received

     */

    function addLiquidity(

        SwapUtils.Swap storage self,

        MetaSwap storage metaSwapStorage,

        uint256[] memory amounts,

        uint256 minToMint

    ) external returns (uint256) {

        IERC20[] memory pooledTokens = self.pooledTokens;

        require(

            amounts.length == pooledTokens.length,

            "Amounts must match pooled tokens"

        );



        uint256[] memory fees = new uint256[](pooledTokens.length);



        // current state

        ManageLiquidityInfo memory v =

            ManageLiquidityInfo(

                0,

                0,

                0,

                self.lpToken,

                0,

                self._getAPrecise(),

                _updateBaseVirtualPrice(metaSwapStorage),

                self.tokenPrecisionMultipliers,

                self.balances

            );

        v.totalSupply = v.lpToken.totalSupply();



        if (v.totalSupply != 0) {

            v.d0 = SwapUtils.getD(

                _xp(

                    v.newBalances,

                    v.tokenPrecisionMultipliers,

                    v.baseVirtualPrice

                ),

                v.preciseA

            );

        }



        for (uint256 i = 0; i < pooledTokens.length; i++) {

            require(

                v.totalSupply != 0 || amounts[i] > 0,

                "Must supply all tokens in pool"

            );



            // Transfer tokens first to see if a fee was charged on transfer

            if (amounts[i] != 0) {

                uint256 beforeBalance =

                    pooledTokens[i].balanceOf(address(this));

                pooledTokens[i].safeTransferFrom(

                    msg.sender,

                    address(this),

                    amounts[i]

                );



                // Update the amounts[] with actual transfer amount

                amounts[i] = pooledTokens[i].balanceOf(address(this)).sub(

                    beforeBalance

                );

            }



            v.newBalances[i] = v.newBalances[i].add(amounts[i]);

        }



        // invariant after change

        v.d1 = SwapUtils.getD(

            _xp(v.newBalances, v.tokenPrecisionMultipliers, v.baseVirtualPrice),

            v.preciseA

        );

        require(v.d1 > v.d0, "D should increase");



        // updated to reflect fees and calculate the user's LP tokens

        v.d2 = v.d1;

        uint256 toMint;



        if (v.totalSupply != 0) {

            uint256 feePerToken =

                SwapUtils._feePerToken(self.swapFee, pooledTokens.length);

            for (uint256 i = 0; i < pooledTokens.length; i++) {

                uint256 idealBalance = v.d1.mul(self.balances[i]).div(v.d0);

                fees[i] = feePerToken

                    .mul(idealBalance.difference(v.newBalances[i]))

                    .div(FEE_DENOMINATOR);

                self.balances[i] = v.newBalances[i].sub(

                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)

                );

                v.newBalances[i] = v.newBalances[i].sub(fees[i]);

            }

            v.d2 = SwapUtils.getD(

                _xp(

                    v.newBalances,

                    v.tokenPrecisionMultipliers,

                    v.baseVirtualPrice

                ),

                v.preciseA

            );

            toMint = v.d2.sub(v.d0).mul(v.totalSupply).div(v.d0);

        } else {

            // the initial depositor doesn't pay fees

            self.balances = v.newBalances;

            toMint = v.d1;

        }



        require(toMint >= minToMint, "Couldn't mint min requested");



        // mint the user's LP tokens

        self.lpToken.mint(msg.sender, toMint);



        emit AddLiquidity(

            msg.sender,

            amounts,

            fees,

            v.d1,

            v.totalSupply.add(toMint)

        );



        return toMint;

    }



    /**

     * @notice Remove liquidity from the pool all in one token.

     * @param self Swap struct to read from and write to

     * @param metaSwapStorage MetaSwap struct to read from and write to

     * @param tokenAmount the amount of the lp tokens to burn

     * @param tokenIndex the index of the token you want to receive

     * @param minAmount the minimum amount to withdraw, otherwise revert

     * @return amount chosen token that user received

     */

    function removeLiquidityOneToken(

        SwapUtils.Swap storage self,

        MetaSwap storage metaSwapStorage,

        uint256 tokenAmount,

        uint8 tokenIndex,

        uint256 minAmount

    ) external returns (uint256) {

        LPToken lpToken = self.lpToken;

        uint256 totalSupply = lpToken.totalSupply();

        uint256 numTokens = self.pooledTokens.length;

        require(tokenAmount <= lpToken.balanceOf(msg.sender), ">LP.balanceOf");

        require(tokenIndex < numTokens, "Token not found");



        uint256 dyFee;

        uint256 dy;



        (dy, dyFee) = _calculateWithdrawOneToken(

            self,

            tokenAmount,

            tokenIndex,

            _updateBaseVirtualPrice(metaSwapStorage),

            totalSupply

        );



        require(dy >= minAmount, "dy < minAmount");



        // Update balances array

        self.balances[tokenIndex] = self.balances[tokenIndex].sub(

            dy.add(dyFee.mul(self.adminFee).div(FEE_DENOMINATOR))

        );



        // Burn the associated LP token from the caller and send the desired token

        lpToken.burnFrom(msg.sender, tokenAmount);

        self.pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);



        emit RemoveLiquidityOne(

            msg.sender,

            tokenAmount,

            totalSupply,

            tokenIndex,

            dy

        );



        return dy;

    }



    /**

     * @notice Remove liquidity from the pool, weighted differently than the

     * pool's current balances.

     *

     * @param self Swap struct to read from and write to

     * @param metaSwapStorage MetaSwap struct to read from and write to

     * @param amounts how much of each token to withdraw

     * @param maxBurnAmount the max LP token provider is willing to pay to

     * remove liquidity. Useful as a front-running mitigation.

     * @return actual amount of LP tokens burned in the withdrawal

     */

    function removeLiquidityImbalance(

        SwapUtils.Swap storage self,

        MetaSwap storage metaSwapStorage,

        uint256[] memory amounts,

        uint256 maxBurnAmount

    ) public returns (uint256) {

        // Using this struct to avoid stack too deep error

        ManageLiquidityInfo memory v =

            ManageLiquidityInfo(

                0,

                0,

                0,

                self.lpToken,

                0,

                self._getAPrecise(),

                _updateBaseVirtualPrice(metaSwapStorage),

                self.tokenPrecisionMultipliers,

                self.balances

            );

        v.totalSupply = v.lpToken.totalSupply();



        require(

            amounts.length == v.newBalances.length,

            "Amounts should match pool tokens"

        );

        require(maxBurnAmount != 0, "Must burn more than 0");



        uint256 feePerToken =

            SwapUtils._feePerToken(self.swapFee, v.newBalances.length);



        // Calculate how much LPToken should be burned

        uint256[] memory fees = new uint256[](v.newBalances.length);

        {

            uint256[] memory balances1 = new uint256[](v.newBalances.length);



            v.d0 = SwapUtils.getD(

                _xp(

                    v.newBalances,

                    v.tokenPrecisionMultipliers,

                    v.baseVirtualPrice

                ),

                v.preciseA

            );

            for (uint256 i = 0; i < v.newBalances.length; i++) {

                balances1[i] = v.newBalances[i].sub(

                    amounts[i],

                    "Cannot withdraw more than available"

                );

            }

            v.d1 = SwapUtils.getD(

                _xp(balances1, v.tokenPrecisionMultipliers, v.baseVirtualPrice),

                v.preciseA

            );



            for (uint256 i = 0; i < v.newBalances.length; i++) {

                uint256 idealBalance = v.d1.mul(v.newBalances[i]).div(v.d0);

                uint256 difference = idealBalance.difference(balances1[i]);

                fees[i] = feePerToken.mul(difference).div(FEE_DENOMINATOR);

                self.balances[i] = balances1[i].sub(

                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)

                );

                balances1[i] = balances1[i].sub(fees[i]);

            }



            v.d2 = SwapUtils.getD(

                _xp(balances1, v.tokenPrecisionMultipliers, v.baseVirtualPrice),

                v.preciseA

            );

        }



        uint256 tokenAmount = v.d0.sub(v.d2).mul(v.totalSupply).div(v.d0);

        require(tokenAmount != 0, "Burnt amount cannot be zero");



        // Scale up by withdraw fee

        tokenAmount = tokenAmount.add(1);



        // Check for max burn amount

        require(tokenAmount <= maxBurnAmount, "tokenAmount > maxBurnAmount");



        // Burn the calculated amount of LPToken from the caller and send the desired tokens

        v.lpToken.burnFrom(msg.sender, tokenAmount);

        for (uint256 i = 0; i < v.newBalances.length; i++) {

            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);

        }



        emit RemoveLiquidityImbalance(

            msg.sender,

            amounts,

            fees,

            v.d1,

            v.totalSupply.sub(tokenAmount)

        );



        return tokenAmount;

    }



    /**

     * @notice Determines if the stored value of base Swap's virtual price is expired.

     * If the last update was past the BASE_CACHE_EXPIRE_TIME, then update the stored value.

     *

     * @param metaSwapStorage MetaSwap struct to read from and write to

     * @return base Swap's virtual price

     */

    function _updateBaseVirtualPrice(MetaSwap storage metaSwapStorage)

        internal

        returns (uint256)

    {

        if (

            block.timestamp >

            metaSwapStorage.baseCacheLastUpdated + BASE_CACHE_EXPIRE_TIME

        ) {

            // When the cache is expired, update it

            uint256 baseVirtualPrice =

                ISwap(metaSwapStorage.baseSwap).getVirtualPrice();

            metaSwapStorage.baseVirtualPrice = baseVirtualPrice;

            metaSwapStorage.baseCacheLastUpdated = block.timestamp;

            return baseVirtualPrice;

        } else {

            return metaSwapStorage.baseVirtualPrice;

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\MiniChefV2.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;

pragma experimental ABIEncoderV2;



import "@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol";

import "@boringcrypto/boring-solidity/contracts/BoringBatchable.sol";

import "@boringcrypto/boring-solidity/contracts/BoringOwnable.sol";

import "./libraries/SignedSafeMath.sol";

import "./interfaces/IRewarder.sol";

import "./interfaces/IMasterChef.sol";



/// @notice The (older) MasterChef contract gives out a constant number of SYNAPSE tokens per block.

/// It is the only address with minting rights for SYNAPSE.

/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token

/// that is deposited into the MasterChef V1 (MCV1) contract.

/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive double incentives.

contract MiniChefV2 is BoringOwnable, BoringBatchable {

    using BoringMath for uint256;

    using BoringMath128 for uint128;

    using BoringERC20 for IERC20;

    using SignedSafeMath for int256;



    /// @notice Info of each MCV2 user.

    /// `amount` LP token amount the user has provided.

    /// `rewardDebt` The amount of SYNAPSE entitled to the user.

    struct UserInfo {

        uint256 amount;

        int256 rewardDebt;

    }



    /// @notice Info of each MCV2 pool.

    /// `allocPoint` The amount of allocation points assigned to the pool.

    /// Also known as the amount of SYNAPSE to distribute per block.

    struct PoolInfo {

        uint128 accSynapsePerShare;

        uint64 lastRewardTime;

        uint64 allocPoint;

    }



    /// @notice Address of SYNAPSE contract.

    IERC20 public immutable SYNAPSE;



    /// @notice Info of each MCV2 pool.

    PoolInfo[] public poolInfo;

    /// @notice Address of the LP token for each MCV2 pool.

    IERC20[] public lpToken;

    /// @notice Address of each `IRewarder` contract in MCV2.

    IRewarder[] public rewarder;



    /// @notice Info of each user that stakes LP tokens.

    mapping (uint256 => mapping (address => UserInfo)) public userInfo;

    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.

    uint256 public totalAllocPoint;



    uint256 public synapsePerSecond;

    uint256 private constant ACC_SYNAPSE_PRECISION = 1e12;



    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);

    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);

    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);

    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);

    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IRewarder indexed rewarder);

    event LogSetPool(uint256 indexed pid, uint256 allocPoint, IRewarder indexed rewarder, bool overwrite);

    event LogUpdatePool(uint256 indexed pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accSynapsePerShare);

    event LogSynapsePerSecond(uint256 synapsePerSecond);



    /// @param _synapse The SYNAPSE token contract address.

    constructor(IERC20 _synapse) public {

        SYNAPSE = _synapse;

    }



    /// @notice Returns the number of MCV2 pools.

    function poolLength() public view returns (uint256 pools) {

        pools = poolInfo.length;

    }



    /// @notice Add a new LP to the pool. Can only be called by the owner.

    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.

    /// @param allocPoint AP of the new pool.

    /// @param _lpToken Address of the LP ERC-20 token.

    /// @param _rewarder Address of the rewarder delegate.

    function add(uint256 allocPoint, IERC20 _lpToken, IRewarder _rewarder) public onlyOwner {

        totalAllocPoint = totalAllocPoint.add(allocPoint);

        lpToken.push(_lpToken);

        rewarder.push(_rewarder);



        poolInfo.push(PoolInfo({

            allocPoint: allocPoint.to64(),

            lastRewardTime: block.timestamp.to64(),

            accSynapsePerShare: 0

        }));

        emit LogPoolAddition(lpToken.length.sub(1), allocPoint, _lpToken, _rewarder);

    }



    /// @notice Update the given pool's SYNAPSE allocation point and `IRewarder` contract. Can only be called by the owner.

    /// @param _pid The index of the pool. See `poolInfo`.

    /// @param _allocPoint New AP of the pool.

    /// @param _rewarder Address of the rewarder delegate.

    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.

    function set(uint256 _pid, uint256 _allocPoint, IRewarder _rewarder, bool overwrite) public onlyOwner {

        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);

        poolInfo[_pid].allocPoint = _allocPoint.to64();

        if (overwrite) { rewarder[_pid] = _rewarder; }

        emit LogSetPool(_pid, _allocPoint, overwrite ? _rewarder : rewarder[_pid], overwrite);

    }



    /// @notice Sets the synapse per second to be distributed. Can only be called by the owner.

    /// @param _synapsePerSecond The amount of Synapse to be distributed per second.

    function setSynapsePerSecond(uint256 _synapsePerSecond) public onlyOwner {

        synapsePerSecond = _synapsePerSecond;

        emit LogSynapsePerSecond(_synapsePerSecond);

    }



    /// @notice View function to see pending SYNAPSE on frontend.

    /// @param _pid The index of the pool. See `poolInfo`.

    /// @param _user Address of user.

    /// @return pending SYNAPSE reward for a given user.

    function pendingSynapse(uint256 _pid, address _user) external view returns (uint256 pending) {

        PoolInfo memory pool = poolInfo[_pid];

        UserInfo storage user = userInfo[_pid][_user];

        uint256 accSynapsePerShare = pool.accSynapsePerShare;

        uint256 lpSupply = lpToken[_pid].balanceOf(address(this));

        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {

            uint256 time = block.timestamp.sub(pool.lastRewardTime);

            uint256 synapseReward = time.mul(synapsePerSecond).mul(pool.allocPoint) / totalAllocPoint;

            accSynapsePerShare = accSynapsePerShare.add(synapseReward.mul(ACC_SYNAPSE_PRECISION) / lpSupply);

        }

        pending = int256(user.amount.mul(accSynapsePerShare) / ACC_SYNAPSE_PRECISION).sub(user.rewardDebt).toUInt256();

    }



    /// @notice Update reward variables for all pools. Be careful of gas spending!

    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.

    function massUpdatePools(uint256[] calldata pids) external {

        uint256 len = pids.length;

        for (uint256 i = 0; i < len; ++i) {

            updatePool(pids[i]);

        }

    }



    /// @notice Update reward variables of the given pool.

    /// @param pid The index of the pool. See `poolInfo`.

    /// @return pool Returns the pool that was updated.

    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {

        pool = poolInfo[pid];

        if (block.timestamp > pool.lastRewardTime) {

            uint256 lpSupply = lpToken[pid].balanceOf(address(this));

            if (lpSupply > 0) {

                uint256 time = block.timestamp.sub(pool.lastRewardTime);

                uint256 synapseReward = time.mul(synapsePerSecond).mul(pool.allocPoint) / totalAllocPoint;

                pool.accSynapsePerShare = pool.accSynapsePerShare.add((synapseReward.mul(ACC_SYNAPSE_PRECISION) / lpSupply).to128());

            }

            pool.lastRewardTime = block.timestamp.to64();

            poolInfo[pid] = pool;

            emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accSynapsePerShare);

        }

    }



    /// @notice Deposit LP tokens to MCV2 for SYNAPSE allocation.

    /// @param pid The index of the pool. See `poolInfo`.

    /// @param amount LP token amount to deposit.

    /// @param to The receiver of `amount` deposit benefit.

    function deposit(uint256 pid, uint256 amount, address to) public {

        PoolInfo memory pool = updatePool(pid);

        UserInfo storage user = userInfo[pid][to];



        // Effects

        user.amount = user.amount.add(amount);

        user.rewardDebt = user.rewardDebt.add(int256(amount.mul(pool.accSynapsePerShare) / ACC_SYNAPSE_PRECISION));



        // Interactions

        IRewarder _rewarder = rewarder[pid];

        if (address(_rewarder) != address(0)) {

            _rewarder.onSynapseReward(pid, to, to, 0, user.amount);

        }



        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);



        emit Deposit(msg.sender, pid, amount, to);

    }



    /// @notice Withdraw LP tokens from MCV2.

    /// @param pid The index of the pool. See `poolInfo`.

    /// @param amount LP token amount to withdraw.

    /// @param to Receiver of the LP tokens.

    function withdraw(uint256 pid, uint256 amount, address to) public {

        PoolInfo memory pool = updatePool(pid);

        UserInfo storage user = userInfo[pid][msg.sender];



        // Effects

        user.rewardDebt = user.rewardDebt.sub(int256(amount.mul(pool.accSynapsePerShare) / ACC_SYNAPSE_PRECISION));

        user.amount = user.amount.sub(amount);



        // Interactions

        IRewarder _rewarder = rewarder[pid];

        if (address(_rewarder) != address(0)) {

            _rewarder.onSynapseReward(pid, msg.sender, to, 0, user.amount);

        }

        

        lpToken[pid].safeTransfer(to, amount);



        emit Withdraw(msg.sender, pid, amount, to);

    }



    /// @notice Harvest proceeds for transaction sender to `to`.

    /// @param pid The index of the pool. See `poolInfo`.

    /// @param to Receiver of SYNAPSE rewards.

    function harvest(uint256 pid, address to) public {

        PoolInfo memory pool = updatePool(pid);

        UserInfo storage user = userInfo[pid][msg.sender];

        int256 accumulatedSynapse = int256(user.amount.mul(pool.accSynapsePerShare) / ACC_SYNAPSE_PRECISION);

        uint256 _pendingSynapse = accumulatedSynapse.sub(user.rewardDebt).toUInt256();



        // Effects

        user.rewardDebt = accumulatedSynapse;



        // Interactions

        if (_pendingSynapse != 0) {

            SYNAPSE.safeTransfer(to, _pendingSynapse);

        }

        

        IRewarder _rewarder = rewarder[pid];

        if (address(_rewarder) != address(0)) {

            _rewarder.onSynapseReward( pid, msg.sender, to, _pendingSynapse, user.amount);

        }



        emit Harvest(msg.sender, pid, _pendingSynapse);

    }

    

    /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.

    /// @param pid The index of the pool. See `poolInfo`.

    /// @param amount LP token amount to withdraw.

    /// @param to Receiver of the LP tokens and SYNAPSE rewards.

    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) public {

        PoolInfo memory pool = updatePool(pid);

        UserInfo storage user = userInfo[pid][msg.sender];

        int256 accumulatedSynapse = int256(user.amount.mul(pool.accSynapsePerShare) / ACC_SYNAPSE_PRECISION);

        uint256 _pendingSynapse = accumulatedSynapse.sub(user.rewardDebt).toUInt256();



        // Effects

        user.rewardDebt = accumulatedSynapse.sub(int256(amount.mul(pool.accSynapsePerShare) / ACC_SYNAPSE_PRECISION));

        user.amount = user.amount.sub(amount);

        

        // Interactions

        SYNAPSE.safeTransfer(to, _pendingSynapse);



        IRewarder _rewarder = rewarder[pid];

        if (address(_rewarder) != address(0)) {

            _rewarder.onSynapseReward(pid, msg.sender, to, _pendingSynapse, user.amount);

        }



        lpToken[pid].safeTransfer(to, amount);



        emit Withdraw(msg.sender, pid, amount, to);

        emit Harvest(msg.sender, pid, _pendingSynapse);

    }



    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.

    /// @param pid The index of the pool. See `poolInfo`.

    /// @param to Receiver of the LP tokens.

    function emergencyWithdraw(uint256 pid, address to) public {

        UserInfo storage user = userInfo[pid][msg.sender];

        uint256 amount = user.amount;

        user.amount = 0;

        user.rewardDebt = 0;



        IRewarder _rewarder = rewarder[pid];

        if (address(_rewarder) != address(0)) {

            _rewarder.onSynapseReward(pid, msg.sender, to, 0, 0);

        }



        // Note: transfer can fail or succeed if `amount` is zero.

        lpToken[pid].safeTransfer(to, amount);

        emit EmergencyWithdraw(msg.sender, pid, amount, to);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\Multicall2.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.5.0;

pragma experimental ABIEncoderV2;



/// @title Multicall2 - Aggregate results from multiple read-only function calls

/// @author Michael Elliot <mike@makerdao.com>

/// @author Joshua Levine <joshua@makerdao.com>

/// @author Nick Johnson <arachnid@notdot.net>



contract Multicall2 {

    struct Call {

        address target;

        bytes callData;

    }

    struct Result {

        bool success;

        bytes returnData;

    }



    function aggregate(Call[] memory calls)

        public

        returns (uint256 blockNumber, bytes[] memory returnData)

    {

        blockNumber = block.number;

        returnData = new bytes[](calls.length);

        for (uint256 i = 0; i < calls.length; i++) {

            (bool success, bytes memory ret) =

                calls[i].target.call(calls[i].callData);

            require(success, "Multicall aggregate: call failed");

            returnData[i] = ret;

        }

    }



    function blockAndAggregate(Call[] memory calls)

        public

        returns (

            uint256 blockNumber,

            bytes32 blockHash,

            Result[] memory returnData

        )

    {

        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(

            true,

            calls

        );

    }



    function getBlockHash(uint256 blockNumber)

        public

        view

        returns (bytes32 blockHash)

    {

        blockHash = blockhash(blockNumber);

    }



    function getBlockNumber() public view returns (uint256 blockNumber) {

        blockNumber = block.number;

    }



    function getCurrentBlockCoinbase() public view returns (address coinbase) {

        coinbase = block.coinbase;

    }



    function getCurrentBlockDifficulty()

        public

        view

        returns (uint256 difficulty)

    {

        difficulty = block.difficulty;

    }



    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {

        gaslimit = block.gaslimit;

    }



    function getCurrentBlockTimestamp()

        public

        view

        returns (uint256 timestamp)

    {

        timestamp = block.timestamp;

    }



    function getEthBalance(address addr) public view returns (uint256 balance) {

        balance = addr.balance;

    }



    function getLastBlockHash() public view returns (bytes32 blockHash) {

        blockHash = blockhash(block.number - 1);

    }



    function tryAggregate(bool requireSuccess, Call[] memory calls)

        public

        returns (Result[] memory returnData)

    {

        returnData = new Result[](calls.length);

        for (uint256 i = 0; i < calls.length; i++) {

            (bool success, bytes memory ret) =

                calls[i].target.call(calls[i].callData);



            if (requireSuccess) {

                require(success, "Multicall2 aggregate: call failed");

            }



            returnData[i] = Result(success, ret);

        }

    }



    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls)

        public

        returns (

            uint256 blockNumber,

            bytes32 blockHash,

            Result[] memory returnData

        )

    {

        blockNumber = block.number;

        blockHash = blockhash(block.number);

        returnData = tryAggregate(requireSuccess, calls);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\NerveBridgeZap.sol
File type: .sol
// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;



import '@openzeppelin/contracts/token/ERC20/IERC20.sol';

import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';

import '../interfaces/ISwap.sol';

import '../interfaces/ISynapseBridge.sol';

import "../interfaces/IWETH9.sol";





/**

 * @title NerveBridgeZap

 * @notice This contract is responsible for handling user Zaps into the SynapseBridge contract, through the Synapse Swap contracts. It does so

 * It does so by combining the action of addLiquidity() to the base swap pool, and then calling either deposit() or depositAndSwap() on the bridge.

 * This is done in hopes of automating portions of the bridge user experience to users, while keeping the SynapseBridge contract logic small.

 *

 * @dev This contract should be deployed with a base Swap.sol address and a SynapseBridge.sol address, otherwise, it will not function.

 */

contract NerveBridgeZap {

  using SafeERC20 for IERC20;



  uint256 constant MAX_UINT256 = 2**256 - 1;

  

  ISwap baseSwap;

  ISynapseBridge synapseBridge;

  IERC20[] public baseTokens;

  address payable public immutable WETH_ADDRESS;

  



  /**

   * @notice Constructs the contract, approves each token inside of baseSwap to be used by baseSwap (needed for addLiquidity())

   */

  constructor(address payable _wethAddress, ISwap _baseSwap, ISynapseBridge _synapseBridge) public {

    WETH_ADDRESS = _wethAddress;

    baseSwap = _baseSwap;

    synapseBridge = _synapseBridge;

    IERC20(_wethAddress).safeIncreaseAllowance(address(_synapseBridge), MAX_UINT256);

    {

      uint8 i;

      for (; i < 32; i++) {

        try _baseSwap.getToken(i) returns (IERC20 token) {

          baseTokens.push(token);

          token.safeApprove(address(_baseSwap), MAX_UINT256);

        } catch {

          break;

        }

      }

      require(i > 1, 'baseSwap must have at least 2 tokens');

    }

  }

  

  /**

   * @notice Wraps SynapseBridge deposit() function to make it compatible w/ ETH -> WETH conversions

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   **/

  function depositETH(

    address to,

    uint256 chainId,

    uint256 amount

    ) external payable {

      require(msg.value > 0 && msg.value == amount, 'INCORRECT MSG VALUE');

      IWETH9(WETH_ADDRESS).deposit{value: msg.value}();

      synapseBridge.deposit(to, chainId, IERC20(WETH_ADDRESS), amount);

    }



  /**

   * @notice A simple method to calculate prices from deposits or

   * withdrawals, excluding fees but including slippage. This is

   * helpful as an input into the various "min" parameters on calls

   * to fight front-running

   *

   * @dev This shouldn't be used outside frontends for user estimates.

   *

   * @param amounts an array of token amounts to deposit or withdrawal,

   * corresponding to pooledTokens. The amount should be in each

   * pooled token's native precision.

   * @param deposit whether this is a deposit or a withdrawal

   * @return token amount the user will receive

   */

  function calculateTokenAmount(uint256[] calldata amounts, bool deposit)

    external

    view

    virtual

    returns (uint256)

  {

    return baseSwap.calculateTokenAmount(amounts, deposit);

  }



  /**

   * @notice Combines adding liquidity to the given Swap, and calls deposit() on the bridge using that LP token

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param liquidityAmounts the amounts of each token to add, in their native precision

   * @param minToMint the minimum LP tokens adding this amount of liquidity

   * should mint, otherwise revert. Handy for front-running mitigation

   * @param deadline latest timestamp to accept this transaction

   **/

  function zapAndDeposit(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256[] calldata liquidityAmounts,

    uint256 minToMint,

    uint256 deadline

  ) external {

    // add liquidity

    for (uint256 i = 0; i < baseTokens.length; i++) {

      if (liquidityAmounts[i] != 0) {

        baseTokens[i].safeTransferFrom(

          msg.sender,

          address(this),

          liquidityAmounts[i]

        );

      }

    }



    uint256 liqAdded = baseSwap.addLiquidity(

      liquidityAmounts,

      minToMint,

      deadline

    );

    // deposit into bridge, gets nUSD

    if (token.allowance(address(this), address(synapseBridge)) < liqAdded) {

      token.safeApprove(address(synapseBridge), MAX_UINT256);

    }

    synapseBridge.deposit(to, chainId, token, liqAdded);

  }



  /**

   * @notice Combines adding liquidity to the given Swap, and calls depositAndSwap() on the bridge using that LP token

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param liquidityAmounts the amounts of each token to add, in their native precision

   * @param minToMint the minimum LP tokens adding this amount of liquidity

   * should mint, otherwise revert. Handy for front-running mitigation

   * @param liqDeadline latest timestamp to accept this transaction

   * @param tokenIndexFrom the token the user wants to swap from

   * @param tokenIndexTo the token the user wants to swap to

   * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.

   * @param swapDeadline latest timestamp to accept this transaction

   **/

  function zapAndDepositAndSwap(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256[] calldata liquidityAmounts,

    uint256 minToMint,

    uint256 liqDeadline,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 swapDeadline

  ) external {

    // add liquidity

    for (uint256 i = 0; i < baseTokens.length; i++) {

      if (liquidityAmounts[i] != 0) {

        baseTokens[i].safeTransferFrom(

          msg.sender,

          address(this),

          liquidityAmounts[i]

        );

      }

    }



    uint256 liqAdded = baseSwap.addLiquidity(

      liquidityAmounts,

      minToMint,

      liqDeadline

    );

    // deposit into bridge, bridge attemps to swap into desired asset

    if (token.allowance(address(this), address(synapseBridge)) < liqAdded) {

      token.safeApprove(address(synapseBridge), MAX_UINT256);

    }

    synapseBridge.depositAndSwap(

      to,

      chainId,

      token,

      liqAdded,

      tokenIndexFrom,

      tokenIndexTo,

      minDy,

      swapDeadline

    );

  }



    /**

   * @notice Wraps SynapseBridge deposit() function

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   **/

  function deposit(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount

    ) external {

      token.safeTransferFrom(msg.sender, address(this), amount);



      if (token.allowance(address(this), address(synapseBridge)) < amount) {

        token.safeApprove(address(synapseBridge), MAX_UINT256);

      }

      synapseBridge.deposit(to, chainId, token, amount);

  }

  

  /**

   * @notice Wraps SynapseBridge depositAndSwap() function

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   * @param tokenIndexFrom the token the user wants to swap from

   * @param tokenIndexTo the token the user wants to swap to

   * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.

   * @param deadline latest timestamp to accept this transaction

   **/

  function depositAndSwap(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

  ) external {

      token.safeTransferFrom(msg.sender, address(this), amount);

      

      if (token.allowance(address(this), address(synapseBridge)) < amount) {

        token.safeApprove(address(synapseBridge), MAX_UINT256);

      }

      synapseBridge.depositAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);

  }





    /**

   * @notice Wraps SynapseBridge redeem() function

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to redeem into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   **/

  function redeem(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount

    ) external {

      token.safeTransferFrom(msg.sender, address(this), amount);



      if (token.allowance(address(this), address(synapseBridge)) < amount) {

        token.safeApprove(address(synapseBridge), MAX_UINT256);

      }

      synapseBridge.redeem(to, chainId, token, amount);

  }

  

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\NodeEnv.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;

pragma experimental ABIEncoderV2;



import '@openzeppelin/contracts/access/AccessControl.sol';

import "./utils/EnumerableStringMap.sol";



/**

 * @title NodeEnv contract

 * @author Synapse Authors

 * @notice This contract implements a key-value store for storing variables on which synapse nodes must coordinate

 * methods are purposely arbitrary to allow these fields to be defined in synapse improvement proposals.

 * @notice This token is used for configuring different tokens on the bridge and mapping them across chains.

**/

contract NodeEnv is AccessControl {

    using EnumerableStringMap for EnumerableStringMap.StringToStringMap;

    // BRIDGEMANAGER_ROLE owns the bridge. They are the only user that can call setters on this contract

    bytes32 public constant BRIDGEMANAGER_ROLE = keccak256('BRIDGEMANAGER_ROLE');

    // _config stores the config

    EnumerableStringMap.StringToStringMap private _config; // key is tokenAddress,chainID



    // ConfigUpdate is emitted when the config is updated by the user

    event ConfigUpdate(

        string key

    );



    constructor() public {

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);

        _setupRole(BRIDGEMANAGER_ROLE, msg.sender);

    }



    /**

    * @notice get the length of the config

    *

    * @dev this is useful for enumerating through all keys in the env

    */

    function keyCount()

    public

    view

    returns (uint256){

        return _config.length();

    }



    /**

    * @notice gets the key/value pair by it's index

    *

     * Requirements:

     *

     * - `index` must be strictly less than {length}.

     */

    function keyValueByIndex(uint256 index) public view returns(string memory, string memory){

        return _config.at(index);

    }



    /**

    * @notice gets the value associated with the key

    */

    function get(string calldata _key) public view returns(string memory){

        string memory key = _key;

        return _config.get(key);

    }



    /**

    * @notice sets the key

    *

    * @dev caller must have bridge manager role

    */

    function set(string calldata _key, string calldata _value) public returns(bool) {

        require(

            hasRole(BRIDGEMANAGER_ROLE, msg.sender),

            'Caller is not Bridge Manager'

        );

        string memory key = _key;

        string memory value = _value;



        return _config.set(key, value);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\Ownable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../utils/Context.sol";

/**

 * @dev Contract module which provides a basic access control mechanism, where

 * there is an account (an owner) that can be granted exclusive access to

 * specific functions.

 *

 * By default, the owner account will be the one that deploys the contract. This

 * can later be changed with {transferOwnership}.

 *

 * This module is used through inheritance. It will make available the modifier

 * `onlyOwner`, which can be applied to your functions to restrict their use to

 * the owner.

 */

abstract contract Ownable is Context {

    address private _owner;



    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);



    /**

     * @dev Initializes the contract setting the deployer as the initial owner.

     */

    constructor () internal {

        address msgSender = _msgSender();

        _owner = msgSender;

        emit OwnershipTransferred(address(0), msgSender);

    }



    /**

     * @dev Returns the address of the current owner.

     */

    function owner() public view virtual returns (address) {

        return _owner;

    }



    /**

     * @dev Throws if called by any account other than the owner.

     */

    modifier onlyOwner() {

        require(owner() == _msgSender(), "Ownable: caller is not the owner");

        _;

    }



    /**

     * @dev Leaves the contract without owner. It will not be possible to call

     * `onlyOwner` functions anymore. Can only be called by the current owner.

     *

     * NOTE: Renouncing ownership will leave the contract without an owner,

     * thereby removing any functionality that is only available to the owner.

     */

    function renounceOwnership() public virtual onlyOwner {

        emit OwnershipTransferred(_owner, address(0));

        _owner = address(0);

    }



    /**

     * @dev Transfers ownership of the contract to a new account (`newOwner`).

     * Can only be called by the current owner.

     */

    function transferOwnership(address newOwner) public virtual onlyOwner {

        require(newOwner != address(0), "Ownable: new owner is the zero address");

        emit OwnershipTransferred(_owner, newOwner);

        _owner = newOwner;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\OwnableUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "../utils/ContextUpgradeable.sol";

import "../proxy/Initializable.sol";

/**

 * @dev Contract module which provides a basic access control mechanism, where

 * there is an account (an owner) that can be granted exclusive access to

 * specific functions.

 *

 * By default, the owner account will be the one that deploys the contract. This

 * can later be changed with {transferOwnership}.

 *

 * This module is used through inheritance. It will make available the modifier

 * `onlyOwner`, which can be applied to your functions to restrict their use to

 * the owner.

 */

abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {

    address private _owner;



    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);



    /**

     * @dev Initializes the contract setting the deployer as the initial owner.

     */

    function __Ownable_init() internal initializer {

        __Context_init_unchained();

        __Ownable_init_unchained();

    }



    function __Ownable_init_unchained() internal initializer {

        address msgSender = _msgSender();

        _owner = msgSender;

        emit OwnershipTransferred(address(0), msgSender);

    }



    /**

     * @dev Returns the address of the current owner.

     */

    function owner() public view virtual returns (address) {

        return _owner;

    }



    /**

     * @dev Throws if called by any account other than the owner.

     */

    modifier onlyOwner() {

        require(owner() == _msgSender(), "Ownable: caller is not the owner");

        _;

    }



    /**

     * @dev Leaves the contract without owner. It will not be possible to call

     * `onlyOwner` functions anymore. Can only be called by the current owner.

     *

     * NOTE: Renouncing ownership will leave the contract without an owner,

     * thereby removing any functionality that is only available to the owner.

     */

    function renounceOwnership() public virtual onlyOwner {

        emit OwnershipTransferred(_owner, address(0));

        _owner = address(0);

    }



    /**

     * @dev Transfers ownership of the contract to a new account (`newOwner`).

     * Can only be called by the current owner.

     */

    function transferOwnership(address newOwner) public virtual onlyOwner {

        require(newOwner != address(0), "Ownable: new owner is the zero address");

        emit OwnershipTransferred(_owner, newOwner);

        _owner = newOwner;

    }

    uint256[49] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\OwnerPausableUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

import "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";



/**

 * @title OwnerPausable

 * @notice An ownable contract allows the owner to pause and unpause the

 * contract without a delay.

 * @dev Only methods using the provided modifiers will be paused.

 */

abstract contract OwnerPausableUpgradeable is

    OwnableUpgradeable,

    PausableUpgradeable

{

    function __OwnerPausable_init() internal initializer {

        __Context_init_unchained();

        __Ownable_init_unchained();

        __Pausable_init_unchained();

    }



    /**

     * @notice Pause the contract. Revert if already paused.

     */

    function pause() external onlyOwner {

        PausableUpgradeable._pause();

    }



    /**

     * @notice Unpause the contract. Revert if already unpaused.

     */

    function unpause() external onlyOwner {

        PausableUpgradeable._unpause();

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\PausableUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "./ContextUpgradeable.sol";

import "../proxy/Initializable.sol";



/**

 * @dev Contract module which allows children to implement an emergency stop

 * mechanism that can be triggered by an authorized account.

 *

 * This module is used through inheritance. It will make available the

 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to

 * the functions of your contract. Note that they will not be pausable by

 * simply including this module, only once the modifiers are put in place.

 */

abstract contract PausableUpgradeable is Initializable, ContextUpgradeable {

    /**

     * @dev Emitted when the pause is triggered by `account`.

     */

    event Paused(address account);



    /**

     * @dev Emitted when the pause is lifted by `account`.

     */

    event Unpaused(address account);



    bool private _paused;



    /**

     * @dev Initializes the contract in unpaused state.

     */

    function __Pausable_init() internal initializer {

        __Context_init_unchained();

        __Pausable_init_unchained();

    }



    function __Pausable_init_unchained() internal initializer {

        _paused = false;

    }



    /**

     * @dev Returns true if the contract is paused, and false otherwise.

     */

    function paused() public view virtual returns (bool) {

        return _paused;

    }



    /**

     * @dev Modifier to make a function callable only when the contract is not paused.

     *

     * Requirements:

     *

     * - The contract must not be paused.

     */

    modifier whenNotPaused() {

        require(!paused(), "Pausable: paused");

        _;

    }



    /**

     * @dev Modifier to make a function callable only when the contract is paused.

     *

     * Requirements:

     *

     * - The contract must be paused.

     */

    modifier whenPaused() {

        require(paused(), "Pausable: not paused");

        _;

    }



    /**

     * @dev Triggers stopped state.

     *

     * Requirements:

     *

     * - The contract must not be paused.

     */

    function _pause() internal virtual whenNotPaused {

        _paused = true;

        emit Paused(_msgSender());

    }



    /**

     * @dev Returns to normal state.

     *

     * Requirements:

     *

     * - The contract must be paused.

     */

    function _unpause() internal virtual whenPaused {

        _paused = false;

        emit Unpaused(_msgSender());

    }

    uint256[49] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\PoolConfig.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;

pragma experimental ABIEncoderV2;



import '@openzeppelin/contracts/access/AccessControl.sol';



contract PoolConfig is AccessControl {

  bytes32 public constant BRIDGEMANAGER_ROLE = keccak256('BRIDGEMANAGER_ROLE');

  mapping(address => mapping(uint256 => Pool)) private _pool; // key is tokenAddress,chainID



  struct Pool {

    address tokenAddress;

    uint256 chainId;

    address poolAddress;

    bool metaswap;

  }



  constructor() public {

    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);

    _setupRole(BRIDGEMANAGER_ROLE, msg.sender);

  }



  function getPoolConfig(address tokenAddress, uint256 chainID)

    external

    view

    returns (Pool memory)

  {

    return _pool[tokenAddress][chainID];

  }



  function setPoolConfig(

    address tokenAddress,

    uint256 chainID,

    address poolAddress,

    bool metaswap

  ) external returns (Pool memory) {

    require(

      hasRole(BRIDGEMANAGER_ROLE, msg.sender),

      'Caller is not Bridge Manager'

    );

    Pool memory newPool = Pool(tokenAddress, chainID, poolAddress, metaswap);

    _pool[tokenAddress][chainID] = newPool;

    return newPool;

  }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\Proxy.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity ^0.7.0;



/**

 * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM

 * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to

 * be specified by overriding the virtual {_implementation} function.

 * 

 * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a

 * different contract through the {_delegate} function.

 * 

 * The success and return data of the delegated call will be returned back to the caller of the proxy.

 */

abstract contract Proxy {

    /**

     * @dev Delegates the current call to `implementation`.

     * 

     * This function does not return to its internall call site, it will return directly to the external caller.

     */

    function _delegate(address implementation) internal {

        // solhint-disable-next-line no-inline-assembly

        assembly {

            // Copy msg.data. We take full control of memory in this inline assembly

            // block because it will not return to Solidity code. We overwrite the

            // Solidity scratch pad at memory position 0.

            calldatacopy(0, 0, calldatasize())



            // Call the implementation.

            // out and outsize are 0 because we don't know the size yet.

            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)



            // Copy the returned data.

            returndatacopy(0, 0, returndatasize())



            switch result

            // delegatecall returns 0 on error.

            case 0 { revert(0, returndatasize()) }

            default { return(0, returndatasize()) }

        }

    }



    /**

     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function

     * and {_fallback} should delegate.

     */

    function _implementation() internal virtual view returns (address);



    /**

     * @dev Delegates the current call to the address returned by `_implementation()`.

     * 

     * This function does not return to its internall call site, it will return directly to the external caller.

     */

    function _fallback() internal {

        _beforeFallback();

        _delegate(_implementation());

    }



    /**

     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other

     * function in the contract matches the call data.

     */

    fallback () payable external {

        _fallback();

    }



    /**

     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data

     * is empty.

     */

    receive () payable external {

        _fallback();

    }



    /**

     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`

     * call, or as part of the Solidity `fallback` or `receive` functions.

     * 

     * If overriden should call `super._beforeFallback()`.

     */

    function _beforeFallback() internal virtual {

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\ReentrancyGuardUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;

import "../proxy/Initializable.sol";



/**

 * @dev Contract module that helps prevent reentrant calls to a function.

 *

 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier

 * available, which can be applied to functions to make sure there are no nested

 * (reentrant) calls to them.

 *

 * Note that because there is a single `nonReentrant` guard, functions marked as

 * `nonReentrant` may not call one another. This can be worked around by making

 * those functions `private`, and then adding `external` `nonReentrant` entry

 * points to them.

 *

 * TIP: If you would like to learn more about reentrancy and alternative ways

 * to protect against it, check out our blog post

 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].

 */

abstract contract ReentrancyGuardUpgradeable is Initializable {

    // Booleans are more expensive than uint256 or any type that takes up a full

    // word because each write operation emits an extra SLOAD to first read the

    // slot's contents, replace the bits taken up by the boolean, and then write

    // back. This is the compiler's defense against contract upgrades and

    // pointer aliasing, and it cannot be disabled.



    // The values being non-zero value makes deployment a bit more expensive,

    // but in exchange the refund on every call to nonReentrant will be lower in

    // amount. Since refunds are capped to a percentage of the total

    // transaction's gas, it is best to keep them low in cases like this one, to

    // increase the likelihood of the full refund coming into effect.

    uint256 private constant _NOT_ENTERED = 1;

    uint256 private constant _ENTERED = 2;



    uint256 private _status;



    function __ReentrancyGuard_init() internal initializer {

        __ReentrancyGuard_init_unchained();

    }



    function __ReentrancyGuard_init_unchained() internal initializer {

        _status = _NOT_ENTERED;

    }



    /**

     * @dev Prevents a contract from calling itself, directly or indirectly.

     * Calling a `nonReentrant` function from another `nonReentrant`

     * function is not supported. It is possible to prevent this from happening

     * by making the `nonReentrant` function external, and make it call a

     * `private` function that does the actual work.

     */

    modifier nonReentrant() {

        // On the first call to nonReentrant, _notEntered will be true

        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");



        // Any calls to nonReentrant after this point will fail

        _status = _ENTERED;



        _;



        // By storing the original value once again, a refund is triggered (see

        // https://eips.ethereum.org/EIPS/eip-2200)

        _status = _NOT_ENTERED;

    }

    uint256[49] private __gap;

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\SafeERC20.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



import "./IERC20.sol";

import "../../math/SafeMath.sol";

import "../../utils/Address.sol";



/**

 * @title SafeERC20

 * @dev Wrappers around ERC20 operations that throw on failure (when the token

 * contract returns false). Tokens that return no value (and instead revert or

 * throw on failure) are also supported, non-reverting calls are assumed to be

 * successful.

 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,

 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.

 */

library SafeERC20 {

    using SafeMath for uint256;

    using Address for address;



    function safeTransfer(IERC20 token, address to, uint256 value) internal {

        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));

    }



    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {

        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));

    }



    /**

     * @dev Deprecated. This function has issues similar to the ones found in

     * {IERC20-approve}, and its usage is discouraged.

     *

     * Whenever possible, use {safeIncreaseAllowance} and

     * {safeDecreaseAllowance} instead.

     */

    function safeApprove(IERC20 token, address spender, uint256 value) internal {

        // safeApprove should only be called when setting an initial allowance,

        // or when resetting it to zero. To increase and decrease it, use

        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'

        // solhint-disable-next-line max-line-length

        require((value == 0) || (token.allowance(address(this), spender) == 0),

            "SafeERC20: approve from non-zero to non-zero allowance"

        );

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));

    }



    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {

        uint256 newAllowance = token.allowance(address(this), spender).add(value);

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

    }



    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {

        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

    }



    /**

     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement

     * on the return value: the return value is optional (but if data is returned, it must not be false).

     * @param token The token targeted by the call.

     * @param data The call data (encoded using abi.encode or one of its variants).

     */

    function _callOptionalReturn(IERC20 token, bytes memory data) private {

        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that

        // the target address contains contract code and also asserts for success in the low-level call.



        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional

            // solhint-disable-next-line max-line-length

            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\SafeMath.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Wrappers over Solidity's arithmetic operations with added overflow

 * checks.

 *

 * Arithmetic operations in Solidity wrap on overflow. This can easily result

 * in bugs, because programmers usually assume that an overflow raises an

 * error, which is the standard behavior in high level programming languages.

 * `SafeMath` restores this intuition by reverting the transaction when an

 * operation overflows.

 *

 * Using this library instead of the unchecked operations eliminates an entire

 * class of bugs, so it's recommended to use it always.

 */

library SafeMath {

    /**

     * @dev Returns the addition of two unsigned integers, with an overflow flag.

     *

     * _Available since v3.4._

     */

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        uint256 c = a + b;

        if (c < a) return (false, 0);

        return (true, c);

    }



    /**

     * @dev Returns the substraction of two unsigned integers, with an overflow flag.

     *

     * _Available since v3.4._

     */

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        if (b > a) return (false, 0);

        return (true, a - b);

    }



    /**

     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.

     *

     * _Available since v3.4._

     */

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the

        // benefit is lost if 'b' is also tested.

        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522

        if (a == 0) return (true, 0);

        uint256 c = a * b;

        if (c / a != b) return (false, 0);

        return (true, c);

    }



    /**

     * @dev Returns the division of two unsigned integers, with a division by zero flag.

     *

     * _Available since v3.4._

     */

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        if (b == 0) return (false, 0);

        return (true, a / b);

    }



    /**

     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.

     *

     * _Available since v3.4._

     */

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        if (b == 0) return (false, 0);

        return (true, a % b);

    }



    /**

     * @dev Returns the addition of two unsigned integers, reverting on

     * overflow.

     *

     * Counterpart to Solidity's `+` operator.

     *

     * Requirements:

     *

     * - Addition cannot overflow.

     */

    function add(uint256 a, uint256 b) internal pure returns (uint256) {

        uint256 c = a + b;

        require(c >= a, "SafeMath: addition overflow");

        return c;

    }



    /**

     * @dev Returns the subtraction of two unsigned integers, reverting on

     * overflow (when the result is negative).

     *

     * Counterpart to Solidity's `-` operator.

     *

     * Requirements:

     *

     * - Subtraction cannot overflow.

     */

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b <= a, "SafeMath: subtraction overflow");

        return a - b;

    }



    /**

     * @dev Returns the multiplication of two unsigned integers, reverting on

     * overflow.

     *

     * Counterpart to Solidity's `*` operator.

     *

     * Requirements:

     *

     * - Multiplication cannot overflow.

     */

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a == 0) return 0;

        uint256 c = a * b;

        require(c / a == b, "SafeMath: multiplication overflow");

        return c;

    }



    /**

     * @dev Returns the integer division of two unsigned integers, reverting on

     * division by zero. The result is rounded towards zero.

     *

     * Counterpart to Solidity's `/` operator. Note: this function uses a

     * `revert` opcode (which leaves remaining gas untouched) while Solidity

     * uses an invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b > 0, "SafeMath: division by zero");

        return a / b;

    }



    /**

     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),

     * reverting when dividing by zero.

     *

     * Counterpart to Solidity's `%` operator. This function uses a `revert`

     * opcode (which leaves remaining gas untouched) while Solidity uses an

     * invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b > 0, "SafeMath: modulo by zero");

        return a % b;

    }



    /**

     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on

     * overflow (when the result is negative).

     *

     * CAUTION: This function is deprecated because it requires allocating memory for the error

     * message unnecessarily. For custom revert reasons use {trySub}.

     *

     * Counterpart to Solidity's `-` operator.

     *

     * Requirements:

     *

     * - Subtraction cannot overflow.

     */

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b <= a, errorMessage);

        return a - b;

    }



    /**

     * @dev Returns the integer division of two unsigned integers, reverting with custom message on

     * division by zero. The result is rounded towards zero.

     *

     * CAUTION: This function is deprecated because it requires allocating memory for the error

     * message unnecessarily. For custom revert reasons use {tryDiv}.

     *

     * Counterpart to Solidity's `/` operator. Note: this function uses a

     * `revert` opcode (which leaves remaining gas untouched) while Solidity

     * uses an invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b > 0, errorMessage);

        return a / b;

    }



    /**

     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),

     * reverting with custom message when dividing by zero.

     *

     * CAUTION: This function is deprecated because it requires allocating memory for the error

     * message unnecessarily. For custom revert reasons use {tryMod}.

     *

     * Counterpart to Solidity's `%` operator. This function uses a `revert`

     * opcode (which leaves remaining gas untouched) while Solidity uses an

     * invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b > 0, errorMessage);

        return a % b;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\SafeMathUpgradeable.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity >=0.6.0 <0.8.0;



/**

 * @dev Wrappers over Solidity's arithmetic operations with added overflow

 * checks.

 *

 * Arithmetic operations in Solidity wrap on overflow. This can easily result

 * in bugs, because programmers usually assume that an overflow raises an

 * error, which is the standard behavior in high level programming languages.

 * `SafeMath` restores this intuition by reverting the transaction when an

 * operation overflows.

 *

 * Using this library instead of the unchecked operations eliminates an entire

 * class of bugs, so it's recommended to use it always.

 */

library SafeMathUpgradeable {

    /**

     * @dev Returns the addition of two unsigned integers, with an overflow flag.

     *

     * _Available since v3.4._

     */

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        uint256 c = a + b;

        if (c < a) return (false, 0);

        return (true, c);

    }



    /**

     * @dev Returns the substraction of two unsigned integers, with an overflow flag.

     *

     * _Available since v3.4._

     */

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        if (b > a) return (false, 0);

        return (true, a - b);

    }



    /**

     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.

     *

     * _Available since v3.4._

     */

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the

        // benefit is lost if 'b' is also tested.

        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522

        if (a == 0) return (true, 0);

        uint256 c = a * b;

        if (c / a != b) return (false, 0);

        return (true, c);

    }



    /**

     * @dev Returns the division of two unsigned integers, with a division by zero flag.

     *

     * _Available since v3.4._

     */

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        if (b == 0) return (false, 0);

        return (true, a / b);

    }



    /**

     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.

     *

     * _Available since v3.4._

     */

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {

        if (b == 0) return (false, 0);

        return (true, a % b);

    }



    /**

     * @dev Returns the addition of two unsigned integers, reverting on

     * overflow.

     *

     * Counterpart to Solidity's `+` operator.

     *

     * Requirements:

     *

     * - Addition cannot overflow.

     */

    function add(uint256 a, uint256 b) internal pure returns (uint256) {

        uint256 c = a + b;

        require(c >= a, "SafeMath: addition overflow");

        return c;

    }



    /**

     * @dev Returns the subtraction of two unsigned integers, reverting on

     * overflow (when the result is negative).

     *

     * Counterpart to Solidity's `-` operator.

     *

     * Requirements:

     *

     * - Subtraction cannot overflow.

     */

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b <= a, "SafeMath: subtraction overflow");

        return a - b;

    }



    /**

     * @dev Returns the multiplication of two unsigned integers, reverting on

     * overflow.

     *

     * Counterpart to Solidity's `*` operator.

     *

     * Requirements:

     *

     * - Multiplication cannot overflow.

     */

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a == 0) return 0;

        uint256 c = a * b;

        require(c / a == b, "SafeMath: multiplication overflow");

        return c;

    }



    /**

     * @dev Returns the integer division of two unsigned integers, reverting on

     * division by zero. The result is rounded towards zero.

     *

     * Counterpart to Solidity's `/` operator. Note: this function uses a

     * `revert` opcode (which leaves remaining gas untouched) while Solidity

     * uses an invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b > 0, "SafeMath: division by zero");

        return a / b;

    }



    /**

     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),

     * reverting when dividing by zero.

     *

     * Counterpart to Solidity's `%` operator. This function uses a `revert`

     * opcode (which leaves remaining gas untouched) while Solidity uses an

     * invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b > 0, "SafeMath: modulo by zero");

        return a % b;

    }



    /**

     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on

     * overflow (when the result is negative).

     *

     * CAUTION: This function is deprecated because it requires allocating memory for the error

     * message unnecessarily. For custom revert reasons use {trySub}.

     *

     * Counterpart to Solidity's `-` operator.

     *

     * Requirements:

     *

     * - Subtraction cannot overflow.

     */

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b <= a, errorMessage);

        return a - b;

    }



    /**

     * @dev Returns the integer division of two unsigned integers, reverting with custom message on

     * division by zero. The result is rounded towards zero.

     *

     * CAUTION: This function is deprecated because it requires allocating memory for the error

     * message unnecessarily. For custom revert reasons use {tryDiv}.

     *

     * Counterpart to Solidity's `/` operator. Note: this function uses a

     * `revert` opcode (which leaves remaining gas untouched) while Solidity

     * uses an invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b > 0, errorMessage);

        return a / b;

    }



    /**

     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),

     * reverting with custom message when dividing by zero.

     *

     * CAUTION: This function is deprecated because it requires allocating memory for the error

     * message unnecessarily. For custom revert reasons use {tryMod}.

     *

     * Counterpart to Solidity's `%` operator. This function uses a `revert`

     * opcode (which leaves remaining gas untouched) while Solidity uses an

     * invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b > 0, errorMessage);

        return a % b;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\SignedSafeMath.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



library SignedSafeMath {

    int256 constant private _INT256_MIN = -2**255;



    /**

     * @dev Returns the multiplication of two signed integers, reverting on

     * overflow.

     *

     * Counterpart to Solidity's `*` operator.

     *

     * Requirements:

     *

     * - Multiplication cannot overflow.

     */

    function mul(int256 a, int256 b) internal pure returns (int256) {

        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the

        // benefit is lost if 'b' is also tested.

        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522

        if (a == 0) {

            return 0;

        }



        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");



        int256 c = a * b;

        require(c / a == b, "SignedSafeMath: multiplication overflow");



        return c;

    }



    /**

     * @dev Returns the integer division of two signed integers. Reverts on

     * division by zero. The result is rounded towards zero.

     *

     * Counterpart to Solidity's `/` operator. Note: this function uses a

     * `revert` opcode (which leaves remaining gas untouched) while Solidity

     * uses an invalid opcode to revert (consuming all remaining gas).

     *

     * Requirements:

     *

     * - The divisor cannot be zero.

     */

    function div(int256 a, int256 b) internal pure returns (int256) {

        require(b != 0, "SignedSafeMath: division by zero");

        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");



        int256 c = a / b;



        return c;

    }



    /**

     * @dev Returns the subtraction of two signed integers, reverting on

     * overflow.

     *

     * Counterpart to Solidity's `-` operator.

     *

     * Requirements:

     *

     * - Subtraction cannot overflow.

     */

    function sub(int256 a, int256 b) internal pure returns (int256) {

        int256 c = a - b;

        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");



        return c;

    }



    /**

     * @dev Returns the addition of two signed integers, reverting on

     * overflow.

     *

     * Counterpart to Solidity's `+` operator.

     *

     * Requirements:

     *

     * - Addition cannot overflow.

     */

    function add(int256 a, int256 b) internal pure returns (int256) {

        int256 c = a + b;

        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");



        return c;

    }



    function toUInt256(int256 a) internal pure returns (uint256) {

        require(a >= 0, "Integer < 0");

        return uint256(a);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\Strings.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity ^0.8.0;



/**

 * @dev String operations.

 */

library Strings {

    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";



    /**

     * @dev Converts a `uint256` to its ASCII `string` decimal representation.

     */

    function toString(uint256 value) internal pure returns (string memory) {

        // Inspired by OraclizeAPI's implementation - MIT licence

        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol



        if (value == 0) {

            return "0";

        }

        uint256 temp = value;

        uint256 digits;

        while (temp != 0) {

            digits++;

            temp /= 10;

        }

        bytes memory buffer = new bytes(digits);

        while (value != 0) {

            digits -= 1;

            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));

            value /= 10;

        }

        return string(buffer);

    }



    /**

     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.

     */

    function toHexString(uint256 value) internal pure returns (string memory) {

        if (value == 0) {

            return "0x00";

        }

        uint256 temp = value;

        uint256 length = 0;

        while (temp != 0) {

            length++;

            temp >>= 8;

        }

        return toHexString(value, length);

    }



    /**

     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.

     */

    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {

        bytes memory buffer = new bytes(2 * length + 2);

        buffer[0] = "0";

        buffer[1] = "x";

        for (uint256 i = 2 * length + 1; i > 1; --i) {

            buffer[i] = _HEX_SYMBOLS[value & 0xf];

            value >>= 4;

        }

        require(value == 0, "Strings: hex length insufficient");

        return string(buffer);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\Swap.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts/math/SafeMath.sol";

import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

import "@openzeppelin/contracts/proxy/Clones.sol";

import "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";

import "./OwnerPausableUpgradeable.sol";

import "./SwapUtils.sol";

import "./AmplificationUtils.sol";



/**

 * @title Swap - A StableSwap implementation in solidity.

 * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)

 * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens

 * in desired ratios for an exchange of the pool token that represents their share of the pool.

 * Users can burn pool tokens and withdraw their share of token(s).

 *

 * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets

 * distributed to the LPs.

 *

 * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which

 * stops the ratio of the tokens in the pool from changing.

 * Users can always withdraw their tokens via multi-asset withdraws.

 *

 * @dev Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's

 * deployment size.

 */

contract Swap is OwnerPausableUpgradeable, ReentrancyGuardUpgradeable {

    using SafeERC20 for IERC20;

    using SafeMath for uint256;

    using SwapUtils for SwapUtils.Swap;

    using AmplificationUtils for SwapUtils.Swap;



    // Struct storing data responsible for automatic market maker functionalities. In order to

    // access this data, this contract uses SwapUtils library. For more details, see SwapUtils.sol

    SwapUtils.Swap public swapStorage;



    // Maps token address to an index in the pool. Used to prevent duplicate tokens in the pool.

    // getTokenIndex function also relies on this mapping to retrieve token index.

    mapping(address => uint8) private tokenIndexes;



    /*** EVENTS ***/



    // events replicated from SwapUtils to make the ABI easier for dumb

    // clients

    event TokenSwap(

        address indexed buyer,

        uint256 tokensSold,

        uint256 tokensBought,

        uint128 soldId,

        uint128 boughtId

    );

    event AddLiquidity(

        address indexed provider,

        uint256[] tokenAmounts,

        uint256[] fees,

        uint256 invariant,

        uint256 lpTokenSupply

    );

    event RemoveLiquidity(

        address indexed provider,

        uint256[] tokenAmounts,

        uint256 lpTokenSupply

    );

    event RemoveLiquidityOne(

        address indexed provider,

        uint256 lpTokenAmount,

        uint256 lpTokenSupply,

        uint256 boughtId,

        uint256 tokensBought

    );

    event RemoveLiquidityImbalance(

        address indexed provider,

        uint256[] tokenAmounts,

        uint256[] fees,

        uint256 invariant,

        uint256 lpTokenSupply

    );

    event NewAdminFee(uint256 newAdminFee);

    event NewSwapFee(uint256 newSwapFee);

    event RampA(

        uint256 oldA,

        uint256 newA,

        uint256 initialTime,

        uint256 futureTime

    );

    event StopRampA(uint256 currentA, uint256 time);



    /**

     * @notice Initializes this Swap contract with the given parameters.

     * This will also clone a LPToken contract that represents users'

     * LP positions. The owner of LPToken will be this contract - which means

     * only this contract is allowed to mint/burn tokens.

     *

     * @param _pooledTokens an array of ERC20s this pool will accept

     * @param decimals the decimals to use for each pooled token,

     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS

     * @param lpTokenName the long-form name of the token to be deployed

     * @param lpTokenSymbol the short symbol for the token to be deployed

     * @param _a the amplification coefficient * n * (n - 1). See the

     * StableSwap paper for details

     * @param _fee default swap fee to be initialized with

     * @param _adminFee default adminFee to be initialized with

     * @param lpTokenTargetAddress the address of an existing LPToken contract to use as a target

     */

    function initialize(

        IERC20[] memory _pooledTokens,

        uint8[] memory decimals,

        string memory lpTokenName,

        string memory lpTokenSymbol,

        uint256 _a,

        uint256 _fee,

        uint256 _adminFee,

        address lpTokenTargetAddress

    ) public virtual initializer {

        __OwnerPausable_init();

        __ReentrancyGuard_init();

        // Check _pooledTokens and precisions parameter

        require(_pooledTokens.length > 1, "_pooledTokens.length <= 1");

        require(_pooledTokens.length <= 32, "_pooledTokens.length > 32");

        require(

            _pooledTokens.length == decimals.length,

            "_pooledTokens decimals mismatch"

        );



        uint256[] memory precisionMultipliers = new uint256[](decimals.length);



        for (uint8 i = 0; i < _pooledTokens.length; i++) {

            if (i > 0) {

                // Check if index is already used. Check if 0th element is a duplicate.

                require(

                    tokenIndexes[address(_pooledTokens[i])] == 0 &&

                        _pooledTokens[0] != _pooledTokens[i],

                    "Duplicate tokens"

                );

            }

            require(

                address(_pooledTokens[i]) != address(0),

                "The 0 address isn't an ERC-20"

            );

            require(

                decimals[i] <= SwapUtils.POOL_PRECISION_DECIMALS,

                "Token decimals exceeds max"

            );

            precisionMultipliers[i] =

                10 **

                    uint256(SwapUtils.POOL_PRECISION_DECIMALS).sub(

                        uint256(decimals[i])

                    );

            tokenIndexes[address(_pooledTokens[i])] = i;

        }



        // Check _a, _fee, _adminFee parameters

        require(_a < AmplificationUtils.MAX_A, "_a exceeds maximum");

        require(_fee < SwapUtils.MAX_SWAP_FEE, "_fee exceeds maximum");

        require(

            _adminFee < SwapUtils.MAX_ADMIN_FEE,

            "_adminFee exceeds maximum"

        );



        // Clone and initialize a LPToken contract

        LPToken lpToken = LPToken(Clones.clone(lpTokenTargetAddress));

        require(

            lpToken.initialize(lpTokenName, lpTokenSymbol),

            "could not init lpToken clone"

        );



        // Initialize swapStorage struct

        swapStorage.lpToken = lpToken;

        swapStorage.pooledTokens = _pooledTokens;

        swapStorage.tokenPrecisionMultipliers = precisionMultipliers;

        swapStorage.balances = new uint256[](_pooledTokens.length);

        swapStorage.initialA = _a.mul(AmplificationUtils.A_PRECISION);

        swapStorage.futureA = _a.mul(AmplificationUtils.A_PRECISION);

        // swapStorage.initialATime = 0;

        // swapStorage.futureATime = 0;

        swapStorage.swapFee = _fee;

        swapStorage.adminFee = _adminFee;

    }



    /*** MODIFIERS ***/



    /**

     * @notice Modifier to check deadline against current timestamp

     * @param deadline latest timestamp to accept this transaction

     */

    modifier deadlineCheck(uint256 deadline) {

        require(block.timestamp <= deadline, "Deadline not met");

        _;

    }



    /*** VIEW FUNCTIONS ***/



    /**

     * @notice Return A, the amplification coefficient * n * (n - 1)

     * @dev See the StableSwap paper for details

     * @return A parameter

     */

    function getA() external view virtual returns (uint256) {

        return swapStorage.getA();

    }



    /**

     * @notice Return A in its raw precision form

     * @dev See the StableSwap paper for details

     * @return A parameter in its raw precision form

     */

    function getAPrecise() external view virtual returns (uint256) {

        return swapStorage.getAPrecise();

    }



    /**

     * @notice Return address of the pooled token at given index. Reverts if tokenIndex is out of range.

     * @param index the index of the token

     * @return address of the token at given index

     */

    function getToken(uint8 index) public view virtual returns (IERC20) {

        require(index < swapStorage.pooledTokens.length, "Out of range");

        return swapStorage.pooledTokens[index];

    }



    /**

     * @notice Return the index of the given token address. Reverts if no matching

     * token is found.

     * @param tokenAddress address of the token

     * @return the index of the given token address

     */

    function getTokenIndex(address tokenAddress)

        public

        view

        virtual

        returns (uint8)

    {

        uint8 index = tokenIndexes[tokenAddress];

        require(

            address(getToken(index)) == tokenAddress,

            "Token does not exist"

        );

        return index;

    }



    /**

     * @notice Return current balance of the pooled token at given index

     * @param index the index of the token

     * @return current balance of the pooled token at given index with token's native precision

     */

    function getTokenBalance(uint8 index)

        external

        view

        virtual

        returns (uint256)

    {

        require(index < swapStorage.pooledTokens.length, "Index out of range");

        return swapStorage.balances[index];

    }



    /**

     * @notice Get the virtual price, to help calculate profit

     * @return the virtual price, scaled to the POOL_PRECISION_DECIMALS

     */

    function getVirtualPrice() external view virtual returns (uint256) {

        return swapStorage.getVirtualPrice();

    }



    /**

     * @notice Calculate amount of tokens you receive on swap

     * @param tokenIndexFrom the token the user wants to sell

     * @param tokenIndexTo the token the user wants to buy

     * @param dx the amount of tokens the user wants to sell. If the token charges

     * a fee on transfers, use the amount that gets transferred after the fee.

     * @return amount of tokens the user will receive

     */

    function calculateSwap(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx

    ) external view virtual returns (uint256) {

        return swapStorage.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);

    }



    /**

     * @notice A simple method to calculate prices from deposits or

     * withdrawals, excluding fees but including slippage. This is

     * helpful as an input into the various "min" parameters on calls

     * to fight front-running

     *

     * @dev This shouldn't be used outside frontends for user estimates.

     *

     * @param amounts an array of token amounts to deposit or withdrawal,

     * corresponding to pooledTokens. The amount should be in each

     * pooled token's native precision. If a token charges a fee on transfers,

     * use the amount that gets transferred after the fee.

     * @param deposit whether this is a deposit or a withdrawal

     * @return token amount the user will receive

     */

    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)

        external

        view

        virtual

        returns (uint256)

    {

        return swapStorage.calculateTokenAmount(amounts, deposit);

    }



    /**

     * @notice A simple method to calculate amount of each underlying

     * tokens that is returned upon burning given amount of LP tokens

     * @param amount the amount of LP tokens that would be burned on withdrawal

     * @return array of token balances that the user will receive

     */

    function calculateRemoveLiquidity(uint256 amount)

        external

        view

        virtual

        returns (uint256[] memory)

    {

        return swapStorage.calculateRemoveLiquidity(amount);

    }



    /**

     * @notice Calculate the amount of underlying token available to withdraw

     * when withdrawing via only single token

     * @param tokenAmount the amount of LP token to burn

     * @param tokenIndex index of which token will be withdrawn

     * @return availableTokenAmount calculated amount of underlying token

     * available to withdraw

     */

    function calculateRemoveLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex

    ) external view virtual returns (uint256 availableTokenAmount) {

        return swapStorage.calculateWithdrawOneToken(tokenAmount, tokenIndex);

    }



    /**

     * @notice This function reads the accumulated amount of admin fees of the token with given index

     * @param index Index of the pooled token

     * @return admin's token balance in the token's precision

     */

    function getAdminBalance(uint256 index)

        external

        view

        virtual

        returns (uint256)

    {

        return swapStorage.getAdminBalance(index);

    }



    /*** STATE MODIFYING FUNCTIONS ***/



    /**

     * @notice Swap two tokens using this pool

     * @param tokenIndexFrom the token the user wants to swap from

     * @param tokenIndexTo the token the user wants to swap to

     * @param dx the amount of tokens the user wants to swap from

     * @param minDy the min amount the user would like to receive, or revert.

     * @param deadline latest timestamp to accept this transaction

     */

    function swap(

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 minDy,

        uint256 deadline

    )

        external

        virtual

        nonReentrant

        whenNotPaused

        deadlineCheck(deadline)

        returns (uint256)

    {

        return swapStorage.swap(tokenIndexFrom, tokenIndexTo, dx, minDy);

    }



    /**

     * @notice Add liquidity to the pool with the given amounts of tokens

     * @param amounts the amounts of each token to add, in their native precision

     * @param minToMint the minimum LP tokens adding this amount of liquidity

     * should mint, otherwise revert. Handy for front-running mitigation

     * @param deadline latest timestamp to accept this transaction

     * @return amount of LP token user minted and received

     */

    function addLiquidity(

        uint256[] calldata amounts,

        uint256 minToMint,

        uint256 deadline

    )

        external

        virtual

        nonReentrant

        whenNotPaused

        deadlineCheck(deadline)

        returns (uint256)

    {

        return swapStorage.addLiquidity(amounts, minToMint);

    }



    /**

     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly

     * over period of 4 weeks since last deposit will apply.

     * @dev Liquidity can always be removed, even when the pool is paused.

     * @param amount the amount of LP tokens to burn

     * @param minAmounts the minimum amounts of each token in the pool

     *        acceptable for this burn. Useful as a front-running mitigation

     * @param deadline latest timestamp to accept this transaction

     * @return amounts of tokens user received

     */

    function removeLiquidity(

        uint256 amount,

        uint256[] calldata minAmounts,

        uint256 deadline

    )

        external

        virtual

        nonReentrant

        deadlineCheck(deadline)

        returns (uint256[] memory)

    {

        return swapStorage.removeLiquidity(amount, minAmounts);

    }



    /**

     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly

     * over period of 4 weeks since last deposit will apply.

     * @param tokenAmount the amount of the token you want to receive

     * @param tokenIndex the index of the token you want to receive

     * @param minAmount the minimum amount to withdraw, otherwise revert

     * @param deadline latest timestamp to accept this transaction

     * @return amount of chosen token user received

     */

    function removeLiquidityOneToken(

        uint256 tokenAmount,

        uint8 tokenIndex,

        uint256 minAmount,

        uint256 deadline

    )

        external

        virtual

        nonReentrant

        whenNotPaused

        deadlineCheck(deadline)

        returns (uint256)

    {

        return

            swapStorage.removeLiquidityOneToken(

                tokenAmount,

                tokenIndex,

                minAmount

            );

    }



    /**

     * @notice Remove liquidity from the pool, weighted differently than the

     * pool's current balances. Withdraw fee that decays linearly

     * over period of 4 weeks since last deposit will apply.

     * @param amounts how much of each token to withdraw

     * @param maxBurnAmount the max LP token provider is willing to pay to

     * remove liquidity. Useful as a front-running mitigation.

     * @param deadline latest timestamp to accept this transaction

     * @return amount of LP tokens burned

     */

    function removeLiquidityImbalance(

        uint256[] calldata amounts,

        uint256 maxBurnAmount,

        uint256 deadline

    )

        external

        virtual

        nonReentrant

        whenNotPaused

        deadlineCheck(deadline)

        returns (uint256)

    {

        return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);

    }



    /*** ADMIN FUNCTIONS ***/



    /**

     * @notice Withdraw all admin fees to the contract owner

     */

    function withdrawAdminFees() external onlyOwner {

        swapStorage.withdrawAdminFees(owner());

    }



    /**

     * @notice Update the admin fee. Admin fee takes portion of the swap fee.

     * @param newAdminFee new admin fee to be applied on future transactions

     */

    function setAdminFee(uint256 newAdminFee) external onlyOwner {

        swapStorage.setAdminFee(newAdminFee);

    }



    /**

     * @notice Update the swap fee to be applied on swaps

     * @param newSwapFee new swap fee to be applied on future transactions

     */

    function setSwapFee(uint256 newSwapFee) external onlyOwner {

        swapStorage.setSwapFee(newSwapFee);

    }



    /**

     * @notice Start ramping up or down A parameter towards given futureA and futureTime

     * Checks if the change is too rapid, and commits the new A value only when it falls under

     * the limit range.

     * @param futureA the new A to ramp towards

     * @param futureTime timestamp when the new A should be reached

     */

    function rampA(uint256 futureA, uint256 futureTime) external onlyOwner {

        swapStorage.rampA(futureA, futureTime);

    }



    /**

     * @notice Stop ramping A immediately. Reverts if ramp A is already stopped.

     */

    function stopRampA() external onlyOwner {

        swapStorage.stopRampA();

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\SwapDeployer.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts/access/Ownable.sol";

import "@openzeppelin/contracts/proxy/Clones.sol";

import "./interfaces/ISwap.sol";



contract SwapDeployer is Ownable {

    event NewSwapPool(

        address indexed deployer,

        address swapAddress,

        IERC20[] pooledTokens

    );



    constructor() public Ownable() {}



    function deploy(

        address swapAddress,

        IERC20[] memory _pooledTokens,

        uint8[] memory decimals,

        string memory lpTokenName,

        string memory lpTokenSymbol,

        uint256 _a,

        uint256 _fee,

        uint256 _adminFee,

        address lpTokenTargetAddress

    ) external returns (address) {

        address swapClone = Clones.clone(swapAddress);

        ISwap(swapClone).initialize(

            _pooledTokens,

            decimals,

            lpTokenName,

            lpTokenSymbol,

            _a,

            _fee,

            _adminFee,

            lpTokenTargetAddress

        );

        Ownable(swapClone).transferOwnership(owner());

        emit NewSwapPool(msg.sender, swapClone, _pooledTokens);

        return swapClone;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\SwapFlashLoan.sol
File type: .sol
// SPDX-License-Identifier: MIT WITH AGPL-3.0-only



pragma solidity 0.6.12;



import "./Swap.sol";

import "./interfaces/IFlashLoanReceiver.sol";



/**

 * @title Swap - A StableSwap implementation in solidity.

 * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)

 * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens

 * in desired ratios for an exchange of the pool token that represents their share of the pool.

 * Users can burn pool tokens and withdraw their share of token(s).

 *

 * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets

 * distributed to the LPs.

 *

 * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which

 * stops the ratio of the tokens in the pool from changing.

 * Users can always withdraw their tokens via multi-asset withdraws.

 *

 * @dev Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's

 * deployment size.

 */

contract SwapFlashLoan is Swap {

    // Total fee that is charged on all flashloans in BPS. Borrowers must repay the amount plus the flash loan fee.

    // This fee is split between the protocol and the pool.

    uint256 public flashLoanFeeBPS;

    // Share of the flash loan fee that goes to the protocol in BPS. A portion of each flash loan fee is allocated

    // to the protocol rather than the pool.

    uint256 public protocolFeeShareBPS;

    // Max BPS for limiting flash loan fee settings.

    uint256 public constant MAX_BPS = 10000;



    /*** EVENTS ***/

    event FlashLoan(

        address indexed receiver,

        uint8 tokenIndex,

        uint256 amount,

        uint256 amountFee,

        uint256 protocolFee

    );



    /**

     * @notice Initializes this Swap contract with the given parameters.

     * This will also clone a LPToken contract that represents users'

     * LP positions. The owner of LPToken will be this contract - which means

     * only this contract is allowed to mint/burn tokens.

     *

     * @param _pooledTokens an array of ERC20s this pool will accept

     * @param decimals the decimals to use for each pooled token,

     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS

     * @param lpTokenName the long-form name of the token to be deployed

     * @param lpTokenSymbol the short symbol for the token to be deployed

     * @param _a the amplification coefficient * n * (n - 1). See the

     * StableSwap paper for details

     * @param _fee default swap fee to be initialized with

     * @param _adminFee default adminFee to be initialized with

     * @param lpTokenTargetAddress the address of an existing LPToken contract to use as a target

     */

    function initialize(

        IERC20[] memory _pooledTokens,

        uint8[] memory decimals,

        string memory lpTokenName,

        string memory lpTokenSymbol,

        uint256 _a,

        uint256 _fee,

        uint256 _adminFee,

        address lpTokenTargetAddress

    ) public virtual override initializer {

        Swap.initialize(

            _pooledTokens,

            decimals,

            lpTokenName,

            lpTokenSymbol,

            _a,

            _fee,

            _adminFee,

            lpTokenTargetAddress

        );

        flashLoanFeeBPS = 8; // 8 bps

        protocolFeeShareBPS = 0; // 0 bps

    }



    /*** STATE MODIFYING FUNCTIONS ***/



    /**

     * @notice Borrow the specified token from this pool for this transaction only. This function will call

     * `IFlashLoanReceiver(receiver).executeOperation` and the `receiver` must return the full amount of the token

     * and the associated fee by the end of the callback transaction. If the conditions are not met, this call

     * is reverted.

     * @param receiver the address of the receiver of the token. This address must implement the IFlashLoanReceiver

     * interface and the callback function `executeOperation`.

     * @param token the protocol fee in bps to be applied on the total flash loan fee

     * @param amount the total amount to borrow in this transaction

     * @param params optional data to pass along to the callback function

     */

    function flashLoan(

        address receiver,

        IERC20 token,

        uint256 amount,

        bytes memory params

    ) external nonReentrant {

        uint8 tokenIndex = getTokenIndex(address(token));

        uint256 availableLiquidityBefore = token.balanceOf(address(this));

        uint256 protocolBalanceBefore =

            availableLiquidityBefore.sub(swapStorage.balances[tokenIndex]);

        require(

            amount > 0 && availableLiquidityBefore >= amount,

            "invalid amount"

        );



        // Calculate the additional amount of tokens the pool should end up with

        uint256 amountFee = amount.mul(flashLoanFeeBPS).div(10000);

        // Calculate the portion of the fee that will go to the protocol

        uint256 protocolFee = amountFee.mul(protocolFeeShareBPS).div(10000);

        require(amountFee > 0, "amount is small for a flashLoan");



        // Transfer the requested amount of tokens

        token.safeTransfer(receiver, amount);



        // Execute callback function on receiver

        IFlashLoanReceiver(receiver).executeOperation(

            address(this),

            address(token),

            amount,

            amountFee,

            params

        );



        uint256 availableLiquidityAfter = token.balanceOf(address(this));

        require(

            availableLiquidityAfter >= availableLiquidityBefore.add(amountFee),

            "flashLoan fee is not met"

        );



        swapStorage.balances[tokenIndex] = availableLiquidityAfter

            .sub(protocolBalanceBefore)

            .sub(protocolFee);

        emit FlashLoan(receiver, tokenIndex, amount, amountFee, protocolFee);

    }



    /*** ADMIN FUNCTIONS ***/



    /**

     * @notice Updates the flash loan fee parameters. This function can only be called by the owner.

     * @param newFlashLoanFeeBPS the total fee in bps to be applied on future flash loans

     * @param newProtocolFeeShareBPS the protocol fee in bps to be applied on the total flash loan fee

     */

    function setFlashLoanFees(

        uint256 newFlashLoanFeeBPS,

        uint256 newProtocolFeeShareBPS

    ) external onlyOwner {

        require(

            newFlashLoanFeeBPS > 0 &&

                newFlashLoanFeeBPS <= MAX_BPS &&

                newProtocolFeeShareBPS <= MAX_BPS,

            "fees are not in valid range"

        );

        flashLoanFeeBPS = newFlashLoanFeeBPS;

        protocolFeeShareBPS = newProtocolFeeShareBPS;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\SwapUtils.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import "@openzeppelin/contracts/math/SafeMath.sol";

import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

import "./AmplificationUtils.sol";

import "./LPToken.sol";

import "./MathUtils.sol";



/**

 * @title SwapUtils library

 * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.

 * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library

 * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.

 * Admin functions should be protected within contracts using this library.

 */

library SwapUtils {

    using SafeERC20 for IERC20;

    using SafeMath for uint256;

    using MathUtils for uint256;



    /*** EVENTS ***/



    event TokenSwap(

        address indexed buyer,

        uint256 tokensSold,

        uint256 tokensBought,

        uint128 soldId,

        uint128 boughtId

    );

    event AddLiquidity(

        address indexed provider,

        uint256[] tokenAmounts,

        uint256[] fees,

        uint256 invariant,

        uint256 lpTokenSupply

    );

    event RemoveLiquidity(

        address indexed provider,

        uint256[] tokenAmounts,

        uint256 lpTokenSupply

    );

    event RemoveLiquidityOne(

        address indexed provider,

        uint256 lpTokenAmount,

        uint256 lpTokenSupply,

        uint256 boughtId,

        uint256 tokensBought

    );

    event RemoveLiquidityImbalance(

        address indexed provider,

        uint256[] tokenAmounts,

        uint256[] fees,

        uint256 invariant,

        uint256 lpTokenSupply

    );

    event NewAdminFee(uint256 newAdminFee);

    event NewSwapFee(uint256 newSwapFee);



    struct Swap {

        // variables around the ramp management of A,

        // the amplification coefficient * n * (n - 1)

        // see https://www.curve.fi/stableswap-paper.pdf for details

        uint256 initialA;

        uint256 futureA;

        uint256 initialATime;

        uint256 futureATime;

        // fee calculation

        uint256 swapFee;

        uint256 adminFee;

        LPToken lpToken;

        // contract references for all tokens being pooled

        IERC20[] pooledTokens;

        // multipliers for each pooled token's precision to get to POOL_PRECISION_DECIMALS

        // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC

        // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10

        uint256[] tokenPrecisionMultipliers;

        // the pool balance of each token, in the token's precision

        // the contract's actual token balance might differ

        uint256[] balances;

    }



    // Struct storing variables used in calculations in the

    // calculateWithdrawOneTokenDY function to avoid stack too deep errors

    struct CalculateWithdrawOneTokenDYInfo {

        uint256 d0;

        uint256 d1;

        uint256 newY;

        uint256 feePerToken;

        uint256 preciseA;

    }



    // Struct storing variables used in calculations in the

    // {add,remove}Liquidity functions to avoid stack too deep errors

    struct ManageLiquidityInfo {

        uint256 d0;

        uint256 d1;

        uint256 d2;

        uint256 preciseA;

        LPToken lpToken;

        uint256 totalSupply;

        uint256[] balances;

        uint256[] multipliers;

    }



    // the precision all pools tokens will be converted to

    uint8 public constant POOL_PRECISION_DECIMALS = 18;



    // the denominator used to calculate admin and LP fees. For example, an

    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)

    uint256 private constant FEE_DENOMINATOR = 10**10;



    // Max swap fee is 1% or 100bps of each swap

    uint256 public constant MAX_SWAP_FEE = 10**8;



    // Max adminFee is 100% of the swapFee

    // adminFee does not add additional fee on top of swapFee

    // Instead it takes a certain % of the swapFee. Therefore it has no impact on the

    // users but only on the earnings of LPs

    uint256 public constant MAX_ADMIN_FEE = 10**10;



    // Constant value used as max loop limit

    uint256 private constant MAX_LOOP_LIMIT = 256;



    /*** VIEW & PURE FUNCTIONS ***/



    function _getAPrecise(Swap storage self) internal view returns (uint256) {

        return AmplificationUtils._getAPrecise(self);

    }



    /**

     * @notice Calculate the dy, the amount of selected token that user receives and

     * the fee of withdrawing in one token

     * @param tokenAmount the amount to withdraw in the pool's precision

     * @param tokenIndex which token will be withdrawn

     * @param self Swap struct to read from

     * @return the amount of token user will receive

     */

    function calculateWithdrawOneToken(

        Swap storage self,

        uint256 tokenAmount,

        uint8 tokenIndex

    ) external view returns (uint256) {

        (uint256 availableTokenAmount, ) =

            _calculateWithdrawOneToken(

                self,

                tokenAmount,

                tokenIndex,

                self.lpToken.totalSupply()

            );

        return availableTokenAmount;

    }



    function _calculateWithdrawOneToken(

        Swap storage self,

        uint256 tokenAmount,

        uint8 tokenIndex,

        uint256 totalSupply

    ) internal view returns (uint256, uint256) {

        uint256 dy;

        uint256 newY;

        uint256 currentY;



        (dy, newY, currentY) = calculateWithdrawOneTokenDY(

            self,

            tokenIndex,

            tokenAmount,

            totalSupply

        );



        // dy_0 (without fees)

        // dy, dy_0 - dy



        uint256 dySwapFee =

            currentY

                .sub(newY)

                .div(self.tokenPrecisionMultipliers[tokenIndex])

                .sub(dy);



        return (dy, dySwapFee);

    }



    /**

     * @notice Calculate the dy of withdrawing in one token

     * @param self Swap struct to read from

     * @param tokenIndex which token will be withdrawn

     * @param tokenAmount the amount to withdraw in the pools precision

     * @return the d and the new y after withdrawing one token

     */

    function calculateWithdrawOneTokenDY(

        Swap storage self,

        uint8 tokenIndex,

        uint256 tokenAmount,

        uint256 totalSupply

    )

        internal

        view

        returns (

            uint256,

            uint256,

            uint256

        )

    {

        // Get the current D, then solve the stableswap invariant

        // y_i for D - tokenAmount

        uint256[] memory xp = _xp(self);



        require(tokenIndex < xp.length, "Token index out of range");



        CalculateWithdrawOneTokenDYInfo memory v =

            CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);

        v.preciseA = _getAPrecise(self);

        v.d0 = getD(xp, v.preciseA);

        v.d1 = v.d0.sub(tokenAmount.mul(v.d0).div(totalSupply));



        require(tokenAmount <= xp[tokenIndex], "Withdraw exceeds available");



        v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);



        uint256[] memory xpReduced = new uint256[](xp.length);



        v.feePerToken = _feePerToken(self.swapFee, xp.length);

        for (uint256 i = 0; i < xp.length; i++) {

            uint256 xpi = xp[i];

            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY

            // else dxExpected = xp[i] - (xp[i] * d1 / d0)

            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR

            xpReduced[i] = xpi.sub(

                (

                    (i == tokenIndex)

                        ? xpi.mul(v.d1).div(v.d0).sub(v.newY)

                        : xpi.sub(xpi.mul(v.d1).div(v.d0))

                )

                    .mul(v.feePerToken)

                    .div(FEE_DENOMINATOR)

            );

        }



        uint256 dy =

            xpReduced[tokenIndex].sub(

                getYD(v.preciseA, tokenIndex, xpReduced, v.d1)

            );

        dy = dy.sub(1).div(self.tokenPrecisionMultipliers[tokenIndex]);



        return (dy, v.newY, xp[tokenIndex]);

    }



    /**

     * @notice Calculate the price of a token in the pool with given

     * precision-adjusted balances and a particular D.

     *

     * @dev This is accomplished via solving the invariant iteratively.

     * See the StableSwap paper and Curve.fi implementation for further details.

     *

     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)

     * x_1**2 + b*x_1 = c

     * x_1 = (x_1**2 + c) / (2*x_1 + b)

     *

     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.

     * @param tokenIndex Index of token we are calculating for.

     * @param xp a precision-adjusted set of pool balances. Array should be

     * the same cardinality as the pool.

     * @param d the stableswap invariant

     * @return the price of the token, in the same precision as in xp

     */

    function getYD(

        uint256 a,

        uint8 tokenIndex,

        uint256[] memory xp,

        uint256 d

    ) internal pure returns (uint256) {

        uint256 numTokens = xp.length;

        require(tokenIndex < numTokens, "Token not found");



        uint256 c = d;

        uint256 s;

        uint256 nA = a.mul(numTokens);



        for (uint256 i = 0; i < numTokens; i++) {

            if (i != tokenIndex) {

                s = s.add(xp[i]);

                c = c.mul(d).div(xp[i].mul(numTokens));

                // If we were to protect the division loss we would have to keep the denominator separate

                // and divide at the end. However this leads to overflow with large numTokens or/and D.

                // c = c * D * D * D * ... overflow!

            }

        }

        c = c.mul(d).mul(AmplificationUtils.A_PRECISION).div(nA.mul(numTokens));



        uint256 b = s.add(d.mul(AmplificationUtils.A_PRECISION).div(nA));

        uint256 yPrev;

        uint256 y = d;

        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {

            yPrev = y;

            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));

            if (y.within1(yPrev)) {

                return y;

            }

        }

        revert("Approximation did not converge");

    }



    /**

     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.

     * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality

     * as the pool.

     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.

     * See the StableSwap paper for details

     * @return the invariant, at the precision of the pool

     */

    function getD(uint256[] memory xp, uint256 a)

        internal

        pure

        returns (uint256)

    {

        uint256 numTokens = xp.length;

        uint256 s;

        for (uint256 i = 0; i < numTokens; i++) {

            s = s.add(xp[i]);

        }

        if (s == 0) {

            return 0;

        }



        uint256 prevD;

        uint256 d = s;

        uint256 nA = a.mul(numTokens);



        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {

            uint256 dP = d;

            for (uint256 j = 0; j < numTokens; j++) {

                dP = dP.mul(d).div(xp[j].mul(numTokens));

                // If we were to protect the division loss we would have to keep the denominator separate

                // and divide at the end. However this leads to overflow with large numTokens or/and D.

                // dP = dP * D * D * D * ... overflow!

            }

            prevD = d;

            d = nA

                .mul(s)

                .div(AmplificationUtils.A_PRECISION)

                .add(dP.mul(numTokens))

                .mul(d)

                .div(

                nA

                    .sub(AmplificationUtils.A_PRECISION)

                    .mul(d)

                    .div(AmplificationUtils.A_PRECISION)

                    .add(numTokens.add(1).mul(dP))

            );

            if (d.within1(prevD)) {

                return d;

            }

        }



        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong

        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`

        // function which does not rely on D.

        revert("D does not converge");

    }



    /**

     * @notice Given a set of balances and precision multipliers, return the

     * precision-adjusted balances.

     *

     * @param balances an array of token balances, in their native precisions.

     * These should generally correspond with pooled tokens.

     *

     * @param precisionMultipliers an array of multipliers, corresponding to

     * the amounts in the balances array. When multiplied together they

     * should yield amounts at the pool's precision.

     *

     * @return an array of amounts "scaled" to the pool's precision

     */

    function _xp(

        uint256[] memory balances,

        uint256[] memory precisionMultipliers

    ) internal pure returns (uint256[] memory) {

        uint256 numTokens = balances.length;

        require(

            numTokens == precisionMultipliers.length,

            "Balances must match multipliers"

        );

        uint256[] memory xp = new uint256[](numTokens);

        for (uint256 i = 0; i < numTokens; i++) {

            xp[i] = balances[i].mul(precisionMultipliers[i]);

        }

        return xp;

    }



    /**

     * @notice Return the precision-adjusted balances of all tokens in the pool

     * @param self Swap struct to read from

     * @return the pool balances "scaled" to the pool's precision, allowing

     * them to be more easily compared.

     */

    function _xp(Swap storage self) internal view returns (uint256[] memory) {

        return _xp(self.balances, self.tokenPrecisionMultipliers);

    }



    /**

     * @notice Get the virtual price, to help calculate profit

     * @param self Swap struct to read from

     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS

     */

    function getVirtualPrice(Swap storage self)

        external

        view

        returns (uint256)

    {

        uint256 d = getD(_xp(self), _getAPrecise(self));

        LPToken lpToken = self.lpToken;

        uint256 supply = lpToken.totalSupply();

        if (supply > 0) {

            return d.mul(10**uint256(POOL_PRECISION_DECIMALS)).div(supply);

        }

        return 0;

    }



    /**

     * @notice Calculate the new balances of the tokens given the indexes of the token

     * that is swapped from (FROM) and the token that is swapped to (TO).

     * This function is used as a helper function to calculate how much TO token

     * the user should receive on swap.

     *

     * @param preciseA precise form of amplification coefficient

     * @param tokenIndexFrom index of FROM token

     * @param tokenIndexTo index of TO token

     * @param x the new total amount of FROM token

     * @param xp balances of the tokens in the pool

     * @return the amount of TO token that should remain in the pool

     */

    function getY(

        uint256 preciseA,

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 x,

        uint256[] memory xp

    ) internal pure returns (uint256) {

        uint256 numTokens = xp.length;

        require(

            tokenIndexFrom != tokenIndexTo,

            "Can't compare token to itself"

        );

        require(

            tokenIndexFrom < numTokens && tokenIndexTo < numTokens,

            "Tokens must be in pool"

        );



        uint256 d = getD(xp, preciseA);

        uint256 c = d;

        uint256 s;

        uint256 nA = numTokens.mul(preciseA);



        uint256 _x;

        for (uint256 i = 0; i < numTokens; i++) {

            if (i == tokenIndexFrom) {

                _x = x;

            } else if (i != tokenIndexTo) {

                _x = xp[i];

            } else {

                continue;

            }

            s = s.add(_x);

            c = c.mul(d).div(_x.mul(numTokens));

            // If we were to protect the division loss we would have to keep the denominator separate

            // and divide at the end. However this leads to overflow with large numTokens or/and D.

            // c = c * D * D * D * ... overflow!

        }

        c = c.mul(d).mul(AmplificationUtils.A_PRECISION).div(nA.mul(numTokens));

        uint256 b = s.add(d.mul(AmplificationUtils.A_PRECISION).div(nA));

        uint256 yPrev;

        uint256 y = d;



        // iterative approximation

        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {

            yPrev = y;

            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));

            if (y.within1(yPrev)) {

                return y;

            }

        }

        revert("Approximation did not converge");

    }



    /**

     * @notice Externally calculates a swap between two tokens.

     * @param self Swap struct to read from

     * @param tokenIndexFrom the token to sell

     * @param tokenIndexTo the token to buy

     * @param dx the number of tokens to sell. If the token charges a fee on transfers,

     * use the amount that gets transferred after the fee.

     * @return dy the number of tokens the user will get

     */

    function calculateSwap(

        Swap storage self,

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx

    ) external view returns (uint256 dy) {

        (dy, ) = _calculateSwap(

            self,

            tokenIndexFrom,

            tokenIndexTo,

            dx,

            self.balances

        );

    }



    /**

     * @notice Internally calculates a swap between two tokens.

     *

     * @dev The caller is expected to transfer the actual amounts (dx and dy)

     * using the token contracts.

     *

     * @param self Swap struct to read from

     * @param tokenIndexFrom the token to sell

     * @param tokenIndexTo the token to buy

     * @param dx the number of tokens to sell. If the token charges a fee on transfers,

     * use the amount that gets transferred after the fee.

     * @return dy the number of tokens the user will get

     * @return dyFee the associated fee

     */

    function _calculateSwap(

        Swap storage self,

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256[] memory balances

    ) internal view returns (uint256 dy, uint256 dyFee) {

        uint256[] memory multipliers = self.tokenPrecisionMultipliers;

        uint256[] memory xp = _xp(balances, multipliers);

        require(

            tokenIndexFrom < xp.length && tokenIndexTo < xp.length,

            "Token index out of range"

        );

        uint256 x = dx.mul(multipliers[tokenIndexFrom]).add(xp[tokenIndexFrom]);

        uint256 y =

            getY(_getAPrecise(self), tokenIndexFrom, tokenIndexTo, x, xp);

        dy = xp[tokenIndexTo].sub(y).sub(1);

        dyFee = dy.mul(self.swapFee).div(FEE_DENOMINATOR);

        dy = dy.sub(dyFee).div(multipliers[tokenIndexTo]);

    }



    /**

     * @notice A simple method to calculate amount of each underlying

     * tokens that is returned upon burning given amount of

     * LP tokens

     *

     * @param amount the amount of LP tokens that would to be burned on

     * withdrawal

     * @return array of amounts of tokens user will receive

     */

    function calculateRemoveLiquidity(Swap storage self, uint256 amount)

        external

        view

        returns (uint256[] memory)

    {

        return

            _calculateRemoveLiquidity(

                self.balances,

                amount,

                self.lpToken.totalSupply()

            );

    }



    function _calculateRemoveLiquidity(

        uint256[] memory balances,

        uint256 amount,

        uint256 totalSupply

    ) internal pure returns (uint256[] memory) {

        require(amount <= totalSupply, "Cannot exceed total supply");



        uint256[] memory amounts = new uint256[](balances.length);



        for (uint256 i = 0; i < balances.length; i++) {

            amounts[i] = balances[i].mul(amount).div(totalSupply);

        }

        return amounts;

    }



    /**

     * @notice A simple method to calculate prices from deposits or

     * withdrawals, excluding fees but including slippage. This is

     * helpful as an input into the various "min" parameters on calls

     * to fight front-running

     *

     * @dev This shouldn't be used outside frontends for user estimates.

     *

     * @param self Swap struct to read from

     * @param amounts an array of token amounts to deposit or withdrawal,

     * corresponding to pooledTokens. The amount should be in each

     * pooled token's native precision. If a token charges a fee on transfers,

     * use the amount that gets transferred after the fee.

     * @param deposit whether this is a deposit or a withdrawal

     * @return if deposit was true, total amount of lp token that will be minted and if

     * deposit was false, total amount of lp token that will be burned

     */

    function calculateTokenAmount(

        Swap storage self,

        uint256[] calldata amounts,

        bool deposit

    ) external view returns (uint256) {

        uint256 a = _getAPrecise(self);

        uint256[] memory balances = self.balances;

        uint256[] memory multipliers = self.tokenPrecisionMultipliers;



        uint256 d0 = getD(_xp(balances, multipliers), a);

        for (uint256 i = 0; i < balances.length; i++) {

            if (deposit) {

                balances[i] = balances[i].add(amounts[i]);

            } else {

                balances[i] = balances[i].sub(

                    amounts[i],

                    "Cannot withdraw more than available"

                );

            }

        }

        uint256 d1 = getD(_xp(balances, multipliers), a);

        uint256 totalSupply = self.lpToken.totalSupply();



        if (deposit) {

            return d1.sub(d0).mul(totalSupply).div(d0);

        } else {

            return d0.sub(d1).mul(totalSupply).div(d0);

        }

    }



    /**

     * @notice return accumulated amount of admin fees of the token with given index

     * @param self Swap struct to read from

     * @param index Index of the pooled token

     * @return admin balance in the token's precision

     */

    function getAdminBalance(Swap storage self, uint256 index)

        external

        view

        returns (uint256)

    {

        require(index < self.pooledTokens.length, "Token index out of range");

        return

            self.pooledTokens[index].balanceOf(address(this)).sub(

                self.balances[index]

            );

    }



    /**

     * @notice internal helper function to calculate fee per token multiplier used in

     * swap fee calculations

     * @param swapFee swap fee for the tokens

     * @param numTokens number of tokens pooled

     */

    function _feePerToken(uint256 swapFee, uint256 numTokens)

        internal

        pure

        returns (uint256)

    {

        return swapFee.mul(numTokens).div(numTokens.sub(1).mul(4));

    }



    /*** STATE MODIFYING FUNCTIONS ***/



    /**

     * @notice swap two tokens in the pool

     * @param self Swap struct to read from and write to

     * @param tokenIndexFrom the token the user wants to sell

     * @param tokenIndexTo the token the user wants to buy

     * @param dx the amount of tokens the user wants to sell

     * @param minDy the min amount the user would like to receive, or revert.

     * @return amount of token user received on swap

     */

    function swap(

        Swap storage self,

        uint8 tokenIndexFrom,

        uint8 tokenIndexTo,

        uint256 dx,

        uint256 minDy

    ) external returns (uint256) {

        {

            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];

            require(

                dx <= tokenFrom.balanceOf(msg.sender),

                "Cannot swap more than you own"

            );

            // Transfer tokens first to see if a fee was charged on transfer

            uint256 beforeBalance = tokenFrom.balanceOf(address(this));

            tokenFrom.safeTransferFrom(msg.sender, address(this), dx);



            // Use the actual transferred amount for AMM math

            dx = tokenFrom.balanceOf(address(this)).sub(beforeBalance);

        }



        uint256 dy;

        uint256 dyFee;

        uint256[] memory balances = self.balances;

        (dy, dyFee) = _calculateSwap(

            self,

            tokenIndexFrom,

            tokenIndexTo,

            dx,

            balances

        );

        require(dy >= minDy, "Swap didn't result in min tokens");



        uint256 dyAdminFee =

            dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(

                self.tokenPrecisionMultipliers[tokenIndexTo]

            );



        self.balances[tokenIndexFrom] = balances[tokenIndexFrom].add(dx);

        self.balances[tokenIndexTo] = balances[tokenIndexTo].sub(dy).sub(

            dyAdminFee

        );



        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);



        emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);



        return dy;

    }



    /**

     * @notice Add liquidity to the pool

     * @param self Swap struct to read from and write to

     * @param amounts the amounts of each token to add, in their native precision

     * @param minToMint the minimum LP tokens adding this amount of liquidity

     * should mint, otherwise revert. Handy for front-running mitigation

     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.

     * @return amount of LP token user received

     */

    function addLiquidity(

        Swap storage self,

        uint256[] memory amounts,

        uint256 minToMint

    ) external returns (uint256) {

        IERC20[] memory pooledTokens = self.pooledTokens;

        require(

            amounts.length == pooledTokens.length,

            "Amounts must match pooled tokens"

        );



        // current state

        ManageLiquidityInfo memory v =

            ManageLiquidityInfo(

                0,

                0,

                0,

                _getAPrecise(self),

                self.lpToken,

                0,

                self.balances,

                self.tokenPrecisionMultipliers

            );

        v.totalSupply = v.lpToken.totalSupply();



        if (v.totalSupply != 0) {

            v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);

        }



        uint256[] memory newBalances = new uint256[](pooledTokens.length);



        for (uint256 i = 0; i < pooledTokens.length; i++) {

            require(

                v.totalSupply != 0 || amounts[i] > 0,

                "Must supply all tokens in pool"

            );



            // Transfer tokens first to see if a fee was charged on transfer

            if (amounts[i] != 0) {

                uint256 beforeBalance =

                    pooledTokens[i].balanceOf(address(this));

                pooledTokens[i].safeTransferFrom(

                    msg.sender,

                    address(this),

                    amounts[i]

                );



                // Update the amounts[] with actual transfer amount

                amounts[i] = pooledTokens[i].balanceOf(address(this)).sub(

                    beforeBalance

                );

            }



            newBalances[i] = v.balances[i].add(amounts[i]);

        }



        // invariant after change

        v.d1 = getD(_xp(newBalances, v.multipliers), v.preciseA);

        require(v.d1 > v.d0, "D should increase");



        // updated to reflect fees and calculate the user's LP tokens

        v.d2 = v.d1;

        uint256[] memory fees = new uint256[](pooledTokens.length);



        if (v.totalSupply != 0) {

            uint256 feePerToken =

                _feePerToken(self.swapFee, pooledTokens.length);

            for (uint256 i = 0; i < pooledTokens.length; i++) {

                uint256 idealBalance = v.d1.mul(v.balances[i]).div(v.d0);

                fees[i] = feePerToken

                    .mul(idealBalance.difference(newBalances[i]))

                    .div(FEE_DENOMINATOR);

                self.balances[i] = newBalances[i].sub(

                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)

                );

                newBalances[i] = newBalances[i].sub(fees[i]);

            }

            v.d2 = getD(_xp(newBalances, v.multipliers), v.preciseA);

        } else {

            // the initial depositor doesn't pay fees

            self.balances = newBalances;

        }



        uint256 toMint;

        if (v.totalSupply == 0) {

            toMint = v.d1;

        } else {

            toMint = v.d2.sub(v.d0).mul(v.totalSupply).div(v.d0);

        }



        require(toMint >= minToMint, "Couldn't mint min requested");



        // mint the user's LP tokens

        v.lpToken.mint(msg.sender, toMint);



        emit AddLiquidity(

            msg.sender,

            amounts,

            fees,

            v.d1,

            v.totalSupply.add(toMint)

        );



        return toMint;

    }



    /**

     * @notice Burn LP tokens to remove liquidity from the pool.

     * @dev Liquidity can always be removed, even when the pool is paused.

     * @param self Swap struct to read from and write to

     * @param amount the amount of LP tokens to burn

     * @param minAmounts the minimum amounts of each token in the pool

     * acceptable for this burn. Useful as a front-running mitigation

     * @return amounts of tokens the user received

     */

    function removeLiquidity(

        Swap storage self,

        uint256 amount,

        uint256[] calldata minAmounts

    ) external returns (uint256[] memory) {

        LPToken lpToken = self.lpToken;

        IERC20[] memory pooledTokens = self.pooledTokens;

        require(amount <= lpToken.balanceOf(msg.sender), ">LP.balanceOf");

        require(

            minAmounts.length == pooledTokens.length,

            "minAmounts must match poolTokens"

        );



        uint256[] memory balances = self.balances;

        uint256 totalSupply = lpToken.totalSupply();



        uint256[] memory amounts =

            _calculateRemoveLiquidity(balances, amount, totalSupply);



        for (uint256 i = 0; i < amounts.length; i++) {

            require(amounts[i] >= minAmounts[i], "amounts[i] < minAmounts[i]");

            self.balances[i] = balances[i].sub(amounts[i]);

            pooledTokens[i].safeTransfer(msg.sender, amounts[i]);

        }



        lpToken.burnFrom(msg.sender, amount);



        emit RemoveLiquidity(msg.sender, amounts, totalSupply.sub(amount));



        return amounts;

    }



    /**

     * @notice Remove liquidity from the pool all in one token.

     * @param self Swap struct to read from and write to

     * @param tokenAmount the amount of the lp tokens to burn

     * @param tokenIndex the index of the token you want to receive

     * @param minAmount the minimum amount to withdraw, otherwise revert

     * @return amount chosen token that user received

     */

    function removeLiquidityOneToken(

        Swap storage self,

        uint256 tokenAmount,

        uint8 tokenIndex,

        uint256 minAmount

    ) external returns (uint256) {

        LPToken lpToken = self.lpToken;

        IERC20[] memory pooledTokens = self.pooledTokens;



        require(tokenAmount <= lpToken.balanceOf(msg.sender), ">LP.balanceOf");

        require(tokenIndex < pooledTokens.length, "Token not found");



        uint256 totalSupply = lpToken.totalSupply();



        (uint256 dy, uint256 dyFee) =

            _calculateWithdrawOneToken(

                self,

                tokenAmount,

                tokenIndex,

                totalSupply

            );



        require(dy >= minAmount, "dy < minAmount");



        self.balances[tokenIndex] = self.balances[tokenIndex].sub(

            dy.add(dyFee.mul(self.adminFee).div(FEE_DENOMINATOR))

        );

        lpToken.burnFrom(msg.sender, tokenAmount);

        pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);



        emit RemoveLiquidityOne(

            msg.sender,

            tokenAmount,

            totalSupply,

            tokenIndex,

            dy

        );



        return dy;

    }



    /**

     * @notice Remove liquidity from the pool, weighted differently than the

     * pool's current balances.

     *

     * @param self Swap struct to read from and write to

     * @param amounts how much of each token to withdraw

     * @param maxBurnAmount the max LP token provider is willing to pay to

     * remove liquidity. Useful as a front-running mitigation.

     * @return actual amount of LP tokens burned in the withdrawal

     */

    function removeLiquidityImbalance(

        Swap storage self,

        uint256[] memory amounts,

        uint256 maxBurnAmount

    ) public returns (uint256) {

        ManageLiquidityInfo memory v =

            ManageLiquidityInfo(

                0,

                0,

                0,

                _getAPrecise(self),

                self.lpToken,

                0,

                self.balances,

                self.tokenPrecisionMultipliers

            );

        v.totalSupply = v.lpToken.totalSupply();



        IERC20[] memory pooledTokens = self.pooledTokens;



        require(

            amounts.length == pooledTokens.length,

            "Amounts should match pool tokens"

        );



        require(

            maxBurnAmount <= v.lpToken.balanceOf(msg.sender) &&

                maxBurnAmount != 0,

            ">LP.balanceOf"

        );



        uint256 feePerToken = _feePerToken(self.swapFee, pooledTokens.length);

        uint256[] memory fees = new uint256[](pooledTokens.length);

        {

            uint256[] memory balances1 = new uint256[](pooledTokens.length);

            v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);

            for (uint256 i = 0; i < pooledTokens.length; i++) {

                balances1[i] = v.balances[i].sub(

                    amounts[i],

                    "Cannot withdraw more than available"

                );

            }

            v.d1 = getD(_xp(balances1, v.multipliers), v.preciseA);



            for (uint256 i = 0; i < pooledTokens.length; i++) {

                uint256 idealBalance = v.d1.mul(v.balances[i]).div(v.d0);

                uint256 difference = idealBalance.difference(balances1[i]);

                fees[i] = feePerToken.mul(difference).div(FEE_DENOMINATOR);

                self.balances[i] = balances1[i].sub(

                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)

                );

                balances1[i] = balances1[i].sub(fees[i]);

            }



            v.d2 = getD(_xp(balances1, v.multipliers), v.preciseA);

        }

        uint256 tokenAmount = v.d0.sub(v.d2).mul(v.totalSupply).div(v.d0);

        require(tokenAmount != 0, "Burnt amount cannot be zero");

        tokenAmount = tokenAmount.add(1);



        require(tokenAmount <= maxBurnAmount, "tokenAmount > maxBurnAmount");



        v.lpToken.burnFrom(msg.sender, tokenAmount);



        for (uint256 i = 0; i < pooledTokens.length; i++) {

            pooledTokens[i].safeTransfer(msg.sender, amounts[i]);

        }



        emit RemoveLiquidityImbalance(

            msg.sender,

            amounts,

            fees,

            v.d1,

            v.totalSupply.sub(tokenAmount)

        );



        return tokenAmount;

    }



    /**

     * @notice withdraw all admin fees to a given address

     * @param self Swap struct to withdraw fees from

     * @param to Address to send the fees to

     */

    function withdrawAdminFees(Swap storage self, address to) external {

        IERC20[] memory pooledTokens = self.pooledTokens;

        for (uint256 i = 0; i < pooledTokens.length; i++) {

            IERC20 token = pooledTokens[i];

            uint256 balance =

                token.balanceOf(address(this)).sub(self.balances[i]);

            if (balance != 0) {

                token.safeTransfer(to, balance);

            }

        }

    }



    /**

     * @notice Sets the admin fee

     * @dev adminFee cannot be higher than 100% of the swap fee

     * @param self Swap struct to update

     * @param newAdminFee new admin fee to be applied on future transactions

     */

    function setAdminFee(Swap storage self, uint256 newAdminFee) external {

        require(newAdminFee <= MAX_ADMIN_FEE, "Fee is too high");

        self.adminFee = newAdminFee;



        emit NewAdminFee(newAdminFee);

    }



    /**

     * @notice update the swap fee

     * @dev fee cannot be higher than 1% of each swap

     * @param self Swap struct to update

     * @param newSwapFee new swap fee to be applied on future transactions

     */

    function setSwapFee(Swap storage self, uint256 newSwapFee) external {

        require(newSwapFee <= MAX_SWAP_FEE, "Fee is too high");

        self.swapFee = newSwapFee;



        emit NewSwapFee(newSwapFee);

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\SynapseBridge.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity 0.6.12;



import '@openzeppelin/contracts-upgradeable/proxy/Initializable.sol';

import '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';

import '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';

import '@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol';

import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';

import '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';

import '@openzeppelin/contracts/token/ERC20/IERC20.sol';

import '@openzeppelin/contracts/math/SafeMath.sol';



import './interfaces/ISwap.sol';

import './interfaces/IWETH9.sol';



interface IERC20Mintable is IERC20 {

  function mint(address to, uint256 amount) external;

}



contract SynapseBridge is Initializable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {

  using SafeERC20 for IERC20;

  using SafeERC20 for IERC20Mintable;

  using SafeMath for uint256;



  bytes32 public constant NODEGROUP_ROLE = keccak256('NODEGROUP_ROLE');

  bytes32 public constant GOVERNANCE_ROLE = keccak256('GOVERNANCE_ROLE');



  mapping(address => uint256) private fees;



  uint256 public startBlockNumber;

  uint256 public constant bridgeVersion = 6;

  uint256 public chainGasAmount;

  address payable public WETH_ADDRESS;



  mapping(bytes32 => bool) private kappaMap;



  receive() external payable {}

  

  function initialize() external initializer {

    startBlockNumber = block.number;

    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);

    __AccessControl_init();

  }



  function setChainGasAmount(uint256 amount) external {

    require(hasRole(GOVERNANCE_ROLE, msg.sender), "Not governance");

    chainGasAmount = amount;

  }



  function setWethAddress(address payable _wethAddress) external {

    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Not admin");

    WETH_ADDRESS = _wethAddress;

  }



  function addKappas(bytes32[] calldata kappas) external {

    require(hasRole(GOVERNANCE_ROLE, msg.sender), "Not governance");

    for (uint256 i = 0; i < kappas.length; ++i) {

      kappaMap[kappas[i]] = true;

    }

  }



  event TokenDeposit(

    address indexed to,

    uint256 chainId,

    IERC20 token,

    uint256 amount

  );

  event TokenRedeem(address indexed to, uint256 chainId, IERC20 token, uint256 amount);

  event TokenWithdraw(address indexed to, IERC20 token, uint256 amount, uint256 fee, bytes32 indexed kappa);

  event TokenMint(

    address indexed to,

    IERC20Mintable token,

    uint256 amount,

    uint256 fee,

    bytes32 indexed kappa

  );

  event TokenDepositAndSwap(

    address indexed to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

  );

  event TokenMintAndSwap(

    address indexed to,

    IERC20Mintable token,

    uint256 amount,

    uint256 fee,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline,

    bool swapSuccess,

    bytes32 indexed kappa

  );

  event TokenRedeemAndSwap(

    address indexed to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

  );

  event TokenRedeemAndRemove(

    address indexed to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 swapTokenIndex,

    uint256 swapMinAmount,

    uint256 swapDeadline

  );

  event TokenWithdrawAndRemove(

    address indexed to,

    IERC20 token,

    uint256 amount,

    uint256 fee,

    uint8 swapTokenIndex,

    uint256 swapMinAmount,

    uint256 swapDeadline,

    bool swapSuccess,

    bytes32 indexed kappa

  );



  // v2 events

  event TokenRedeemV2(bytes32 indexed to, uint256 chainId, IERC20 token, uint256 amount);



  // VIEW FUNCTIONS ***/

  function getFeeBalance(address tokenAddress) external view returns (uint256) {

    return fees[tokenAddress];

  }



  function kappaExists(bytes32 kappa) external view returns (bool) {

    return kappaMap[kappa];

  }



  // FEE FUNCTIONS ***/

  /**

   * * @notice withdraw specified ERC20 token fees to a given address

   * * @param token ERC20 token in which fees acccumulated to transfer

   * * @param to Address to send the fees to

   */

  function withdrawFees(IERC20 token, address to) external whenNotPaused() {

    require(hasRole(GOVERNANCE_ROLE, msg.sender), "Not governance");

    require(to != address(0), "Address is 0x000");

    if (fees[address(token)] != 0) {

      token.safeTransfer(to, fees[address(token)]);

      fees[address(token)] = 0;

    }

  }



  // PAUSABLE FUNCTIONS ***/

  function pause() external {

    require(hasRole(GOVERNANCE_ROLE, msg.sender), "Not governance");

    _pause();

  }



  function unpause() external {

    require(hasRole(GOVERNANCE_ROLE, msg.sender), "Not governance");

    _unpause();

  }





  /**

   * @notice Relays to nodes to transfers an ERC20 token cross-chain

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   **/

  function deposit(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount

  ) external nonReentrant() whenNotPaused() {

    emit TokenDeposit(to, chainId, token, amount);

    token.safeTransferFrom(msg.sender, address(this), amount);

  }



  /**

   * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain

   * @param to address on other chain to redeem underlying assets to

   * @param chainId which underlying chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   **/

  function redeem(

    address to,

    uint256 chainId,

    ERC20Burnable token,

    uint256 amount

  ) external nonReentrant() whenNotPaused() {

    emit TokenRedeem(to, chainId, token, amount);

    token.burnFrom(msg.sender, amount);

  }



  /**

   * @notice Function to be called by the node group to withdraw the underlying assets from the contract

   * @param to address on chain to send underlying assets to

   * @param token ERC20 compatible token to withdraw from the bridge

   * @param amount Amount in native token decimals to withdraw

   * @param fee Amount in native token decimals to save to the contract as fees

   * @param kappa kappa

   **/

  function withdraw(

    address to,

    IERC20 token,

    uint256 amount,

    uint256 fee,

    bytes32 kappa

  ) external nonReentrant() whenNotPaused() {

    require(hasRole(NODEGROUP_ROLE, msg.sender), 'Caller is not a node group');

    require(amount > fee, 'Amount must be greater than fee');

    require(!kappaMap[kappa], 'Kappa is already present');

    kappaMap[kappa] = true;

    fees[address(token)] = fees[address(token)].add(fee);

    if (address(token) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {

      IWETH9(WETH_ADDRESS).withdraw(amount.sub(fee));

      (bool success, ) = to.call{value: amount.sub(fee)}("");

      require(success, "ETH_TRANSFER_FAILED");

      emit TokenWithdraw(to, token, amount, fee, kappa);

    } else {

      emit TokenWithdraw(to, token, amount, fee, kappa);

      token.safeTransfer(to, amount.sub(fee));

    }

  }





  /**

   * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDeposit event is emitted.

   * @dev This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted

   * @param to address on other chain to redeem underlying assets to

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain post-fees

   * @param fee Amount in native token decimals to save to the contract as fees

   * @param kappa kappa

   **/

  function mint(

    address payable to,

    IERC20Mintable token,

    uint256 amount,

    uint256 fee,

    bytes32 kappa

  ) external nonReentrant() whenNotPaused() {

    require(hasRole(NODEGROUP_ROLE, msg.sender), 'Caller is not a node group');

    require(amount > fee, 'Amount must be greater than fee');

    require(!kappaMap[kappa], 'Kappa is already present');

    kappaMap[kappa] = true;

    fees[address(token)] = fees[address(token)].add(fee);

    emit TokenMint(to, token, amount.sub(fee), fee, kappa);

    token.mint(address(this), amount);

    IERC20(token).safeTransfer(to, amount.sub(fee));

    if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {

      to.call.value(chainGasAmount)("");

    }

  }



  /**

   * @notice Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.

   * @param to address on other chain to bridge assets to

   * @param chainId which chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   * @param tokenIndexFrom the token the user wants to swap from

   * @param tokenIndexTo the token the user wants to swap to

   * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.

   * @param deadline latest timestamp to accept this transaction

   **/

  function depositAndSwap(

    address to,

    uint256 chainId,

    IERC20 token,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

  ) external nonReentrant() whenNotPaused() {

     emit TokenDepositAndSwap(

      to,

      chainId,

      token,

      amount,

      tokenIndexFrom,

      tokenIndexTo,

      minDy,

      deadline

    );

    token.safeTransferFrom(msg.sender, address(this), amount);

  }



  /**

   * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g "swap" out of the LP token)

   * @param to address on other chain to redeem underlying assets to

   * @param chainId which underlying chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   * @param tokenIndexFrom the token the user wants to swap from

   * @param tokenIndexTo the token the user wants to swap to

   * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.

   * @param deadline latest timestamp to accept this transaction

   **/

  function redeemAndSwap(

    address to,

    uint256 chainId,

    ERC20Burnable token,

    uint256 amount,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline

  ) external nonReentrant() whenNotPaused() {

    emit TokenRedeemAndSwap(

      to,

      chainId,

      token,

      amount,

      tokenIndexFrom,

      tokenIndexTo,

      minDy,

      deadline

    );

    token.burnFrom(msg.sender, amount);

  }



  /**

   * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g "swap" out of the LP token)

   * @param to address on other chain to redeem underlying assets to

   * @param chainId which underlying chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for

   * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap

   * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token

   **/

  function redeemAndRemove(

    address to,

    uint256 chainId,

    ERC20Burnable token,

    uint256 amount,

    uint8 swapTokenIndex,

    uint256 swapMinAmount,

    uint256 swapDeadline

  ) external nonReentrant() whenNotPaused() {

      emit TokenRedeemAndRemove(

      to,

      chainId,

      token,

      amount,

      swapTokenIndex,

      swapMinAmount,

      swapDeadline

    );

    token.burnFrom(msg.sender, amount);

  }



  /**

   * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted.

   * @dev This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted

   * @param to address on other chain to redeem underlying assets to

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain post-fees

   * @param fee Amount in native token decimals to save to the contract as fees

   * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.

   * @param tokenIndexFrom Index of the SynERC20 asset in the pool

   * @param tokenIndexTo Index of the desired final asset

   * @param minDy Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.

   * @param deadline Epoch time of the deadline that the swap is allowed to be executed.

   * @param kappa kappa

   **/

  function mintAndSwap(

    address payable to,

    IERC20Mintable token,

    uint256 amount,

    uint256 fee,

    ISwap pool,

    uint8 tokenIndexFrom,

    uint8 tokenIndexTo,

    uint256 minDy,

    uint256 deadline,

    bytes32 kappa

  ) external nonReentrant() whenNotPaused() {

    require(hasRole(NODEGROUP_ROLE, msg.sender), 'Caller is not a node group');

    require(amount > fee, 'Amount must be greater than fee');

    require(!kappaMap[kappa], 'Kappa is already present');

    kappaMap[kappa] = true;

    fees[address(token)] = fees[address(token)].add(fee);

    // Transfer gas airdrop

    if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {

      to.call.value(chainGasAmount)("");

    }

    // first check to make sure more will be given than min amount required

    uint256 expectedOutput = ISwap(pool).calculateSwap(

      tokenIndexFrom,

      tokenIndexTo,

      amount.sub(fee)

    );



    if (expectedOutput >= minDy) {

      // proceed with swap

      token.mint(address(this), amount);

      token.safeIncreaseAllowance(address(pool), amount);

      try

        ISwap(pool).swap(

          tokenIndexFrom,

          tokenIndexTo,

          amount.sub(fee),

          minDy,

          deadline

        )

      returns (uint256 finalSwappedAmount) {

        // Swap succeeded, transfer swapped asset

        IERC20 swappedTokenTo = ISwap(pool).getToken(tokenIndexTo);

        if (address(swappedTokenTo) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {

          IWETH9(WETH_ADDRESS).withdraw(finalSwappedAmount);

          (bool success, ) = to.call{value: finalSwappedAmount}("");

          require(success, "ETH_TRANSFER_FAILED");

          emit TokenMintAndSwap(to, token, finalSwappedAmount, fee, tokenIndexFrom, tokenIndexTo, minDy, deadline, true, kappa);

        } else {

          swappedTokenTo.safeTransfer(to, finalSwappedAmount);

          emit TokenMintAndSwap(to, token, finalSwappedAmount, fee, tokenIndexFrom, tokenIndexTo, minDy, deadline, true, kappa);

        }

      } catch {

        IERC20(token).safeTransfer(to, amount.sub(fee));

        emit TokenMintAndSwap(to, token, amount.sub(fee), fee, tokenIndexFrom, tokenIndexTo, minDy, deadline, false, kappa);

      }

    } else {

      token.mint(address(this), amount);

      IERC20(token).safeTransfer(to, amount.sub(fee));

      emit TokenMintAndSwap(to, token, amount.sub(fee), fee, tokenIndexFrom, tokenIndexTo, minDy, deadline, false, kappa);

    }

  }



  /**

   * @notice Function to be called by the node group to withdraw the underlying assets from the contract

   * @param to address on chain to send underlying assets to

   * @param token ERC20 compatible token to withdraw from the bridge

   * @param amount Amount in native token decimals to withdraw

   * @param fee Amount in native token decimals to save to the contract as fees

   * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.

   * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for

   * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap

   * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token

   * @param kappa kappa

   **/

  function withdrawAndRemove(

    address to,

    IERC20 token,

    uint256 amount,

    uint256 fee,

    ISwap pool,

    uint8 swapTokenIndex,

    uint256 swapMinAmount,

    uint256 swapDeadline,

    bytes32 kappa

  ) external nonReentrant() whenNotPaused() {

    require(hasRole(NODEGROUP_ROLE, msg.sender), 'Caller is not a node group');

    require(amount > fee, 'Amount must be greater than fee');

    require(!kappaMap[kappa], 'Kappa is already present');

    kappaMap[kappa] = true;

    fees[address(token)] = fees[address(token)].add(fee);

    // first check to make sure more will be given than min amount required

    uint256 expectedOutput = ISwap(pool).calculateRemoveLiquidityOneToken(

      amount.sub(fee),

      swapTokenIndex

    );



    if (expectedOutput >= swapMinAmount) {

      token.safeIncreaseAllowance(address(pool), amount.sub(fee));

      try

        ISwap(pool).removeLiquidityOneToken(

          amount.sub(fee),

          swapTokenIndex,

          swapMinAmount,

          swapDeadline

        )

      returns (uint256 finalSwappedAmount) {

        // Swap succeeded, transfer swapped asset

        IERC20 swappedTokenTo = ISwap(pool).getToken(swapTokenIndex);

        swappedTokenTo.safeTransfer(to, finalSwappedAmount);

        emit TokenWithdrawAndRemove(to, token, finalSwappedAmount, fee, swapTokenIndex, swapMinAmount, swapDeadline, true, kappa);

      } catch {

        IERC20(token).safeTransfer(to, amount.sub(fee));

        emit TokenWithdrawAndRemove(to, token, amount.sub(fee), fee, swapTokenIndex, swapMinAmount, swapDeadline, false, kappa);

      }

    } else {

      token.safeTransfer(to, amount.sub(fee));

      emit TokenWithdrawAndRemove(to, token, amount.sub(fee), fee, swapTokenIndex, swapMinAmount, swapDeadline, false, kappa);

    }

  }





  // BRIDGE FUNCTIONS TO HANDLE DIFF ADDRESSES

    /**

   * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain

   * @param to address on other chain to redeem underlying assets to

   * @param chainId which underlying chain to bridge assets onto

   * @param token ERC20 compatible token to deposit into the bridge

   * @param amount Amount in native token decimals to transfer cross-chain pre-fees

   **/

  function redeemV2(

    bytes32 to,

    uint256 chainId,

    ERC20Burnable token,

    uint256 amount

  ) external nonReentrant() whenNotPaused() {

    emit TokenRedeemV2(to, chainId, token, amount);

    token.burnFrom(msg.sender, amount);

  }



}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\SynapseERC20.sol
File type: .sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;



import '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';

import '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol';

import '@openzeppelin/contracts-upgradeable/drafts/ERC20PermitUpgradeable.sol';

import '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';

import '@openzeppelin/contracts-upgradeable/proxy/Initializable.sol';



contract SynapseERC20 is

  Initializable,

  ContextUpgradeable,

  AccessControlUpgradeable,

  ERC20BurnableUpgradeable,

  ERC20PermitUpgradeable

{

  bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');



  /**

   * @notice Initializes this ERC20 contract with the given parameters.

   * @param _name Token name

   * @param _symbol Token symbol

   * @param _decimals Token name

   * @param _owner admin address to be initialized with

   */

  function initialize(

    string memory _name,

    string memory _symbol,

    uint8 _decimals,

    address _owner

  ) public initializer {

    __Context_init_unchained();

    __AccessControl_init_unchained();

    __ERC20_init_unchained(_name, _symbol);

    __ERC20Burnable_init_unchained();

    _setupDecimals(_decimals);

    __ERC20Permit_init(_name);

    _setupRole(DEFAULT_ADMIN_ROLE, _owner);

  }



  function mint(address to, uint256 amount) public {

    require(hasRole(MINTER_ROLE, msg.sender), 'Not a minter');

    _mint(to, amount);

  }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\TimelockController.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity ^0.8.0;



import '@openzeppelin/contracts-4.3.1/access/AccessControl.sol';

import '@openzeppelin/contracts-4.3.1/utils/math/SafeMath.sol';



/**

 * @dev Contract module which acts as a timelocked controller. When set as the

 * owner of an `Ownable` smart contract, it enforces a timelock on all

 * `onlyOwner` maintenance operations. This gives time for users of the

 * controlled contract to exit before a potentially dangerous maintenance

 * operation is applied.

 *

 * By default, this contract is self administered, meaning administration tasks

 * have to go through the timelock process. The proposer (resp executor) role

 * is in charge of proposing (resp executing) operations. A common use case is

 * to position this {TimelockController} as the owner of a smart contract, with

 * a multisig or a DAO as the sole proposer.

 *

 * _Available since v3.3._

 */

contract TimelockController is AccessControl {

    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256("TIMELOCK_ADMIN_ROLE");

    bytes32 public constant PROPOSER_ROLE = keccak256("PROPOSER_ROLE");

    bytes32 public constant EXECUTOR_ROLE = keccak256("EXECUTOR_ROLE");

    uint256 internal constant _DONE_TIMESTAMP = uint256(1);



    mapping(bytes32 => uint256) private _timestamps;

    uint256 private _minDelay;



    /**

     * @dev Emitted when a call is scheduled as part of operation `id`.

     */

    event CallScheduled(

        bytes32 indexed id,

        uint256 indexed index,

        address target,

        uint256 value,

        bytes data,

        bytes32 predecessor,

        uint256 delay

    );



    /**

     * @dev Emitted when a call is performed as part of operation `id`.

     */

    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);



    /**

     * @dev Emitted when operation `id` is cancelled.

     */

    event Cancelled(bytes32 indexed id);



    /**

     * @dev Emitted when the minimum delay for future operations is modified.

     */

    event MinDelayChange(uint256 oldDuration, uint256 newDuration);



    /**

     * @dev Initializes the contract with a given `minDelay`.

     */

    constructor(

        uint256 minDelay,

        address[] memory proposers,

        address[] memory executors

    ) {

        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);

        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);

        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);



        // deployer + self administration

        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());

        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));



        // register proposers

        for (uint256 i = 0; i < proposers.length; ++i) {

            _setupRole(PROPOSER_ROLE, proposers[i]);

        }



        // register executors

        for (uint256 i = 0; i < executors.length; ++i) {

            _setupRole(EXECUTOR_ROLE, executors[i]);

        }



        _minDelay = minDelay;

        emit MinDelayChange(0, minDelay);

    }



    /**

     * @dev Modifier to make a function callable only by a certain role. In

     * addition to checking the sender's role, `address(0)` 's role is also

     * considered. Granting a role to `address(0)` is equivalent to enabling

     * this role for everyone.

     */

    modifier onlyRoleOrOpenRole(bytes32 role) {

        if (!hasRole(role, address(0))) {

            _checkRole(role, _msgSender());

        }

        _;

    }



    /**

     * @dev Contract might receive/hold ETH as part of the maintenance process.

     */

    receive() external payable {}



    /**

     * @dev Returns whether an id correspond to a registered operation. This

     * includes both Pending, Ready and Done operations.

     */

    function isOperation(bytes32 id) public view virtual returns (bool pending) {

        return getTimestamp(id) > 0;

    }



    /**

     * @dev Returns whether an operation is pending or not.

     */

    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {

        return getTimestamp(id) > _DONE_TIMESTAMP;

    }



    /**

     * @dev Returns whether an operation is ready or not.

     */

    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {

        uint256 timestamp = getTimestamp(id);

        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;

    }



    /**

     * @dev Returns whether an operation is done or not.

     */

    function isOperationDone(bytes32 id) public view virtual returns (bool done) {

        return getTimestamp(id) == _DONE_TIMESTAMP;

    }



    /**

     * @dev Returns the timestamp at with an operation becomes ready (0 for

     * unset operations, 1 for done operations).

     */

    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {

        return _timestamps[id];

    }



    /**

     * @dev Returns the minimum delay for an operation to become valid.

     *

     * This value can be changed by executing an operation that calls `updateDelay`.

     */

    function getMinDelay() public view virtual returns (uint256 duration) {

        return _minDelay;

    }



    /**

     * @dev Returns the identifier of an operation containing a single

     * transaction.

     */

    function hashOperation(

        address target,

        uint256 value,

        bytes calldata data,

        bytes32 predecessor,

        bytes32 salt

    ) public pure virtual returns (bytes32 hash) {

        return keccak256(abi.encode(target, value, data, predecessor, salt));

    }



    /**

     * @dev Returns the identifier of an operation containing a batch of

     * transactions.

     */

    function hashOperationBatch(

        address[] calldata targets,

        uint256[] calldata values,

        bytes[] calldata datas,

        bytes32 predecessor,

        bytes32 salt

    ) public pure virtual returns (bytes32 hash) {

        return keccak256(abi.encode(targets, values, datas, predecessor, salt));

    }



    /**

     * @dev Schedule an operation containing a single transaction.

     *

     * Emits a {CallScheduled} event.

     *

     * Requirements:

     *

     * - the caller must have the 'proposer' role.

     */

    function schedule(

        address target,

        uint256 value,

        bytes calldata data,

        bytes32 predecessor,

        bytes32 salt,

        uint256 delay

    ) public virtual onlyRole(PROPOSER_ROLE) {

        bytes32 id = hashOperation(target, value, data, predecessor, salt);

        _schedule(id, delay);

        emit CallScheduled(id, 0, target, value, data, predecessor, delay);

    }



    /**

     * @dev Schedule an operation containing a batch of transactions.

     *

     * Emits one {CallScheduled} event per transaction in the batch.

     *

     * Requirements:

     *

     * - the caller must have the 'proposer' role.

     */

    function scheduleBatch(

        address[] calldata targets,

        uint256[] calldata values,

        bytes[] calldata datas,

        bytes32 predecessor,

        bytes32 salt,

        uint256 delay

    ) public virtual onlyRole(PROPOSER_ROLE) {

        require(targets.length == values.length, "TimelockController: length mismatch");

        require(targets.length == datas.length, "TimelockController: length mismatch");



        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);

        _schedule(id, delay);

        for (uint256 i = 0; i < targets.length; ++i) {

            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);

        }

    }



    /**

     * @dev Schedule an operation that is to becomes valid after a given delay.

     */

    function _schedule(bytes32 id, uint256 delay) private {

        require(!isOperation(id), "TimelockController: operation already scheduled");

        require(delay >= getMinDelay(), "TimelockController: insufficient delay");

        _timestamps[id] = block.timestamp + delay;

    }



    /**

     * @dev Cancel an operation.

     *

     * Requirements:

     *

     * - the caller must have the 'proposer' role.

     */

    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {

        require(isOperationPending(id), "TimelockController: operation cannot be cancelled");

        delete _timestamps[id];



        emit Cancelled(id);

    }



    /**

     * @dev Execute an (ready) operation containing a single transaction.

     *

     * Emits a {CallExecuted} event.

     *

     * Requirements:

     *

     * - the caller must have the 'executor' role.

     */

    function execute(

        address target,

        uint256 value,

        bytes calldata data,

        bytes32 predecessor,

        bytes32 salt

    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {

        bytes32 id = hashOperation(target, value, data, predecessor, salt);

        _beforeCall(id, predecessor);

        _call(id, 0, target, value, data);

        _afterCall(id);

    }



    /**

     * @dev Execute an (ready) operation containing a batch of transactions.

     *

     * Emits one {CallExecuted} event per transaction in the batch.

     *

     * Requirements:

     *

     * - the caller must have the 'executor' role.

     */

    function executeBatch(

        address[] calldata targets,

        uint256[] calldata values,

        bytes[] calldata datas,

        bytes32 predecessor,

        bytes32 salt

    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {

        require(targets.length == values.length, "TimelockController: length mismatch");

        require(targets.length == datas.length, "TimelockController: length mismatch");



        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);

        _beforeCall(id, predecessor);

        for (uint256 i = 0; i < targets.length; ++i) {

            _call(id, i, targets[i], values[i], datas[i]);

        }

        _afterCall(id);

    }



    /**

     * @dev Checks before execution of an operation's calls.

     */

    function _beforeCall(bytes32 id, bytes32 predecessor) private view {

        require(isOperationReady(id), "TimelockController: operation is not ready");

        require(predecessor == bytes32(0) || isOperationDone(predecessor), "TimelockController: missing dependency");

    }



    /**

     * @dev Checks after execution of an operation's calls.

     */

    function _afterCall(bytes32 id) private {

        require(isOperationReady(id), "TimelockController: operation is not ready");

        _timestamps[id] = _DONE_TIMESTAMP;

    }



    /**

     * @dev Execute an operation's call.

     *

     * Emits a {CallExecuted} event.

     */

    function _call(

        bytes32 id,

        uint256 index,

        address target,

        uint256 value,

        bytes calldata data

    ) private {

        (bool success, ) = target.call{value: value}(data);

        require(success, "TimelockController: underlying transaction reverted");



        emit CallExecuted(id, index, target, value, data);

    }



    /**

     * @dev Changes the minimum timelock duration for future operations.

     *

     * Emits a {MinDelayChange} event.

     *

     * Requirements:

     *

     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing

     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.

     */

    function updateDelay(uint256 newDelay) external virtual {

        require(msg.sender == address(this), "TimelockController: caller must be timelock");

        emit MinDelayChange(_minDelay, newDelay);

        _minDelay = newDelay;

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\TokenVesting.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity ^0.6.0;



import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

import "@openzeppelin/contracts/access/Ownable.sol";

import "@openzeppelin/contracts/math/SafeMath.sol";



/**

 * @title TokenVesting

 * @dev A token holder contract that can release its token balance gradually like a

 * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the

 * owner.

 */

contract TokenVesting is Ownable {

    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is

    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,

    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a

    // cliff period of a year and a duration of four years, are safe to use.

    // solhint-disable not-rely-on-time



    using SafeMath for uint256;

    using SafeERC20 for IERC20;



    event TokensReleased(address token, uint256 amount);

    event TokenVestingRevoked(address token);



    // beneficiary of tokens after they are released

    address private _beneficiary;



    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.

    uint256 private _cliff;

    uint256 private _start;

    uint256 private _duration;



    bool private _revocable;



    mapping (address => uint256) private _released;

    mapping (address => bool) private _revoked;



    /**

     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the

     * beneficiary, gradually in a linear fashion until start + duration. By then all

     * of the balance will have vested.

     * @param beneficiary address of the beneficiary to whom vested tokens are transferred

     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest

     * @param start the time (as Unix time) at which point vesting starts

     * @param duration duration in seconds of the period in which the tokens will vest

     * @param revocable whether the vesting is revocable or not

     */

    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {

        require(beneficiary != address(0), "TokenVesting: beneficiary is the zero address");

        // solhint-disable-next-line max-line-length

        require(cliffDuration <= duration, "TokenVesting: cliff is longer than duration");

        require(duration > 0, "TokenVesting: duration is 0");

        // solhint-disable-next-line max-line-length

        require(start.add(duration) > block.timestamp, "TokenVesting: final time is before current time");



        _beneficiary = beneficiary;

        _revocable = revocable;

        _duration = duration;

        _cliff = start.add(cliffDuration);

        _start = start;

    }



    /**

     * @return the beneficiary of the tokens.

     */

    function beneficiary() public view returns (address) {

        return _beneficiary;

    }



    /**

     * @return the cliff time of the token vesting.

     */

    function cliff() public view returns (uint256) {

        return _cliff;

    }



    /**

     * @return the start time of the token vesting.

     */

    function start() public view returns (uint256) {

        return _start;

    }



    /**

     * @return the duration of the token vesting.

     */

    function duration() public view returns (uint256) {

        return _duration;

    }



    /**

     * @return true if the vesting is revocable.

     */

    function revocable() public view returns (bool) {

        return _revocable;

    }



    /**

     * @return the amount of the token released.

     */

    function released(address token) public view returns (uint256) {

        return _released[token];

    }



    /**

     * @return true if the token is revoked.

     */

    function revoked(address token) public view returns (bool) {

        return _revoked[token];

    }



    /**

     * @notice Transfers vested tokens to beneficiary.

     * @param token ERC20 token which is being vested

     */

    function release(IERC20 token) public {

        uint256 unreleased = _releasableAmount(token);



        require(unreleased > 0, "TokenVesting: no tokens are due");



        _released[address(token)] = _released[address(token)].add(unreleased);



        token.safeTransfer(_beneficiary, unreleased);



        emit TokensReleased(address(token), unreleased);

    }



    /**

     * @notice Allows the owner to revoke the vesting. Tokens already vested

     * remain in the contract, the rest are returned to the owner.

     * @param token ERC20 token which is being vested

     */

    function revoke(IERC20 token) public onlyOwner {

        require(_revocable, "TokenVesting: cannot revoke");

        require(!_revoked[address(token)], "TokenVesting: token already revoked");



        uint256 balance = token.balanceOf(address(this));



        uint256 unreleased = _releasableAmount(token);

        uint256 refund = balance.sub(unreleased);



        _revoked[address(token)] = true;



        token.safeTransfer(owner(), refund);



        emit TokenVestingRevoked(address(token));

    }



    /**

     * @dev Calculates the amount that has already vested but hasn't been released yet.

     * @param token ERC20 token which is being vested

     */

    function _releasableAmount(IERC20 token) private view returns (uint256) {

        return _vestedAmount(token).sub(_released[address(token)]);

    }



    /**

     * @dev Calculates the amount that has already vested.

     * @param token ERC20 token which is being vested

     */

    function _vestedAmount(IERC20 token) private view returns (uint256) {

        uint256 currentBalance = token.balanceOf(address(this));

        uint256 totalBalance = currentBalance.add(_released[address(token)]);



        if (block.timestamp < _cliff) {

            return 0;

        } else if (block.timestamp >= _start.add(_duration) || _revoked[address(token)]) {

            return totalBalance;

        } else {

            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\TransparentUpgradeableProxy.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity ^0.7.0;



import "./UpgradeableProxy.sol";



/**

 * @dev This contract implements a proxy that is upgradeable by an admin.

 * 

 * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector

 * clashing], which can potentially be used in an attack, this contract uses the

 * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two

 * things that go hand in hand:

 * 

 * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if

 * that call matches one of the admin functions exposed by the proxy itself.

 * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the

 * implementation. If the admin tries to call a function on the implementation it will fail with an error that says

 * "admin cannot fallback to proxy target".

 * 

 * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing

 * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due

 * to sudden errors when trying to call a function from the proxy implementation.

 * 

 * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,

 * you should think of the `ProxyAdmin` instance as the real administrative inerface of your proxy.

 */

contract TransparentUpgradeableProxy is UpgradeableProxy {

    /**

     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and

     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.

     */

    constructor(address initialLogic, address initialAdmin, bytes memory _data) payable UpgradeableProxy(initialLogic, _data) {

        assert(_ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1));

        _setAdmin(initialAdmin);

    }



    /**

     * @dev Emitted when the admin account has changed.

     */

    event AdminChanged(address previousAdmin, address newAdmin);



    /**

     * @dev Storage slot with the admin of the contract.

     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is

     * validated in the constructor.

     */

    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;



    /**

     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.

     */

    modifier ifAdmin() {

        if (msg.sender == _admin()) {

            _;

        } else {

            _fallback();

        }

    }



    /**

     * @dev Returns the current admin.

     * 

     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.

     * 

     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the

     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.

     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`

     */

    function admin() external ifAdmin returns (address) {

        return _admin();

    }



    /**

     * @dev Returns the current implementation.

     * 

     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.

     * 

     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the

     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.

     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`

     */

    function implementation() external ifAdmin returns (address) {

        return _implementation();

    }



    /**

     * @dev Changes the admin of the proxy.

     * 

     * Emits an {AdminChanged} event.

     * 

     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.

     */

    function changeAdmin(address newAdmin) external ifAdmin {

        require(newAdmin != address(0), "TransparentUpgradeableProxy: new admin is the zero address");

        emit AdminChanged(_admin(), newAdmin);

        _setAdmin(newAdmin);

    }



    /**

     * @dev Upgrade the implementation of the proxy.

     * 

     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.

     */

    function upgradeTo(address newImplementation) external ifAdmin {

        _upgradeTo(newImplementation);

    }



    /**

     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified

     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the

     * proxied contract.

     * 

     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.

     */

    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {

        _upgradeTo(newImplementation);

        // solhint-disable-next-line avoid-low-level-calls

        (bool success,) = newImplementation.delegatecall(data);

        require(success);

    }



    /**

     * @dev Returns the current admin.

     */

    function _admin() internal view returns (address adm) {

        bytes32 slot = _ADMIN_SLOT;

        // solhint-disable-next-line no-inline-assembly

        assembly {

            adm := sload(slot)

        }

    }



    /**

     * @dev Stores a new address in the EIP1967 admin slot.

     */

    function _setAdmin(address newAdmin) private {

        bytes32 slot = _ADMIN_SLOT;



        // solhint-disable-next-line no-inline-assembly

        assembly {

            sstore(slot, newAdmin)

        }

    }



    /**

     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.

     */

    function _beforeFallback() internal override virtual {

        require(msg.sender != _admin(), "TransparentUpgradeableProxy: admin cannot fallback to proxy target");

        super._beforeFallback();

    }

}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_723\Synapse Protocol\contracts\UpgradeableProxy.sol
File type: .sol
// SPDX-License-Identifier: MIT



pragma solidity ^0.7.0;



import "./Proxy.sol";

import "../utils/Address.sol";



/**

 * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an

 * implementation address that can be changed. This address is stored in storage in the location specified by

 * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the

 * implementation behind the proxy.

 * 

 * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see

 * {TransparentUpgradeableProxy}.

 */

contract UpgradeableProxy is Proxy {

    /**

     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.

     * 

     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded

     * function call, and allows initializating the storage of the proxy like a Solidity constructor.

     */

    constructor(address _logic, bytes memory _data) payable {

        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));

        _setImplementation(_logic);

        if(_data.length > 0) {

            // solhint-disable-next-line avoid-low-level-calls

            (bool success,) = _logic.delegatecall(_data);

            require(success);

        }

    }



    /**

     * @dev Emitted when the implementation is upgraded.

     */

    event Upgraded(address indexed implementation);



    /**

     * @dev Storage slot with the address of the current implementation.

     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is

     * validated in the constructor.

     */

    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;



    /**

     * @dev Returns the current implementation address.

     */

    function _implementation() internal override view returns (address impl) {

        bytes32 slot = _IMPLEMENTATION_SLOT;

        // solhint-disable-next-line no-inline-assembly

        assembly {

            impl := sload(slot)

        }

    }



    /**

     * @dev Upgrades the proxy to a new implementation.

     * 

     * Emits an {Upgraded} event.

     */

    function _upgradeTo(address newImplementation) internal {

        _setImplementation(newImplementation);

        emit Upgraded(newImplementation);

    }



    /**

     * @dev Stores a new address in the EIP1967 implementation slot.

     */

    function _setImplementation(address newImplementation) private {

        require(Address.isContract(newImplementation), "UpgradeableProxy: new implementation is not a contract");



        bytes32 slot = _IMPLEMENTATION_SLOT;



        // solhint-disable-next-line no-inline-assembly

        assembly {

            sstore(slot, newImplementation)

        }

    }

}

--------------------------------------------------
File End
--------------------------------------------------

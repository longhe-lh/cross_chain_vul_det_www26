Folder Structure
--------------------------------------------------
contracts/
    AAC.sol
    AaveToken.sol
    AccessControl.sol
    Address.sol
    BaseAdminUpgradeabilityProxy.sol
    BaseUpgradeabilityProxy.sol
    Boring.sol
    BoringDAOV2.sol
    BoringSatelliteChef.sol
    Context.sol
    CrossLock.sol
    DoubleTransferHelper.sol
    ENMT.sol
    EnumerableSet.sol
    ERC1967Proxy.sol
    ERC20.sol
    ERC20Burnable.sol
    ERC20Detailed.sol
    FiatTokenProxy.sol
    FINToken.sol
    IAddressResolver.sol
    IBoringDAO.sol
    IERC20.sol
    IERC20Detailed.sol
    IERC20Metadata.sol
    ILiquidate.sol
    IMintProposal.sol
    InitializableAdminUpgradeabilityProxy.sol
    InitializableUpgradeabilityProxy.sol
    IOracle.sol
    IPair.sol
    ITransferHook.sol
    ITrusteeFeePool.sol
    ITunnel.sol
    izumiToken.sol
    LendToAaveMigrator.sol
    MintableErc20.sol
    MockTransferHook.sol
    MToken.sol
    NODE.sol
    OToken.sol
    Ownable.sol
    ParamBook.sol
    Pausable.sol
    Proxy.sol
    Roles.sol
    SafeDecimalMath.sol
    SafeERC20.sol
    SafeMath.sol
    SwapPair.sol
    TetherToken.sol
    Token.sol
    UpgradeabilityProxy.sol
    VersionedInitializable.sol
    Vyper_contract.sol
    WBTC.sol
    WETH9.sol
    xVEMPToken.sol


File Contents
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\AAC.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2017-12-29


*/





pragma solidity ^0.4.18;





// ----------------------------------------------------------------------------------------------


// Acute Angle Coin by AAC Limited.


// An ERC20 standard


//


// author: AcuteAngleCoin Team





contract ERC20Interface {


    function totalSupply() public constant returns (uint256 _totalSupply);


    function balanceOf(address _owner) public constant returns (uint256 balance);


    function transfer(address _to, uint256 _value) public returns (bool success);


    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);


    function approve(address _spender, uint256 _value) public returns (bool success);


    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);


    event Transfer(address indexed _from, address indexed _to, uint256 _value);


    event Approval(address indexed _owner, address indexed _spender, uint256 _value);


}





contract AAC is ERC20Interface {


    uint256 public constant decimals = 5;





    string public constant symbol = "AAC";


    string public constant name = "AcuteAngleCoin";





    uint256 public _totalSupply = 10 ** 14; // total supply is 10^14 unit, equivalent to 10^9 AAC





    // Owner of this contract


    address public owner;





    // Balances AAC for each account


    mapping(address => uint256) private balances;





    // Owner of account approves the transfer of an amount to another account


    mapping(address => mapping (address => uint256)) private allowed;





    // List of approved investors


    mapping(address => bool) private approvedInvestorList;





    // deposit


    mapping(address => uint256) private deposit;








    // totalTokenSold


    uint256 public totalTokenSold = 0;








    /**


     * @dev Fix for the ERC20 short address attack.


     */


    modifier onlyPayloadSize(uint size) {


      if(msg.data.length < size + 4) {


        revert();


      }


      _;


    }











    /// @dev Constructor


    function AAC()


        public {


        owner = msg.sender;


        balances[owner] = _totalSupply;


    }





    /// @dev Gets totalSupply


    /// @return Total supply


    function totalSupply()


        public


        constant


        returns (uint256) {


        return _totalSupply;


    }

















    /// @dev Gets account's balance


    /// @param _addr Address of the account


    /// @return Account balance


    function balanceOf(address _addr)


        public


        constant


        returns (uint256) {


        return balances[_addr];


    }





    /// @dev check address is approved investor


    /// @param _addr address


    function isApprovedInvestor(address _addr)


        public


        constant


        returns (bool) {


        return approvedInvestorList[_addr];


    }





    /// @dev get ETH deposit


    /// @param _addr address get deposit


    /// @return amount deposit of an buyer


    function getDeposit(address _addr)


        public


        constant


        returns(uint256){


        return deposit[_addr];


}








    /// @dev Transfers the balance from msg.sender to an account


    /// @param _to Recipient address


    /// @param _amount Transfered amount in unit


    /// @return Transfer status


    function transfer(address _to, uint256 _amount)


        public





        returns (bool) {


        // if sender's balance has enough unit and amount >= 0,


        //      and the sum is not overflow,


        // then do transfer


        if ( (balances[msg.sender] >= _amount) &&


             (_amount >= 0) &&


             (balances[_to] + _amount > balances[_to]) ) {





            balances[msg.sender] -= _amount;


            balances[_to] += _amount;


            Transfer(msg.sender, _to, _amount);


            return true;


        } else {


            return false;


        }


    }





    // Send _value amount of tokens from address _from to address _to


    // The transferFrom method is used for a withdraw workflow, allowing contracts to send


    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge


    // fees in sub-currencies; the command should fail unless the _from account has


    // deliberately authorized the sender of the message via some mechanism; we propose


    // these standardized APIs for approval:


    function transferFrom(


        address _from,


        address _to,


        uint256 _amount


    )


    public





    returns (bool success) {


        if (balances[_from] >= _amount && _amount > 0 && allowed[_from][msg.sender] >= _amount) {


            balances[_from] -= _amount;


            allowed[_from][msg.sender] -= _amount;


            balances[_to] += _amount;


            Transfer(_from, _to, _amount);


            return true;


        } else {


            return false;


        }


    }





    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.


    // If this function is called again it overwrites the current allowance with _value.


    function approve(address _spender, uint256 _amount)


        public





        returns (bool success) {


        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));


        allowed[msg.sender][_spender] = _amount;


        Approval(msg.sender, _spender, _amount);


        return true;


    }





    // get allowance


    function allowance(address _owner, address _spender)


        public


        constant


        returns (uint256 remaining) {


        return allowed[_owner][_spender];


    }





    function () public payable{


        revert();


    }





}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\AaveToken.sol
File type: .sol
// SPDX-License-Identifier: agpl-3.0


pragma solidity 0.6.10;





import {ERC20} from "../open-zeppelin/ERC20.sol";


import {ITransferHook} from "../interfaces/ITransferHook.sol";


import {VersionedInitializable} from "../utils/VersionedInitializable.sol";








/**


* @notice implementation of the AAVE token contract


* @author Aave


*/


contract AaveToken is ERC20, VersionedInitializable {





    /// @dev snapshot of a value on a specific block, used for balances


    struct Snapshot {


        uint128 blockNumber;


        uint128 value;


    }





    string internal constant NAME = "Aave Token";


    string internal constant SYMBOL = "AAVE";


    uint8 internal constant DECIMALS = 18;





    /// @dev the amount being distributed for the LEND -> AAVE migration


    uint256 internal constant MIGRATION_AMOUNT = 13000000 ether;





    /// @dev the amount being distributed for the PSI and PEI


    uint256 internal constant DISTRIBUTION_AMOUNT = 3000000 ether;





    uint256 public constant REVISION = 1;





    /// @dev owner => next valid nonce to submit with permit()


    mapping (address => uint256) public _nonces;





    mapping (address => mapping (uint256 => Snapshot)) public _snapshots;





    mapping (address => uint256) public _countsSnapshots;





    /// @dev reference to the Aave governance contract to call (if initialized) on _beforeTokenTransfer


    /// !!! IMPORTANT The Aave governance is considered a trustable contract, being its responsibility


    /// to control all potential reentrancies by calling back the AaveToken


    ITransferHook public _aaveGovernance;





    bytes32 public DOMAIN_SEPARATOR;


    bytes public constant EIP712_REVISION = bytes("1");


    bytes32 internal constant EIP712_DOMAIN = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");


    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");





    event SnapshotDone(address owner, uint128 oldValue, uint128 newValue);





    constructor() ERC20(NAME, SYMBOL) public {}





    /**


    * @dev initializes the contract upon assignment to the InitializableAdminUpgradeabilityProxy


    * @param migrator the address of the LEND -> AAVE migration contract


    * @param distributor the address of the AAVE distribution contract


    */


    function initialize(


        address migrator,


        address distributor,


        ITransferHook aaveGovernance


    ) external initializer {





        uint256 chainId;





        //solium-disable-next-line


        assembly {


            chainId := chainid()


        }





        DOMAIN_SEPARATOR = keccak256(abi.encode(


            EIP712_DOMAIN,


            keccak256(bytes(NAME)),


            keccak256(EIP712_REVISION),


            chainId,


            address(this)


        ));


        _name = NAME;


        _symbol = SYMBOL;


        _setupDecimals(DECIMALS);


        _aaveGovernance = aaveGovernance;


        _mint(migrator, MIGRATION_AMOUNT);


        _mint(distributor, DISTRIBUTION_AMOUNT);


    }





    /**


    * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md


    * @param owner the owner of the funds


    * @param spender the spender


    * @param value the amount


    * @param deadline the deadline timestamp, type(uint256).max for no deadline


    * @param v signature param


    * @param s signature param


    * @param r signature param


    */





    function permit(


        address owner,


        address spender,


        uint256 value,


        uint256 deadline,


        uint8 v,


        bytes32 r,


        bytes32 s


    ) external {


        require(owner != address(0), "INVALID_OWNER");


        //solium-disable-next-line


        require(block.timestamp <= deadline, "INVALID_EXPIRATION");


        uint256 currentValidNonce = _nonces[owner];


        bytes32 digest = keccak256(


                abi.encodePacked(


                    "\x19\x01",


                    DOMAIN_SEPARATOR,


                    keccak256(


                        abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))


                    )


        );





        require(owner == ecrecover(digest, v, r, s), "INVALID_SIGNATURE");


        _nonces[owner] = currentValidNonce.add(1);


        _approve(owner, spender, value);


    }





    /**


    * @dev returns the revision of the implementation contract


    */


    function getRevision() internal pure override returns (uint256) {


        return REVISION;


    }





    /**


    * @dev Writes a snapshot for an owner of tokens


    * @param owner The owner of the tokens


    * @param oldValue The value before the operation that is gonna be executed after the snapshot


    * @param newValue The value after the operation


    */


    function _writeSnapshot(address owner, uint128 oldValue, uint128 newValue) internal {


        uint128 currentBlock = uint128(block.number);





        uint256 ownerCountOfSnapshots = _countsSnapshots[owner];


        mapping (uint256 => Snapshot) storage snapshotsOwner = _snapshots[owner];





        // Doing multiple operations in the same block


        if (ownerCountOfSnapshots != 0 && snapshotsOwner[ownerCountOfSnapshots.sub(1)].blockNumber == currentBlock) {


            snapshotsOwner[ownerCountOfSnapshots.sub(1)].value = newValue;


        } else {


            snapshotsOwner[ownerCountOfSnapshots] = Snapshot(currentBlock, newValue);


            _countsSnapshots[owner] = ownerCountOfSnapshots.add(1);


        }





        emit SnapshotDone(owner, oldValue, newValue);


    }





    /**


    * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn


    * - On _transfer, it writes snapshots for both "from" and "to"


    * - On _mint, only for _to


    * - On _burn, only for _from


    * @param from the from address


    * @param to the to address


    * @param amount the amount to transfer


    */


    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {


        if (from == to) {


            return;


        }





        if (from != address(0)) {


            uint256 fromBalance = balanceOf(from);


            _writeSnapshot(from, uint128(fromBalance), uint128(fromBalance.sub(amount)));


        }


        if (to != address(0)) {


            uint256 toBalance = balanceOf(to);


            _writeSnapshot(to, uint128(toBalance), uint128(toBalance.add(amount)));


        }





        // caching the aave governance address to avoid multiple state loads


        ITransferHook aaveGovernance = _aaveGovernance;


        if (aaveGovernance != ITransferHook(0)) {


            aaveGovernance.onTransfer(from, to, amount);


        }


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\AccessControl.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





import "../utils/EnumerableSet.sol";


import "../utils/Address.sol";


import "../GSN/Context.sol";





/**


 * @dev Contract module that allows children to implement role-based access


 * control mechanisms.


 *


 * Roles are referred to by their `bytes32` identifier. These should be exposed


 * in the external API and be unique. The best way to achieve this is by


 * using `public constant` hash digests:


 *


 * ```


 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");


 * ```


 *


 * Roles can be used to represent a set of permissions. To restrict access to a


 * function call, use {hasRole}:


 *


 * ```


 * function foo() public {


 *     require(hasRole(MY_ROLE, msg.sender));


 *     ...


 * }


 * ```


 *


 * Roles can be granted and revoked dynamically via the {grantRole} and


 * {revokeRole} functions. Each role has an associated admin role, and only


 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.


 *


 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means


 * that only accounts with this role will be able to grant or revoke other


 * roles. More complex role relationships can be created by using


 * {_setRoleAdmin}.


 *


 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to


 * grant and revoke this role. Extra precautions should be taken to secure


 * accounts that have been granted it.


 */


abstract contract AccessControl is Context {


    using EnumerableSet for EnumerableSet.AddressSet;


    using Address for address;





    struct RoleData {


        EnumerableSet.AddressSet members;


        bytes32 adminRole;


    }





    mapping (bytes32 => RoleData) private _roles;





    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;





    /**


     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`


     *


     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite


     * {RoleAdminChanged} not being emitted signaling this.


     *


     * _Available since v3.1._


     */


    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);





    /**


     * @dev Emitted when `account` is granted `role`.


     *


     * `sender` is the account that originated the contract call, an admin role


     * bearer except when using {_setupRole}.


     */


    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);





    /**


     * @dev Emitted when `account` is revoked `role`.


     *


     * `sender` is the account that originated the contract call:


     *   - if using `revokeRole`, it is the admin role bearer


     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)


     */


    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);





    /**


     * @dev Returns `true` if `account` has been granted `role`.


     */


    function hasRole(bytes32 role, address account) public view returns (bool) {


        return _roles[role].members.contains(account);


    }





    /**


     * @dev Returns the number of accounts that have `role`. Can be used


     * together with {getRoleMember} to enumerate all bearers of a role.


     */


    function getRoleMemberCount(bytes32 role) public view returns (uint256) {


        return _roles[role].members.length();


    }





    /**


     * @dev Returns one of the accounts that have `role`. `index` must be a


     * value between 0 and {getRoleMemberCount}, non-inclusive.


     *


     * Role bearers are not sorted in any particular way, and their ordering may


     * change at any point.


     *


     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure


     * you perform all queries on the same block. See the following


     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]


     * for more information.


     */


    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {


        return _roles[role].members.at(index);


    }





    /**


     * @dev Returns the admin role that controls `role`. See {grantRole} and


     * {revokeRole}.


     *


     * To change a role's admin, use {_setRoleAdmin}.


     */


    function getRoleAdmin(bytes32 role) public view returns (bytes32) {


        return _roles[role].adminRole;


    }





    /**


     * @dev Grants `role` to `account`.


     *


     * If `account` had not been already granted `role`, emits a {RoleGranted}


     * event.


     *


     * Requirements:


     *


     * - the caller must have ``role``'s admin role.


     */


    function grantRole(bytes32 role, address account) public virtual {


        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");





        _grantRole(role, account);


    }





    /**


     * @dev Revokes `role` from `account`.


     *


     * If `account` had been granted `role`, emits a {RoleRevoked} event.


     *


     * Requirements:


     *


     * - the caller must have ``role``'s admin role.


     */


    function revokeRole(bytes32 role, address account) public virtual {


        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");





        _revokeRole(role, account);


    }





    /**


     * @dev Revokes `role` from the calling account.


     *


     * Roles are often managed via {grantRole} and {revokeRole}: this function's


     * purpose is to provide a mechanism for accounts to lose their privileges


     * if they are compromised (such as when a trusted device is misplaced).


     *


     * If the calling account had been granted `role`, emits a {RoleRevoked}


     * event.


     *


     * Requirements:


     *


     * - the caller must be `account`.


     */


    function renounceRole(bytes32 role, address account) public virtual {


        require(account == _msgSender(), "AccessControl: can only renounce roles for self");





        _revokeRole(role, account);


    }





    /**


     * @dev Grants `role` to `account`.


     *


     * If `account` had not been already granted `role`, emits a {RoleGranted}


     * event. Note that unlike {grantRole}, this function doesn't perform any


     * checks on the calling account.


     *


     * [WARNING]


     * ====


     * This function should only be called from the constructor when setting


     * up the initial roles for the system.


     *


     * Using this function in any other way is effectively circumventing the admin


     * system imposed by {AccessControl}.


     * ====


     */


    function _setupRole(bytes32 role, address account) internal virtual {


        _grantRole(role, account);


    }





    /**


     * @dev Sets `adminRole` as ``role``'s admin role.


     *


     * Emits a {RoleAdminChanged} event.


     */


    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {


        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);


        _roles[role].adminRole = adminRole;


    }





    function _grantRole(bytes32 role, address account) private {


        if (_roles[role].members.add(account)) {


            emit RoleGranted(role, account, _msgSender());


        }


    }





    function _revokeRole(bytes32 role, address account) private {


        if (_roles[role].members.remove(account)) {


            emit RoleRevoked(role, account, _msgSender());


        }


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\Address.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.2;





/**


 * @dev Collection of functions related to the address type


 */


library Address {


    /**


     * @dev Returns true if `account` is a contract.


     *


     * [IMPORTANT]


     * ====


     * It is unsafe to assume that an address for which this function returns


     * false is an externally-owned account (EOA) and not a contract.


     *


     * Among others, `isContract` will return false for the following


     * types of addresses:


     *


     *  - an externally-owned account


     *  - a contract in construction


     *  - an address where a contract will be created


     *  - an address where a contract lived, but was destroyed


     * ====


     */


    function isContract(address account) internal view returns (bool) {


        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts


        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned


        // for accounts without code, i.e. `keccak256('')`


        bytes32 codehash;


        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;


        // solhint-disable-next-line no-inline-assembly


        assembly { codehash := extcodehash(account) }


        return (codehash != accountHash && codehash != 0x0);


    }





    /**


     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to


     * `recipient`, forwarding all available gas and reverting on errors.


     *


     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost


     * of certain opcodes, possibly making contracts go over the 2300 gas limit


     * imposed by `transfer`, making them unable to receive funds via


     * `transfer`. {sendValue} removes this limitation.


     *


     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].


     *


     * IMPORTANT: because control is transferred to `recipient`, care must be


     * taken to not create reentrancy vulnerabilities. Consider using


     * {ReentrancyGuard} or the


     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].


     */


    function sendValue(address payable recipient, uint256 amount) internal {


        require(address(this).balance >= amount, "Address: insufficient balance");





        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value


        (bool success, ) = recipient.call{ value: amount }("");


        require(success, "Address: unable to send value, recipient may have reverted");


    }





    /**


     * @dev Performs a Solidity function call using a low level `call`. A


     * plain`call` is an unsafe replacement for a function call: use this


     * function instead.


     *


     * If `target` reverts with a revert reason, it is bubbled up by this


     * function (like regular Solidity function calls).


     *


     * Returns the raw returned data. To convert to the expected return value,


     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].


     *


     * Requirements:


     *


     * - `target` must be a contract.


     * - calling `target` with `data` must not revert.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data) internal returns (bytes memory) {


      return functionCall(target, data, "Address: low-level call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with


     * `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {


        return _functionCallWithValue(target, data, 0, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but also transferring `value` wei to `target`.


     *


     * Requirements:


     *


     * - the calling contract must have an ETH balance of at least `value`.


     * - the called Solidity function must be `payable`.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {


        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");


    }





    /**


     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but


     * with `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {


        require(address(this).balance >= value, "Address: insufficient balance for call");


        return _functionCallWithValue(target, data, value, errorMessage);


    }





    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {


        require(isContract(target), "Address: call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);


        if (success) {


            return returndata;


        } else {


            // Look for revert reason and bubble it up if present


            if (returndata.length > 0) {


                // The easiest way to bubble the revert reason is using memory via assembly





                // solhint-disable-next-line no-inline-assembly


                assembly {


                    let returndata_size := mload(returndata)


                    revert(add(32, returndata), returndata_size)


                }


            } else {


                revert(errorMessage);


            }


        }


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\BaseAdminUpgradeabilityProxy.sol
File type: .sol
pragma solidity ^0.6.0;





import './UpgradeabilityProxy.sol';





/**


 * @title BaseAdminUpgradeabilityProxy


 * @dev This contract combines an upgradeability proxy with an authorization


 * mechanism for administrative tasks.


 * All external functions in this contract must be guarded by the


 * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity


 * feature proposal that would enable this to be done automatically.


 */


contract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {


  /**


   * @dev Emitted when the administration has been transferred.


   * @param previousAdmin Address of the previous admin.


   * @param newAdmin Address of the new admin.


   */


  event AdminChanged(address previousAdmin, address newAdmin);





  /**


   * @dev Storage slot with the admin of the contract.


   * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is


   * validated in the constructor.


   */





  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;





  /**


   * @dev Modifier to check whether the `msg.sender` is the admin.


   * If it is, it will run the function. Otherwise, it will delegate the call


   * to the implementation.


   */


  modifier ifAdmin() {


    if (msg.sender == _admin()) {


      _;


    } else {


      _fallback();


    }


  }





  /**


   * @return The address of the proxy admin.


   */


  function admin() external ifAdmin returns (address) {


    return _admin();


  }





  /**


   * @return The address of the implementation.


   */


  function implementation() external ifAdmin returns (address) {


    return _implementation();


  }





  /**


   * @dev Changes the admin of the proxy.


   * Only the current admin can call this function.


   * @param newAdmin Address to transfer proxy administration to.


   */


  function changeAdmin(address newAdmin) external ifAdmin {


    require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");


    emit AdminChanged(_admin(), newAdmin);


    _setAdmin(newAdmin);


  }





  /**


   * @dev Upgrade the backing implementation of the proxy.


   * Only the admin can call this function.


   * @param newImplementation Address of the new implementation.


   */


  function upgradeTo(address newImplementation) external ifAdmin {


    _upgradeTo(newImplementation);


  }





  /**


   * @dev Upgrade the backing implementation of the proxy and call a function


   * on the new implementation.


   * This is useful to initialize the proxied contract.


   * @param newImplementation Address of the new implementation.


   * @param data Data to send as msg.data in the low level call.


   * It should include the signature and the parameters of the function to be called, as described in


   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.


   */


  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {


    _upgradeTo(newImplementation);


    (bool success,) = newImplementation.delegatecall(data);


    require(success);


  }





  /**


   * @return adm The admin slot.


   */


  function _admin() internal view returns (address adm) {


    bytes32 slot = ADMIN_SLOT;


    assembly {


      adm := sload(slot)


    }


  }





  /**


   * @dev Sets the address of the proxy admin.


   * @param newAdmin Address of the new proxy admin.


   */


  function _setAdmin(address newAdmin) internal {


    bytes32 slot = ADMIN_SLOT;





    assembly {


      sstore(slot, newAdmin)


    }


  }





  /**


   * @dev Only fall back when the sender is not the admin.


   */


  function _willFallback() internal override virtual {


    require(msg.sender != _admin(), "Cannot call fallback function from the proxy admin");


    super._willFallback();


  }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\BaseUpgradeabilityProxy.sol
File type: .sol
pragma solidity ^0.6.0;





import './Proxy.sol';


import './Address.sol';





/**


 * @title BaseUpgradeabilityProxy


 * @dev This contract implements a proxy that allows to change the


 * implementation address to which it will delegate.


 * Such a change is called an implementation upgrade.


 */


contract BaseUpgradeabilityProxy is Proxy {


  /**


   * @dev Emitted when the implementation is upgraded.


   * @param implementation Address of the new implementation.


   */


  event Upgraded(address indexed implementation);





  /**


   * @dev Storage slot with the address of the current implementation.


   * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is


   * validated in the constructor.


   */


  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;





  /**


   * @dev Returns the current implementation.


   * @return impl Address of the current implementation


   */


  function _implementation() internal override view returns (address impl) {


    bytes32 slot = IMPLEMENTATION_SLOT;


    assembly {


      impl := sload(slot)


    }


  }





  /**


   * @dev Upgrades the proxy to a new implementation.


   * @param newImplementation Address of the new implementation.


   */


  function _upgradeTo(address newImplementation) internal {


    _setImplementation(newImplementation);


    emit Upgraded(newImplementation);


  }





  /**


   * @dev Sets the implementation address of the proxy.


   * @param newImplementation Address of the new implementation.


   */


  function _setImplementation(address newImplementation) internal {


    require(Address.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");





    bytes32 slot = IMPLEMENTATION_SLOT;





    assembly {


      sstore(slot, newImplementation)


    }


  }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\Boring.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.8.0;





import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";


import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";


import "@openzeppelin/contracts/access/Ownable.sol";





contract Boring is ERC20Burnable, Ownable{





    using SafeERC20 for IERC20;





    IERC20 public bor;


    uint public ratio;


    bool public switchOn = true;





    constructor(address _bor, uint _ratio) ERC20("BoringDAO", "BORING") {


        bor = IERC20(_bor);


        ratio = _ratio;


        // for people who transfer bor to borContract address


        // https://etherscan.io/token/0x3c9d6c1C73b31c837832c72E04D3152f051fc1A9?a=0x3c9d6c1C73b31c837832c72E04D3152f051fc1A9


        // https://bscscan.com/token/0x92d7756c60dcfd4c689290e8a9f4d263b3b32241?a=0x92d7756c60dcfd4c689290e8a9f4d263b3b32241


        _mint(msg.sender, 29770922242336919137*_ratio);


    }





    function setSwitchOn(bool _switchOn) public onlyOwner {


        require(switchOn != _switchOn, "dont need change switchon");


        switchOn = _switchOn;


    }





    function toBoring(uint borAmount) public {


        uint boringAmount = borAmount*ratio;


        _mint(msg.sender, boringAmount);


        bor.safeTransferFrom(msg.sender, address(this), borAmount);


        emit ToBoring(msg.sender, borAmount, boringAmount); 


    }





    function toBor(uint boringAmount) public onlySwitchOn {


        require(balanceOf(msg.sender) >= boringAmount, "Boring:Not enough boring");


        require(bor.balanceOf(address(this)) * ratio >= boringAmount, "Boring:Not enough bor");


        burn(boringAmount);


        uint borAmount = boringAmount / ratio;


        bor.transfer(msg.sender, borAmount);


        emit ToBor(msg.sender, borAmount, boringAmount);


    }





    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {


        super._beforeTokenTransfer(from, to, amount);


        require(to != address(this), "ERC20: transfer to the token contract address");


     }





    modifier onlySwitchOn {


        require(switchOn == true, "only switchOn true");


        _;


    }





    event ToBoring(address account, uint borAmount, uint boringAmount);


    event ToBor(address account, uint borAmount, uint boringAmount);





}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\BoringDAOV2.sol
File type: .sol
// SPDX-License-Identifier: MIT


pragma solidity ^0.6.12;





import "./interface/IBoringDAO.sol";


import "@openzeppelin/contracts/access/AccessControl.sol";


import "@openzeppelin/contracts/utils/Pausable.sol";


import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


import "@openzeppelin/contracts/math/SafeMath.sol";


import "./interface/IAddressResolver.sol";


import "./interface/ITunnel.sol";


import "./ParamBook.sol";


import "./lib/SafeDecimalMath.sol";


import "./interface/IMintProposal.sol";


import "./interface/IOracle.sol";


import "./interface/ITrusteeFeePool.sol";





/**


@notice The BoringDAO contract is the entrance to the entire system, 


providing the functions of pledge BOR, redeem BOR, mint bBTC, and destroy bBTC


 */


contract BoringDAOV2 is AccessControl, IBoringDAO, Pausable {


    using SafeDecimalMath for uint256;


    using SafeMath for uint256;





    uint256 public amountByMint=12250000e18;





    bytes32 public constant MONITOR_ROLE = "MONITOR_ROLE ";


    bytes32 public constant GOV_ROLE = "GOV_ROLE";





    // bor => boring


    bytes32 public constant BOR = "BORING";


    bytes32 public constant PARAM_BOOK = "ParamBook";


    bytes32 public constant MINT_PROPOSAL = "MintProposal";


    bytes32 public constant ORACLE = "Oracle";


    bytes32 public constant TRUSTEE_FEE_POOL = "TrusteeFeePool";


    bytes32 public constant OTOKEN = "oToken";





    bytes32 public constant TUNNEL_MINT_FEE_RATE = "mint_fee";


    bytes32 public constant NETWORK_FEE = "network_fee";





    IAddressResolver public addrReso;





    // tunnels


    ITunnelV2[] public tunnels;





    uint256 public mintCap;





    address public mine;





    // The user may not provide the Ethereum address or the format of the Ethereum address is wrong when mint. 


    // this is for a transaction


    mapping(string=>bool) public approveFlag;





    uint public reductionAmount=100000000e18;


    mapping(bytes32=>uint) public minMintAmount;





    constructor(IAddressResolver _addrReso, uint _mintCap, address _mine) public {


        // set up resolver


        addrReso = _addrReso;


        mintCap = _mintCap;


        mine = _mine;


        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);


        _setupRole(MONITOR_ROLE, msg.sender);


    }








    function tunnel(bytes32 tunnelKey) internal view returns (ITunnel) {


        return ITunnel(addrReso.key2address(tunnelKey));


    }





    function otoken(bytes32 _tunnelKey) internal view returns (IERC20) {


        return IERC20(addrReso.requireKKAddrs(_tunnelKey, OTOKEN, "oToken not exist"));


    }





    function borERC20() internal view returns (IERC20) {


        return IERC20(addrReso.key2address(BOR));


    }





    function paramBook() internal view returns (ParamBook) {


        return ParamBook(addrReso.key2address(PARAM_BOOK));


    }





    function mintProposal() internal view returns (IMintProposal) {


        return IMintProposal(addrReso.key2address(MINT_PROPOSAL));


    }





    function oracle() internal view returns (IOracle) {


        return IOracle(addrReso.key2address(ORACLE));


    }





    // trustee fee pool key


    function trusteeFeePool(bytes32 _tunnelKey) internal view returns (ITrusteeFeePool) {


        return ITrusteeFeePool(addrReso.requireKKAddrs(_tunnelKey, TRUSTEE_FEE_POOL, "BoringDAO::TrusteeFeePool is address(0)"));


    }





    // trustee fee pool key => tfpk


    function addTrustee(address account, bytes32 _tunnelKey) public onlyAdmin {


        _setupRole(_tunnelKey, account);


        trusteeFeePool(_tunnelKey).enter(account);





    }





    function addTrustees(address[] memory accounts, bytes32 _tunnelKey) external onlyAdmin{


        for (uint256 i = 0; i < accounts.length; i++) {


            addTrustee(accounts[i], _tunnelKey);


        }


    }





    function removeTrustee(address account, bytes32 _tunnelKey) public onlyAdmin {


        revokeRole(_tunnelKey, account);


        trusteeFeePool(_tunnelKey).exit(account);


    }





    function setMine(address _mine) public onlyAdmin {


        mine = _mine;


    }





    function setMintCap(uint256 amount) public onlyAdmin {


        mintCap = amount;


    }





    function setMinMintAmount(bytes32 _tunnelKey, uint _amount) public onlyAdmin {


        minMintAmount[_tunnelKey] = _amount;


    }





    /**


    @notice tunnelKey is byte32("symbol"), eg. bytes32("BTC")


     */


    function pledge(bytes32 _tunnelKey, uint256 _amount)


        public


        override


        whenNotPaused


        whenContractExist(_tunnelKey)


    {


        require(


            borERC20().allowance(msg.sender, address(this)) >= _amount,


            "not allow enough boring"


        );





        borERC20().transferFrom(


            msg.sender,


            address(tunnel(_tunnelKey)),


            _amount


        );


        tunnel(_tunnelKey).pledge(msg.sender, _amount);


    }





    /**


    @notice redeem bor from tunnel


     */


    function redeem(bytes32 _tunnelKey, uint256 _amount)


        public


        override


        whenNotPaused


        whenContractExist(_tunnelKey)


    {


        tunnel(_tunnelKey).redeem(msg.sender, _amount);


    }





    function burnBToken(bytes32 _tunnelKey, uint256 amount, string memory assetAddress)


        public


        override


        whenNotPaused


        whenContractExist(_tunnelKey)


        whenTunnelNotPause(_tunnelKey)


    {


        tunnel(_tunnelKey).burn(msg.sender, amount, assetAddress);


    }





    /**


    @notice trustee will call the function to approve mint bToken


    @param _txid the transaction id of bitcoin


    @param _amount the amount to mint, 1BTC = 1bBTC = 1*10**18 weibBTC


    @param to mint to the address


     */


    function approveMint(


        bytes32 _tunnelKey,


        string memory _txid,


        uint256 _amount,


        address to,


        string memory assetAddress


    ) public override whenNotPaused whenTunnelNotPause(_tunnelKey) onlyTrustee(_tunnelKey) shouldMoreThan(_tunnelKey, _amount){


        if(to == address(0)) {


            if (approveFlag[_txid] == false) {


                approveFlag[_txid] = true;


                emit ETHAddressNotExist(_tunnelKey, _txid, _amount, to, msg.sender, assetAddress);


            }


            return;


        }


        


        uint256 trusteeCount = getRoleMemberCount(_tunnelKey);


        bool shouldMint = mintProposal().approve(


            _tunnelKey,


            _txid,


            _amount,


            to,


            msg.sender,


            trusteeCount


        );


        if (!shouldMint) {


            return;


        }


        uint256 canIssueAmount = tunnel(_tunnelKey).canIssueAmount();


        if (_amount.add(otoken(_tunnelKey).totalSupply()) > canIssueAmount) {


            emit NotEnoughPledgeValue(


                _tunnelKey,


                _txid,


                _amount,


                to,


                msg.sender,


                assetAddress


            );


            return;


        }


        // fee calculate in tunnel


        tunnel(_tunnelKey).issue(to, _amount);





        uint borMintAmount = calculateMintBORAmount(_tunnelKey, _amount);


        if(borMintAmount != 0) {


            amountByMint = amountByMint.add(borMintAmount);


            borERC20().transferFrom(mine, to, borMintAmount);


        }


        emit ApproveMintSuccess(_tunnelKey, _txid, _amount, to, assetAddress);


    }





    function calculateMintBORAmount(bytes32 _tunnelKey, uint _amount) public view returns (uint) {


        if (amountByMint >= mintCap || _amount == 0) {


            return 0;


        }


        uint256 assetPrice = oracle().getPrice(_tunnelKey);


        uint256 borPrice = oracle().getPrice(BOR);


        uint256 reductionTimes = amountByMint.div(reductionAmount);


        uint256 mintFeeRate = paramBook().params2(


            _tunnelKey,


            TUNNEL_MINT_FEE_RATE


        );


        // for decimal calculation, so mul 1e18


        uint256 reductionFactor = (4**reductionTimes).mul(1e18).div(5**reductionTimes);


        uint networkFee = paramBook().params2(_tunnelKey, NETWORK_FEE);


        uint baseAmount = _amount.multiplyDecimalRound(mintFeeRate).mul(2).add(networkFee);


        uint borAmount = assetPrice.multiplyDecimalRound(baseAmount).multiplyDecimalRound(reductionFactor).divideDecimalRound(borPrice);


        if (amountByMint.add(borAmount) >= mintCap) {


            borAmount = mintCap.sub(amountByMint);


        }


        return borAmount;


    }





    function pause() public onlyMonitor{


        _pause();


    }





    function unpause() public onlyMonitor{


        _unpause();


    }





    modifier onlyTrustee(bytes32 _tunnelKey) {


        require(hasRole(_tunnelKey, msg.sender), "Caller is not trustee");


        _;


    }





    modifier onlyAdmin {


        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "BoringDAO::caller is not admin");


        _;


    }





    modifier onlyMonitor {


        require(


            hasRole(MONITOR_ROLE, msg.sender),


            "Caller is not monitor"


        );


        _;


    }





    modifier whenContractExist(bytes32 key) {


        require(


            addrReso.key2address(key) != address(0),


            "Contract not exist"


        );


        _;


    }





    modifier whenTunnelNotPause(bytes32 _tunnelKey) {


        address tunnelAddress = addrReso.requireAndKey2Address(_tunnelKey, "tunnel not exist");


        require(IPaused(tunnelAddress).paused() == false, "tunnel is paused");


        _;


    }





    modifier shouldMoreThan(bytes32 _tunnelKey, uint amount) {


        require(amount >= minMintAmount[_tunnelKey], "Mint Amount should more than min amount");


        _;


    }





    event NotEnoughPledgeValue(


        bytes32 indexed _tunnelKey,


        string indexed _txid,


        uint256 _amount,


        address to,


        address trustee,


        string assetAddress


    );





    event ApproveMintSuccess(


        bytes32 _tunnelKey,


        string _txid,


        uint256 _amount,


        address to,


        string assetAddress


    );





    event ETHAddressNotExist(


        bytes32 _tunnelKey,


        string _txid,


        uint256 _amount,


        address to,


        address trustee,


        string assetAddress


    );





    event NotEnoughMintAmount(


        bytes32 indexed _tunnelKey,


        string indexed _txid,


        uint256 _amount,


        address to,


        address trustee,


        string assetAddress


    );





   


}





interface IPaused {


    function paused() external view returns (bool);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\BoringSatelliteChef.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.12;





import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";


import "@openzeppelin/contracts/utils/EnumerableSet.sol";


import "@openzeppelin/contracts/math/SafeMath.sol";


import "@openzeppelin/contracts/access/Ownable.sol";


import "../interface/ILiquidate.sol";


import "../interface/IERC20Metadata.sol";


import "../interface/IOracle.sol";


import "../interface/IPair.sol";


import "../lib/SafeDecimalMath.sol";





contract BoringSatelliteChef is Ownable, ILiquidateArray {


    using SafeMath for uint256;


    using SafeERC20 for IERC20;


    using SafeDecimalMath for uint256;


    // Info of each user.


    struct UserInfo {


        uint256 amount; // How many LP tokens the user has provided.


        uint256 rewardDebt; // Reward debt. See explanation below.


        //


        // We do some fancy math here. Basically, any point in time, the amount of BORINGs


        // entitled to a user but is pending to be distributed is:


        //


        //   pending reward = (user.amount * pool.accBoringPerShare) - user.rewardDebt


        //


        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:


        //   1. The pool's `accBoringPerShare` (and `lastRewardBlock`) gets updated.


        //   2. User receives the pending reward sent to his/her address.


        //   3. User's `amount` gets updated.


        //   4. User's `rewardDebt` gets updated.


    }


    // Info of each pool.


    // The first pool is a virtual pool. You can???t actually get rewards by depositing


    // the corresponding tokens in the pool. It is only used to adjust the block output


    // of boring tokens.


    struct PoolInfo {


        IERC20 lpToken; // Address of LP token contract.


        uint256 allocPoint; // How many allocation points assigned to this pool. BORINGs to distribute per block.


        uint256 lastRewardBlock; // Last block number that BORINGs distribution occurs.


        uint256 accBoringPerShare; // Accumulated BORINGs per share, times 1e12. See below.


        bool isSingle; // single token or LP token


        uint256 _type; // 0 normal pool; 1 satelite pool


    }


    // The BORING TOKEN!


    IERC20 public boring;


    // BORING tokens created per block.


    uint256 public boringPerBlock;


    // Info of each pool.


    PoolInfo[] public poolInfo;


    // Info of each user that stakes LP tokens.


    mapping(uint256 => mapping(address => UserInfo)) public userInfo;


    // Total allocation poitns. Must be the sum of all allocation points in all pools.


    uint256 public totalAllocPoint = 0;


    // The block number when BORING mining starts.


    uint256 public startBlock;


    uint256 public endBlock;


    address public dispatcher;





    address public liquidation;


    bool public tvlSwitcher;





    IOracle public oracle;


    uint256 public tvl;





    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);


    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);


    event EmergencyWithdraw(


        address indexed user,


        uint256 indexed pid,


        uint256 amount


    );





    constructor(


        IERC20 _boring,


        address _dispatcher,


        uint256 _boringPerBlock,


        uint256 _startBlock,


        address _liquidation,


        address _oracle


    ) public {


        boring = _boring;


        boringPerBlock = _boringPerBlock;


        startBlock = _startBlock;


        // temporary peroid


        endBlock = block.number.add(10000000);


        dispatcher = _dispatcher;


        liquidation = _liquidation;


        tvlSwitcher = true;


        oracle = IOracle(_oracle);


    }





    function setTVLSwitcher(bool _status) external onlyOwner {


        tvlSwitcher = _status;


    }





    // one day, the chef will retire


    function setEndBlock(uint256 _endBlock) external onlyOwner {


        endBlock = _endBlock;


    }





    function setDispatcher(address _dispatcher) external onlyOwner {


        dispatcher = _dispatcher;


    }





    function poolLength() external view returns (uint256) {


        return poolInfo.length;


    }





    function add(


        uint256 _allocPoint,


        IERC20 _lpToken,


        bool _withUpdate,


        bool _isSingle,


        uint256 _type


    ) public onlyOwner {


        if (_withUpdate) {


            massUpdatePools();


        }


        uint256 lastRewardBlock =


            block.number > startBlock ? block.number : startBlock;


        totalAllocPoint = totalAllocPoint.add(_allocPoint);


        poolInfo.push(


            PoolInfo({


                lpToken: _lpToken,


                allocPoint: _allocPoint,


                lastRewardBlock: lastRewardBlock,


                accBoringPerShare: 0,


                isSingle: _isSingle,


                _type: _type


            })


        );


    }





    // Update the given pool's BORING allocation point. Can only be called by the owner.


    function set(


        uint256 _pid,


        uint256 _allocPoint,


        bool _withUpdate


    ) public onlyOwner {


        if (_withUpdate) {


            massUpdatePools();


        }


        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(


            _allocPoint


        );


        poolInfo[_pid].allocPoint = _allocPoint;


    }





    // Return reward multiplier over the given _from to _to block.


    function getMultiplier(uint256 _from, uint256 _to)


        public


        view


        returns (uint256)


    {


        if (_to > endBlock) {


            return endBlock.sub(_from);


        } else {


            return _to.sub(_from);


        }


    }





    // View function to see pending BORINGs on frontend.


    function pendingBoring(uint256 _pid, address _user)


        external


        view


        returns (uint256)


    {


        PoolInfo storage pool = poolInfo[_pid];


        UserInfo storage user = userInfo[_pid][_user];


        uint256 accBoringPerShare = pool.accBoringPerShare;


        uint256 lpSupply = pool.lpToken.balanceOf(address(this));


        if (block.number > pool.lastRewardBlock && lpSupply != 0) {


            uint256 multiplier =


                getMultiplier(pool.lastRewardBlock, block.number);


            uint256 boringReward =


                multiplier.mul(boringPerBlock).mul(pool.allocPoint).div(


                    totalAllocPoint


                );


            accBoringPerShare = accBoringPerShare.add(


                boringReward.mul(1e12).div(lpSupply)


            );


        }


        return


            user.amount.mul(accBoringPerShare).div(1e12).sub(user.rewardDebt);


    }





    // Update reward vairables for all pools. Be careful of gas spending!


    function massUpdatePools() public {


        uint256 length = poolInfo.length;


        for (uint256 pid = 0; pid < length; ++pid) {


            updatePool(pid);


        }


    }





    // Update reward variables of the given pool to be up-to-date.


    function updatePool(uint256 _pid) public {


        PoolInfo storage pool = poolInfo[_pid];


        if (block.number <= pool.lastRewardBlock) {


            return;


        }


        uint256 lpSupply = pool.lpToken.balanceOf(address(this));


        if (lpSupply == 0) {


            pool.lastRewardBlock = block.number;


            return;


        }


        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);


        uint256 boringReward =


            multiplier.mul(boringPerBlock).mul(pool.allocPoint).div(


                totalAllocPoint


            );


        pool.accBoringPerShare = pool.accBoringPerShare.add(


            boringReward.mul(1e12).div(lpSupply)


        );


        pool.lastRewardBlock = block.number;


    }





    // Deposit LP tokens to MasterChef for BORING allocation.


    function deposit(uint256 _pid, uint256 _amount) public updateTVL{


        PoolInfo storage pool = poolInfo[_pid];


        UserInfo storage user = userInfo[_pid][msg.sender];


        updatePool(_pid);


        if (user.amount > 0) {


            uint256 pending =


                user.amount.mul(pool.accBoringPerShare).div(1e12).sub(


                    user.rewardDebt


                );


            safeBoringTransfer(msg.sender, pending);


        }


        if (_amount > 0) {


            pool.lpToken.safeTransferFrom(


                address(msg.sender),


                address(this),


                _amount


            );


        }


        user.amount = user.amount.add(_amount);


        user.rewardDebt = user.amount.mul(pool.accBoringPerShare).div(1e12);


        emit Deposit(msg.sender, _pid, _amount);


    }





    // Withdraw LP tokens from MasterChef.


    function withdraw(uint256 _pid, uint256 _amount) public updateTVL{


        PoolInfo storage pool = poolInfo[_pid];


        UserInfo storage user = userInfo[_pid][msg.sender];


        require(user.amount >= _amount, "withdraw: not good");


        updatePool(_pid);


        uint256 pending =


            user.amount.mul(pool.accBoringPerShare).div(1e12).sub(


                user.rewardDebt


            );


        safeBoringTransfer(msg.sender, pending);


        user.amount = user.amount.sub(_amount);


        user.rewardDebt = user.amount.mul(pool.accBoringPerShare).div(1e12);


        pool.lpToken.safeTransfer(address(msg.sender), _amount);


        emit Withdraw(msg.sender, _pid, _amount);


    }





    // Withdraw without caring about rewards. EMERGENCY ONLY.


    function emergencyWithdraw(uint256 _pid) public {


        PoolInfo storage pool = poolInfo[_pid];


        UserInfo storage user = userInfo[_pid][msg.sender];


        pool.lpToken.safeTransfer(address(msg.sender), user.amount);


        emit EmergencyWithdraw(msg.sender, _pid, user.amount);


        user.amount = 0;


        user.rewardDebt = 0;


    }





    // Safe boring transfer function, just in case if rounding error causes pool to not have enough BORINGs.


    function safeBoringTransfer(address _to, uint256 _amount) internal {


        boring.safeTransferFrom(dispatcher, _to, _amount);


    }





    function updateRewardPerBlock(uint256 _rewardPerBlock, bool withUpdate)


        external


        onlyOwner


    {


        if (withUpdate) {


            massUpdatePools();


        }


        boringPerBlock = _rewardPerBlock;


        emit NewRewardPerBlock(_rewardPerBlock);


    }





    function liquidateArray(address account, uint256[] memory pids)


        public


        override


        onlyLiquidation


    {


        require(address(account) != address(0), "SatelliteCity: empty account");





        uint256 length = pids.length;


        for (uint256 i = 0; i < length; ++i) {


            uint256 pid = pids[i];


            PoolInfo storage pool = poolInfo[pid];


            if (pool._type == 1) {


                IERC20 lpToken = pool.lpToken;


                uint256 bal = lpToken.balanceOf(address(this));


                lpToken.safeTransfer(account, bal);


            }


        }


    }





    function setTVL(uint256 _tvl) public onlyOwner {


        tvl = _tvl;


    }





    function calculateTVL() public view returns (uint256) {


        uint256 _tvl = 0;


        uint256 length = poolInfo.length;


        for (uint256 pid = 0; pid < length; ++pid) {


            PoolInfo storage pool = poolInfo[pid];


            uint256 lpAmount = pool.lpToken.balanceOf(address(this));


            if (pool._type == 1) {


                if (pool.isSingle) {


                    string memory symbol =


                        IERC20Metadata(address(pool.lpToken)).symbol();


                    uint8 decimals =


                        IERC20Metadata(address(pool.lpToken)).decimals();


                    uint256 price = oracle.getPrice(stringToBytes32(symbol));


                    uint256 diff = uint256(18).sub(uint256(decimals));


                    _tvl = _tvl.add(


                        lpAmount.mul(10**(diff)).multiplyDecimal(price)


                    );


                } else {


                    uint256 lpSupply = pool.lpToken.totalSupply();


                    (uint112 _reserve0, , ) =


                        IPair(address(pool.lpToken)).getReserves();


                    address token0 = IPair(address(pool.lpToken)).token0();


                    // TODO: uint112 => uint256?


                    uint256 amount =


                        lpAmount.mul(uint256(_reserve0)).div(lpSupply);


                    string memory symbol = IERC20Metadata(token0).symbol();


                    uint8 decimals = IERC20Metadata(token0).decimals();


                    uint256 price = oracle.getPrice(stringToBytes32(symbol));


                    uint256 diff = uint256(18).sub(uint256(decimals));


                    _tvl = _tvl.add(


                        amount.mul(10**(diff)).multiplyDecimal(price).mul(2)


                    );


                }


            }


        }


        return _tvl;


    }





    function satelliteTVL() public view returns (uint256) {


        return tvl;


    }





    function stringToBytes32(string memory source)


        public


        pure


        returns (bytes32 result)


    {


        assembly {


            result := mload(add(source, 32))


        }


    }





    function setLiquidation(address _liquidation) public onlyOwner {


        liquidation = _liquidation;


    }





    function setOracle(address _oracle) public onlyOwner {


        oracle = IOracle(_oracle);


    }





    modifier onlyLiquidation {


        require(msg.sender == liquidation, "caller is not liquidator");


        _;


    }





    modifier updateTVL {


        if (tvlSwitcher == true) {


            uint tvlAmount = calculateTVL();


            tvl = tvlAmount;


        }


        _;


    }





    event NewRewardPerBlock(uint256 amount);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\Context.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





/*


 * @dev Provides information about the current execution context, including the


 * sender of the transaction and its data. While these are generally available


 * via msg.sender and msg.data, they should not be accessed in such a direct


 * manner, since when dealing with GSN meta-transactions the account sending and


 * paying for execution may not be the actual sender (as far as an application


 * is concerned).


 *


 * This contract is only required for intermediate, library-like contracts.


 */


abstract contract Context {


    function _msgSender() internal view virtual returns (address payable) {


        return msg.sender;


    }





    function _msgData() internal view virtual returns (bytes memory) {


        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691


        return msg.data;


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\CrossLock.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2021-06-02


*/





// Sources flattened with hardhat v2.1.1 https://hardhat.org





// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.1.0





// SPDX-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Interface of the ERC20 standard as defined in the EIP.


 */


interface IERC20Upgradeable {


    /**


     * @dev Returns the amount of tokens in existence.


     */


    function totalSupply() external view returns (uint256);





    /**


     * @dev Returns the amount of tokens owned by `account`.


     */


    function balanceOf(address account) external view returns (uint256);





    /**


     * @dev Moves `amount` tokens from the caller's account to `recipient`.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transfer(address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Returns the remaining number of tokens that `spender` will be


     * allowed to spend on behalf of `owner` through {transferFrom}. This is


     * zero by default.


     *


     * This value changes when {approve} or {transferFrom} are called.


     */


    function allowance(address owner, address spender) external view returns (uint256);





    /**


     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * IMPORTANT: Beware that changing an allowance with this method brings the risk


     * that someone may use both the old and the new allowance by unfortunate


     * transaction ordering. One possible solution to mitigate this race


     * condition is to first reduce the spender's allowance to 0 and set the


     * desired value afterwards:


     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


     *


     * Emits an {Approval} event.


     */


    function approve(address spender, uint256 amount) external returns (bool);





    /**


     * @dev Moves `amount` tokens from `sender` to `recipient` using the


     * allowance mechanism. `amount` is then deducted from the caller's


     * allowance.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Emitted when `value` tokens are moved from one account (`from`) to


     * another (`to`).


     *


     * Note that `value` may be zero.


     */


    event Transfer(address indexed from, address indexed to, uint256 value);





    /**


     * @dev Emitted when the allowance of a `spender` for an `owner` is set by


     * a call to {approve}. `value` is the new allowance.


     */


    event Approval(address indexed owner, address indexed spender, uint256 value);


}








// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.1.0








pragma solidity ^0.8.0;





/**


 * @dev Collection of functions related to the address type


 */


library AddressUpgradeable {


    /**


     * @dev Returns true if `account` is a contract.


     *


     * [IMPORTANT]


     * ====


     * It is unsafe to assume that an address for which this function returns


     * false is an externally-owned account (EOA) and not a contract.


     *


     * Among others, `isContract` will return false for the following


     * types of addresses:


     *


     *  - an externally-owned account


     *  - a contract in construction


     *  - an address where a contract will be created


     *  - an address where a contract lived, but was destroyed


     * ====


     */


    function isContract(address account) internal view returns (bool) {


        // This method relies on extcodesize, which returns 0 for contracts in


        // construction, since the code is only stored at the end of the


        // constructor execution.





        uint256 size;


        // solhint-disable-next-line no-inline-assembly


        assembly { size := extcodesize(account) }


        return size > 0;


    }





    /**


     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to


     * `recipient`, forwarding all available gas and reverting on errors.


     *


     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost


     * of certain opcodes, possibly making contracts go over the 2300 gas limit


     * imposed by `transfer`, making them unable to receive funds via


     * `transfer`. {sendValue} removes this limitation.


     *


     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].


     *


     * IMPORTANT: because control is transferred to `recipient`, care must be


     * taken to not create reentrancy vulnerabilities. Consider using


     * {ReentrancyGuard} or the


     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].


     */


    function sendValue(address payable recipient, uint256 amount) internal {


        require(address(this).balance >= amount, "Address: insufficient balance");





        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value


        (bool success, ) = recipient.call{ value: amount }("");


        require(success, "Address: unable to send value, recipient may have reverted");


    }





    /**


     * @dev Performs a Solidity function call using a low level `call`. A


     * plain`call` is an unsafe replacement for a function call: use this


     * function instead.


     *


     * If `target` reverts with a revert reason, it is bubbled up by this


     * function (like regular Solidity function calls).


     *


     * Returns the raw returned data. To convert to the expected return value,


     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].


     *


     * Requirements:


     *


     * - `target` must be a contract.


     * - calling `target` with `data` must not revert.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data) internal returns (bytes memory) {


      return functionCall(target, data, "Address: low-level call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with


     * `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {


        return functionCallWithValue(target, data, 0, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but also transferring `value` wei to `target`.


     *


     * Requirements:


     *


     * - the calling contract must have an ETH balance of at least `value`.


     * - the called Solidity function must be `payable`.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {


        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");


    }





    /**


     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but


     * with `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {


        require(address(this).balance >= value, "Address: insufficient balance for call");


        require(isContract(target), "Address: call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.call{ value: value }(data);


        return _verifyCallResult(success, returndata, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but performing a static call.


     *


     * _Available since v3.3._


     */


    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {


        return functionStaticCall(target, data, "Address: low-level static call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],


     * but performing a static call.


     *


     * _Available since v3.3._


     */


    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {


        require(isContract(target), "Address: static call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.staticcall(data);


        return _verifyCallResult(success, returndata, errorMessage);


    }





    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {


        if (success) {


            return returndata;


        } else {


            // Look for revert reason and bubble it up if present


            if (returndata.length > 0) {


                // The easiest way to bubble the revert reason is using memory via assembly





                // solhint-disable-next-line no-inline-assembly


                assembly {


                    let returndata_size := mload(returndata)


                    revert(add(32, returndata), returndata_size)


                }


            } else {


                revert(errorMessage);


            }


        }


    }


}








// File @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol@v4.1.0








pragma solidity ^0.8.0;








/**


 * @title SafeERC20


 * @dev Wrappers around ERC20 operations that throw on failure (when the token


 * contract returns false). Tokens that return no value (and instead revert or


 * throw on failure) are also supported, non-reverting calls are assumed to be


 * successful.


 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,


 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.


 */


library SafeERC20Upgradeable {


    using AddressUpgradeable for address;





    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {


        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));


    }





    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {


        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));


    }





    /**


     * @dev Deprecated. This function has issues similar to the ones found in


     * {IERC20-approve}, and its usage is discouraged.


     *


     * Whenever possible, use {safeIncreaseAllowance} and


     * {safeDecreaseAllowance} instead.


     */


    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {


        // safeApprove should only be called when setting an initial allowance,


        // or when resetting it to zero. To increase and decrease it, use


        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'


        // solhint-disable-next-line max-line-length


        require((value == 0) || (token.allowance(address(this), spender) == 0),


            "SafeERC20: approve from non-zero to non-zero allowance"


        );


        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));


    }





    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {


        uint256 newAllowance = token.allowance(address(this), spender) + value;


        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));


    }





    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {


        unchecked {


            uint256 oldAllowance = token.allowance(address(this), spender);


            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");


            uint256 newAllowance = oldAllowance - value;


            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));


        }


    }





    /**


     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement


     * on the return value: the return value is optional (but if data is returned, it must not be false).


     * @param token The token targeted by the call.


     * @param data The call data (encoded using abi.encode or one of its variants).


     */


    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {


        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since


        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that


        // the target address contains contract code and also asserts for success in the low-level call.





        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");


        if (returndata.length > 0) { // Return data is optional


            // solhint-disable-next-line max-line-length


            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");


        }


    }


}








// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.1.0








// solhint-disable-next-line compiler-version


pragma solidity ^0.8.0;





/**


 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed


 * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an


 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer


 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.


 *


 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as


 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.


 *


 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure


 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.


 */


abstract contract Initializable {





    /**


     * @dev Indicates that the contract has been initialized.


     */


    bool private _initialized;





    /**


     * @dev Indicates that the contract is in the process of being initialized.


     */


    bool private _initializing;





    /**


     * @dev Modifier to protect an initializer function from being invoked twice.


     */


    modifier initializer() {


        require(_initializing || !_initialized, "Initializable: contract is already initialized");





        bool isTopLevelCall = !_initializing;


        if (isTopLevelCall) {


            _initializing = true;


            _initialized = true;


        }





        _;





        if (isTopLevelCall) {


            _initializing = false;


        }


    }


}








// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.1.0








pragma solidity ^0.8.0;





/*


 * @dev Provides information about the current execution context, including the


 * sender of the transaction and its data. While these are generally available


 * via msg.sender and msg.data, they should not be accessed in such a direct


 * manner, since when dealing with meta-transactions the account sending and


 * paying for execution may not be the actual sender (as far as an application


 * is concerned).


 *


 * This contract is only required for intermediate, library-like contracts.


 */


abstract contract ContextUpgradeable is Initializable {


    function __Context_init() internal initializer {


        __Context_init_unchained();


    }





    function __Context_init_unchained() internal initializer {


    }


    function _msgSender() internal view virtual returns (address) {


        return msg.sender;


    }





    function _msgData() internal view virtual returns (bytes calldata) {


        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691


        return msg.data;


    }


    uint256[50] private __gap;


}








// File @openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol@v4.1.0








pragma solidity ^0.8.0;





/**


 * @dev String operations.


 */


library StringsUpgradeable {


    bytes16 private constant alphabet = "0123456789abcdef";





    /**


     * @dev Converts a `uint256` to its ASCII `string` decimal representation.


     */


    function toString(uint256 value) internal pure returns (string memory) {


        // Inspired by OraclizeAPI's implementation - MIT licence


        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol





        if (value == 0) {


            return "0";


        }


        uint256 temp = value;


        uint256 digits;


        while (temp != 0) {


            digits++;


            temp /= 10;


        }


        bytes memory buffer = new bytes(digits);


        while (value != 0) {


            digits -= 1;


            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));


            value /= 10;


        }


        return string(buffer);


    }





    /**


     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.


     */


    function toHexString(uint256 value) internal pure returns (string memory) {


        if (value == 0) {


            return "0x00";


        }


        uint256 temp = value;


        uint256 length = 0;


        while (temp != 0) {


            length++;


            temp >>= 8;


        }


        return toHexString(value, length);


    }





    /**


     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.


     */


    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {


        bytes memory buffer = new bytes(2 * length + 2);


        buffer[0] = "0";


        buffer[1] = "x";


        for (uint256 i = 2 * length + 1; i > 1; --i) {


            buffer[i] = alphabet[value & 0xf];


            value >>= 4;


        }


        require(value == 0, "Strings: hex length insufficient");


        return string(buffer);


    }





}








// File @openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol@v4.1.0








pragma solidity ^0.8.0;





/**


 * @dev Interface of the ERC165 standard, as defined in the


 * https://eips.ethereum.org/EIPS/eip-165[EIP].


 *


 * Implementers can declare support of contract interfaces, which can then be


 * queried by others ({ERC165Checker}).


 *


 * For an implementation, see {ERC165}.


 */


interface IERC165Upgradeable {


    /**


     * @dev Returns true if this contract implements the interface defined by


     * `interfaceId`. See the corresponding


     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]


     * to learn more about how these ids are created.


     *


     * This function call must use less than 30 000 gas.


     */


    function supportsInterface(bytes4 interfaceId) external view returns (bool);


}








// File @openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol@v4.1.0








pragma solidity ^0.8.0;








/**


 * @dev Implementation of the {IERC165} interface.


 *


 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check


 * for the additional interface id that will be supported. For example:


 *


 * ```solidity


 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {


 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);


 * }


 * ```


 *


 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.


 */


abstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {


    function __ERC165_init() internal initializer {


        __ERC165_init_unchained();


    }





    function __ERC165_init_unchained() internal initializer {


    }


    /**


     * @dev See {IERC165-supportsInterface}.


     */


    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {


        return interfaceId == type(IERC165Upgradeable).interfaceId;


    }


    uint256[50] private __gap;


}








// File @openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol@v4.1.0








pragma solidity ^0.8.0;














/**


 * @dev External interface of AccessControl declared to support ERC165 detection.


 */


interface IAccessControlUpgradeable {


    function hasRole(bytes32 role, address account) external view returns (bool);


    function getRoleAdmin(bytes32 role) external view returns (bytes32);


    function grantRole(bytes32 role, address account) external;


    function revokeRole(bytes32 role, address account) external;


    function renounceRole(bytes32 role, address account) external;


}





/**


 * @dev Contract module that allows children to implement role-based access


 * control mechanisms. This is a lightweight version that doesn't allow enumerating role


 * members except through off-chain means by accessing the contract event logs. Some


 * applications may benefit from on-chain enumerability, for those cases see


 * {AccessControlEnumerable}.


 *


 * Roles are referred to by their `bytes32` identifier. These should be exposed


 * in the external API and be unique. The best way to achieve this is by


 * using `public constant` hash digests:


 *


 * ```


 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");


 * ```


 *


 * Roles can be used to represent a set of permissions. To restrict access to a


 * function call, use {hasRole}:


 *


 * ```


 * function foo() public {


 *     require(hasRole(MY_ROLE, msg.sender));


 *     ...


 * }


 * ```


 *


 * Roles can be granted and revoked dynamically via the {grantRole} and


 * {revokeRole} functions. Each role has an associated admin role, and only


 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.


 *


 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means


 * that only accounts with this role will be able to grant or revoke other


 * roles. More complex role relationships can be created by using


 * {_setRoleAdmin}.


 *


 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to


 * grant and revoke this role. Extra precautions should be taken to secure


 * accounts that have been granted it.


 */


abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {


    function __AccessControl_init() internal initializer {


        __Context_init_unchained();


        __ERC165_init_unchained();


        __AccessControl_init_unchained();


    }





    function __AccessControl_init_unchained() internal initializer {


    }


    struct RoleData {


        mapping (address => bool) members;


        bytes32 adminRole;


    }





    mapping (bytes32 => RoleData) private _roles;





    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;





    /**


     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`


     *


     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite


     * {RoleAdminChanged} not being emitted signaling this.


     *


     * _Available since v3.1._


     */


    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);





    /**


     * @dev Emitted when `account` is granted `role`.


     *


     * `sender` is the account that originated the contract call, an admin role


     * bearer except when using {_setupRole}.


     */


    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);





    /**


     * @dev Emitted when `account` is revoked `role`.


     *


     * `sender` is the account that originated the contract call:


     *   - if using `revokeRole`, it is the admin role bearer


     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)


     */


    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);





    /**


     * @dev Modifier that checks that an account has a specific role. Reverts


     * with a standardized message including the required role.


     *


     * The format of the revert reason is given by the following regular expression:


     *


     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/


     *


     * _Available since v4.1._


     */


    modifier onlyRole(bytes32 role) {


        _checkRole(role, _msgSender());


        _;


    }





    /**


     * @dev See {IERC165-supportsInterface}.


     */


    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {


        return interfaceId == type(IAccessControlUpgradeable).interfaceId


            || super.supportsInterface(interfaceId);


    }





    /**


     * @dev Returns `true` if `account` has been granted `role`.


     */


    function hasRole(bytes32 role, address account) public view override returns (bool) {


        return _roles[role].members[account];


    }





    /**


     * @dev Revert with a standard message if `account` is missing `role`.


     *


     * The format of the revert reason is given by the following regular expression:


     *


     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/


     */


    function _checkRole(bytes32 role, address account) internal view {


        if(!hasRole(role, account)) {


            revert(string(abi.encodePacked(


                "AccessControl: account ",


                StringsUpgradeable.toHexString(uint160(account), 20),


                " is missing role ",


                StringsUpgradeable.toHexString(uint256(role), 32)


            )));


        }


    }





    /**


     * @dev Returns the admin role that controls `role`. See {grantRole} and


     * {revokeRole}.


     *


     * To change a role's admin, use {_setRoleAdmin}.


     */


    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {


        return _roles[role].adminRole;


    }





    /**


     * @dev Grants `role` to `account`.


     *


     * If `account` had not been already granted `role`, emits a {RoleGranted}


     * event.


     *


     * Requirements:


     *


     * - the caller must have ``role``'s admin role.


     */


    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {


        _grantRole(role, account);


    }





    /**


     * @dev Revokes `role` from `account`.


     *


     * If `account` had been granted `role`, emits a {RoleRevoked} event.


     *


     * Requirements:


     *


     * - the caller must have ``role``'s admin role.


     */


    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {


        _revokeRole(role, account);


    }





    /**


     * @dev Revokes `role` from the calling account.


     *


     * Roles are often managed via {grantRole} and {revokeRole}: this function's


     * purpose is to provide a mechanism for accounts to lose their privileges


     * if they are compromised (such as when a trusted device is misplaced).


     *


     * If the calling account had been granted `role`, emits a {RoleRevoked}


     * event.


     *


     * Requirements:


     *


     * - the caller must be `account`.


     */


    function renounceRole(bytes32 role, address account) public virtual override {


        require(account == _msgSender(), "AccessControl: can only renounce roles for self");





        _revokeRole(role, account);


    }





    /**


     * @dev Grants `role` to `account`.


     *


     * If `account` had not been already granted `role`, emits a {RoleGranted}


     * event. Note that unlike {grantRole}, this function doesn't perform any


     * checks on the calling account.


     *


     * [WARNING]


     * ====


     * This function should only be called from the constructor when setting


     * up the initial roles for the system.


     *


     * Using this function in any other way is effectively circumventing the admin


     * system imposed by {AccessControl}.


     * ====


     */


    function _setupRole(bytes32 role, address account) internal virtual {


        _grantRole(role, account);


    }





    /**


     * @dev Sets `adminRole` as ``role``'s admin role.


     *


     * Emits a {RoleAdminChanged} event.


     */


    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {


        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);


        _roles[role].adminRole = adminRole;


    }





    function _grantRole(bytes32 role, address account) private {


        if (!hasRole(role, account)) {


            _roles[role].members[account] = true;


            emit RoleGranted(role, account, _msgSender());


        }


    }





    function _revokeRole(bytes32 role, address account) private {


        if (hasRole(role, account)) {


            _roles[role].members[account] = false;


            emit RoleRevoked(role, account, _msgSender());


        }


    }


    uint256[49] private __gap;


}








// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.1.0








pragma solidity ^0.8.0;





// CAUTION


// This version of SafeMath should only be used with Solidity 0.8 or later,


// because it relies on the compiler's built in overflow checks.





/**


 * @dev Wrappers over Solidity's arithmetic operations.


 *


 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler


 * now has built in overflow checking.


 */


library SafeMath {


    /**


     * @dev Returns the addition of two unsigned integers, with an overflow flag.


     *


     * _Available since v3.4._


     */


    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        unchecked {


            uint256 c = a + b;


            if (c < a) return (false, 0);


            return (true, c);


        }


    }





    /**


     * @dev Returns the substraction of two unsigned integers, with an overflow flag.


     *


     * _Available since v3.4._


     */


    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        unchecked {


            if (b > a) return (false, 0);


            return (true, a - b);


        }


    }





    /**


     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.


     *


     * _Available since v3.4._


     */


    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        unchecked {


            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the


            // benefit is lost if 'b' is also tested.


            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522


            if (a == 0) return (true, 0);


            uint256 c = a * b;


            if (c / a != b) return (false, 0);


            return (true, c);


        }


    }





    /**


     * @dev Returns the division of two unsigned integers, with a division by zero flag.


     *


     * _Available since v3.4._


     */


    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        unchecked {


            if (b == 0) return (false, 0);


            return (true, a / b);


        }


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.


     *


     * _Available since v3.4._


     */


    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        unchecked {


            if (b == 0) return (false, 0);


            return (true, a % b);


        }


    }





    /**


     * @dev Returns the addition of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `+` operator.


     *


     * Requirements:


     *


     * - Addition cannot overflow.


     */


    function add(uint256 a, uint256 b) internal pure returns (uint256) {


        return a + b;


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting on


     * overflow (when the result is negative).


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {


        return a - b;


    }





    /**


     * @dev Returns the multiplication of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `*` operator.


     *


     * Requirements:


     *


     * - Multiplication cannot overflow.


     */


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {


        return a * b;


    }





    /**


     * @dev Returns the integer division of two unsigned integers, reverting on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator.


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b) internal pure returns (uint256) {


        return a / b;


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * reverting when dividing by zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {


        return a % b;


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on


     * overflow (when the result is negative).


     *


     * CAUTION: This function is deprecated because it requires allocating memory for the error


     * message unnecessarily. For custom revert reasons use {trySub}.


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        unchecked {


            require(b <= a, errorMessage);


            return a - b;


        }


    }





    /**


     * @dev Returns the integer division of two unsigned integers, reverting with custom message on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        unchecked {


            require(b > 0, errorMessage);


            return a / b;


        }


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * reverting with custom message when dividing by zero.


     *


     * CAUTION: This function is deprecated because it requires allocating memory for the error


     * message unnecessarily. For custom revert reasons use {tryMod}.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        unchecked {


            require(b > 0, errorMessage);


            return a % b;


        }


    }


}








// File contracts/lib/SafeDecimalMath.sol





pragma solidity ^0.8.0;





// Libraries





// https://docs.synthetix.io/contracts/SafeDecimalMath


library SafeDecimalMath {


    using SafeMath for uint;





    /* Number of decimal places in the representations. */


    uint8 public constant decimals = 18;


    uint8 public constant highPrecisionDecimals = 27;





    /* The number representing 1.0. */


    uint public constant UNIT = 10**uint(decimals);





    /* The number representing 1.0 for higher fidelity numbers. */


    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);


    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);





    /**


     * @return Provides an interface to UNIT.


     */


    function unit() external pure returns (uint) {


        return UNIT;


    }





    /**


     * @return Provides an interface to PRECISE_UNIT.


     */


    function preciseUnit() external pure returns (uint) {


        return PRECISE_UNIT;


    }





    /**


     * @return The result of multiplying x and y, interpreting the operands as fixed-point


     * decimals.


     *


     * @dev A unit factor is divided out after the product of x and y is evaluated,


     * so that product must be less than 2**256. As this is an integer division,


     * the internal division always rounds down. This helps save on gas. Rounding


     * is more expensive on gas.


     */


    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {


        /* Divide by UNIT to remove the extra factor introduced by the product. */


        return x.mul(y) / UNIT;


    }





    /**


     * @return The result of safely multiplying x and y, interpreting the operands


     * as fixed-point decimals of the specified precision unit.


     *


     * @dev The operands should be in the form of a the specified unit factor which will be


     * divided out after the product of x and y is evaluated, so that product must be


     * less than 2**256.


     *


     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.


     * Rounding is useful when you need to retain fidelity for small decimal numbers


     * (eg. small fractions or percentages).


     */


    function _multiplyDecimalRound(


        uint x,


        uint y,


        uint precisionUnit


    ) private pure returns (uint) {


        /* Divide by UNIT to remove the extra factor introduced by the product. */


        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);





        if (quotientTimesTen % 10 >= 5) {


            quotientTimesTen += 10;


        }





        return quotientTimesTen / 10;


    }





    /**


     * @return The result of safely multiplying x and y, interpreting the operands


     * as fixed-point decimals of a precise unit.


     *


     * @dev The operands should be in the precise unit factor which will be


     * divided out after the product of x and y is evaluated, so that product must be


     * less than 2**256.


     *


     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.


     * Rounding is useful when you need to retain fidelity for small decimal numbers


     * (eg. small fractions or percentages).


     */


    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {


        return _multiplyDecimalRound(x, y, PRECISE_UNIT);


    }





    /**


     * @return The result of safely multiplying x and y, interpreting the operands


     * as fixed-point decimals of a standard unit.


     *


     * @dev The operands should be in the standard unit factor which will be


     * divided out after the product of x and y is evaluated, so that product must be


     * less than 2**256.


     *


     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.


     * Rounding is useful when you need to retain fidelity for small decimal numbers


     * (eg. small fractions or percentages).


     */


    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {


        return _multiplyDecimalRound(x, y, UNIT);


    }





    /**


     * @return The result of safely dividing x and y. The return value is a high


     * precision decimal.


     *


     * @dev y is divided after the product of x and the standard precision unit


     * is evaluated, so the product of x and UNIT must be less than 2**256. As


     * this is an integer division, the result is always rounded down.


     * This helps save on gas. Rounding is more expensive on gas.


     */


    function divideDecimal(uint x, uint y) internal pure returns (uint) {


        /* Reintroduce the UNIT factor that will be divided out by y. */


        return x.mul(UNIT).div(y);


    }





    /**


     * @return The result of safely dividing x and y. The return value is as a rounded


     * decimal in the precision unit specified in the parameter.


     *


     * @dev y is divided after the product of x and the specified precision unit


     * is evaluated, so the product of x and the specified precision unit must


     * be less than 2**256. The result is rounded to the nearest increment.


     */


    function _divideDecimalRound(


        uint x,


        uint y,


        uint precisionUnit


    ) private pure returns (uint) {


        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);





        if (resultTimesTen % 10 >= 5) {


            resultTimesTen += 10;


        }





        return resultTimesTen / 10;


    }





    /**


     * @return The result of safely dividing x and y. The return value is as a rounded


     * standard precision decimal.


     *


     * @dev y is divided after the product of x and the standard precision unit


     * is evaluated, so the product of x and the standard precision unit must


     * be less than 2**256. The result is rounded to the nearest increment.


     */


    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {


        return _divideDecimalRound(x, y, UNIT);


    }





    /**


     * @return The result of safely dividing x and y. The return value is as a rounded


     * high precision decimal.


     *


     * @dev y is divided after the product of x and the high precision unit


     * is evaluated, so the product of x and the high precision unit must


     * be less than 2**256. The result is rounded to the nearest increment.


     */


    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {


        return _divideDecimalRound(x, y, PRECISE_UNIT);


    }





    /**


     * @dev Convert a standard decimal representation to a high precision one.


     */


    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {


        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);


    }





    /**


     * @dev Convert a high precision decimal to a standard decimal representation.


     */


    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {


        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);





        if (quotientTimesTen % 10 >= 5) {


            quotientTimesTen += 10;


        }





        return quotientTimesTen / 10;


    }


}








// File contracts/ProposalVote.sol








pragma solidity ^0.8.0;





contract ProposalVote {


    using SafeMath for uint256;





    mapping(address => uint256) public threshold;





    mapping(bytes32 => bool) isFinished;


    mapping(bytes32 => mapping(address => bool)) isVoted;


    mapping(bytes32 => uint256) counter;





    event ProposalVoted(


        address token,


        address from,


        address to,


        uint256 amount,


        address proposer,


        uint256 count,


        uint256 threshold


    );





    event ThresholdChanged(address token, uint256 oldThreshold, uint256 newThreshold);





    function _setThreshold(address token, uint256 _threshold) internal virtual {


        uint256 oldThreshold = threshold[token];


        threshold[token] = _threshold;


        emit ThresholdChanged(token, oldThreshold, _threshold);


    }





    function _vote(


        address tokenTo,


        address from,


        address to,


        uint256 amount,


        string memory txid


    ) internal virtual returns (bool result) {


        require(threshold[tokenTo] > 0, "ProposalVote: threshold should be greater than 0");


        uint256 count = threshold[tokenTo];


        bytes32 mid = keccak256(abi.encodePacked(tokenTo, from, to, amount, txid));


        require(isFinished[mid] == false, "_vote::proposal finished");


        require(isVoted[mid][msg.sender] == false, "_vote::msg.sender voted");


        counter[mid] = counter[mid].add(1);


        isVoted[mid][msg.sender] = true;





        if (counter[mid] >= count) {


            isFinished[mid] = true;


            result = true;


        }





        emit ProposalVoted(tokenTo, from, to, amount, msg.sender, counter[mid], count);


    }


}








// File @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol@v4.1.0








pragma solidity ^0.8.0;





/**


 * @dev This is the interface that {BeaconProxy} expects of its beacon.


 */


interface IBeaconUpgradeable {


    /**


     * @dev Must return an address that can be used as a delegate call target.


     *


     * {BeaconProxy} will check that this address is a contract.


     */


    function implementation() external view returns (address);


}








// File @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol@v4.1.0








pragma solidity ^0.8.0;





/**


 * @dev Library for reading and writing primitive types to specific storage slots.


 *


 * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.


 * This library helps with reading and writing to such slots without the need for inline assembly.


 *


 * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.


 *


 * Example usage to set ERC1967 implementation slot:


 * ```


 * contract ERC1967 {


 *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;


 *


 *     function _getImplementation() internal view returns (address) {


 *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;


 *     }


 *


 *     function _setImplementation(address newImplementation) internal {


 *         require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");


 *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;


 *     }


 * }


 * ```


 *


 * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._


 */


library StorageSlotUpgradeable {


    struct AddressSlot {


        address value;


    }





    struct BooleanSlot {


        bool value;


    }





    struct Bytes32Slot {


        bytes32 value;


    }





    struct Uint256Slot {


        uint256 value;


    }





    /**


     * @dev Returns an `AddressSlot` with member `value` located at `slot`.


     */


    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {


        assembly {


            r.slot := slot


        }


    }





    /**


     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.


     */


    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {


        assembly {


            r.slot := slot


        }


    }





    /**


     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.


     */


    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {


        assembly {


            r.slot := slot


        }


    }





    /**


     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.


     */


    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {


        assembly {


            r.slot := slot


        }


    }


}








// File @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol@v4.1.0








pragma solidity ^0.8.2;














/**


 * @dev This abstract contract provides getters and event emitting update functions for


 * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.


 *


 * _Available since v4.1._


 *


 * @custom:oz-upgrades-unsafe-allow delegatecall


 */


abstract contract ERC1967UpgradeUpgradeable is Initializable {


    function __ERC1967Upgrade_init() internal initializer {


        __ERC1967Upgrade_init_unchained();


    }





    function __ERC1967Upgrade_init_unchained() internal initializer {


    }


    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1


    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;





    /**


     * @dev Storage slot with the address of the current implementation.


     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is


     * validated in the constructor.


     */


    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;





    /**


     * @dev Emitted when the implementation is upgraded.


     */


    event Upgraded(address indexed implementation);





    /**


     * @dev Returns the current implementation address.


     */


    function _getImplementation() internal view returns (address) {


        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;


    }





    /**


     * @dev Stores a new address in the EIP1967 implementation slot.


     */


    function _setImplementation(address newImplementation) private {


        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");


        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;


    }





    /**


     * @dev Perform implementation upgrade


     *


     * Emits an {Upgraded} event.


     */


    function _upgradeTo(address newImplementation) internal {


        _setImplementation(newImplementation);


        emit Upgraded(newImplementation);


    }





    /**


     * @dev Perform implementation upgrade with additional setup call.


     *


     * Emits an {Upgraded} event.


     */


    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {


        _setImplementation(newImplementation);


        emit Upgraded(newImplementation);


        if (data.length > 0 || forceCall) {


            _functionDelegateCall(newImplementation, data);


        }


    }





    /**


     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.


     *


     * Emits an {Upgraded} event.


     */


    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {


        address oldImplementation = _getImplementation();





        // Initial upgrade and setup call


        _setImplementation(newImplementation);


        if (data.length > 0 || forceCall) {


            _functionDelegateCall(newImplementation, data);


        }





        // Perform rollback test if not already in progress


        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);


        if (!rollbackTesting.value) {


            // Trigger rollback using upgradeTo from the new implementation


            rollbackTesting.value = true;


            _functionDelegateCall(


                newImplementation,


                abi.encodeWithSignature(


                    "upgradeTo(address)",


                    oldImplementation


                )


            );


            rollbackTesting.value = false;


            // Check rollback was effective


            require(oldImplementation == _getImplementation(), "ERC1967Upgrade: upgrade breaks further upgrades");


            // Finally reset to the new implementation and log the upgrade


            _setImplementation(newImplementation);


            emit Upgraded(newImplementation);


        }


    }





    /**


     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does


     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).


     *


     * Emits a {BeaconUpgraded} event.


     */


    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {


        _setBeacon(newBeacon);


        emit BeaconUpgraded(newBeacon);


        if (data.length > 0 || forceCall) {


            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);


        }


    }





    /**


     * @dev Storage slot with the admin of the contract.


     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is


     * validated in the constructor.


     */


    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;





    /**


     * @dev Emitted when the admin account has changed.


     */


    event AdminChanged(address previousAdmin, address newAdmin);





    /**


     * @dev Returns the current admin.


     */


    function _getAdmin() internal view returns (address) {


        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;


    }





    /**


     * @dev Stores a new address in the EIP1967 admin slot.


     */


    function _setAdmin(address newAdmin) private {


        require(newAdmin != address(0), "ERC1967: new admin is the zero address");


        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;


    }





    /**


     * @dev Changes the admin of the proxy.


     *


     * Emits an {AdminChanged} event.


     */


    function _changeAdmin(address newAdmin) internal {


        emit AdminChanged(_getAdmin(), newAdmin);


        _setAdmin(newAdmin);


    }





    /**


     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.


     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.


     */


    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;





    /**


     * @dev Emitted when the beacon is upgraded.


     */


    event BeaconUpgraded(address indexed beacon);





    /**


     * @dev Returns the current beacon.


     */


    function _getBeacon() internal view returns (address) {


        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;


    }





    /**


     * @dev Stores a new beacon in the EIP1967 beacon slot.


     */


    function _setBeacon(address newBeacon) private {


        require(


            AddressUpgradeable.isContract(newBeacon),


            "ERC1967: new beacon is not a contract"


        );


        require(


            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),


            "ERC1967: beacon implementation is not a contract"


        );


        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;


    }





    /*


     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],


     * but performing a delegate call.


     *


     * _Available since v3.4._


     */


    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {


        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.delegatecall(data);


        return _verifyCallResult(success, returndata, "Address: low-level delegate call failed");


    }





    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {


        if (success) {


            return returndata;


        } else {


            // Look for revert reason and bubble it up if present


            if (returndata.length > 0) {


                // The easiest way to bubble the revert reason is using memory via assembly





                // solhint-disable-next-line no-inline-assembly


                assembly {


                    let returndata_size := mload(returndata)


                    revert(add(32, returndata), returndata_size)


                }


            } else {


                revert(errorMessage);


            }


        }


    }


    uint256[50] private __gap;


}








// File @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol@v4.1.0








pragma solidity ^0.8.0;








/**


 * @dev Base contract for building openzeppelin-upgrades compatible implementations for the {ERC1967Proxy}. It includes


 * publicly available upgrade functions that are called by the plugin and by the secure upgrade mechanism to verify


 * continuation of the upgradability.


 *


 * The {_authorizeUpgrade} function MUST be overridden to include access restriction to the upgrade mechanism.


 *


 * _Available since v4.1._


 */


abstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {


    function __UUPSUpgradeable_init() internal initializer {


        __ERC1967Upgrade_init_unchained();


        __UUPSUpgradeable_init_unchained();


    }





    function __UUPSUpgradeable_init_unchained() internal initializer {


    }


    function upgradeTo(address newImplementation) external virtual {


        _authorizeUpgrade(newImplementation);


        _upgradeToAndCallSecure(newImplementation, bytes(""), false);


    }





    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {


        _authorizeUpgrade(newImplementation);


        _upgradeToAndCallSecure(newImplementation, data, true);


    }





    function _authorizeUpgrade(address newImplementation) internal virtual;


    uint256[50] private __gap;


}








// File contracts/CrossLock.sol








pragma solidity ^0.8.0;























contract CrossLock is Initializable, UUPSUpgradeable, ProposalVote, AccessControlUpgradeable {


    using SafeERC20Upgradeable for IERC20Upgradeable;


    using SafeDecimalMath for uint256;





    // eg.ethToken => other


    mapping(address => mapping(uint256 => address)) public supportToken;


    mapping(string => bool) public txUnlocked;





    event Lock(address token0, address token1, uint256 chainID, address locker, address to, uint256 amount);


    event Unlock(address token0, address token1, uint256 chainID, address from, address to, uint256 amount, string txid);





    function initialize() initializer public {


        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);


    }





    function _authorizeUpgrade(address) internal override onlyAdmin {}








    function getRoleKey(


        address token0,


        address token1,


        uint256 chainID


    ) public pure returns (bytes32 key) {


        key = keccak256(abi.encodePacked(token0, token1, chainID));


    }





    function addSupportToken(


        address token0,


        address token1,


        uint256 chainID


    ) public onlyAdmin {


        require(supportToken[token0][chainID] == address(0), "Toke already Supported");


        supportToken[token0][chainID] = token1;


    }





    function removeSupportToken(address token0, uint256 chainID) public onlyAdmin {


        require(supportToken[token0][chainID] != address(0), "Toke not Supported");


        delete supportToken[token0][chainID];


    }





    function addSupportTokens(


        address[] memory token0Addrs,


        address[] memory token1Addrs,


        uint256[] memory chainIDs


    ) public {


        require(token0Addrs.length == token1Addrs.length, "Token length not match");


        require(token0Addrs.length == chainIDs.length, "Token length not match");


        for (uint256 i; i < token0Addrs.length; i++) {


            addSupportToken(token0Addrs[i], token1Addrs[i], chainIDs[i]);


        }


    }





    function removeSupportTokens(address[] memory token1s, uint256[] memory chainIDs) public {


        require(token1s.length == chainIDs.length, "Token length not match");


        for (uint256 i; i < token1s.length; i++) {


            removeSupportToken(token1s[i], chainIDs[i]);


        }


    }





    function lock(


        address token0,


        uint256 chainID,


        address to,


        uint256 amount


    ) public onlySupportToken(token0, chainID) {


        IERC20Upgradeable(token0).safeTransferFrom(msg.sender, address(this), amount);


        emit Lock(token0, supportToken[token0][chainID], chainID, msg.sender, to, amount);


    }





    function unlock(


        address token0,


        uint256 chainID,


        address from,


        address to,


        uint256 amount,


        string memory txid


    ) public onlySupportToken(token0, chainID) onlyCrosser(token0, chainID) whenNotUnlocked(txid) {


        bool result = _vote(token0, from, to, amount, txid);


        if (result) {


            txUnlocked[txid] = true;


            IERC20Upgradeable(token0).safeTransfer(to, amount);


            address token1 = supportToken[token0][chainID];


            emit Unlock(token0, token1, chainID, from, to, amount, txid);


        }


    }





    function setThreshold(address token0, uint256 _threshold) public onlyAdmin {


        _setThreshold(token0, _threshold);


    }





    modifier onlySupportToken(address token0, uint256 chainID) {


        require(supportToken[token0][chainID] != address(0), "Lock::Not Support Token");


        _;


    }





    modifier onlyAdmin {


        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "caller is not admin");


        _;


    }





    modifier onlyCrosser(address token0, uint256 chainID) {


        bytes32 key = getRoleKey(token0, supportToken[token0][chainID], chainID);


        require(hasRole(key, msg.sender), "caller is not crosser");


        _;


    }





    modifier whenNotUnlocked(string memory _txid) {


        require(txUnlocked[_txid] == false, "tx unlocked");


        _;


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\DoubleTransferHelper.sol
File type: .sol
// SPDX-License-Identifier: agpl-3.0


pragma solidity 0.6.10;





import "../interfaces/IERC20.sol";





contract DoubleTransferHelper {





    IERC20 public immutable AAVE;





    constructor(IERC20 aave) public {


        AAVE = aave;


    }





    function doubleSend(address to, uint256 amount1, uint256 amount2) external {


        AAVE.transfer(to, amount1);


        AAVE.transfer(to, amount2);


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\ENMT.sol
File type: .sol
// SPDX-License-Identifier: MIT





// Contract for an ENMT token (ERC20 compliant Non-Mintable Token). Fully compliant with the ERC20 specification.





// TOKEN SPECIFICATIONS:


// - Total supply set upon creation.


// - No new tokens can ever be minted.


// - Tokens can be burnt by any user to reduce total supply.


// - Fully ERC20 compliant.


// - This token has no owner, no admin functions, and is fully decentralised.





pragma solidity ^0.8.0;





import "./ERC20.sol";





// A fully ERC20 Compliant Non Mintable Token (ENMT)


contract ENMT is ERC20 {


    


    // Defines how to read the TokenInfo ABI, as well as the capabilities of the token


    uint256 public TOKEN_TYPE = 1;


    


    struct TokenInfo {


        uint8 decimals;


        address creator;


    }


    


    TokenInfo public INFO;


    


    constructor(string memory _name, string memory _symbol, uint8 _decimals, address _creator, uint256 _totalSupply) ERC20(_name, _symbol) {


        _mint(msg.sender, _totalSupply);


        INFO = TokenInfo(_decimals, _creator);


    }


    


    function decimals() public view virtual override returns (uint8) {


        return INFO.decimals;


    }





    function burn(uint256 amount) public virtual {


        _burn(_msgSender(), amount);


    }


    


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\EnumerableSet.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





/**


 * @dev Library for managing


 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive


 * types.


 *


 * Sets have the following properties:


 *


 * - Elements are added, removed, and checked for existence in constant time


 * (O(1)).


 * - Elements are enumerated in O(n). No guarantees are made on the ordering.


 *


 * ```


 * contract Example {


 *     // Add the library methods


 *     using EnumerableSet for EnumerableSet.AddressSet;


 *


 *     // Declare a set state variable


 *     EnumerableSet.AddressSet private mySet;


 * }


 * ```


 *


 * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`


 * (`UintSet`) are supported.


 */


library EnumerableSet {


    // To implement this library for multiple types with as little code


    // repetition as possible, we write it in terms of a generic Set type with


    // bytes32 values.


    // The Set implementation uses private functions, and user-facing


    // implementations (such as AddressSet) are just wrappers around the


    // underlying Set.


    // This means that we can only create new EnumerableSets for types that fit


    // in bytes32.





    struct Set {


        // Storage of set values


        bytes32[] _values;





        // Position of the value in the `values` array, plus 1 because index 0


        // means a value is not in the set.


        mapping (bytes32 => uint256) _indexes;


    }





    /**


     * @dev Add a value to a set. O(1).


     *


     * Returns true if the value was added to the set, that is if it was not


     * already present.


     */


    function _add(Set storage set, bytes32 value) private returns (bool) {


        if (!_contains(set, value)) {


            set._values.push(value);


            // The value is stored at length-1, but we add 1 to all indexes


            // and use 0 as a sentinel value


            set._indexes[value] = set._values.length;


            return true;


        } else {


            return false;


        }


    }





    /**


     * @dev Removes a value from a set. O(1).


     *


     * Returns true if the value was removed from the set, that is if it was


     * present.


     */


    function _remove(Set storage set, bytes32 value) private returns (bool) {


        // We read and store the value's index to prevent multiple reads from the same storage slot


        uint256 valueIndex = set._indexes[value];





        if (valueIndex != 0) { // Equivalent to contains(set, value)


            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in


            // the array, and then remove the last element (sometimes called as 'swap and pop').


            // This modifies the order of the array, as noted in {at}.





            uint256 toDeleteIndex = valueIndex - 1;


            uint256 lastIndex = set._values.length - 1;





            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs


            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.





            bytes32 lastvalue = set._values[lastIndex];





            // Move the last value to the index where the value to delete is


            set._values[toDeleteIndex] = lastvalue;


            // Update the index for the moved value


            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based





            // Delete the slot where the moved value was stored


            set._values.pop();





            // Delete the index for the deleted slot


            delete set._indexes[value];





            return true;


        } else {


            return false;


        }


    }





    /**


     * @dev Returns true if the value is in the set. O(1).


     */


    function _contains(Set storage set, bytes32 value) private view returns (bool) {


        return set._indexes[value] != 0;


    }





    /**


     * @dev Returns the number of values on the set. O(1).


     */


    function _length(Set storage set) private view returns (uint256) {


        return set._values.length;


    }





   /**


    * @dev Returns the value stored at position `index` in the set. O(1).


    *


    * Note that there are no guarantees on the ordering of values inside the


    * array, and it may change when more values are added or removed.


    *


    * Requirements:


    *


    * - `index` must be strictly less than {length}.


    */


    function _at(Set storage set, uint256 index) private view returns (bytes32) {


        require(set._values.length > index, "EnumerableSet: index out of bounds");


        return set._values[index];


    }





    // AddressSet





    struct AddressSet {


        Set _inner;


    }





    /**


     * @dev Add a value to a set. O(1).


     *


     * Returns true if the value was added to the set, that is if it was not


     * already present.


     */


    function add(AddressSet storage set, address value) internal returns (bool) {


        return _add(set._inner, bytes32(uint256(value)));


    }





    /**


     * @dev Removes a value from a set. O(1).


     *


     * Returns true if the value was removed from the set, that is if it was


     * present.


     */


    function remove(AddressSet storage set, address value) internal returns (bool) {


        return _remove(set._inner, bytes32(uint256(value)));


    }





    /**


     * @dev Returns true if the value is in the set. O(1).


     */


    function contains(AddressSet storage set, address value) internal view returns (bool) {


        return _contains(set._inner, bytes32(uint256(value)));


    }





    /**


     * @dev Returns the number of values in the set. O(1).


     */


    function length(AddressSet storage set) internal view returns (uint256) {


        return _length(set._inner);


    }





   /**


    * @dev Returns the value stored at position `index` in the set. O(1).


    *


    * Note that there are no guarantees on the ordering of values inside the


    * array, and it may change when more values are added or removed.


    *


    * Requirements:


    *


    * - `index` must be strictly less than {length}.


    */


    function at(AddressSet storage set, uint256 index) internal view returns (address) {


        return address(uint256(_at(set._inner, index)));


    }








    // UintSet





    struct UintSet {


        Set _inner;


    }





    /**


     * @dev Add a value to a set. O(1).


     *


     * Returns true if the value was added to the set, that is if it was not


     * already present.


     */


    function add(UintSet storage set, uint256 value) internal returns (bool) {


        return _add(set._inner, bytes32(value));


    }





    /**


     * @dev Removes a value from a set. O(1).


     *


     * Returns true if the value was removed from the set, that is if it was


     * present.


     */


    function remove(UintSet storage set, uint256 value) internal returns (bool) {


        return _remove(set._inner, bytes32(value));


    }





    /**


     * @dev Returns true if the value is in the set. O(1).


     */


    function contains(UintSet storage set, uint256 value) internal view returns (bool) {


        return _contains(set._inner, bytes32(value));


    }





    /**


     * @dev Returns the number of values on the set. O(1).


     */


    function length(UintSet storage set) internal view returns (uint256) {


        return _length(set._inner);


    }





   /**


    * @dev Returns the value stored at position `index` in the set. O(1).


    *


    * Note that there are no guarantees on the ordering of values inside the


    * array, and it may change when more values are added or removed.


    *


    * Requirements:


    *


    * - `index` must be strictly less than {length}.


    */


    function at(UintSet storage set, uint256 index) internal view returns (uint256) {


        return uint256(_at(set._inner, index));


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\ERC1967Proxy.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2021-07-07


*/





// SPDX-License-Identifier: MIT


pragma solidity ^0.8.0;





/**


 * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM


 * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to


 * be specified by overriding the virtual {_implementation} function.


 *


 * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a


 * different contract through the {_delegate} function.


 *


 * The success and return data of the delegated call will be returned back to the caller of the proxy.


 */


abstract contract Proxy {


    /**


     * @dev Delegates the current call to `implementation`.


     *


     * This function does not return to its internall call site, it will return directly to the external caller.


     */


    function _delegate(address implementation) internal virtual {


        // solhint-disable-next-line no-inline-assembly


        assembly {


        // Copy msg.data. We take full control of memory in this inline assembly


        // block because it will not return to Solidity code. We overwrite the


        // Solidity scratch pad at memory position 0.


            calldatacopy(0, 0, calldatasize())





        // Call the implementation.


        // out and outsize are 0 because we don't know the size yet.


            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)





        // Copy the returned data.


            returndatacopy(0, 0, returndatasize())





            switch result


            // delegatecall returns 0 on error.


            case 0 { revert(0, returndatasize()) }


            default { return(0, returndatasize()) }


        }


    }





    /**


     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function


     * and {_fallback} should delegate.


     */


    function _implementation() internal view virtual returns (address);





    /**


     * @dev Delegates the current call to the address returned by `_implementation()`.


     *


     * This function does not return to its internall call site, it will return directly to the external caller.


     */


    function _fallback() internal virtual {


        _beforeFallback();


        _delegate(_implementation());


    }





    /**


     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other


     * function in the contract matches the call data.


     */


    fallback () external payable virtual {


        _fallback();


    }





    /**


     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data


     * is empty.


     */


    receive () external payable virtual {


        _fallback();


    }





    /**


     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`


     * call, or as part of the Solidity `fallback` or `receive` functions.


     *


     * If overriden should call `super._beforeFallback()`.


     */


    function _beforeFallback() internal virtual {


    }


}








/**


 * @dev This abstract contract provides getters and event emitting update functions for


 * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.


 *


 * _Available since v4.1._


 *


 */


abstract contract ERC1967Upgrade {


    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1


    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;





    /**


     * @dev Storage slot with the address of the current implementation.


     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is


     * validated in the constructor.


     */


    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;





    /**


     * @dev Emitted when the implementation is upgraded.


     */


    event Upgraded(address indexed implementation);





    /**


     * @dev Returns the current implementation address.


     */


    function _getImplementation() internal view returns (address) {


        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;


    }





    /**


     * @dev Stores a new address in the EIP1967 implementation slot.


     */


    function _setImplementation(address newImplementation) private {


        require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");


        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;


    }





    /**


     * @dev Perform implementation upgrade


     *


     * Emits an {Upgraded} event.


     */


    function _upgradeTo(address newImplementation) internal {


        _setImplementation(newImplementation);


        emit Upgraded(newImplementation);


    }





    /**


     * @dev Perform implementation upgrade with additional setup call.


     *


     * Emits an {Upgraded} event.


     */


    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {


        _setImplementation(newImplementation);


        emit Upgraded(newImplementation);


        if (data.length > 0 || forceCall) {


            Address.functionDelegateCall(newImplementation, data);


        }


    }





    /**


     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.


     *


     * Emits an {Upgraded} event.


     */


    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {


        address oldImplementation = _getImplementation();





        // Initial upgrade and setup call


        _setImplementation(newImplementation);


        if (data.length > 0 || forceCall) {


            Address.functionDelegateCall(newImplementation, data);


        }





        // Perform rollback test if not already in progress


        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);


        if (!rollbackTesting.value) {


            // Trigger rollback using upgradeTo from the new implementation


            rollbackTesting.value = true;


            Address.functionDelegateCall(


                newImplementation,


                abi.encodeWithSignature(


                    "upgradeTo(address)",


                    oldImplementation


                )


            );


            rollbackTesting.value = false;


            // Check rollback was effective


            require(oldImplementation == _getImplementation(), "ERC1967Upgrade: upgrade breaks further upgrades");


            // Finally reset to the new implementation and log the upgrade


            _setImplementation(newImplementation);


            emit Upgraded(newImplementation);


        }


    }





    /**


     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does


     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).


     *


     * Emits a {BeaconUpgraded} event.


     */


    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {


        _setBeacon(newBeacon);


        emit BeaconUpgraded(newBeacon);


        if (data.length > 0 || forceCall) {


            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);


        }


    }





    /**


     * @dev Storage slot with the admin of the contract.


     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is


     * validated in the constructor.


     */


    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;





    /**


     * @dev Emitted when the admin account has changed.


     */


    event AdminChanged(address previousAdmin, address newAdmin);





    /**


     * @dev Returns the current admin.


     */


    function _getAdmin() internal view returns (address) {


        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;


    }





    /**


     * @dev Stores a new address in the EIP1967 admin slot.


     */


    function _setAdmin(address newAdmin) private {


        require(newAdmin != address(0), "ERC1967: new admin is the zero address");


        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;


    }





    /**


     * @dev Changes the admin of the proxy.


     *


     * Emits an {AdminChanged} event.


     */


    function _changeAdmin(address newAdmin) internal {


        emit AdminChanged(_getAdmin(), newAdmin);


        _setAdmin(newAdmin);


    }





    /**


     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.


     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.


     */


    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;





    /**


     * @dev Emitted when the beacon is upgraded.


     */


    event BeaconUpgraded(address indexed beacon);





    /**


     * @dev Returns the current beacon.


     */


    function _getBeacon() internal view returns (address) {


        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;


    }





    /**


     * @dev Stores a new beacon in the EIP1967 beacon slot.


     */


    function _setBeacon(address newBeacon) private {


        require(


            Address.isContract(newBeacon),


            "ERC1967: new beacon is not a contract"


        );


        require(


            Address.isContract(IBeacon(newBeacon).implementation()),


            "ERC1967: beacon implementation is not a contract"


        );


        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;


    }


}





/**


 * @dev This is the interface that {BeaconProxy} expects of its beacon.


 */


interface IBeacon {


    /**


     * @dev Must return an address that can be used as a delegate call target.


     *


     * {BeaconProxy} will check that this address is a contract.


     */


    function implementation() external view returns (address);


}





/**


 * @dev Collection of functions related to the address type


 */


library Address {


    /**


     * @dev Returns true if `account` is a contract.


     *


     * [IMPORTANT]


     * ====


     * It is unsafe to assume that an address for which this function returns


     * false is an externally-owned account (EOA) and not a contract.


     *


     * Among others, `isContract` will return false for the following


     * types of addresses:


     *


     *  - an externally-owned account


     *  - a contract in construction


     *  - an address where a contract will be created


     *  - an address where a contract lived, but was destroyed


     * ====


     */


    function isContract(address account) internal view returns (bool) {


        // This method relies on extcodesize, which returns 0 for contracts in


        // construction, since the code is only stored at the end of the


        // constructor execution.





        uint256 size;


        // solhint-disable-next-line no-inline-assembly


        assembly { size := extcodesize(account) }


        return size > 0;


    }





    /**


     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to


     * `recipient`, forwarding all available gas and reverting on errors.


     *


     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost


     * of certain opcodes, possibly making contracts go over the 2300 gas limit


     * imposed by `transfer`, making them unable to receive funds via


     * `transfer`. {sendValue} removes this limitation.


     *


     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].


     *


     * IMPORTANT: because control is transferred to `recipient`, care must be


     * taken to not create reentrancy vulnerabilities. Consider using


     * {ReentrancyGuard} or the


     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].


     */


    function sendValue(address payable recipient, uint256 amount) internal {


        require(address(this).balance >= amount, "Address: insufficient balance");





        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value


        (bool success, ) = recipient.call{ value: amount }("");


        require(success, "Address: unable to send value, recipient may have reverted");


    }





    /**


     * @dev Performs a Solidity function call using a low level `call`. A


     * plain`call` is an unsafe replacement for a function call: use this


     * function instead.


     *


     * If `target` reverts with a revert reason, it is bubbled up by this


     * function (like regular Solidity function calls).


     *


     * Returns the raw returned data. To convert to the expected return value,


     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].


     *


     * Requirements:


     *


     * - `target` must be a contract.


     * - calling `target` with `data` must not revert.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data) internal returns (bytes memory) {


        return functionCall(target, data, "Address: low-level call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with


     * `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {


        return functionCallWithValue(target, data, 0, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but also transferring `value` wei to `target`.


     *


     * Requirements:


     *


     * - the calling contract must have an ETH balance of at least `value`.


     * - the called Solidity function must be `payable`.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {


        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");


    }





    /**


     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but


     * with `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {


        require(address(this).balance >= value, "Address: insufficient balance for call");


        require(isContract(target), "Address: call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.call{ value: value }(data);


        return _verifyCallResult(success, returndata, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but performing a static call.


     *


     * _Available since v3.3._


     */


    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {


        return functionStaticCall(target, data, "Address: low-level static call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],


     * but performing a static call.


     *


     * _Available since v3.3._


     */


    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {


        require(isContract(target), "Address: static call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.staticcall(data);


        return _verifyCallResult(success, returndata, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but performing a delegate call.


     *


     * _Available since v3.4._


     */


    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {


        return functionDelegateCall(target, data, "Address: low-level delegate call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],


     * but performing a delegate call.


     *


     * _Available since v3.4._


     */


    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {


        require(isContract(target), "Address: delegate call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.delegatecall(data);


        return _verifyCallResult(success, returndata, errorMessage);


    }





    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {


        if (success) {


            return returndata;


        } else {


            // Look for revert reason and bubble it up if present


            if (returndata.length > 0) {


                // The easiest way to bubble the revert reason is using memory via assembly





                // solhint-disable-next-line no-inline-assembly


                assembly {


                    let returndata_size := mload(returndata)


                    revert(add(32, returndata), returndata_size)


                }


            } else {


                revert(errorMessage);


            }


        }


    }


}





/**


 * @dev Library for reading and writing primitive types to specific storage slots.


 *


 * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.


 * This library helps with reading and writing to such slots without the need for inline assembly.


 *


 * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.


 *


 * Example usage to set ERC1967 implementation slot:


 * ```


 * contract ERC1967 {


 *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;


 *


 *     function _getImplementation() internal view returns (address) {


 *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;


 *     }


 *


 *     function _setImplementation(address newImplementation) internal {


 *         require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");


 *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;


 *     }


 * }


 * ```


 *


 * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._


 */


library StorageSlot {


    struct AddressSlot {


        address value;


    }





    struct BooleanSlot {


        bool value;


    }





    struct Bytes32Slot {


        bytes32 value;


    }





    struct Uint256Slot {


        uint256 value;


    }





    /**


     * @dev Returns an `AddressSlot` with member `value` located at `slot`.


     */


    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {


        assembly {


            r.slot := slot


        }


    }





    /**


     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.


     */


    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {


        assembly {


            r.slot := slot


        }


    }





    /**


     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.


     */


    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {


        assembly {


            r.slot := slot


        }


    }





    /**


     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.


     */


    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {


        assembly {


            r.slot := slot


        }


    }


}





/*


 * @dev Provides information about the current execution context, including the


 * sender of the transaction and its data. While these are generally available


 * via msg.sender and msg.data, they should not be accessed in such a direct


 * manner, since when dealing with meta-transactions the account sending and


 * paying for execution may not be the actual sender (as far as an application


 * is concerned).


 *


 * This contract is only required for intermediate, library-like contracts.


 */


abstract contract Context {


    function _msgSender() internal view virtual returns (address) {


        return msg.sender;


    }





    function _msgData() internal view virtual returns (bytes calldata) {


        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691


        return msg.data;


    }


}





/**


 * @dev Contract module which provides a basic access control mechanism, where


 * there is an account (an owner) that can be granted exclusive access to


 * specific functions.


 *


 * By default, the owner account will be the one that deploys the contract. This


 * can later be changed with {transferOwnership}.


 *


 * This module is used through inheritance. It will make available the modifier


 * `onlyOwner`, which can be applied to your functions to restrict their use to


 * the owner.


 */


abstract contract Ownable is Context {


    address private _owner;





    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);





    /**


     * @dev Initializes the contract setting the deployer as the initial owner.


     */


    constructor () {


        address msgSender = _msgSender();


        _owner = msgSender;


        emit OwnershipTransferred(address(0), msgSender);


    }





    /**


     * @dev Returns the address of the current owner.


     */


    function owner() public view virtual returns (address) {


        return _owner;


    }





    /**


     * @dev Throws if called by any account other than the owner.


     */


    modifier onlyOwner() {


        require(owner() == _msgSender(), "Ownable: caller is not the owner");


        _;


    }





    /**


     * @dev Leaves the contract without owner. It will not be possible to call


     * `onlyOwner` functions anymore. Can only be called by the current owner.


     *


     * NOTE: Renouncing ownership will leave the contract without an owner,


     * thereby removing any functionality that is only available to the owner.


     */


    function renounceOwnership() public virtual onlyOwner {


        emit OwnershipTransferred(_owner, address(0));


        _owner = address(0);


    }





    /**


     * @dev Transfers ownership of the contract to a new account (`newOwner`).


     * Can only be called by the current owner.


     */


    function transferOwnership(address newOwner) public virtual onlyOwner {


        require(newOwner != address(0), "Ownable: new owner is the zero address");


        emit OwnershipTransferred(_owner, newOwner);


        _owner = newOwner;


    }


}





/**


 * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an


 * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.


 */


contract ProxyAdmin is Ownable {





    /**


     * @dev Returns the current implementation of `proxy`.


     *


     * Requirements:


     *


     * - This contract must be the admin of `proxy`.


     */


    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {


        // We need to manually run the static call since the getter cannot be flagged as view


        // bytes4(keccak256("implementation()")) == 0x5c60da1b


        (bool success, bytes memory returndata) = address(proxy).staticcall(hex"5c60da1b");


        require(success);


        return abi.decode(returndata, (address));


    }





    /**


     * @dev Returns the current admin of `proxy`.


     *


     * Requirements:


     *


     * - This contract must be the admin of `proxy`.


     */


    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {


        // We need to manually run the static call since the getter cannot be flagged as view


        // bytes4(keccak256("admin()")) == 0xf851a440


        (bool success, bytes memory returndata) = address(proxy).staticcall(hex"f851a440");


        require(success);


        return abi.decode(returndata, (address));


    }





    /**


     * @dev Changes the admin of `proxy` to `newAdmin`.


     *


     * Requirements:


     *


     * - This contract must be the current admin of `proxy`.


     */


    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {


        proxy.changeAdmin(newAdmin);


    }





    /**


     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.


     *


     * Requirements:


     *


     * - This contract must be the admin of `proxy`.


     */


    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {


        proxy.upgradeTo(implementation);


    }





    /**


     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See


     * {TransparentUpgradeableProxy-upgradeToAndCall}.


     *


     * Requirements:


     *


     * - This contract must be the admin of `proxy`.


     */


    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {


        proxy.upgradeToAndCall{value: msg.value}(implementation, data);


    }


}








/**


 * @dev Base contract for building openzeppelin-upgrades compatible implementations for the {ERC1967Proxy}. It includes


 * publicly available upgrade functions that are called by the plugin and by the secure upgrade mechanism to verify


 * continuation of the upgradability.


 *


 * The {_authorizeUpgrade} function MUST be overridden to include access restriction to the upgrade mechanism.


 *


 * _Available since v4.1._


 */


abstract contract UUPSUpgradeable is ERC1967Upgrade {


    function upgradeTo(address newImplementation) external virtual {


        _authorizeUpgrade(newImplementation);


        _upgradeToAndCallSecure(newImplementation, bytes(""), false);


    }





    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {


        _authorizeUpgrade(newImplementation);


        _upgradeToAndCallSecure(newImplementation, data, true);


    }





    function _authorizeUpgrade(address newImplementation) internal virtual;


}








abstract contract Proxiable is UUPSUpgradeable {


    function _authorizeUpgrade(address newImplementation) internal override {


        _beforeUpgrade(newImplementation);


    }





    function _beforeUpgrade(address newImplementation) internal virtual;


}





contract ChildOfProxiable is Proxiable {


    function _beforeUpgrade(address newImplementation) internal virtual override {}


}








/**


 * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an


 * implementation address that can be changed. This address is stored in storage in the location specified by


 * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the


 * implementation behind the proxy.


 */


contract ERC1967Proxy is Proxy, ERC1967Upgrade {


    /**


     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.


     *


     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded


     * function call, and allows initializating the storage of the proxy like a Solidity constructor.


     */


    constructor(address _logic, bytes memory _data) payable {


        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));


        _upgradeToAndCall(_logic, _data, false);


    }





    /**


     * @dev Returns the current implementation address.


     */


    function _implementation() internal view virtual override returns (address impl) {


        return ERC1967Upgrade._getImplementation();


    }


}





/**


 * @dev This contract implements a proxy that is upgradeable by an admin.


 *


 * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector


 * clashing], which can potentially be used in an attack, this contract uses the


 * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two


 * things that go hand in hand:


 *


 * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if


 * that call matches one of the admin functions exposed by the proxy itself.


 * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the


 * implementation. If the admin tries to call a function on the implementation it will fail with an error that says


 * "admin cannot fallback to proxy target".


 *


 * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing


 * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due


 * to sudden errors when trying to call a function from the proxy implementation.


 *


 * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,


 * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.


 */


contract TransparentUpgradeableProxy is ERC1967Proxy {


    /**


     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and


     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.


     */


    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {


        assert(_ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1));


        _changeAdmin(admin_);


    }





    /**


     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.


     */


    modifier ifAdmin() {


        if (msg.sender == _getAdmin()) {


            _;


        } else {


            _fallback();


        }


    }





    /**


     * @dev Returns the current admin.


     *


     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.


     *


     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the


     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.


     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`


     */


    function admin() external ifAdmin returns (address admin_) {


        admin_ = _getAdmin();


    }





    /**


     * @dev Returns the current implementation.


     *


     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.


     *


     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the


     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.


     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`


     */


    function implementation() external ifAdmin returns (address implementation_) {


        implementation_ = _implementation();


    }





    /**


     * @dev Changes the admin of the proxy.


     *


     * Emits an {AdminChanged} event.


     *


     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.


     */


    function changeAdmin(address newAdmin) external virtual ifAdmin {


        _changeAdmin(newAdmin);


    }





    /**


     * @dev Upgrade the implementation of the proxy.


     *


     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.


     */


    function upgradeTo(address newImplementation) external ifAdmin {


        _upgradeToAndCall(newImplementation, bytes(""), false);


    }





    /**


     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified


     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the


     * proxied contract.


     *


     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.


     */


    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {


        _upgradeToAndCall(newImplementation, data, true);


    }





    /**


     * @dev Returns the current admin.


     */


    function _admin() internal view virtual returns (address) {


        return _getAdmin();


    }





    /**


     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.


     */


    function _beforeFallback() internal virtual override {


        require(msg.sender != _getAdmin(), "TransparentUpgradeableProxy: admin cannot fallback to proxy target");


        super._beforeFallback();


    }


}








// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.


contract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {


    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\ERC20.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





import "./Context.sol";


import "../interfaces/IERC20.sol";


import "./SafeMath.sol";


import "./Address.sol";





/**


 * @dev Implementation of the {IERC20} interface.


 *


 * This implementation is agnostic to the way tokens are created. This means


 * that a supply mechanism has to be added in a derived contract using {_mint}.


 * For a generic mechanism see {ERC20PresetMinterPauser}.


 *


 * TIP: For a detailed writeup see our guide


 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How


 * to implement supply mechanisms].


 *


 * We have followed general OpenZeppelin guidelines: functions revert instead


 * of returning `false` on failure. This behavior is nonetheless conventional


 * and does not conflict with the expectations of ERC20 applications.


 *


 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.


 * This allows applications to reconstruct the allowance for all accounts just


 * by listening to said events. Other implementations of the EIP may not emit


 * these events, as it isn't required by the specification.


 *


 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}


 * functions have been added to mitigate the well-known issues around setting


 * allowances. See {IERC20-approve}.


 */


contract ERC20 is Context, IERC20 {


    using SafeMath for uint256;


    using Address for address;





    mapping (address => uint256) private _balances;





    mapping (address => mapping (address => uint256)) private _allowances;





    uint256 private _totalSupply;





    string internal _name;


    string internal _symbol;


    uint8 private _decimals;





    /**


     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with


     * a default value of 18.


     *


     * To select a different value for {decimals}, use {_setupDecimals}.


     *


     * All three of these values are immutable: they can only be set once during


     * construction.


     */


    constructor (string memory name, string memory symbol) public {


        _name = name;


        _symbol = symbol;


        _decimals = 18;


    }





    /**


     * @dev Returns the name of the token.


     */


    function name() public view returns (string memory) {


        return _name;


    }





    /**


     * @dev Returns the symbol of the token, usually a shorter version of the


     * name.


     */


    function symbol() public view returns (string memory) {


        return _symbol;


    }





    /**


     * @dev Returns the number of decimals used to get its user representation.


     * For example, if `decimals` equals `2`, a balance of `505` tokens should


     * be displayed to a user as `5,05` (`505 / 10 ** 2`).


     *


     * Tokens usually opt for a value of 18, imitating the relationship between


     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is


     * called.


     *


     * NOTE: This information is only used for _display_ purposes: it in


     * no way affects any of the arithmetic of the contract, including


     * {IERC20-balanceOf} and {IERC20-transfer}.


     */


    function decimals() public view returns (uint8) {


        return _decimals;


    }





    /**


     * @dev See {IERC20-totalSupply}.


     */


    function totalSupply() public view override returns (uint256) {


        return _totalSupply;


    }





    /**


     * @dev See {IERC20-balanceOf}.


     */


    function balanceOf(address account) public view override returns (uint256) {


        return _balances[account];


    }





    /**


     * @dev See {IERC20-transfer}.


     *


     * Requirements:


     *


     * - `recipient` cannot be the zero address.


     * - the caller must have a balance of at least `amount`.


     */


    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(_msgSender(), recipient, amount);


        return true;


    }





    /**


     * @dev See {IERC20-allowance}.


     */


    function allowance(address owner, address spender) public view virtual override returns (uint256) {


        return _allowances[owner][spender];


    }





    /**


     * @dev See {IERC20-approve}.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function approve(address spender, uint256 amount) public virtual override returns (bool) {


        _approve(_msgSender(), spender, amount);


        return true;


    }





    /**


     * @dev See {IERC20-transferFrom}.


     *


     * Emits an {Approval} event indicating the updated allowance. This is not


     * required by the EIP. See the note at the beginning of {ERC20};


     *


     * Requirements:


     * - `sender` and `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     * - the caller must have allowance for ``sender``'s tokens of at least


     * `amount`.


     */


    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(sender, recipient, amount);


        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));


        return true;


    }





    /**


     * @dev Atomically increases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));


        return true;


    }





    /**


     * @dev Atomically decreases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     * - `spender` must have allowance for the caller of at least


     * `subtractedValue`.


     */


    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));


        return true;


    }





    /**


     * @dev Moves tokens `amount` from `sender` to `recipient`.


     *


     * This is internal function is equivalent to {transfer}, and can be used to


     * e.g. implement automatic token fees, slashing mechanisms, etc.


     *


     * Emits a {Transfer} event.


     *


     * Requirements:


     *


     * - `sender` cannot be the zero address.


     * - `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     */


    function _transfer(address sender, address recipient, uint256 amount) internal virtual {


        require(sender != address(0), "ERC20: transfer from the zero address");


        require(recipient != address(0), "ERC20: transfer to the zero address");





        _beforeTokenTransfer(sender, recipient, amount);





        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");


        _balances[recipient] = _balances[recipient].add(amount);


        emit Transfer(sender, recipient, amount);


    }





    /** @dev Creates `amount` tokens and assigns them to `account`, increasing


     * the total supply.


     *


     * Emits a {Transfer} event with `from` set to the zero address.


     *


     * Requirements


     *


     * - `to` cannot be the zero address.


     */


    function _mint(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: mint to the zero address");





        _beforeTokenTransfer(address(0), account, amount);





        _totalSupply = _totalSupply.add(amount);


        _balances[account] = _balances[account].add(amount);


        emit Transfer(address(0), account, amount);


    }





    /**


     * @dev Destroys `amount` tokens from `account`, reducing the


     * total supply.


     *


     * Emits a {Transfer} event with `to` set to the zero address.


     *


     * Requirements


     *


     * - `account` cannot be the zero address.


     * - `account` must have at least `amount` tokens.


     */


    function _burn(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: burn from the zero address");





        _beforeTokenTransfer(account, address(0), amount);





        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");


        _totalSupply = _totalSupply.sub(amount);


        emit Transfer(account, address(0), amount);


    }





    /**


     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.


     *


     * This is internal function is equivalent to `approve`, and can be used to


     * e.g. set automatic allowances for certain subsystems, etc.


     *


     * Emits an {Approval} event.


     *


     * Requirements:


     *


     * - `owner` cannot be the zero address.


     * - `spender` cannot be the zero address.


     */


    function _approve(address owner, address spender, uint256 amount) internal virtual {


        require(owner != address(0), "ERC20: approve from the zero address");


        require(spender != address(0), "ERC20: approve to the zero address");





        _allowances[owner][spender] = amount;


        emit Approval(owner, spender, amount);


    }





    /**


     * @dev Sets {decimals} to a value other than the default one of 18.


     *


     * WARNING: This function should only be called from the constructor. Most


     * applications that interact with token contracts will not expect


     * {decimals} to ever change, and may work incorrectly if it does.


     */


    function _setupDecimals(uint8 decimals_) internal {


        _decimals = decimals_;


    }





    /**


     * @dev Hook that is called before any transfer of tokens. This includes


     * minting and burning.


     *


     * Calling conditions:


     *


     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens


     * will be to transferred to `to`.


     * - when `from` is zero, `amount` tokens will be minted for `to`.


     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.


     * - `from` and `to` are never both zero.


     *


     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].


     */


    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\ERC20Burnable.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.8.0;





import "../ERC20.sol";


import "../../../utils/Context.sol";





/**


 * @dev Extension of {ERC20} that allows token holders to destroy both their own


 * tokens and those that they have an allowance for, in a way that can be


 * recognized off-chain (via event analysis).


 */


abstract contract ERC20Burnable is Context, ERC20 {


    /**


     * @dev Destroys `amount` tokens from the caller.


     *


     * See {ERC20-_burn}.


     */


    function burn(uint256 amount) public virtual {


        _burn(_msgSender(), amount);


    }





    /**


     * @dev Destroys `amount` tokens from `account`, deducting from the caller's


     * allowance.


     *


     * See {ERC20-_burn} and {ERC20-allowance}.


     *


     * Requirements:


     *


     * - the caller must have allowance for ``accounts``'s tokens of at least


     * `amount`.


     */


    function burnFrom(address account, uint256 amount) public virtual {


        uint256 currentAllowance = allowance(account, _msgSender());


        require(currentAllowance >= amount, "ERC20: burn amount exceeds allowance");


        _approve(account, _msgSender(), currentAllowance - amount);


        _burn(account, amount);


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\ERC20Detailed.sol
File type: .sol
pragma solidity ^0.5.0;





import "./IERC20.sol";





/**


 * @dev Optional functions from the ERC20 standard.


 */


contract ERC20Detailed is IERC20 {


    string private _name;


    string private _symbol;


    uint8 private _decimals;





    /**


     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of


     * these values are immutable: they can only be set once during


     * construction.


     */


    constructor (string memory name, string memory symbol, uint8 decimals) public {


        _name = name;


        _symbol = symbol;


        _decimals = decimals;


    }





    /**


     * @dev Returns the name of the token.


     */


    function name() public view returns (string memory) {


        return _name;


    }





    /**


     * @dev Returns the symbol of the token, usually a shorter version of the


     * name.


     */


    function symbol() public view returns (string memory) {


        return _symbol;


    }





    /**


     * @dev Returns the number of decimals used to get its user representation.


     * For example, if `decimals` equals `2`, a balance of `505` tokens should


     * be displayed to a user as `5,05` (`505 / 10 ** 2`).


     *


     * Tokens usually opt for a value of 18, imitating the relationship between


     * Ether and Wei.


     *


     * NOTE: This information is only used for _display_ purposes: it in


     * no way affects any of the arithmetic of the contract, including


     * {IERC20-balanceOf} and {IERC20-transfer}.


     */


    function decimals() public view returns (uint8) {


        return _decimals;


    }


}




--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\FiatTokenProxy.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2018-08-03


*/





pragma solidity ^0.4.24;





// File: zos-lib/contracts/upgradeability/Proxy.sol





/**


 * @title Proxy


 * @dev Implements delegation of calls to other contracts, with proper


 * forwarding of return values and bubbling of failures.


 * It defines a fallback function that delegates all calls to the address


 * returned by the abstract _implementation() internal function.


 */


contract Proxy {


  /**


   * @dev Fallback function.


   * Implemented entirely in `_fallback`.


   */


  function () payable external {


    _fallback();


  }





  /**


   * @return The Address of the implementation.


   */


  function _implementation() internal view returns (address);





  /**


   * @dev Delegates execution to an implementation contract.


   * This is a low level function that doesn't return to its internal call site.


   * It will return to the external caller whatever the implementation returns.


   * @param implementation Address to delegate.


   */


  function _delegate(address implementation) internal {


    assembly {


      // Copy msg.data. We take full control of memory in this inline assembly


      // block because it will not return to Solidity code. We overwrite the


      // Solidity scratch pad at memory position 0.


      calldatacopy(0, 0, calldatasize)





      // Call the implementation.


      // out and outsize are 0 because we don't know the size yet.


      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)





      // Copy the returned data.


      returndatacopy(0, 0, returndatasize)





      switch result


      // delegatecall returns 0 on error.


      case 0 { revert(0, returndatasize) }


      default { return(0, returndatasize) }


    }


  }





  /**


   * @dev Function that is run as the first thing in the fallback function.


   * Can be redefined in derived contracts to add functionality.


   * Redefinitions must call super._willFallback().


   */


  function _willFallback() internal {


  }





  /**


   * @dev fallback implementation.


   * Extracted to enable manual triggering.


   */


  function _fallback() internal {


    _willFallback();


    _delegate(_implementation());


  }


}





// File: openzeppelin-solidity/contracts/AddressUtils.sol





/**


 * Utility library of inline functions on addresses


 */


library AddressUtils {





  /**


   * Returns whether the target address is a contract


   * @dev This function will return false if invoked during the constructor of a contract,


   * as the code is not actually created until after the constructor finishes.


   * @param addr address to check


   * @return whether the target address is a contract


   */


  function isContract(address addr) internal view returns (bool) {


    uint256 size;


    // XXX Currently there is no better way to check if there is a contract in an address


    // than to check the size of the code at that address.


    // See https://ethereum.stackexchange.com/a/14016/36603


    // for more details about how this works.


    // TODO Check this again before the Serenity release, because all addresses will be


    // contracts then.


    // solium-disable-next-line security/no-inline-assembly


    assembly { size := extcodesize(addr) }


    return size > 0;


  }





}





// File: zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol





/**


 * @title UpgradeabilityProxy


 * @dev This contract implements a proxy that allows to change the


 * implementation address to which it will delegate.


 * Such a change is called an implementation upgrade.


 */


contract UpgradeabilityProxy is Proxy {


  /**


   * @dev Emitted when the implementation is upgraded.


   * @param implementation Address of the new implementation.


   */


  event Upgraded(address implementation);





  /**


   * @dev Storage slot with the address of the current implementation.


   * This is the keccak-256 hash of "org.zeppelinos.proxy.implementation", and is


   * validated in the constructor.


   */


  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;





  /**


   * @dev Contract constructor.


   * @param _implementation Address of the initial implementation.


   */


  constructor(address _implementation) public {


    assert(IMPLEMENTATION_SLOT == keccak256("org.zeppelinos.proxy.implementation"));





    _setImplementation(_implementation);


  }





  /**


   * @dev Returns the current implementation.


   * @return Address of the current implementation


   */


  function _implementation() internal view returns (address impl) {


    bytes32 slot = IMPLEMENTATION_SLOT;


    assembly {


      impl := sload(slot)


    }


  }





  /**


   * @dev Upgrades the proxy to a new implementation.


   * @param newImplementation Address of the new implementation.


   */


  function _upgradeTo(address newImplementation) internal {


    _setImplementation(newImplementation);


    emit Upgraded(newImplementation);


  }





  /**


   * @dev Sets the implementation address of the proxy.


   * @param newImplementation Address of the new implementation.


   */


  function _setImplementation(address newImplementation) private {


    require(AddressUtils.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");





    bytes32 slot = IMPLEMENTATION_SLOT;





    assembly {


      sstore(slot, newImplementation)


    }


  }


}





// File: zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol





/**


 * @title AdminUpgradeabilityProxy


 * @dev This contract combines an upgradeability proxy with an authorization


 * mechanism for administrative tasks.


 * All external functions in this contract must be guarded by the


 * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity


 * feature proposal that would enable this to be done automatically.


 */


contract AdminUpgradeabilityProxy is UpgradeabilityProxy {


  /**


   * @dev Emitted when the administration has been transferred.


   * @param previousAdmin Address of the previous admin.


   * @param newAdmin Address of the new admin.


   */


  event AdminChanged(address previousAdmin, address newAdmin);





  /**


   * @dev Storage slot with the admin of the contract.


   * This is the keccak-256 hash of "org.zeppelinos.proxy.admin", and is


   * validated in the constructor.


   */


  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;





  /**


   * @dev Modifier to check whether the `msg.sender` is the admin.


   * If it is, it will run the function. Otherwise, it will delegate the call


   * to the implementation.


   */


  modifier ifAdmin() {


    if (msg.sender == _admin()) {


      _;


    } else {


      _fallback();


    }


  }





  /**


   * Contract constructor.


   * It sets the `msg.sender` as the proxy administrator.


   * @param _implementation address of the initial implementation.


   */


  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {


    assert(ADMIN_SLOT == keccak256("org.zeppelinos.proxy.admin"));





    _setAdmin(msg.sender);


  }





  /**


   * @return The address of the proxy admin.


   */


  function admin() external view ifAdmin returns (address) {


    return _admin();


  }





  /**


   * @return The address of the implementation.


   */


  function implementation() external view ifAdmin returns (address) {


    return _implementation();


  }





  /**


   * @dev Changes the admin of the proxy.


   * Only the current admin can call this function.


   * @param newAdmin Address to transfer proxy administration to.


   */


  function changeAdmin(address newAdmin) external ifAdmin {


    require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");


    emit AdminChanged(_admin(), newAdmin);


    _setAdmin(newAdmin);


  }





  /**


   * @dev Upgrade the backing implementation of the proxy.


   * Only the admin can call this function.


   * @param newImplementation Address of the new implementation.


   */


  function upgradeTo(address newImplementation) external ifAdmin {


    _upgradeTo(newImplementation);


  }





  /**


   * @dev Upgrade the backing implementation of the proxy and call a function


   * on the new implementation.


   * This is useful to initialize the proxied contract.


   * @param newImplementation Address of the new implementation.


   * @param data Data to send as msg.data in the low level call.


   * It should include the signature and the parameters of the function to be


   * called, as described in


   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.


   */


  function upgradeToAndCall(address newImplementation, bytes data) payable external ifAdmin {


    _upgradeTo(newImplementation);


    require(address(this).call.value(msg.value)(data));


  }





  /**


   * @return The admin slot.


   */


  function _admin() internal view returns (address adm) {


    bytes32 slot = ADMIN_SLOT;


    assembly {


      adm := sload(slot)


    }


  }





  /**


   * @dev Sets the address of the proxy admin.


   * @param newAdmin Address of the new proxy admin.


   */


  function _setAdmin(address newAdmin) internal {


    bytes32 slot = ADMIN_SLOT;





    assembly {


      sstore(slot, newAdmin)


    }


  }





  /**


   * @dev Only fall back when the sender is not the admin.


   */


  function _willFallback() internal {


    require(msg.sender != _admin(), "Cannot call fallback function from the proxy admin");


    super._willFallback();


  }


}





// File: contracts/FiatTokenProxy.sol





/**


* Copyright CENTRE SECZ 2018


*


* Permission is hereby granted, free of charge, to any person obtaining a copy 


* of this software and associated documentation files (the "Software"), to deal 


* in the Software without restriction, including without limitation the rights 


* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 


* copies of the Software, and to permit persons to whom the Software is furnished to 


* do so, subject to the following conditions:


*


* The above copyright notice and this permission notice shall be included in all 


* copies or substantial portions of the Software.


*


* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 


* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 


* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 


* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,


* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 


* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


*/





pragma solidity ^0.4.24;








/**


 * @title FiatTokenProxy


 * @dev This contract proxies FiatToken calls and enables FiatToken upgrades


*/ 


contract FiatTokenProxy is AdminUpgradeabilityProxy {


    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\FINToken.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2020-09-09


*/





/**


 *Submitted for verification at Etherscan.io on 2020-09-08


*/





// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





/**


 * @dev Interface of the ERC20 standard as defined in the EIP.


 */


interface IERC20 {


    /**


     * @dev Returns the amount of tokens in existence.


     */


    function totalSupply() external view returns (uint256);





    /**


     * @dev Returns the amount of tokens owned by `account`.


     */


    function balanceOf(address account) external view returns (uint256);





    /**


     * @dev Moves `amount` tokens from the caller's account to `recipient`.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transfer(address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Returns the remaining number of tokens that `spender` will be


     * allowed to spend on behalf of `owner` through {transferFrom}. This is


     * zero by default.


     *


     * This value changes when {approve} or {transferFrom} are called.


     */


    function allowance(address owner, address spender) external view returns (uint256);





    /**


     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * IMPORTANT: Beware that changing an allowance with this method brings the risk


     * that someone may use both the old and the new allowance by unfortunate


     * transaction ordering. One possible solution to mitigate this race


     * condition is to first reduce the spender's allowance to 0 and set the


     * desired value afterwards:


     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


     *


     * Emits an {Approval} event.


     */


    function approve(address spender, uint256 amount) external returns (bool);





    /**


     * @dev Moves `amount` tokens from `sender` to `recipient` using the


     * allowance mechanism. `amount` is then deducted from the caller's


     * allowance.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Emitted when `value` tokens are moved from one account (`from`) to


     * another (`to`).


     *


     * Note that `value` may be zero.


     */


    event Transfer(address indexed from, address indexed to, uint256 value);





    /**


     * @dev Emitted when the allowance of a `spender` for an `owner` is set by


     * a call to {approve}. `value` is the new allowance.


     */


    event Approval(address indexed owner, address indexed spender, uint256 value);


}





// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





/**


 * @dev Wrappers over Solidity's arithmetic operations with added overflow


 * checks.


 *


 * Arithmetic operations in Solidity wrap on overflow. This can easily result


 * in bugs, because programmers usually assume that an overflow raises an


 * error, which is the standard behavior in high level programming languages.


 * `SafeMath` restores this intuition by reverting the transaction when an


 * operation overflows.


 *


 * Using this library instead of the unchecked operations eliminates an entire


 * class of bugs, so it's recommended to use it always.


 */


library SafeMath {


    /**


     * @dev Returns the addition of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `+` operator.


     *


     * Requirements:


     *


     * - Addition cannot overflow.


     */


    function add(uint256 a, uint256 b) internal pure returns (uint256) {


        uint256 c = a + b;


        require(c >= a, "SafeMath: addition overflow");





        return c;


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting on


     * overflow (when the result is negative).


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {


        return sub(a, b, "SafeMath: subtraction overflow");


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on


     * overflow (when the result is negative).


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b <= a, errorMessage);


        uint256 c = a - b;





        return c;


    }





    /**


     * @dev Returns the multiplication of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `*` operator.


     *


     * Requirements:


     *


     * - Multiplication cannot overflow.


     */


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {


        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the


        // benefit is lost if 'b' is also tested.


        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522


        if (a == 0) {


            return 0;


        }





        uint256 c = a * b;


        require(c / a == b, "SafeMath: multiplication overflow");





        return c;


    }





    /**


     * @dev Returns the integer division of two unsigned integers. Reverts on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b) internal pure returns (uint256) {


        return div(a, b, "SafeMath: division by zero");


    }





    /**


     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b > 0, errorMessage);


        uint256 c = a / b;


        // assert(a == b * c + a % b); // There is no case in which this doesn't hold





        return c;


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * Reverts when dividing by zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {


        return mod(a, b, "SafeMath: modulo by zero");


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * Reverts with custom message when dividing by zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b != 0, errorMessage);


        return a % b;


    }


}





// SPDX-License-Identifier: MIT





pragma solidity ^0.6.2;





/**


 * @dev Collection of functions related to the address type


 */


library Address {


    /**


     * @dev Returns true if `account` is a contract.


     *


     * [IMPORTANT]


     * ====


     * It is unsafe to assume that an address for which this function returns


     * false is an externally-owned account (EOA) and not a contract.


     *


     * Among others, `isContract` will return false for the following


     * types of addresses:


     *


     *  - an externally-owned account


     *  - a contract in construction


     *  - an address where a contract will be created


     *  - an address where a contract lived, but was destroyed


     * ====


     */


    function isContract(address account) internal view returns (bool) {


        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts


        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned


        // for accounts without code, i.e. `keccak256('')`


        bytes32 codehash;


        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;


        // solhint-disable-next-line no-inline-assembly


        assembly { codehash := extcodehash(account) }


        return (codehash != accountHash && codehash != 0x0);


    }





    /**


     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to


     * `recipient`, forwarding all available gas and reverting on errors.


     *


     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost


     * of certain opcodes, possibly making contracts go over the 2300 gas limit


     * imposed by `transfer`, making them unable to receive funds via


     * `transfer`. {sendValue} removes this limitation.


     *


     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].


     *


     * IMPORTANT: because control is transferred to `recipient`, care must be


     * taken to not create reentrancy vulnerabilities. Consider using


     * {ReentrancyGuard} or the


     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].


     */


    function sendValue(address payable recipient, uint256 amount) internal {


        require(address(this).balance >= amount, "Address: insufficient balance");





        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value


        (bool success, ) = recipient.call{ value: amount }("");


        require(success, "Address: unable to send value, recipient may have reverted");


    }





    /**


     * @dev Performs a Solidity function call using a low level `call`. A


     * plain`call` is an unsafe replacement for a function call: use this


     * function instead.


     *


     * If `target` reverts with a revert reason, it is bubbled up by this


     * function (like regular Solidity function calls).


     *


     * Returns the raw returned data. To convert to the expected return value,


     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].


     *


     * Requirements:


     *


     * - `target` must be a contract.


     * - calling `target` with `data` must not revert.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data) internal returns (bytes memory) {


      return functionCall(target, data, "Address: low-level call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with


     * `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {


        return _functionCallWithValue(target, data, 0, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but also transferring `value` wei to `target`.


     *


     * Requirements:


     *


     * - the calling contract must have an ETH balance of at least `value`.


     * - the called Solidity function must be `payable`.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {


        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");


    }





    /**


     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but


     * with `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {


        require(address(this).balance >= value, "Address: insufficient balance for call");


        return _functionCallWithValue(target, data, value, errorMessage);


    }





    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {


        require(isContract(target), "Address: call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);


        if (success) {


            return returndata;


        } else {


            // Look for revert reason and bubble it up if present


            if (returndata.length > 0) {


                // The easiest way to bubble the revert reason is using memory via assembly





                // solhint-disable-next-line no-inline-assembly


                assembly {


                    let returndata_size := mload(returndata)


                    revert(add(32, returndata), returndata_size)


                }


            } else {


                revert(errorMessage);


            }


        }


    }


}





// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





/*


 * @dev Provides information about the current execution context, including the


 * sender of the transaction and its data. While these are generally available


 * via msg.sender and msg.data, they should not be accessed in such a direct


 * manner, since when dealing with GSN meta-transactions the account sending and


 * paying for execution may not be the actual sender (as far as an application


 * is concerned).


 *


 * This contract is only required for intermediate, library-like contracts.


 */


abstract contract Context {


    function _msgSender() internal view virtual returns (address payable) {


        return msg.sender;


    }





    function _msgData() internal view virtual returns (bytes memory) {


        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691


        return msg.data;


    }


}





// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





/**


 * @dev Implementation of the {IERC20} interface.


 *


 * This implementation is agnostic to the way tokens are created. This means


 * that a supply mechanism has to be added in a derived contract using {_mint}.


 * For a generic mechanism see {ERC20PresetMinterPauser}.


 *


 * TIP: For a detailed writeup see our guide


 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How


 * to implement supply mechanisms].


 *


 * We have followed general OpenZeppelin guidelines: functions revert instead


 * of returning `false` on failure. This behavior is nonetheless conventional


 * and does not conflict with the expectations of ERC20 applications.


 *


 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.


 * This allows applications to reconstruct the allowance for all accounts just


 * by listening to said events. Other implementations of the EIP may not emit


 * these events, as it isn't required by the specification.


 *


 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}


 * functions have been added to mitigate the well-known issues around setting


 * allowances. See {IERC20-approve}.


 */


contract ERC20 is Context, IERC20 {


    using SafeMath for uint256;


    using Address for address;





    mapping (address => uint256) private _balances;





    mapping (address => mapping (address => uint256)) private _allowances;





    uint256 private _totalSupply;





    string private _name;


    string private _symbol;


    uint8 private _decimals;





    /**


     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with


     * a default value of 18.


     *


     * To select a different value for {decimals}, use {_setupDecimals}.


     *


     * All three of these values are immutable: they can only be set once during


     * construction.


     */


    constructor (string memory name, string memory symbol) public {


        _name = name;


        _symbol = symbol;


        _decimals = 18;


    }





    /**


     * @dev Returns the name of the token.


     */


    function name() public view returns (string memory) {


        return _name;


    }





    /**


     * @dev Returns the symbol of the token, usually a shorter version of the


     * name.


     */


    function symbol() public view returns (string memory) {


        return _symbol;


    }





    /**


     * @dev Returns the number of decimals used to get its user representation.


     * For example, if `decimals` equals `2`, a balance of `505` tokens should


     * be displayed to a user as `5,05` (`505 / 10 ** 2`).


     *


     * Tokens usually opt for a value of 18, imitating the relationship between


     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is


     * called.


     *


     * NOTE: This information is only used for _display_ purposes: it in


     * no way affects any of the arithmetic of the contract, including


     * {IERC20-balanceOf} and {IERC20-transfer}.


     */


    function decimals() public view returns (uint8) {


        return _decimals;


    }





    /**


     * @dev See {IERC20-totalSupply}.


     */


    function totalSupply() public view override returns (uint256) {


        return _totalSupply;


    }





    /**


     * @dev See {IERC20-balanceOf}.


     */


    function balanceOf(address account) public view override returns (uint256) {


        return _balances[account];


    }





    /**


     * @dev See {IERC20-transfer}.


     *


     * Requirements:


     *


     * - `recipient` cannot be the zero address.


     * - the caller must have a balance of at least `amount`.


     */


    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(_msgSender(), recipient, amount);


        return true;


    }





    /**


     * @dev See {IERC20-allowance}.


     */


    function allowance(address owner, address spender) public view virtual override returns (uint256) {


        return _allowances[owner][spender];


    }





    /**


     * @dev See {IERC20-approve}.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function approve(address spender, uint256 amount) public virtual override returns (bool) {


        _approve(_msgSender(), spender, amount);


        return true;


    }





    /**


     * @dev See {IERC20-transferFrom}.


     *


     * Emits an {Approval} event indicating the updated allowance. This is not


     * required by the EIP. See the note at the beginning of {ERC20};


     *


     * Requirements:


     * - `sender` and `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     * - the caller must have allowance for ``sender``'s tokens of at least


     * `amount`.


     */


    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(sender, recipient, amount);


        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));


        return true;


    }





    /**


     * @dev Atomically increases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));


        return true;


    }





    /**


     * @dev Atomically decreases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     * - `spender` must have allowance for the caller of at least


     * `subtractedValue`.


     */


    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));


        return true;


    }





    /**


     * @dev Moves tokens `amount` from `sender` to `recipient`.


     *


     * This is internal function is equivalent to {transfer}, and can be used to


     * e.g. implement automatic token fees, slashing mechanisms, etc.


     *


     * Emits a {Transfer} event.


     *


     * Requirements:


     *


     * - `sender` cannot be the zero address.


     * - `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     */


    function _transfer(address sender, address recipient, uint256 amount) internal virtual {


        require(sender != address(0), "ERC20: transfer from the zero address");


        require(recipient != address(0), "ERC20: transfer to the zero address");





        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");


        _balances[recipient] = _balances[recipient].add(amount);


        emit Transfer(sender, recipient, amount);


    }





    /** @dev Creates `amount` tokens and assigns them to `account`, increasing


     * the total supply.


     *


     * Emits a {Transfer} event with `from` set to the zero address.


     *


     * Requirements


     *


     * - `to` cannot be the zero address.


     */


    function _mint(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: mint to the zero address");





        _totalSupply = _totalSupply.add(amount);


        _balances[account] = _balances[account].add(amount);


        emit Transfer(address(0), account, amount);


    }





    /**


     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.


     *


     * This is internal function is equivalent to `approve`, and can be used to


     * e.g. set automatic allowances for certain subsystems, etc.


     *


     * Emits an {Approval} event.


     *


     * Requirements:


     *


     * - `owner` cannot be the zero address.


     * - `spender` cannot be the zero address.


     */


    function _approve(address owner, address spender, uint256 amount) internal virtual {


        require(owner != address(0), "ERC20: approve from the zero address");


        require(spender != address(0), "ERC20: approve to the zero address");





        _allowances[owner][spender] = amount;


        emit Approval(owner, spender, amount);


    }


}





pragma solidity ^0.6.0;





contract FINToken is ERC20 {


    constructor(uint256 initialSupply) public ERC20("DeFiner", "FIN") {


        _mint(msg.sender, initialSupply);


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\IAddressResolver.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.12;





interface IAddressResolver {


    


    function key2address(bytes32 key) external view returns(address);


    function address2key(address addr) external view returns(bytes32);


    function requireAndKey2Address(bytes32 name, string calldata reason) external view returns(address);





    function setAddress(bytes32 key, address addr) external;


    function setMultiAddress(bytes32[] memory keys, address[] memory addrs) external;


    


    function setKkAddr(bytes32 k1, bytes32 k2, address addr) external;


    function setMultiKKAddr(bytes32[] memory k1s, bytes32[] memory k2s, address[] memory addrs) external;





    function kk2addr(bytes32 k1, bytes32 k2) external view returns(address);


    function requireKKAddrs(bytes32 k1, bytes32 k2, string calldata reason) external view returns(address);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\IBoringDAO.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.12;





interface IBoringDAO {


    // function openTunnel(bytes32 tunnelKey) external;





    function pledge(bytes32 tunnelKey, uint _amount) external;


    function redeem(bytes32 tunnelKey, uint _amount) external;





    function approveMint(bytes32 tunnelKey, string memory _txid, uint _amount, address account, string memory assetAddress) external;


    function burnBToken(bytes32 _tunnelKey, uint _amount, string memory assetAddress) external;





    // function getTrustee(uint index) external view returns(address);


    // function getTrusteeCount() external view returns(uint);





}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\IERC20.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





/**


 * @dev Interface of the ERC20 standard as defined in the EIP.


 */


interface IERC20 {


    /**


     * @dev Returns the amount of tokens in existence.


     */


    function totalSupply() external view returns (uint256);





    /**


     * @dev Returns the amount of tokens owned by `account`.


     */


    function balanceOf(address account) external view returns (uint256);





    /**


     * @dev Moves `amount` tokens from the caller's account to `recipient`.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transfer(address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Returns the remaining number of tokens that `spender` will be


     * allowed to spend on behalf of `owner` through {transferFrom}. This is


     * zero by default.


     *


     * This value changes when {approve} or {transferFrom} are called.


     */


    function allowance(address owner, address spender) external view returns (uint256);





    /**


     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * IMPORTANT: Beware that changing an allowance with this method brings the risk


     * that someone may use both the old and the new allowance by unfortunate


     * transaction ordering. One possible solution to mitigate this race


     * condition is to first reduce the spender's allowance to 0 and set the


     * desired value afterwards:


     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


     *


     * Emits an {Approval} event.


     */


    function approve(address spender, uint256 amount) external returns (bool);





    /**


     * @dev Moves `amount` tokens from `sender` to `recipient` using the


     * allowance mechanism. `amount` is then deducted from the caller's


     * allowance.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Emitted when `value` tokens are moved from one account (`from`) to


     * another (`to`).


     *


     * Note that `value` may be zero.


     */


    event Transfer(address indexed from, address indexed to, uint256 value);





    /**


     * @dev Emitted when the allowance of a `spender` for an `owner` is set by


     * a call to {approve}. `value` is the new allowance.


     */


    event Approval(address indexed owner, address indexed spender, uint256 value);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\IERC20Detailed.sol
File type: .sol
// SPDX-License-Identifier: agpl-3.0


pragma solidity 0.6.10;





import {IERC20} from "./IERC20.sol";





interface IERC20Detailed is IERC20 {


    function name() external view returns(string memory);


    function symbol() external view returns(string memory);


    function decimals() external view returns(uint8);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\IERC20Metadata.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.12;





interface IERC20Metadata {


    /**


     * @dev Returns the name of the token.


     */


    function name() external view returns (string memory);





    /**


     * @dev Returns the symbol of the token.


     */


    function symbol() external view returns (string memory);





    /**


     * @dev Returns the decimals places of the token.


     */


    function decimals() external view returns (uint8);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\ILiquidate.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.12;





interface ILiquidate {


    function liquidate(address account) external;


}





interface ILiquidateArray {


    function liquidateArray(address account, uint256[] memory pids) external;


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\IMintProposal.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.12;





interface IMintProposal {


    function approve(


        bytes32 _tunnelKey,


        string memory _txid,


        uint256 _amount,


        address  to,


        address trustee,


        uint256 trusteeCount


    ) external returns (bool);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\InitializableAdminUpgradeabilityProxy.sol
File type: .sol
// SPDX-License-Identifier: agpl-3.0


pragma solidity ^0.6.10;





import "./BaseAdminUpgradeabilityProxy.sol";


import "./InitializableUpgradeabilityProxy.sol";





/**


 * @title InitializableAdminUpgradeabilityProxy


 * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for 


 * initializing the implementation, admin, and init data.


 */


contract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {


    /**


   * Contract initializer.


   * @param _logic address of the initial implementation.


   * @param _admin Address of the proxy administrator.


   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.


   * It should include the signature and the parameters of the function to be called, as described in


   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.


   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.


   */


    function initialize(address _logic, address _admin, bytes memory _data) public payable {


        require(_implementation() == address(0));


        InitializableUpgradeabilityProxy.initialize(_logic, _data);


        assert(ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1));


        _setAdmin(_admin);


    }





    /**


    * @dev Only fall back when the sender is not the admin.


    */


    function _willFallback() internal override(BaseAdminUpgradeabilityProxy, Proxy) {


        BaseAdminUpgradeabilityProxy._willFallback();


    }





}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\InitializableUpgradeabilityProxy.sol
File type: .sol
// SPDX-License-Identifier: agpl-3.0


pragma solidity ^0.6.10;





import "./BaseUpgradeabilityProxy.sol";





/**


 * @title InitializableUpgradeabilityProxy


 * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing


 * implementation and init data.


 */


contract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {


    /**


   * @dev Contract initializer.


   * @param _logic Address of the initial implementation.


   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.


   * It should include the signature and the parameters of the function to be called, as described in


   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.


   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.


   */


    function initialize(address _logic, bytes memory _data) public payable {


        require(_implementation() == address(0));


        assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));


        _setImplementation(_logic);


        if (_data.length > 0) {


            (bool success, ) = _logic.delegatecall(_data);


            require(success);


        }


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\IOracle.sol
File type: .sol
// SPDX-License-Identifier: MIT


pragma solidity ^0.6.12;





interface IOracle {


    


    function setPrice(bytes32 _symbol, uint _price) external;


    function getPrice(bytes32 _symbol) external view returns (uint);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\IPair.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.12;





interface IPair {


    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);


    function token0() external view returns (address);


    function token1() external view returns (address);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\ITransferHook.sol
File type: .sol
// SPDX-License-Identifier: agpl-3.0


pragma solidity 0.6.10;





interface ITransferHook {


    function onTransfer(address from, address to, uint256 amount) external;


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\ITrusteeFeePool.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.12;





interface ITrusteeFeePool {


    function exit(address account) external;


    function enter(address account) external;


    function notifyReward(uint reward) external;


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\ITunnel.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.12;





interface ITunnel {


    function pledge(address account, uint amount) external;


    function redeem(address account, uint amount) external;


    function issue(address account, uint amount) external;


    function burn(address account, uint amount, string memory assetAddress) external;


    function totalValuePledge() external view  returns(uint);


    function canIssueAmount() external view returns(uint);


    function oTokenKey() external view returns(bytes32);


}





interface ITunnelV2 {


    function pledge(address account, uint amount) external;


    function redeem(address account, uint amount) external;


    function issue(address account, uint amount) external;


    function burn(address account, uint amount, string memory assetAddress) external;


    function totalValuePledge() external view  returns(uint);


    function canIssueAmount() external view returns(uint);


}





interface ITunnelTVL {


    function totalTVL() external view returns(uint);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\izumiToken.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2021-08-25


*/





// SPDX-License-Identifier: MIT





pragma solidity ^0.8.0;





/*


 * @dev Provides information about the current execution context, including the


 * sender of the transaction and its data. While these are generally available


 * via msg.sender and msg.data, they should not be accessed in such a direct


 * manner, since when dealing with meta-transactions the account sending and


 * paying for execution may not be the actual sender (as far as an application


 * is concerned).


 *


 * This contract is only required for intermediate, library-like contracts.


 */


abstract contract Context {


    function _msgSender() internal view virtual returns (address) {


        return msg.sender;


    }





    function _msgData() internal view virtual returns (bytes calldata) {


        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691


        return msg.data;


    }


}








/**


 * @dev Interface of the ERC20 standard as defined in the EIP.


 */


interface IERC20 {


    /**


     * @dev Returns the amount of tokens in existence.


     */


    function totalSupply() external view returns (uint256);





    /**


     * @dev Returns the amount of tokens owned by `account`.


     */


    function balanceOf(address account) external view returns (uint256);





    /**


     * @dev Moves `amount` tokens from the caller's account to `recipient`.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transfer(address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Returns the remaining number of tokens that `spender` will be


     * allowed to spend on behalf of `owner` through {transferFrom}. This is


     * zero by default.


     *


     * This value changes when {approve} or {transferFrom} are called.


     */


    function allowance(address owner, address spender) external view returns (uint256);





    /**


     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * IMPORTANT: Beware that changing an allowance with this method brings the risk


     * that someone may use both the old and the new allowance by unfortunate


     * transaction ordering. One possible solution to mitigate this race


     * condition is to first reduce the spender's allowance to 0 and set the


     * desired value afterwards:


     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


     *


     * Emits an {Approval} event.


     */


    function approve(address spender, uint256 amount) external returns (bool);





    /**


     * @dev Moves `amount` tokens from `sender` to `recipient` using the


     * allowance mechanism. `amount` is then deducted from the caller's


     * allowance.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Emitted when `value` tokens are moved from one account (`from`) to


     * another (`to`).


     *


     * Note that `value` may be zero.


     */


    event Transfer(address indexed from, address indexed to, uint256 value);





    /**


     * @dev Emitted when the allowance of a `spender` for an `owner` is set by


     * a call to {approve}. `value` is the new allowance.


     */


    event Approval(address indexed owner, address indexed spender, uint256 value);


}








/**


 * @dev Contract module which provides a basic access control mechanism, where


 * there is an account (an owner) that can be granted exclusive access to


 * specific functions.


 *


 * By default, the owner account will be the one that deploys the contract. This


 * can later be changed with {transferOwnership}.


 *


 * This module is used through inheritance. It will make available the modifier


 * `onlyOwner`, which can be applied to your functions to restrict their use to


 * the owner.


 */


abstract contract Ownable is Context {


    address private _owner;





    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);





    /**


     * @dev Initializes the contract setting the deployer as the initial owner.


     */


    constructor () {


        address msgSender = _msgSender();


        _owner = msgSender;


        emit OwnershipTransferred(address(0), msgSender);


    }





    /**


     * @dev Returns the address of the current owner.


     */


    function owner() public view virtual returns (address) {


        return _owner;


    }





    /**


     * @dev Throws if called by any account other than the owner.


     */


    modifier onlyOwner() {


        require(owner() == _msgSender(), "Ownable: caller is not the owner");


        _;


    }





    /**


     * @dev Leaves the contract without owner. It will not be possible to call


     * `onlyOwner` functions anymore. Can only be called by the current owner.


     *


     * NOTE: Renouncing ownership will leave the contract without an owner,


     * thereby removing any functionality that is only available to the owner.


     */


    function renounceOwnership() public virtual onlyOwner {


        emit OwnershipTransferred(_owner, address(0));


        _owner = address(0);


    }





    /**


     * @dev Transfers ownership of the contract to a new account (`newOwner`).


     * Can only be called by the current owner.


     */


    function transferOwnership(address newOwner) public virtual onlyOwner {


        require(newOwner != address(0), "Ownable: new owner is the zero address");


        emit OwnershipTransferred(_owner, newOwner);


        _owner = newOwner;


    }


}





/**


 * @dev Implementation of the {IERC20} interface.


 *


 * This implementation is agnostic to the way tokens are created. This means


 * that a supply mechanism has to be added in a derived contract using {_mint}.


 * For a generic mechanism see {ERC20PresetMinterPauser}.


 *


 * TIP: For a detailed writeup see our guide


 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How


 * to implement supply mechanisms].


 *


 * We have followed general OpenZeppelin guidelines: functions revert instead


 * of returning `false` on failure. This behavior is nonetheless conventional


 * and does not conflict with the expectations of ERC20 applications.


 *


 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.


 * This allows applications to reconstruct the allowance for all accounts just


 * by listening to said events. Other implementations of the EIP may not emit


 * these events, as it isn't required by the specification.


 *


 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}


 * functions have been added to mitigate the well-known issues around setting


 * allowances. See {IERC20-approve}.


 */


contract ERC20 is Context, IERC20 {


    mapping (address => uint256) private _balances;





    mapping (address => mapping (address => uint256)) private _allowances;





    uint256 private _totalSupply;





    string private _name;


    string private _symbol;





    /**


     * @dev Sets the values for {name} and {symbol}.


     *


     * The defaut value of {decimals} is 18. To select a different value for


     * {decimals} you should overload it.


     *


     * All three of these values are immutable: they can only be set once during


     * construction.


     */


    constructor (string memory name_, string memory symbol_) {


        _name = name_;


        _symbol = symbol_;


    }





    /**


     * @dev Returns the name of the token.


     */


    function name() public view virtual returns (string memory) {


        return _name;


    }





    /**


     * @dev Returns the symbol of the token, usually a shorter version of the


     * name.


     */


    function symbol() public view virtual returns (string memory) {


        return _symbol;


    }





    /**


     * @dev Returns the number of decimals used to get its user representation.


     * For example, if `decimals` equals `2`, a balance of `505` tokens should


     * be displayed to a user as `5,05` (`505 / 10 ** 2`).


     *


     * Tokens usually opt for a value of 18, imitating the relationship between


     * Ether and Wei. This is the value {ERC20} uses, unless this function is


     * overloaded;


     *


     * NOTE: This information is only used for _display_ purposes: it in


     * no way affects any of the arithmetic of the contract, including


     * {IERC20-balanceOf} and {IERC20-transfer}.


     */


    function decimals() public view virtual returns (uint8) {


        return 18;


    }





    /**


     * @dev See {IERC20-totalSupply}.


     */


    function totalSupply() public view virtual override returns (uint256) {


        return _totalSupply;


    }





    /**


     * @dev See {IERC20-balanceOf}.


     */


    function balanceOf(address account) public view virtual override returns (uint256) {


        return _balances[account];


    }





    /**


     * @dev See {IERC20-transfer}.


     *


     * Requirements:


     *


     * - `recipient` cannot be the zero address.


     * - the caller must have a balance of at least `amount`.


     */


    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(_msgSender(), recipient, amount);


        return true;


    }





    /**


     * @dev See {IERC20-allowance}.


     */


    function allowance(address owner, address spender) public view virtual override returns (uint256) {


        return _allowances[owner][spender];


    }





    /**


     * @dev See {IERC20-approve}.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function approve(address spender, uint256 amount) public virtual override returns (bool) {


        _approve(_msgSender(), spender, amount);


        return true;


    }





    /**


     * @dev See {IERC20-transferFrom}.


     *


     * Emits an {Approval} event indicating the updated allowance. This is not


     * required by the EIP. See the note at the beginning of {ERC20}.


     *


     * Requirements:


     *


     * - `sender` and `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     * - the caller must have allowance for ``sender``'s tokens of at least


     * `amount`.


     */


    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(sender, recipient, amount);





        uint256 currentAllowance = _allowances[sender][_msgSender()];


        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");


        _approve(sender, _msgSender(), currentAllowance - amount);





        return true;


    }





    /**


     * @dev Atomically increases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);


        return true;


    }





    /**


     * @dev Atomically decreases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     * - `spender` must have allowance for the caller of at least


     * `subtractedValue`.


     */


    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {


        uint256 currentAllowance = _allowances[_msgSender()][spender];


        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");


        _approve(_msgSender(), spender, currentAllowance - subtractedValue);





        return true;


    }





    /**


     * @dev Moves tokens `amount` from `sender` to `recipient`.


     *


     * This is internal function is equivalent to {transfer}, and can be used to


     * e.g. implement automatic token fees, slashing mechanisms, etc.


     *


     * Emits a {Transfer} event.


     *


     * Requirements:


     *


     * - `sender` cannot be the zero address.


     * - `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     */


    function _transfer(address sender, address recipient, uint256 amount) internal virtual {


        require(sender != address(0), "ERC20: transfer from the zero address");


        require(recipient != address(0), "ERC20: transfer to the zero address");





        _beforeTokenTransfer(sender, recipient, amount);





        uint256 senderBalance = _balances[sender];


        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");


        _balances[sender] = senderBalance - amount;


        _balances[recipient] += amount;





        emit Transfer(sender, recipient, amount);


    }





    /** @dev Creates `amount` tokens and assigns them to `account`, increasing


     * the total supply.


     *


     * Emits a {Transfer} event with `from` set to the zero address.


     *


     * Requirements:


     *


     * - `to` cannot be the zero address.


     */


    function _mint(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: mint to the zero address");





        _beforeTokenTransfer(address(0), account, amount);





        _totalSupply += amount;


        _balances[account] += amount;


        emit Transfer(address(0), account, amount);


    }





    /**


     * @dev Destroys `amount` tokens from `account`, reducing the


     * total supply.


     *


     * Emits a {Transfer} event with `to` set to the zero address.


     *


     * Requirements:


     *


     * - `account` cannot be the zero address.


     * - `account` must have at least `amount` tokens.


     */


    function _burn(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: burn from the zero address");





        _beforeTokenTransfer(account, address(0), amount);





        uint256 accountBalance = _balances[account];


        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");


        _balances[account] = accountBalance - amount;


        _totalSupply -= amount;





        emit Transfer(account, address(0), amount);


    }





    /**


     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.


     *


     * This internal function is equivalent to `approve`, and can be used to


     * e.g. set automatic allowances for certain subsystems, etc.


     *


     * Emits an {Approval} event.


     *


     * Requirements:


     *


     * - `owner` cannot be the zero address.


     * - `spender` cannot be the zero address.


     */


    function _approve(address owner, address spender, uint256 amount) internal virtual {


        require(owner != address(0), "ERC20: approve from the zero address");


        require(spender != address(0), "ERC20: approve to the zero address");





        _allowances[owner][spender] = amount;


        emit Approval(owner, spender, amount);


    }





    /**


     * @dev Hook that is called before any transfer of tokens. This includes


     * minting and burning.


     *


     * Calling conditions:


     *


     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens


     * will be to transferred to `to`.


     * - when `from` is zero, `amount` tokens will be minted for `to`.


     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.


     * - `from` and `to` are never both zero.


     *


     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].


     */


    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }


}





contract OperableToken is ERC20, Ownable  {


  address public operator;


  mapping(address=>bool) public trusted;





  modifier onlyTrusted {


      require(trusted[msg.sender] || msg.sender == owner(), "not trusted");


      _;


  }


  modifier onlyOperator {


      require(msg.sender == operator, "operator only");


      _;


  }





  constructor(string memory name, string memory symbol) ERC20(name, symbol) {


    operator = msg.sender;


  }





  function transferOperator(address newOperator) public onlyOperator {


    require(newOperator != address(0), "zero operator");


    operator = newOperator;


  }





  function addTrusted(address user) public onlyOperator {


      trusted[user] = true;


  }





  function removeTrusted(address user) public onlyOperator {


      trusted[user] = false;


  }





  function mint(address account, uint amount) public onlyTrusted {


    _mint(account, amount);


  }





  function burn(address account, uint amount) public onlyTrusted {


    _burn(account, amount);


  }





}





contract izumiToken is OperableToken {


  constructor() OperableToken("izumi Token", "iZi") {}


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\LendToAaveMigrator.sol
File type: .sol
// SPDX-License-Identifier: agpl-3.0


pragma solidity 0.6.10;





import {IERC20} from "../interfaces/IERC20.sol";


import {SafeMath} from "../open-zeppelin/SafeMath.sol";


import {VersionedInitializable} from "../utils/VersionedInitializable.sol";








/**


* @title LendToAaveMigrator


* @notice This contract implements the migration from LEND to AAVE token


* @author Aave 


*/


contract LendToAaveMigrator is VersionedInitializable {


    using SafeMath for uint256;





    IERC20 public immutable AAVE;


    IERC20 public immutable LEND;


    uint256 public immutable LEND_AAVE_RATIO;


    uint256 public constant REVISION = 1;


    


    uint256 public _totalLendMigrated;





    /**


    * @dev emitted on migration


    * @param sender the caller of the migration


    * @param amount the amount being migrated


    */


    event LendMigrated(address indexed sender, uint256 indexed amount);





    /**


    * @param aave the address of the AAVE token


    * @param lend the address of the LEND token


    * @param lendAaveRatio the exchange rate between LEND and AAVE 


     */


    constructor(IERC20 aave, IERC20 lend, uint256 lendAaveRatio) public {


        AAVE = aave;


        LEND = lend;


        LEND_AAVE_RATIO = lendAaveRatio;


    }





    /**


    * @dev initializes the implementation


    */


    function initialize() public initializer {


    }





    /**


    * @dev returns true if the migration started


    */


    function migrationStarted() external view returns(bool) {


        return lastInitializedRevision != 0;


    }








    /**


    * @dev executes the migration from LEND to AAVE. Users need to give allowance to this contract to transfer LEND before executing


    * this transaction.


    * @param amount the amount of LEND to be migrated


    */


    function migrateFromLEND(uint256 amount) external {


        require(lastInitializedRevision != 0, "MIGRATION_NOT_STARTED");





        _totalLendMigrated = _totalLendMigrated.add(amount);


        LEND.transferFrom(msg.sender, address(this), amount);


        AAVE.transfer(msg.sender, amount.div(LEND_AAVE_RATIO));


        emit LendMigrated(msg.sender, amount);


    }





    /**


    * @dev returns the implementation revision


    * @return the implementation revision


    */


    function getRevision() internal pure override returns (uint256) {


        return REVISION;


    }





}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\MintableErc20.sol
File type: .sol
// SPDX-License-Identifier: agpl-3.0


pragma solidity 0.6.10;





import "../open-zeppelin/ERC20.sol";





/**


 * @title ERC20Mintable


 * @dev ERC20 minting logic


 */


contract MintableErc20 is ERC20 {


    constructor(string memory name, string memory symbol, uint8 decimals) ERC20(name, symbol) public {


        _setupDecimals(decimals);


    }


    /**


     * @dev Function to mint tokens


     * @param value The amount of tokens to mint.


     * @return A boolean that indicates if the operation was successful.


     */


    function mint(uint256 value) public returns (bool) {


        _mint(msg.sender, value);


        return true;


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\MockTransferHook.sol
File type: .sol
// SPDX-License-Identifier: agpl-3.0


pragma solidity 0.6.10;





import {ITransferHook} from "../interfaces/ITransferHook.sol";





contract MockTransferHook is ITransferHook {


    event MockHookEvent();





    function onTransfer(address from, address to, uint256 amount) external override {


        emit MockHookEvent();


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\MToken.sol
File type: .sol
pragma solidity ^0.5.0;





import "./ERC20.sol";


import "./ERC20Detailed.sol";


import "./Ownable.sol";


import "./SafeMath.sol";


import "./Roles.sol";





contract MToken is ERC20, ERC20Detailed, Ownable {


    using Roles for Roles.Role;





    Roles.Role private _minters;


    using SafeMath for uint256;





    address[] minters_;


    uint256 maxSupply_;





    constructor(


     	address[] memory minters,


        uint256 maxSupply


    )


       ERC20Detailed("Metis Token", "Metis", 18)


       public


    {


        for (uint256 i = 0; i < minters.length; ++i) {


	    _minters.add(minters[i]);


        }


        minters_ = minters;


        maxSupply_ = maxSupply;


    }





    function mint(address target, uint256 amount) external {


        require(_minters.has(msg.sender), "ONLY_MINTER_ALLOWED_TO_DO_THIS");


        require(SafeMath.add(totalSupply(), amount) <= maxSupply_, "EXCEEDING_MAX_SUPPLY");


        _mint(target, amount);


    }





    function burn(address target, uint256 amount) external {


        require(_minters.has(msg.sender), "ONLY_MINTER_ALLOWED_TO_DO_THIS");


        _burn(target, amount);


    }


    function addMinter(address minter) external onlyOwner {


        require(!_minters.has(minter), "HAVE_MINTER_ROLE_ALREADY");


        _minters.add(minter);


        minters_.push(minter);


    }








    function removeMinter(address minter) external onlyOwner {


        require(_minters.has(msg.sender), "HAVE_MINTER_ROLE_ALREADY");


        _minters.remove(minter);


        uint256 i;


        for (i = 0; i < minters_.length; ++i) {


            if (minters_[i] == minter) {


                minters_[i] = address(0);


                break;


            }


        }


    }


}




--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\NODE.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2019-08-28


*/





pragma solidity ^0.5.0;





/**


 * @dev Wrappers over Solidity's arithmetic operations with added overflow


 * checks.


 *


 * Arithmetic operations in Solidity wrap on overflow. This can easily result


 * in bugs, because programmers usually assume that an overflow raises an


 * error, which is the standard behavior in high level programming languages.


 * `SafeMath` restores this intuition by reverting the transaction when an


 * operation overflows.


 *


 * Using this library instead of the unchecked operations eliminates an entire


 * class of bugs, so it's recommended to use it always.


 */


library SafeMath {


    /**


     * @dev Returns the addition of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `+` operator.


     *


     * Requirements:


     * - Addition cannot overflow.


     */


    function add(uint256 a, uint256 b) internal pure returns (uint256) {


        uint256 c = a + b;


        require(c >= a, "SafeMath: addition overflow");





        return c;


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting on


     * overflow (when the result is negative).


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {


        require(b <= a, "SafeMath: subtraction overflow");


        uint256 c = a - b;





        return c;


    }





    /**


     * @dev Returns the multiplication of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `*` operator.


     *


     * Requirements:


     * - Multiplication cannot overflow.


     */


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {


        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the


        // benefit is lost if 'b' is also tested.


        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522


        if (a == 0) {


            return 0;


        }





        uint256 c = a * b;


        require(c / a == b, "SafeMath: multiplication overflow");





        return c;


    }





    /**


     * @dev Returns the integer division of two unsigned integers. Reverts on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b) internal pure returns (uint256) {


        // Solidity only automatically asserts when dividing by 0


        require(b > 0, "SafeMath: division by zero");


        uint256 c = a / b;


        // assert(a == b * c + a % b); // There is no case in which this doesn't hold





        return c;


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * Reverts when dividing by zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {


        require(b != 0, "SafeMath: modulo by zero");


        return a % b;


    }


}





/**


 * @dev Interface of the ERC20 standard as defined in the EIP. Does not include


 * the optional functions; to access them see `ERC20Detailed`.


 */


interface IERC20 {


    /**


     * @dev Returns the amount of tokens in existence.


     */


    function totalSupply() external view returns (uint256);





    /**


     * @dev Returns the amount of tokens owned by `account`.


     */


    function balanceOf(address account) external view returns (uint256);





    /**


     * @dev Moves `amount` tokens from the caller's account to `recipient`.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a `Transfer` event.


     */


    function transfer(address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Returns the remaining number of tokens that `spender` will be


     * allowed to spend on behalf of `owner` through `transferFrom`. This is


     * zero by default.


     *


     * This value changes when `approve` or `transferFrom` are called.


     */


    function allowance(address owner, address spender) external view returns (uint256);





    /**


     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * > Beware that changing an allowance with this method brings the risk


     * that someone may use both the old and the new allowance by unfortunate


     * transaction ordering. One possible solution to mitigate this race


     * condition is to first reduce the spender's allowance to 0 and set the


     * desired value afterwards:


     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


     *


     * Emits an `Approval` event.


     */


    function approve(address spender, uint256 amount) external returns (bool);





    /**


     * @dev Moves `amount` tokens from `sender` to `recipient` using the


     * allowance mechanism. `amount` is then deducted from the caller's


     * allowance.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a `Transfer` event.


     */


    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Emitted when `value` tokens are moved from one account (`from`) to


     * another (`to`).


     *


     * Note that `value` may be zero.


     */


    event Transfer(address indexed from, address indexed to, uint256 value);





    /**


     * @dev Emitted when the allowance of a `spender` for an `owner` is set by


     * a call to `approve`. `value` is the new allowance.


     */


    event Approval(address indexed owner, address indexed spender, uint256 value);


}





/**


 * @dev Implementation of the `IERC20` interface.


 *


 * This implementation is agnostic to the way tokens are created. This means


 * that a supply mechanism has to be added in a derived contract using `_mint`.


 * For a generic mechanism see `ERC20Mintable`.


 *


 * *For a detailed writeup see our guide [How to implement supply


 * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*


 *


 * We have followed general OpenZeppelin guidelines: functions revert instead


 * of returning `false` on failure. This behavior is nonetheless conventional


 * and does not conflict with the expectations of ERC20 applications.


 *


 * Additionally, an `Approval` event is emitted on calls to `transferFrom`.


 * This allows applications to reconstruct the allowance for all accounts just


 * by listening to said events. Other implementations of the EIP may not emit


 * these events, as it isn't required by the specification.


 *


 * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`


 * functions have been added to mitigate the well-known issues around setting


 * allowances. See `IERC20.approve`.


 */


contract NODE is IERC20 {


    using SafeMath for uint256;





    string private _name = "Whole Network Node";





    string private _symbol = "NODE";





    uint8 private _decimals = 5;      //How many decimals to show





    mapping (address => uint256) private _balances;





    mapping (address => mapping (address => uint256)) private _allowances;





    uint256 private _totalSupply = 10 ** 15; // total supply is 10^15 unit, equivalent to 10^10 NODE;





    constructor() public {


        _balances[msg.sender] = _totalSupply;               // Give the creator all initial tokens


    }





    /**


     * @dev Returns the name of the token.


     */


    function name() public view returns (string memory) {


        return _name;


    }





    /**


     * @dev Returns the symbol of the token, usually a shorter version of the


     * name.


     */


    function symbol() public view returns (string memory) {


        return _symbol;


    }





    /**


     * @dev Returns the number of decimals used to get its user representation.


     * For example, if `decimals` equals `2`, a balance of `505` tokens should


     * be displayed to a user as `5,05` (`505 / 10 ** 2`).


     *


     * Tokens usually opt for a value of 18, imitating the relationship between


     * Ether and Wei.


     *


     * > Note that this information is only used for _display_ purposes: it in


     * no way affects any of the arithmetic of the contract, including


     * `IERC20.balanceOf` and `IERC20.transfer`.


     */


    function decimals() public view returns (uint8) {


        return _decimals;


    }





    /**


     * @dev See `IERC20.totalSupply`.


     */


    function totalSupply() public view returns (uint256) {


        return _totalSupply;


    }





    /**


     * @dev See `IERC20.balanceOf`.


     */


    function balanceOf(address account) public view returns (uint256) {


        return _balances[account];


    }





    /**


     * @dev See `IERC20.transfer`.


     *


     * Requirements:


     *


     * - `recipient` cannot be the zero address.


     * - the caller must have a balance of at least `amount`.


     */


    function transfer(address recipient, uint256 amount) public returns (bool) {


        _transfer(msg.sender, recipient, amount);


        return true;


    }





    /**


     * @dev See `IERC20.allowance`.


     */


    function allowance(address owner, address spender) public view returns (uint256) {


        return _allowances[owner][spender];


    }





    /**


     * @dev See `IERC20.approve`.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function approve(address spender, uint256 value) public returns (bool) {


        _approve(msg.sender, spender, value);


        return true;


    }





    /**


     * @dev See `IERC20.transferFrom`.


     *


     * Emits an `Approval` event indicating the updated allowance. This is not


     * required by the EIP. See the note at the beginning of `ERC20`;


     *


     * Requirements:


     * - `sender` and `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `value`.


     * - the caller must have allowance for `sender`'s tokens of at least


     * `amount`.


     */


    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {


        _transfer(sender, recipient, amount);


        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));


        return true;


    }





    /**


     * @dev Atomically increases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to `approve` that can be used as a mitigation for


     * problems described in `IERC20.approve`.


     *


     * Emits an `Approval` event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {


        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));


        return true;


    }





    /**


     * @dev Atomically decreases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to `approve` that can be used as a mitigation for


     * problems described in `IERC20.approve`.


     *


     * Emits an `Approval` event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     * - `spender` must have allowance for the caller of at least


     * `subtractedValue`.


     */


    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {


        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));


        return true;


    }





    /**


     * @dev Moves tokens `amount` from `sender` to `recipient`.


     *


     * This is internal function is equivalent to `transfer`, and can be used to


     * e.g. implement automatic token fees, slashing mechanisms, etc.


     *


     * Emits a `Transfer` event.


     *


     * Requirements:


     *


     * - `sender` cannot be the zero address.


     * - `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     */


    function _transfer(address sender, address recipient, uint256 amount) internal {


        require(sender != address(0), "ERC20: transfer from the zero address");


        require(recipient != address(0), "ERC20: transfer to the zero address");





        _balances[sender] = _balances[sender].sub(amount);


        _balances[recipient] = _balances[recipient].add(amount);


        emit Transfer(sender, recipient, amount);


    }





    /** @dev Creates `amount` tokens and assigns them to `account`, increasing


     * the total supply.


     *


     * Emits a `Transfer` event with `from` set to the zero address.


     *


     * Requirements


     *


     * - `to` cannot be the zero address.


     */


    function _mint(address account, uint256 amount) internal {


        require(account != address(0), "ERC20: mint to the zero address");





        _totalSupply = _totalSupply.add(amount);


        _balances[account] = _balances[account].add(amount);


        emit Transfer(address(0), account, amount);


    }





     /**


     * @dev Destoys `amount` tokens from `account`, reducing the


     * total supply.


     *


     * Emits a `Transfer` event with `to` set to the zero address.


     *


     * Requirements


     *


     * - `account` cannot be the zero address.


     * - `account` must have at least `amount` tokens.


     */


    function _burn(address account, uint256 value) internal {


        require(account != address(0), "ERC20: burn from the zero address");





        _totalSupply = _totalSupply.sub(value);


        _balances[account] = _balances[account].sub(value);


        emit Transfer(account, address(0), value);


    }





    /**


     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.


     *


     * This is internal function is equivalent to `approve`, and can be used to


     * e.g. set automatic allowances for certain subsystems, etc.


     *


     * Emits an `Approval` event.


     *


     * Requirements:


     *


     * - `owner` cannot be the zero address.


     * - `spender` cannot be the zero address.


     */


    function _approve(address owner, address spender, uint256 value) internal {


        require(owner != address(0), "ERC20: approve from the zero address");


        require(spender != address(0), "ERC20: approve to the zero address");





        _allowances[owner][spender] = value;


        emit Approval(owner, spender, value);


    }





    /**


     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted


     * from the caller's allowance.


     *


     * See `_burn` and `_approve`.


     */


    function _burnFrom(address account, uint256 amount) internal {


        _burn(account, amount);


        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));


    }





    /**


     * @dev Destroys `amount` tokens from the caller.


     *


     * See `_burn`.


     */


    function burn(uint256 amount) public {


        _burn(msg.sender, amount);


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\OToken.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2020-11-12


*/





// File: node_modules\@openzeppelin\contracts\GSN\Context.sol





// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





/*


 * @dev Provides information about the current execution context, including the


 * sender of the transaction and its data. While these are generally available


 * via msg.sender and msg.data, they should not be accessed in such a direct


 * manner, since when dealing with GSN meta-transactions the account sending and


 * paying for execution may not be the actual sender (as far as an application


 * is concerned).


 *


 * This contract is only required for intermediate, library-like contracts.


 */


abstract contract Context {


    function _msgSender() internal view virtual returns (address payable) {


        return msg.sender;


    }





    function _msgData() internal view virtual returns (bytes memory) {


        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691


        return msg.data;


    }


}





// File: node_modules\@openzeppelin\contracts\token\ERC20\IERC20.sol








pragma solidity ^0.6.0;





/**


 * @dev Interface of the ERC20 standard as defined in the EIP.


 */


interface IERC20 {


    /**


     * @dev Returns the amount of tokens in existence.


     */


    function totalSupply() external view returns (uint256);





    /**


     * @dev Returns the amount of tokens owned by `account`.


     */


    function balanceOf(address account) external view returns (uint256);





    /**


     * @dev Moves `amount` tokens from the caller's account to `recipient`.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transfer(address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Returns the remaining number of tokens that `spender` will be


     * allowed to spend on behalf of `owner` through {transferFrom}. This is


     * zero by default.


     *


     * This value changes when {approve} or {transferFrom} are called.


     */


    function allowance(address owner, address spender) external view returns (uint256);





    /**


     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * IMPORTANT: Beware that changing an allowance with this method brings the risk


     * that someone may use both the old and the new allowance by unfortunate


     * transaction ordering. One possible solution to mitigate this race


     * condition is to first reduce the spender's allowance to 0 and set the


     * desired value afterwards:


     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


     *


     * Emits an {Approval} event.


     */


    function approve(address spender, uint256 amount) external returns (bool);





    /**


     * @dev Moves `amount` tokens from `sender` to `recipient` using the


     * allowance mechanism. `amount` is then deducted from the caller's


     * allowance.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Emitted when `value` tokens are moved from one account (`from`) to


     * another (`to`).


     *


     * Note that `value` may be zero.


     */


    event Transfer(address indexed from, address indexed to, uint256 value);





    /**


     * @dev Emitted when the allowance of a `spender` for an `owner` is set by


     * a call to {approve}. `value` is the new allowance.


     */


    event Approval(address indexed owner, address indexed spender, uint256 value);


}





// File: node_modules\@openzeppelin\contracts\math\SafeMath.sol








pragma solidity ^0.6.0;





/**


 * @dev Wrappers over Solidity's arithmetic operations with added overflow


 * checks.


 *


 * Arithmetic operations in Solidity wrap on overflow. This can easily result


 * in bugs, because programmers usually assume that an overflow raises an


 * error, which is the standard behavior in high level programming languages.


 * `SafeMath` restores this intuition by reverting the transaction when an


 * operation overflows.


 *


 * Using this library instead of the unchecked operations eliminates an entire


 * class of bugs, so it's recommended to use it always.


 */


library SafeMath {


    /**


     * @dev Returns the addition of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `+` operator.


     *


     * Requirements:


     *


     * - Addition cannot overflow.


     */


    function add(uint256 a, uint256 b) internal pure returns (uint256) {


        uint256 c = a + b;


        require(c >= a, "SafeMath: addition overflow");





        return c;


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting on


     * overflow (when the result is negative).


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {


        return sub(a, b, "SafeMath: subtraction overflow");


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on


     * overflow (when the result is negative).


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b <= a, errorMessage);


        uint256 c = a - b;





        return c;


    }





    /**


     * @dev Returns the multiplication of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `*` operator.


     *


     * Requirements:


     *


     * - Multiplication cannot overflow.


     */


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {


        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the


        // benefit is lost if 'b' is also tested.


        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522


        if (a == 0) {


            return 0;


        }





        uint256 c = a * b;


        require(c / a == b, "SafeMath: multiplication overflow");





        return c;


    }





    /**


     * @dev Returns the integer division of two unsigned integers. Reverts on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b) internal pure returns (uint256) {


        return div(a, b, "SafeMath: division by zero");


    }





    /**


     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b > 0, errorMessage);


        uint256 c = a / b;


        // assert(a == b * c + a % b); // There is no case in which this doesn't hold





        return c;


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * Reverts when dividing by zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {


        return mod(a, b, "SafeMath: modulo by zero");


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * Reverts with custom message when dividing by zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b != 0, errorMessage);


        return a % b;


    }


}





// File: node_modules\@openzeppelin\contracts\utils\Address.sol








pragma solidity ^0.6.2;





/**


 * @dev Collection of functions related to the address type


 */


library Address {


    /**


     * @dev Returns true if `account` is a contract.


     *


     * [IMPORTANT]


     * ====


     * It is unsafe to assume that an address for which this function returns


     * false is an externally-owned account (EOA) and not a contract.


     *


     * Among others, `isContract` will return false for the following


     * types of addresses:


     *


     *  - an externally-owned account


     *  - a contract in construction


     *  - an address where a contract will be created


     *  - an address where a contract lived, but was destroyed


     * ====


     */


    function isContract(address account) internal view returns (bool) {


        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts


        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned


        // for accounts without code, i.e. `keccak256('')`


        bytes32 codehash;


        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;


        // solhint-disable-next-line no-inline-assembly


        assembly { codehash := extcodehash(account) }


        return (codehash != accountHash && codehash != 0x0);


    }





    /**


     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to


     * `recipient`, forwarding all available gas and reverting on errors.


     *


     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost


     * of certain opcodes, possibly making contracts go over the 2300 gas limit


     * imposed by `transfer`, making them unable to receive funds via


     * `transfer`. {sendValue} removes this limitation.


     *


     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].


     *


     * IMPORTANT: because control is transferred to `recipient`, care must be


     * taken to not create reentrancy vulnerabilities. Consider using


     * {ReentrancyGuard} or the


     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].


     */


    function sendValue(address payable recipient, uint256 amount) internal {


        require(address(this).balance >= amount, "Address: insufficient balance");





        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value


        (bool success, ) = recipient.call{ value: amount }("");


        require(success, "Address: unable to send value, recipient may have reverted");


    }





    /**


     * @dev Performs a Solidity function call using a low level `call`. A


     * plain`call` is an unsafe replacement for a function call: use this


     * function instead.


     *


     * If `target` reverts with a revert reason, it is bubbled up by this


     * function (like regular Solidity function calls).


     *


     * Returns the raw returned data. To convert to the expected return value,


     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].


     *


     * Requirements:


     *


     * - `target` must be a contract.


     * - calling `target` with `data` must not revert.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data) internal returns (bytes memory) {


      return functionCall(target, data, "Address: low-level call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with


     * `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {


        return _functionCallWithValue(target, data, 0, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but also transferring `value` wei to `target`.


     *


     * Requirements:


     *


     * - the calling contract must have an ETH balance of at least `value`.


     * - the called Solidity function must be `payable`.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {


        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");


    }





    /**


     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but


     * with `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {


        require(address(this).balance >= value, "Address: insufficient balance for call");


        return _functionCallWithValue(target, data, value, errorMessage);


    }





    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {


        require(isContract(target), "Address: call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);


        if (success) {


            return returndata;


        } else {


            // Look for revert reason and bubble it up if present


            if (returndata.length > 0) {


                // The easiest way to bubble the revert reason is using memory via assembly





                // solhint-disable-next-line no-inline-assembly


                assembly {


                    let returndata_size := mload(returndata)


                    revert(add(32, returndata), returndata_size)


                }


            } else {


                revert(errorMessage);


            }


        }


    }


}





// File: node_modules\@openzeppelin\contracts\token\ERC20\ERC20.sol








pragma solidity ^0.6.0;

















/**


 * @dev Implementation of the {IERC20} interface.


 *


 * This implementation is agnostic to the way tokens are created. This means


 * that a supply mechanism has to be added in a derived contract using {_mint}.


 * For a generic mechanism see {ERC20PresetMinterPauser}.


 *


 * TIP: For a detailed writeup see our guide


 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How


 * to implement supply mechanisms].


 *


 * We have followed general OpenZeppelin guidelines: functions revert instead


 * of returning `false` on failure. This behavior is nonetheless conventional


 * and does not conflict with the expectations of ERC20 applications.


 *


 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.


 * This allows applications to reconstruct the allowance for all accounts just


 * by listening to said events. Other implementations of the EIP may not emit


 * these events, as it isn't required by the specification.


 *


 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}


 * functions have been added to mitigate the well-known issues around setting


 * allowances. See {IERC20-approve}.


 */


contract ERC20 is Context, IERC20 {


    using SafeMath for uint256;


    using Address for address;





    mapping (address => uint256) private _balances;





    mapping (address => mapping (address => uint256)) private _allowances;





    uint256 private _totalSupply;





    string private _name;


    string private _symbol;


    uint8 private _decimals;





    /**


     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with


     * a default value of 18.


     *


     * To select a different value for {decimals}, use {_setupDecimals}.


     *


     * All three of these values are immutable: they can only be set once during


     * construction.


     */


    constructor (string memory name, string memory symbol) public {


        _name = name;


        _symbol = symbol;


        _decimals = 18;


    }





    /**


     * @dev Returns the name of the token.


     */


    function name() public view returns (string memory) {


        return _name;


    }





    /**


     * @dev Returns the symbol of the token, usually a shorter version of the


     * name.


     */


    function symbol() public view returns (string memory) {


        return _symbol;


    }





    /**


     * @dev Returns the number of decimals used to get its user representation.


     * For example, if `decimals` equals `2`, a balance of `505` tokens should


     * be displayed to a user as `5,05` (`505 / 10 ** 2`).


     *


     * Tokens usually opt for a value of 18, imitating the relationship between


     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is


     * called.


     *


     * NOTE: This information is only used for _display_ purposes: it in


     * no way affects any of the arithmetic of the contract, including


     * {IERC20-balanceOf} and {IERC20-transfer}.


     */


    function decimals() public view returns (uint8) {


        return _decimals;


    }





    /**


     * @dev See {IERC20-totalSupply}.


     */


    function totalSupply() public view override returns (uint256) {


        return _totalSupply;


    }





    /**


     * @dev See {IERC20-balanceOf}.


     */


    function balanceOf(address account) public view override returns (uint256) {


        return _balances[account];


    }





    /**


     * @dev See {IERC20-transfer}.


     *


     * Requirements:


     *


     * - `recipient` cannot be the zero address.


     * - the caller must have a balance of at least `amount`.


     */


    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(_msgSender(), recipient, amount);


        return true;


    }





    /**


     * @dev See {IERC20-allowance}.


     */


    function allowance(address owner, address spender) public view virtual override returns (uint256) {


        return _allowances[owner][spender];


    }





    /**


     * @dev See {IERC20-approve}.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function approve(address spender, uint256 amount) public virtual override returns (bool) {


        _approve(_msgSender(), spender, amount);


        return true;


    }





    /**


     * @dev See {IERC20-transferFrom}.


     *


     * Emits an {Approval} event indicating the updated allowance. This is not


     * required by the EIP. See the note at the beginning of {ERC20};


     *


     * Requirements:


     * - `sender` and `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     * - the caller must have allowance for ``sender``'s tokens of at least


     * `amount`.


     */


    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(sender, recipient, amount);


        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));


        return true;


    }





    /**


     * @dev Atomically increases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));


        return true;


    }





    /**


     * @dev Atomically decreases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     * - `spender` must have allowance for the caller of at least


     * `subtractedValue`.


     */


    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));


        return true;


    }





    /**


     * @dev Moves tokens `amount` from `sender` to `recipient`.


     *


     * This is internal function is equivalent to {transfer}, and can be used to


     * e.g. implement automatic token fees, slashing mechanisms, etc.


     *


     * Emits a {Transfer} event.


     *


     * Requirements:


     *


     * - `sender` cannot be the zero address.


     * - `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     */


    function _transfer(address sender, address recipient, uint256 amount) internal virtual {


        require(sender != address(0), "ERC20: transfer from the zero address");


        require(recipient != address(0), "ERC20: transfer to the zero address");





        _beforeTokenTransfer(sender, recipient, amount);





        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");


        _balances[recipient] = _balances[recipient].add(amount);


        emit Transfer(sender, recipient, amount);


    }





    /** @dev Creates `amount` tokens and assigns them to `account`, increasing


     * the total supply.


     *


     * Emits a {Transfer} event with `from` set to the zero address.


     *


     * Requirements


     *


     * - `to` cannot be the zero address.


     */


    function _mint(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: mint to the zero address");





        _beforeTokenTransfer(address(0), account, amount);





        _totalSupply = _totalSupply.add(amount);


        _balances[account] = _balances[account].add(amount);


        emit Transfer(address(0), account, amount);


    }





    /**


     * @dev Destroys `amount` tokens from `account`, reducing the


     * total supply.


     *


     * Emits a {Transfer} event with `to` set to the zero address.


     *


     * Requirements


     *


     * - `account` cannot be the zero address.


     * - `account` must have at least `amount` tokens.


     */


    function _burn(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: burn from the zero address");





        _beforeTokenTransfer(account, address(0), amount);





        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");


        _totalSupply = _totalSupply.sub(amount);


        emit Transfer(account, address(0), amount);


    }





    /**


     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.


     *


     * This is internal function is equivalent to `approve`, and can be used to


     * e.g. set automatic allowances for certain subsystems, etc.


     *


     * Emits an {Approval} event.


     *


     * Requirements:


     *


     * - `owner` cannot be the zero address.


     * - `spender` cannot be the zero address.


     */


    function _approve(address owner, address spender, uint256 amount) internal virtual {


        require(owner != address(0), "ERC20: approve from the zero address");


        require(spender != address(0), "ERC20: approve to the zero address");





        _allowances[owner][spender] = amount;


        emit Approval(owner, spender, amount);


    }





    /**


     * @dev Sets {decimals} to a value other than the default one of 18.


     *


     * WARNING: This function should only be called from the constructor. Most


     * applications that interact with token contracts will not expect


     * {decimals} to ever change, and may work incorrectly if it does.


     */


    function _setupDecimals(uint8 decimals_) internal {


        _decimals = decimals_;


    }





    /**


     * @dev Hook that is called before any transfer of tokens. This includes


     * minting and burning.


     *


     * Calling conditions:


     *


     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens


     * will be to transferred to `to`.


     * - when `from` is zero, `amount` tokens will be minted for `to`.


     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.


     * - `from` and `to` are never both zero.


     *


     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].


     */


    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }


}





// File: node_modules\@openzeppelin\contracts\utils\Pausable.sol








pragma solidity ^0.6.0;








/**


 * @dev Contract module which allows children to implement an emergency stop


 * mechanism that can be triggered by an authorized account.


 *


 * This module is used through inheritance. It will make available the


 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to


 * the functions of your contract. Note that they will not be pausable by


 * simply including this module, only once the modifiers are put in place.


 */


contract Pausable is Context {


    /**


     * @dev Emitted when the pause is triggered by `account`.


     */


    event Paused(address account);





    /**


     * @dev Emitted when the pause is lifted by `account`.


     */


    event Unpaused(address account);





    bool private _paused;





    /**


     * @dev Initializes the contract in unpaused state.


     */


    constructor () internal {


        _paused = false;


    }





    /**


     * @dev Returns true if the contract is paused, and false otherwise.


     */


    function paused() public view returns (bool) {


        return _paused;


    }





    /**


     * @dev Modifier to make a function callable only when the contract is not paused.


     *


     * Requirements:


     *


     * - The contract must not be paused.


     */


    modifier whenNotPaused() {


        require(!_paused, "Pausable: paused");


        _;


    }





    /**


     * @dev Modifier to make a function callable only when the contract is paused.


     *


     * Requirements:


     *


     * - The contract must be paused.


     */


    modifier whenPaused() {


        require(_paused, "Pausable: not paused");


        _;


    }





    /**


     * @dev Triggers stopped state.


     *


     * Requirements:


     *


     * - The contract must not be paused.


     */


    function _pause() internal virtual whenNotPaused {


        _paused = true;


        emit Paused(_msgSender());


    }





    /**


     * @dev Returns to normal state.


     *


     * Requirements:


     *


     * - The contract must be paused.


     */


    function _unpause() internal virtual whenPaused {


        _paused = false;


        emit Unpaused(_msgSender());


    }


}





// File: @openzeppelin\contracts\token\ERC20\ERC20Pausable.sol








pragma solidity ^0.6.0;











/**


 * @dev ERC20 token with pausable token transfers, minting and burning.


 *


 * Useful for scenarios such as preventing trades until the end of an evaluation


 * period, or having an emergency switch for freezing all token transfers in the


 * event of a large bug.


 */


abstract contract ERC20Pausable is ERC20, Pausable {


    /**


     * @dev See {ERC20-_beforeTokenTransfer}.


     *


     * Requirements:


     *


     * - the contract must not be paused.


     */


    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {


        super._beforeTokenTransfer(from, to, amount);





        require(!paused(), "ERC20Pausable: token transfer while paused");


    }


}








// File: node_modules\@openzeppelin\contracts\utils\EnumerableSet.sol








pragma solidity ^0.6.0;





/**


 * @dev Library for managing


 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive


 * types.


 *


 * Sets have the following properties:


 *


 * - Elements are added, removed, and checked for existence in constant time


 * (O(1)).


 * - Elements are enumerated in O(n). No guarantees are made on the ordering.


 *


 * ```


 * contract Example {


 *     // Add the library methods


 *     using EnumerableSet for EnumerableSet.AddressSet;


 *


 *     // Declare a set state variable


 *     EnumerableSet.AddressSet private mySet;


 * }


 * ```


 *


 * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`


 * (`UintSet`) are supported.


 */


library EnumerableSet {


    // To implement this library for multiple types with as little code


    // repetition as possible, we write it in terms of a generic Set type with


    // bytes32 values.


    // The Set implementation uses private functions, and user-facing


    // implementations (such as AddressSet) are just wrappers around the


    // underlying Set.


    // This means that we can only create new EnumerableSets for types that fit


    // in bytes32.





    struct Set {


        // Storage of set values


        bytes32[] _values;





        // Position of the value in the `values` array, plus 1 because index 0


        // means a value is not in the set.


        mapping (bytes32 => uint256) _indexes;


    }





    /**


     * @dev Add a value to a set. O(1).


     *


     * Returns true if the value was added to the set, that is if it was not


     * already present.


     */


    function _add(Set storage set, bytes32 value) private returns (bool) {


        if (!_contains(set, value)) {


            set._values.push(value);


            // The value is stored at length-1, but we add 1 to all indexes


            // and use 0 as a sentinel value


            set._indexes[value] = set._values.length;


            return true;


        } else {


            return false;


        }


    }





    /**


     * @dev Removes a value from a set. O(1).


     *


     * Returns true if the value was removed from the set, that is if it was


     * present.


     */


    function _remove(Set storage set, bytes32 value) private returns (bool) {


        // We read and store the value's index to prevent multiple reads from the same storage slot


        uint256 valueIndex = set._indexes[value];





        if (valueIndex != 0) { // Equivalent to contains(set, value)


            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in


            // the array, and then remove the last element (sometimes called as 'swap and pop').


            // This modifies the order of the array, as noted in {at}.





            uint256 toDeleteIndex = valueIndex - 1;


            uint256 lastIndex = set._values.length - 1;





            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs


            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.





            bytes32 lastvalue = set._values[lastIndex];





            // Move the last value to the index where the value to delete is


            set._values[toDeleteIndex] = lastvalue;


            // Update the index for the moved value


            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based





            // Delete the slot where the moved value was stored


            set._values.pop();





            // Delete the index for the deleted slot


            delete set._indexes[value];





            return true;


        } else {


            return false;


        }


    }





    /**


     * @dev Returns true if the value is in the set. O(1).


     */


    function _contains(Set storage set, bytes32 value) private view returns (bool) {


        return set._indexes[value] != 0;


    }





    /**


     * @dev Returns the number of values on the set. O(1).


     */


    function _length(Set storage set) private view returns (uint256) {


        return set._values.length;


    }





   /**


    * @dev Returns the value stored at position `index` in the set. O(1).


    *


    * Note that there are no guarantees on the ordering of values inside the


    * array, and it may change when more values are added or removed.


    *


    * Requirements:


    *


    * - `index` must be strictly less than {length}.


    */


    function _at(Set storage set, uint256 index) private view returns (bytes32) {


        require(set._values.length > index, "EnumerableSet: index out of bounds");


        return set._values[index];


    }





    // AddressSet





    struct AddressSet {


        Set _inner;


    }





    /**


     * @dev Add a value to a set. O(1).


     *


     * Returns true if the value was added to the set, that is if it was not


     * already present.


     */


    function add(AddressSet storage set, address value) internal returns (bool) {


        return _add(set._inner, bytes32(uint256(value)));


    }





    /**


     * @dev Removes a value from a set. O(1).


     *


     * Returns true if the value was removed from the set, that is if it was


     * present.


     */


    function remove(AddressSet storage set, address value) internal returns (bool) {


        return _remove(set._inner, bytes32(uint256(value)));


    }





    /**


     * @dev Returns true if the value is in the set. O(1).


     */


    function contains(AddressSet storage set, address value) internal view returns (bool) {


        return _contains(set._inner, bytes32(uint256(value)));


    }





    /**


     * @dev Returns the number of values in the set. O(1).


     */


    function length(AddressSet storage set) internal view returns (uint256) {


        return _length(set._inner);


    }





   /**


    * @dev Returns the value stored at position `index` in the set. O(1).


    *


    * Note that there are no guarantees on the ordering of values inside the


    * array, and it may change when more values are added or removed.


    *


    * Requirements:


    *


    * - `index` must be strictly less than {length}.


    */


    function at(AddressSet storage set, uint256 index) internal view returns (address) {


        return address(uint256(_at(set._inner, index)));


    }








    // UintSet





    struct UintSet {


        Set _inner;


    }





    /**


     * @dev Add a value to a set. O(1).


     *


     * Returns true if the value was added to the set, that is if it was not


     * already present.


     */


    function add(UintSet storage set, uint256 value) internal returns (bool) {


        return _add(set._inner, bytes32(value));


    }





    /**


     * @dev Removes a value from a set. O(1).


     *


     * Returns true if the value was removed from the set, that is if it was


     * present.


     */


    function remove(UintSet storage set, uint256 value) internal returns (bool) {


        return _remove(set._inner, bytes32(value));


    }





    /**


     * @dev Returns true if the value is in the set. O(1).


     */


    function contains(UintSet storage set, uint256 value) internal view returns (bool) {


        return _contains(set._inner, bytes32(value));


    }





    /**


     * @dev Returns the number of values on the set. O(1).


     */


    function length(UintSet storage set) internal view returns (uint256) {


        return _length(set._inner);


    }





   /**


    * @dev Returns the value stored at position `index` in the set. O(1).


    *


    * Note that there are no guarantees on the ordering of values inside the


    * array, and it may change when more values are added or removed.


    *


    * Requirements:


    *


    * - `index` must be strictly less than {length}.


    */


    function at(UintSet storage set, uint256 index) internal view returns (uint256) {


        return uint256(_at(set._inner, index));


    }


}





// File: @openzeppelin\contracts\access\AccessControl.sol








pragma solidity ^0.6.0;














/**


 * @dev Contract module that allows children to implement role-based access


 * control mechanisms.


 *


 * Roles are referred to by their `bytes32` identifier. These should be exposed


 * in the external API and be unique. The best way to achieve this is by


 * using `public constant` hash digests:


 *


 * ```


 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");


 * ```


 *


 * Roles can be used to represent a set of permissions. To restrict access to a


 * function call, use {hasRole}:


 *


 * ```


 * function foo() public {


 *     require(hasRole(MY_ROLE, msg.sender));


 *     ...


 * }


 * ```


 *


 * Roles can be granted and revoked dynamically via the {grantRole} and


 * {revokeRole} functions. Each role has an associated admin role, and only


 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.


 *


 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means


 * that only accounts with this role will be able to grant or revoke other


 * roles. More complex role relationships can be created by using


 * {_setRoleAdmin}.


 *


 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to


 * grant and revoke this role. Extra precautions should be taken to secure


 * accounts that have been granted it.


 */


abstract contract AccessControl is Context {


    using EnumerableSet for EnumerableSet.AddressSet;


    using Address for address;





    struct RoleData {


        EnumerableSet.AddressSet members;


        bytes32 adminRole;


    }





    mapping (bytes32 => RoleData) private _roles;





    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;





    /**


     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`


     *


     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite


     * {RoleAdminChanged} not being emitted signaling this.


     *


     * _Available since v3.1._


     */


    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);





    /**


     * @dev Emitted when `account` is granted `role`.


     *


     * `sender` is the account that originated the contract call, an admin role


     * bearer except when using {_setupRole}.


     */


    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);





    /**


     * @dev Emitted when `account` is revoked `role`.


     *


     * `sender` is the account that originated the contract call:


     *   - if using `revokeRole`, it is the admin role bearer


     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)


     */


    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);





    /**


     * @dev Returns `true` if `account` has been granted `role`.


     */


    function hasRole(bytes32 role, address account) public view returns (bool) {


        return _roles[role].members.contains(account);


    }





    /**


     * @dev Returns the number of accounts that have `role`. Can be used


     * together with {getRoleMember} to enumerate all bearers of a role.


     */


    function getRoleMemberCount(bytes32 role) public view returns (uint256) {


        return _roles[role].members.length();


    }





    /**


     * @dev Returns one of the accounts that have `role`. `index` must be a


     * value between 0 and {getRoleMemberCount}, non-inclusive.


     *


     * Role bearers are not sorted in any particular way, and their ordering may


     * change at any point.


     *


     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure


     * you perform all queries on the same block. See the following


     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]


     * for more information.


     */


    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {


        return _roles[role].members.at(index);


    }





    /**


     * @dev Returns the admin role that controls `role`. See {grantRole} and


     * {revokeRole}.


     *


     * To change a role's admin, use {_setRoleAdmin}.


     */


    function getRoleAdmin(bytes32 role) public view returns (bytes32) {


        return _roles[role].adminRole;


    }





    /**


     * @dev Grants `role` to `account`.


     *


     * If `account` had not been already granted `role`, emits a {RoleGranted}


     * event.


     *


     * Requirements:


     *


     * - the caller must have ``role``'s admin role.


     */


    function grantRole(bytes32 role, address account) public virtual {


        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");





        _grantRole(role, account);


    }





    /**


     * @dev Revokes `role` from `account`.


     *


     * If `account` had been granted `role`, emits a {RoleRevoked} event.


     *


     * Requirements:


     *


     * - the caller must have ``role``'s admin role.


     */


    function revokeRole(bytes32 role, address account) public virtual {


        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");





        _revokeRole(role, account);


    }





    /**


     * @dev Revokes `role` from the calling account.


     *


     * Roles are often managed via {grantRole} and {revokeRole}: this function's


     * purpose is to provide a mechanism for accounts to lose their privileges


     * if they are compromised (such as when a trusted device is misplaced).


     *


     * If the calling account had been granted `role`, emits a {RoleRevoked}


     * event.


     *


     * Requirements:


     *


     * - the caller must be `account`.


     */


    function renounceRole(bytes32 role, address account) public virtual {


        require(account == _msgSender(), "AccessControl: can only renounce roles for self");





        _revokeRole(role, account);


    }





    /**


     * @dev Grants `role` to `account`.


     *


     * If `account` had not been already granted `role`, emits a {RoleGranted}


     * event. Note that unlike {grantRole}, this function doesn't perform any


     * checks on the calling account.


     *


     * [WARNING]


     * ====


     * This function should only be called from the constructor when setting


     * up the initial roles for the system.


     *


     * Using this function in any other way is effectively circumventing the admin


     * system imposed by {AccessControl}.


     * ====


     */


    function _setupRole(bytes32 role, address account) internal virtual {


        _grantRole(role, account);


    }





    /**


     * @dev Sets `adminRole` as ``role``'s admin role.


     *


     * Emits a {RoleAdminChanged} event.


     */


    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {


        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);


        _roles[role].adminRole = adminRole;


    }





    function _grantRole(bytes32 role, address account) private {


        if (_roles[role].members.add(account)) {


            emit RoleGranted(role, account, _msgSender());


        }


    }





    function _revokeRole(bytes32 role, address account) private {


        if (_roles[role].members.remove(account)) {


            emit RoleRevoked(role, account, _msgSender());


        }


    }


}





// File: contracts\interface\IMintBurn.sol








pragma solidity ^0.6.12;





interface IMintBurn {





    function burn(address account, uint amount) external;


    function mint(address account, uint amount) external;


}





// File: contracts\interface\IPause.sol








pragma solidity ^0.6.12;





interface IPause {


    function pause() external;


    function unpause() external;


}





// File: contracts\token\BaseToken.sol








pragma solidity ^0.6.12;




















contract BaseToken is ERC20Pausable, AccessControl, IMintBurn, IPause{


    bytes32 public constant MINTER_ROLE ="MINTER_ROLE";


    bytes32 public constant BURNER_ROLE ="BURNER_ROLE";


    bytes32 public constant LIQUIDATION = "LIQUIDATION";


    constructor(


        string memory _name,


        string memory _symbol,


        uint8 decimal_,


        address admin


    ) public ERC20(_name, _symbol) {


        _setupRole(DEFAULT_ADMIN_ROLE, admin);


        _setupDecimals(decimal_);


    }





    function mint(address account, uint amount) public override onlyMinter{


        _mint(account, amount);


    }





    function burn(address account, uint amount) public override onlyBurner{


        _burn(account, amount);


    }





    function pause() public override onlyLiquidation {


        _pause();


    }





    function unpause() public override onlyLiquidation {


        _unpause();


    }





    // minter will only be tunnel


    modifier onlyMinter {


        require(hasRole(MINTER_ROLE, msg.sender), "Caller is not a minter");


        _;


    }





    modifier onlyBurner {


        require(hasRole(BURNER_ROLE, msg.sender), "Caller is not a burner");


        _;


    }





    modifier onlyLiquidation {


        require(hasRole(LIQUIDATION, msg.sender), "Caller is not liquidation contract");


        _;


    }


}





// File: contracts\token\OToken.sol








pragma solidity ^0.6.12;








contract OToken is BaseToken {





    constructor(


        string memory name_,


        string memory symbol_,


        uint8 decimal_,


        address admin


    ) public BaseToken(name_, symbol_, decimal_, admin) {}





}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\Ownable.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





import "../GSN/Context.sol";


/**


 * @dev Contract module which provides a basic access control mechanism, where


 * there is an account (an owner) that can be granted exclusive access to


 * specific functions.


 *


 * By default, the owner account will be the one that deploys the contract. This


 * can later be changed with {transferOwnership}.


 *


 * This module is used through inheritance. It will make available the modifier


 * `onlyOwner`, which can be applied to your functions to restrict their use to


 * the owner.


 */


contract Ownable is Context {


    address private _owner;





    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);





    /**


     * @dev Initializes the contract setting the deployer as the initial owner.


     */


    constructor () internal {


        address msgSender = _msgSender();


        _owner = msgSender;


        emit OwnershipTransferred(address(0), msgSender);


    }





    /**


     * @dev Returns the address of the current owner.


     */


    function owner() public view returns (address) {


        return _owner;


    }





    /**


     * @dev Throws if called by any account other than the owner.


     */


    modifier onlyOwner() {


        require(_owner == _msgSender(), "Ownable: caller is not the owner");


        _;


    }





    /**


     * @dev Leaves the contract without owner. It will not be possible to call


     * `onlyOwner` functions anymore. Can only be called by the current owner.


     *


     * NOTE: Renouncing ownership will leave the contract without an owner,


     * thereby removing any functionality that is only available to the owner.


     */


    function renounceOwnership() public virtual onlyOwner {


        emit OwnershipTransferred(_owner, address(0));


        _owner = address(0);


    }





    /**


     * @dev Transfers ownership of the contract to a new account (`newOwner`).


     * Can only be called by the current owner.


     */


    function transferOwnership(address newOwner) public virtual onlyOwner {


        require(newOwner != address(0), "Ownable: new owner is the zero address");


        emit OwnershipTransferred(_owner, newOwner);


        _owner = newOwner;


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\ParamBook.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.12;





import "@openzeppelin/contracts/access/Ownable.sol";





contract ParamBook is Ownable {


    mapping(bytes32 => uint256) public params;


    mapping(bytes32 => mapping(bytes32 => uint256)) public params2;





    function setParams(bytes32 name, uint256 value) public onlyOwner {


        params[name] = value;


    }





    function setMultiParams(bytes32[] memory names, uint[] memory values) public onlyOwner {


        require(names.length == values.length, "ParamBook::setMultiParams:param length not match");


        for (uint i=0; i < names.length; i++ ) {


            params[names[i]] = values[i];


        }


    }





    function setParams2(


        bytes32 name1,


        bytes32 name2,


        uint256 value


    ) public onlyOwner {


        params2[name1][name2] = value;


    }





    function setMultiParams2(bytes32[] memory names1, bytes32[] memory names2, uint[] memory values) public onlyOwner {


        require(names1.length == names2.length, "ParamBook::setMultiParams2:param length not match");


        require(names1.length == values.length, "ParamBook::setMultiParams2:param length not match");


        for(uint i=0; i < names1.length; i++) {


            params2[names1[i]][names2[i]] = values[i];


        }


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\Pausable.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





import "../GSN/Context.sol";





/**


 * @dev Contract module which allows children to implement an emergency stop


 * mechanism that can be triggered by an authorized account.


 *


 * This module is used through inheritance. It will make available the


 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to


 * the functions of your contract. Note that they will not be pausable by


 * simply including this module, only once the modifiers are put in place.


 */


contract Pausable is Context {


    /**


     * @dev Emitted when the pause is triggered by `account`.


     */


    event Paused(address account);





    /**


     * @dev Emitted when the pause is lifted by `account`.


     */


    event Unpaused(address account);





    bool private _paused;





    /**


     * @dev Initializes the contract in unpaused state.


     */


    constructor () internal {


        _paused = false;


    }





    /**


     * @dev Returns true if the contract is paused, and false otherwise.


     */


    function paused() public view returns (bool) {


        return _paused;


    }





    /**


     * @dev Modifier to make a function callable only when the contract is not paused.


     *


     * Requirements:


     *


     * - The contract must not be paused.


     */


    modifier whenNotPaused() {


        require(!_paused, "Pausable: paused");


        _;


    }





    /**


     * @dev Modifier to make a function callable only when the contract is paused.


     *


     * Requirements:


     *


     * - The contract must be paused.


     */


    modifier whenPaused() {


        require(_paused, "Pausable: not paused");


        _;


    }





    /**


     * @dev Triggers stopped state.


     *


     * Requirements:


     *


     * - The contract must not be paused.


     */


    function _pause() internal virtual whenNotPaused {


        _paused = true;


        emit Paused(_msgSender());


    }





    /**


     * @dev Returns to normal state.


     *


     * Requirements:


     *


     * - The contract must be paused.


     */


    function _unpause() internal virtual whenPaused {


        _paused = false;


        emit Unpaused(_msgSender());


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\Proxy.sol
File type: .sol
pragma solidity ^0.6.0;





/**


 * @title Proxy


 * @dev Implements delegation of calls to other contracts, with proper


 * forwarding of return values and bubbling of failures.


 * It defines a fallback function that delegates all calls to the address


 * returned by the abstract _implementation() internal function.


 */


abstract contract Proxy {


  /**


   * @dev Fallback function.


   * Implemented entirely in `_fallback`.


   */


  fallback () payable external {


    _fallback();


  }





  /**


   * @return The Address of the implementation.


   */


  function _implementation() internal virtual view returns (address);





  /**


   * @dev Delegates execution to an implementation contract.


   * This is a low level function that doesn't return to its internal call site.


   * It will return to the external caller whatever the implementation returns.


   * @param implementation Address to delegate.


   */


  function _delegate(address implementation) internal {


    assembly {


      // Copy msg.data. We take full control of memory in this inline assembly


      // block because it will not return to Solidity code. We overwrite the


      // Solidity scratch pad at memory position 0.


      calldatacopy(0, 0, calldatasize())





      // Call the implementation.


      // out and outsize are 0 because we don't know the size yet.


      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)





      // Copy the returned data.


      returndatacopy(0, 0, returndatasize())





      switch result


      // delegatecall returns 0 on error.


      case 0 { revert(0, returndatasize()) }


      default { return(0, returndatasize()) }


    }


  }





  /**


   * @dev Function that is run as the first thing in the fallback function.


   * Can be redefined in derived contracts to add functionality.


   * Redefinitions must call super._willFallback().


   */


  function _willFallback() internal virtual {


  }





  /**


   * @dev fallback implementation.


   * Extracted to enable manual triggering.


   */


  function _fallback() internal {


    _willFallback();


    _delegate(_implementation());


  }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\Roles.sol
File type: .sol
pragma solidity ^0.5.0;





/**


 * @title Roles


 * @dev Library for managing addresses assigned to a Role.


 */


library Roles {


    struct Role {


        mapping (address => bool) bearer;


    }





    /**


     * @dev Give an account access to this role.


     */


    function add(Role storage role, address account) internal {


        require(!has(role, account), "Roles: account already has role");


        role.bearer[account] = true;


    }





    /**


     * @dev Remove an account's access to this role.


     */


    function remove(Role storage role, address account) internal {


        require(has(role, account), "Roles: account does not have role");


        role.bearer[account] = false;


    }





    /**


     * @dev Check if an account has this role.


     * @return bool


     */


    function has(Role storage role, address account) internal view returns (bool) {


        require(account != address(0), "Roles: account is the zero address");


        return role.bearer[account];


    }


}




--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\SafeDecimalMath.sol
File type: .sol
// SPDX-License-Identifier: MIT


pragma solidity ^0.6.8;





// Libraries


import "@openzeppelin/contracts/math/SafeMath.sol";





// https://docs.synthetix.io/contracts/SafeDecimalMath


library SafeDecimalMath {


    using SafeMath for uint;





    /* Number of decimal places in the representations. */


    uint8 public constant decimals = 18;


    uint8 public constant highPrecisionDecimals = 27;





    /* The number representing 1.0. */


    uint public constant UNIT = 10**uint(decimals);





    /* The number representing 1.0 for higher fidelity numbers. */


    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);


    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);





    /**


     * @return Provides an interface to UNIT.


     */


    function unit() external pure returns (uint) {


        return UNIT;


    }





    /**


     * @return Provides an interface to PRECISE_UNIT.


     */


    function preciseUnit() external pure returns (uint) {


        return PRECISE_UNIT;


    }





    /**


     * @return The result of multiplying x and y, interpreting the operands as fixed-point


     * decimals.


     *


     * @dev A unit factor is divided out after the product of x and y is evaluated,


     * so that product must be less than 2**256. As this is an integer division,


     * the internal division always rounds down. This helps save on gas. Rounding


     * is more expensive on gas.


     */


    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {


        /* Divide by UNIT to remove the extra factor introduced by the product. */


        return x.mul(y) / UNIT;


    }





    /**


     * @return The result of safely multiplying x and y, interpreting the operands


     * as fixed-point decimals of the specified precision unit.


     *


     * @dev The operands should be in the form of a the specified unit factor which will be


     * divided out after the product of x and y is evaluated, so that product must be


     * less than 2**256.


     *


     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.


     * Rounding is useful when you need to retain fidelity for small decimal numbers


     * (eg. small fractions or percentages).


     */


    function _multiplyDecimalRound(


        uint x,


        uint y,


        uint precisionUnit


    ) private pure returns (uint) {


        /* Divide by UNIT to remove the extra factor introduced by the product. */


        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);





        if (quotientTimesTen % 10 >= 5) {


            quotientTimesTen += 10;


        }





        return quotientTimesTen / 10;


    }





    /**


     * @return The result of safely multiplying x and y, interpreting the operands


     * as fixed-point decimals of a precise unit.


     *


     * @dev The operands should be in the precise unit factor which will be


     * divided out after the product of x and y is evaluated, so that product must be


     * less than 2**256.


     *


     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.


     * Rounding is useful when you need to retain fidelity for small decimal numbers


     * (eg. small fractions or percentages).


     */


    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {


        return _multiplyDecimalRound(x, y, PRECISE_UNIT);


    }





    /**


     * @return The result of safely multiplying x and y, interpreting the operands


     * as fixed-point decimals of a standard unit.


     *


     * @dev The operands should be in the standard unit factor which will be


     * divided out after the product of x and y is evaluated, so that product must be


     * less than 2**256.


     *


     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.


     * Rounding is useful when you need to retain fidelity for small decimal numbers


     * (eg. small fractions or percentages).


     */


    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {


        return _multiplyDecimalRound(x, y, UNIT);


    }





    /**


     * @return The result of safely dividing x and y. The return value is a high


     * precision decimal.


     *


     * @dev y is divided after the product of x and the standard precision unit


     * is evaluated, so the product of x and UNIT must be less than 2**256. As


     * this is an integer division, the result is always rounded down.


     * This helps save on gas. Rounding is more expensive on gas.


     */


    function divideDecimal(uint x, uint y) internal pure returns (uint) {


        /* Reintroduce the UNIT factor that will be divided out by y. */


        return x.mul(UNIT).div(y);


    }





    /**


     * @return The result of safely dividing x and y. The return value is as a rounded


     * decimal in the precision unit specified in the parameter.


     *


     * @dev y is divided after the product of x and the specified precision unit


     * is evaluated, so the product of x and the specified precision unit must


     * be less than 2**256. The result is rounded to the nearest increment.


     */


    function _divideDecimalRound(


        uint x,


        uint y,


        uint precisionUnit


    ) private pure returns (uint) {


        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);





        if (resultTimesTen % 10 >= 5) {


            resultTimesTen += 10;


        }





        return resultTimesTen / 10;


    }





    /**


     * @return The result of safely dividing x and y. The return value is as a rounded


     * standard precision decimal.


     *


     * @dev y is divided after the product of x and the standard precision unit


     * is evaluated, so the product of x and the standard precision unit must


     * be less than 2**256. The result is rounded to the nearest increment.


     */


    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {


        return _divideDecimalRound(x, y, UNIT);


    }





    /**


     * @return The result of safely dividing x and y. The return value is as a rounded


     * high precision decimal.


     *


     * @dev y is divided after the product of x and the high precision unit


     * is evaluated, so the product of x and the high precision unit must


     * be less than 2**256. The result is rounded to the nearest increment.


     */


    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {


        return _divideDecimalRound(x, y, PRECISE_UNIT);


    }





    /**


     * @dev Convert a standard decimal representation to a high precision one.


     */


    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {


        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);


    }





    /**


     * @dev Convert a high precision decimal to a standard decimal representation.


     */


    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {


        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);





        if (quotientTimesTen % 10 >= 5) {


            quotientTimesTen += 10;


        }





        return quotientTimesTen / 10;


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\SafeERC20.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





import "./IERC20.sol";


import "../../math/SafeMath.sol";


import "../../utils/Address.sol";





/**


 * @title SafeERC20


 * @dev Wrappers around ERC20 operations that throw on failure (when the token


 * contract returns false). Tokens that return no value (and instead revert or


 * throw on failure) are also supported, non-reverting calls are assumed to be


 * successful.


 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,


 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.


 */


library SafeERC20 {


    using SafeMath for uint256;


    using Address for address;





    function safeTransfer(IERC20 token, address to, uint256 value) internal {


        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));


    }





    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {


        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));


    }





    /**


     * @dev Deprecated. This function has issues similar to the ones found in


     * {IERC20-approve}, and its usage is discouraged.


     *


     * Whenever possible, use {safeIncreaseAllowance} and


     * {safeDecreaseAllowance} instead.


     */


    function safeApprove(IERC20 token, address spender, uint256 value) internal {


        // safeApprove should only be called when setting an initial allowance,


        // or when resetting it to zero. To increase and decrease it, use


        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'


        // solhint-disable-next-line max-line-length


        require((value == 0) || (token.allowance(address(this), spender) == 0),


            "SafeERC20: approve from non-zero to non-zero allowance"


        );


        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));


    }





    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {


        uint256 newAllowance = token.allowance(address(this), spender).add(value);


        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));


    }





    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {


        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");


        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));


    }





    /**


     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement


     * on the return value: the return value is optional (but if data is returned, it must not be false).


     * @param token The token targeted by the call.


     * @param data The call data (encoded using abi.encode or one of its variants).


     */


    function _callOptionalReturn(IERC20 token, bytes memory data) private {


        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since


        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that


        // the target address contains contract code and also asserts for success in the low-level call.





        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");


        if (returndata.length > 0) { // Return data is optional


            // solhint-disable-next-line max-line-length


            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");


        }


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\SafeMath.sol
File type: .sol
// SPDX-License-Identifier: MIT





pragma solidity ^0.6.0;





/**


 * @dev Wrappers over Solidity's arithmetic operations with added overflow


 * checks.


 *


 * Arithmetic operations in Solidity wrap on overflow. This can easily result


 * in bugs, because programmers usually assume that an overflow raises an


 * error, which is the standard behavior in high level programming languages.


 * `SafeMath` restores this intuition by reverting the transaction when an


 * operation overflows.


 *


 * Using this library instead of the unchecked operations eliminates an entire


 * class of bugs, so it's recommended to use it always.


 */


library SafeMath {


    /**


     * @dev Returns the addition of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `+` operator.


     *


     * Requirements:


     *


     * - Addition cannot overflow.


     */


    function add(uint256 a, uint256 b) internal pure returns (uint256) {


        uint256 c = a + b;


        require(c >= a, "SafeMath: addition overflow");





        return c;


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting on


     * overflow (when the result is negative).


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {


        return sub(a, b, "SafeMath: subtraction overflow");


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on


     * overflow (when the result is negative).


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b <= a, errorMessage);


        uint256 c = a - b;





        return c;


    }





    /**


     * @dev Returns the multiplication of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `*` operator.


     *


     * Requirements:


     *


     * - Multiplication cannot overflow.


     */


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {


        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the


        // benefit is lost if 'b' is also tested.


        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522


        if (a == 0) {


            return 0;


        }





        uint256 c = a * b;


        require(c / a == b, "SafeMath: multiplication overflow");





        return c;


    }





    /**


     * @dev Returns the integer division of two unsigned integers. Reverts on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b) internal pure returns (uint256) {


        return div(a, b, "SafeMath: division by zero");


    }





    /**


     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b > 0, errorMessage);


        uint256 c = a / b;


        // assert(a == b * c + a % b); // There is no case in which this doesn't hold





        return c;


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * Reverts when dividing by zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {


        return mod(a, b, "SafeMath: modulo by zero");


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * Reverts with custom message when dividing by zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b != 0, errorMessage);


        return a % b;


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\SwapPair.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2021-11-14


*/





// Sources flattened with hardhat v2.6.7 https://hardhat.org





// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.3.2





// SPDX-License-Identifier: MIT





pragma solidity ^0.8.0;





// CAUTION


// This version of SafeMath should only be used with Solidity 0.8 or later,


// because it relies on the compiler's built in overflow checks.





/**


 * @dev Wrappers over Solidity's arithmetic operations.


 *


 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler


 * now has built in overflow checking.


 */


library SafeMath {


    /**


     * @dev Returns the addition of two unsigned integers, with an overflow flag.


     *


     * _Available since v3.4._


     */


    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        unchecked {


            uint256 c = a + b;


            if (c < a) return (false, 0);


            return (true, c);


        }


    }





    /**


     * @dev Returns the substraction of two unsigned integers, with an overflow flag.


     *


     * _Available since v3.4._


     */


    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        unchecked {


            if (b > a) return (false, 0);


            return (true, a - b);


        }


    }





    /**


     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.


     *


     * _Available since v3.4._


     */


    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        unchecked {


            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the


            // benefit is lost if 'b' is also tested.


            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522


            if (a == 0) return (true, 0);


            uint256 c = a * b;


            if (c / a != b) return (false, 0);


            return (true, c);


        }


    }





    /**


     * @dev Returns the division of two unsigned integers, with a division by zero flag.


     *


     * _Available since v3.4._


     */


    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        unchecked {


            if (b == 0) return (false, 0);


            return (true, a / b);


        }


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.


     *


     * _Available since v3.4._


     */


    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        unchecked {


            if (b == 0) return (false, 0);


            return (true, a % b);


        }


    }





    /**


     * @dev Returns the addition of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `+` operator.


     *


     * Requirements:


     *


     * - Addition cannot overflow.


     */


    function add(uint256 a, uint256 b) internal pure returns (uint256) {


        return a + b;


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting on


     * overflow (when the result is negative).


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {


        return a - b;


    }





    /**


     * @dev Returns the multiplication of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `*` operator.


     *


     * Requirements:


     *


     * - Multiplication cannot overflow.


     */


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {


        return a * b;


    }





    /**


     * @dev Returns the integer division of two unsigned integers, reverting on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator.


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b) internal pure returns (uint256) {


        return a / b;


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * reverting when dividing by zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {


        return a % b;


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on


     * overflow (when the result is negative).


     *


     * CAUTION: This function is deprecated because it requires allocating memory for the error


     * message unnecessarily. For custom revert reasons use {trySub}.


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(


        uint256 a,


        uint256 b,


        string memory errorMessage


    ) internal pure returns (uint256) {


        unchecked {


            require(b <= a, errorMessage);


            return a - b;


        }


    }





    /**


     * @dev Returns the integer division of two unsigned integers, reverting with custom message on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(


        uint256 a,


        uint256 b,


        string memory errorMessage


    ) internal pure returns (uint256) {


        unchecked {


            require(b > 0, errorMessage);


            return a / b;


        }


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * reverting with custom message when dividing by zero.


     *


     * CAUTION: This function is deprecated because it requires allocating memory for the error


     * message unnecessarily. For custom revert reasons use {tryMod}.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(


        uint256 a,


        uint256 b,


        string memory errorMessage


    ) internal pure returns (uint256) {


        unchecked {


            require(b > 0, errorMessage);


            return a % b;


        }


    }


}








// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Interface of the ERC20 standard as defined in the EIP.


 */


interface IERC20 {


    /**


     * @dev Returns the amount of tokens in existence.


     */


    function totalSupply() external view returns (uint256);





    /**


     * @dev Returns the amount of tokens owned by `account`.


     */


    function balanceOf(address account) external view returns (uint256);





    /**


     * @dev Moves `amount` tokens from the caller's account to `recipient`.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transfer(address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Returns the remaining number of tokens that `spender` will be


     * allowed to spend on behalf of `owner` through {transferFrom}. This is


     * zero by default.


     *


     * This value changes when {approve} or {transferFrom} are called.


     */


    function allowance(address owner, address spender) external view returns (uint256);





    /**


     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * IMPORTANT: Beware that changing an allowance with this method brings the risk


     * that someone may use both the old and the new allowance by unfortunate


     * transaction ordering. One possible solution to mitigate this race


     * condition is to first reduce the spender's allowance to 0 and set the


     * desired value afterwards:


     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


     *


     * Emits an {Approval} event.


     */


    function approve(address spender, uint256 amount) external returns (bool);





    /**


     * @dev Moves `amount` tokens from `sender` to `recipient` using the


     * allowance mechanism. `amount` is then deducted from the caller's


     * allowance.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transferFrom(


        address sender,


        address recipient,


        uint256 amount


    ) external returns (bool);





    /**


     * @dev Emitted when `value` tokens are moved from one account (`from`) to


     * another (`to`).


     *


     * Note that `value` may be zero.


     */


    event Transfer(address indexed from, address indexed to, uint256 value);





    /**


     * @dev Emitted when the allowance of a `spender` for an `owner` is set by


     * a call to {approve}. `value` is the new allowance.


     */


    event Approval(address indexed owner, address indexed spender, uint256 value);


}








// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Interface for the optional metadata functions from the ERC20 standard.


 *


 * _Available since v4.1._


 */


interface IERC20Metadata is IERC20 {


    /**


     * @dev Returns the name of the token.


     */


    function name() external view returns (string memory);





    /**


     * @dev Returns the symbol of the token.


     */


    function symbol() external view returns (string memory);





    /**


     * @dev Returns the decimals places of the token.


     */


    function decimals() external view returns (uint8);


}








// File @openzeppelin/contracts/utils/Context.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Provides information about the current execution context, including the


 * sender of the transaction and its data. While these are generally available


 * via msg.sender and msg.data, they should not be accessed in such a direct


 * manner, since when dealing with meta-transactions the account sending and


 * paying for execution may not be the actual sender (as far as an application


 * is concerned).


 *


 * This contract is only required for intermediate, library-like contracts.


 */


abstract contract Context {


    function _msgSender() internal view virtual returns (address) {


        return msg.sender;


    }





    function _msgData() internal view virtual returns (bytes calldata) {


        return msg.data;


    }


}








// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;











/**


 * @dev Implementation of the {IERC20} interface.


 *


 * This implementation is agnostic to the way tokens are created. This means


 * that a supply mechanism has to be added in a derived contract using {_mint}.


 * For a generic mechanism see {ERC20PresetMinterPauser}.


 *


 * TIP: For a detailed writeup see our guide


 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How


 * to implement supply mechanisms].


 *


 * We have followed general OpenZeppelin Contracts guidelines: functions revert


 * instead returning `false` on failure. This behavior is nonetheless


 * conventional and does not conflict with the expectations of ERC20


 * applications.


 *


 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.


 * This allows applications to reconstruct the allowance for all accounts just


 * by listening to said events. Other implementations of the EIP may not emit


 * these events, as it isn't required by the specification.


 *


 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}


 * functions have been added to mitigate the well-known issues around setting


 * allowances. See {IERC20-approve}.


 */


contract ERC20 is Context, IERC20, IERC20Metadata {


    mapping(address => uint256) private _balances;





    mapping(address => mapping(address => uint256)) private _allowances;





    uint256 private _totalSupply;





    string private _name;


    string private _symbol;





    /**


     * @dev Sets the values for {name} and {symbol}.


     *


     * The default value of {decimals} is 18. To select a different value for


     * {decimals} you should overload it.


     *


     * All two of these values are immutable: they can only be set once during


     * construction.


     */


    constructor(string memory name_, string memory symbol_) {


        _name = name_;


        _symbol = symbol_;


    }





    /**


     * @dev Returns the name of the token.


     */


    function name() public view virtual override returns (string memory) {


        return _name;


    }





    /**


     * @dev Returns the symbol of the token, usually a shorter version of the


     * name.


     */


    function symbol() public view virtual override returns (string memory) {


        return _symbol;


    }





    /**


     * @dev Returns the number of decimals used to get its user representation.


     * For example, if `decimals` equals `2`, a balance of `505` tokens should


     * be displayed to a user as `5.05` (`505 / 10 ** 2`).


     *


     * Tokens usually opt for a value of 18, imitating the relationship between


     * Ether and Wei. This is the value {ERC20} uses, unless this function is


     * overridden;


     *


     * NOTE: This information is only used for _display_ purposes: it in


     * no way affects any of the arithmetic of the contract, including


     * {IERC20-balanceOf} and {IERC20-transfer}.


     */


    function decimals() public view virtual override returns (uint8) {


        return 18;


    }





    /**


     * @dev See {IERC20-totalSupply}.


     */


    function totalSupply() public view virtual override returns (uint256) {


        return _totalSupply;


    }





    /**


     * @dev See {IERC20-balanceOf}.


     */


    function balanceOf(address account) public view virtual override returns (uint256) {


        return _balances[account];


    }





    /**


     * @dev See {IERC20-transfer}.


     *


     * Requirements:


     *


     * - `recipient` cannot be the zero address.


     * - the caller must have a balance of at least `amount`.


     */


    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(_msgSender(), recipient, amount);


        return true;


    }





    /**


     * @dev See {IERC20-allowance}.


     */


    function allowance(address owner, address spender) public view virtual override returns (uint256) {


        return _allowances[owner][spender];


    }





    /**


     * @dev See {IERC20-approve}.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function approve(address spender, uint256 amount) public virtual override returns (bool) {


        _approve(_msgSender(), spender, amount);


        return true;


    }





    /**


     * @dev See {IERC20-transferFrom}.


     *


     * Emits an {Approval} event indicating the updated allowance. This is not


     * required by the EIP. See the note at the beginning of {ERC20}.


     *


     * Requirements:


     *


     * - `sender` and `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     * - the caller must have allowance for ``sender``'s tokens of at least


     * `amount`.


     */


    function transferFrom(


        address sender,


        address recipient,


        uint256 amount


    ) public virtual override returns (bool) {


        _transfer(sender, recipient, amount);





        uint256 currentAllowance = _allowances[sender][_msgSender()];


        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");


        unchecked {


            _approve(sender, _msgSender(), currentAllowance - amount);


        }





        return true;


    }





    /**


     * @dev Atomically increases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);


        return true;


    }





    /**


     * @dev Atomically decreases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     * - `spender` must have allowance for the caller of at least


     * `subtractedValue`.


     */


    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {


        uint256 currentAllowance = _allowances[_msgSender()][spender];


        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");


        unchecked {


            _approve(_msgSender(), spender, currentAllowance - subtractedValue);


        }





        return true;


    }





    /**


     * @dev Moves `amount` of tokens from `sender` to `recipient`.


     *


     * This internal function is equivalent to {transfer}, and can be used to


     * e.g. implement automatic token fees, slashing mechanisms, etc.


     *


     * Emits a {Transfer} event.


     *


     * Requirements:


     *


     * - `sender` cannot be the zero address.


     * - `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     */


    function _transfer(


        address sender,


        address recipient,


        uint256 amount


    ) internal virtual {


        require(sender != address(0), "ERC20: transfer from the zero address");


        require(recipient != address(0), "ERC20: transfer to the zero address");





        _beforeTokenTransfer(sender, recipient, amount);





        uint256 senderBalance = _balances[sender];


        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");


        unchecked {


            _balances[sender] = senderBalance - amount;


        }


        _balances[recipient] += amount;





        emit Transfer(sender, recipient, amount);





        _afterTokenTransfer(sender, recipient, amount);


    }





    /** @dev Creates `amount` tokens and assigns them to `account`, increasing


     * the total supply.


     *


     * Emits a {Transfer} event with `from` set to the zero address.


     *


     * Requirements:


     *


     * - `account` cannot be the zero address.


     */


    function _mint(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: mint to the zero address");





        _beforeTokenTransfer(address(0), account, amount);





        _totalSupply += amount;


        _balances[account] += amount;


        emit Transfer(address(0), account, amount);





        _afterTokenTransfer(address(0), account, amount);


    }





    /**


     * @dev Destroys `amount` tokens from `account`, reducing the


     * total supply.


     *


     * Emits a {Transfer} event with `to` set to the zero address.


     *


     * Requirements:


     *


     * - `account` cannot be the zero address.


     * - `account` must have at least `amount` tokens.


     */


    function _burn(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: burn from the zero address");





        _beforeTokenTransfer(account, address(0), amount);





        uint256 accountBalance = _balances[account];


        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");


        unchecked {


            _balances[account] = accountBalance - amount;


        }


        _totalSupply -= amount;





        emit Transfer(account, address(0), amount);





        _afterTokenTransfer(account, address(0), amount);


    }





    /**


     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.


     *


     * This internal function is equivalent to `approve`, and can be used to


     * e.g. set automatic allowances for certain subsystems, etc.


     *


     * Emits an {Approval} event.


     *


     * Requirements:


     *


     * - `owner` cannot be the zero address.


     * - `spender` cannot be the zero address.


     */


    function _approve(


        address owner,


        address spender,


        uint256 amount


    ) internal virtual {


        require(owner != address(0), "ERC20: approve from the zero address");


        require(spender != address(0), "ERC20: approve to the zero address");





        _allowances[owner][spender] = amount;


        emit Approval(owner, spender, amount);


    }





    /**


     * @dev Hook that is called before any transfer of tokens. This includes


     * minting and burning.


     *


     * Calling conditions:


     *


     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens


     * will be transferred to `to`.


     * - when `from` is zero, `amount` tokens will be minted for `to`.


     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.


     * - `from` and `to` are never both zero.


     *


     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].


     */


    function _beforeTokenTransfer(


        address from,


        address to,


        uint256 amount


    ) internal virtual {}





    /**


     * @dev Hook that is called after any transfer of tokens. This includes


     * minting and burning.


     *


     * Calling conditions:


     *


     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens


     * has been transferred to `to`.


     * - when `from` is zero, `amount` tokens have been minted for `to`.


     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.


     * - `from` and `to` are never both zero.


     *


     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].


     */


    function _afterTokenTransfer(


        address from,


        address to,


        uint256 amount


    ) internal virtual {}


}








// File @openzeppelin/contracts/utils/Address.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Collection of functions related to the address type


 */


library Address {


    /**


     * @dev Returns true if `account` is a contract.


     *


     * [IMPORTANT]


     * ====


     * It is unsafe to assume that an address for which this function returns


     * false is an externally-owned account (EOA) and not a contract.


     *


     * Among others, `isContract` will return false for the following


     * types of addresses:


     *


     *  - an externally-owned account


     *  - a contract in construction


     *  - an address where a contract will be created


     *  - an address where a contract lived, but was destroyed


     * ====


     */


    function isContract(address account) internal view returns (bool) {


        // This method relies on extcodesize, which returns 0 for contracts in


        // construction, since the code is only stored at the end of the


        // constructor execution.





        uint256 size;


        assembly {


            size := extcodesize(account)


        }


        return size > 0;


    }





    /**


     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to


     * `recipient`, forwarding all available gas and reverting on errors.


     *


     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost


     * of certain opcodes, possibly making contracts go over the 2300 gas limit


     * imposed by `transfer`, making them unable to receive funds via


     * `transfer`. {sendValue} removes this limitation.


     *


     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].


     *


     * IMPORTANT: because control is transferred to `recipient`, care must be


     * taken to not create reentrancy vulnerabilities. Consider using


     * {ReentrancyGuard} or the


     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].


     */


    function sendValue(address payable recipient, uint256 amount) internal {


        require(address(this).balance >= amount, "Address: insufficient balance");





        (bool success, ) = recipient.call{value: amount}("");


        require(success, "Address: unable to send value, recipient may have reverted");


    }





    /**


     * @dev Performs a Solidity function call using a low level `call`. A


     * plain `call` is an unsafe replacement for a function call: use this


     * function instead.


     *


     * If `target` reverts with a revert reason, it is bubbled up by this


     * function (like regular Solidity function calls).


     *


     * Returns the raw returned data. To convert to the expected return value,


     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].


     *


     * Requirements:


     *


     * - `target` must be a contract.


     * - calling `target` with `data` must not revert.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data) internal returns (bytes memory) {


        return functionCall(target, data, "Address: low-level call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with


     * `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCall(


        address target,


        bytes memory data,


        string memory errorMessage


    ) internal returns (bytes memory) {


        return functionCallWithValue(target, data, 0, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but also transferring `value` wei to `target`.


     *


     * Requirements:


     *


     * - the calling contract must have an ETH balance of at least `value`.


     * - the called Solidity function must be `payable`.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(


        address target,


        bytes memory data,


        uint256 value


    ) internal returns (bytes memory) {


        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");


    }





    /**


     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but


     * with `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(


        address target,


        bytes memory data,


        uint256 value,


        string memory errorMessage


    ) internal returns (bytes memory) {


        require(address(this).balance >= value, "Address: insufficient balance for call");


        require(isContract(target), "Address: call to non-contract");





        (bool success, bytes memory returndata) = target.call{value: value}(data);


        return verifyCallResult(success, returndata, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but performing a static call.


     *


     * _Available since v3.3._


     */


    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {


        return functionStaticCall(target, data, "Address: low-level static call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],


     * but performing a static call.


     *


     * _Available since v3.3._


     */


    function functionStaticCall(


        address target,


        bytes memory data,


        string memory errorMessage


    ) internal view returns (bytes memory) {


        require(isContract(target), "Address: static call to non-contract");





        (bool success, bytes memory returndata) = target.staticcall(data);


        return verifyCallResult(success, returndata, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but performing a delegate call.


     *


     * _Available since v3.4._


     */


    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {


        return functionDelegateCall(target, data, "Address: low-level delegate call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],


     * but performing a delegate call.


     *


     * _Available since v3.4._


     */


    function functionDelegateCall(


        address target,


        bytes memory data,


        string memory errorMessage


    ) internal returns (bytes memory) {


        require(isContract(target), "Address: delegate call to non-contract");





        (bool success, bytes memory returndata) = target.delegatecall(data);


        return verifyCallResult(success, returndata, errorMessage);


    }





    /**


     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the


     * revert reason using the provided one.


     *


     * _Available since v4.3._


     */


    function verifyCallResult(


        bool success,


        bytes memory returndata,


        string memory errorMessage


    ) internal pure returns (bytes memory) {


        if (success) {


            return returndata;


        } else {


            // Look for revert reason and bubble it up if present


            if (returndata.length > 0) {


                // The easiest way to bubble the revert reason is using memory via assembly





                assembly {


                    let returndata_size := mload(returndata)


                    revert(add(32, returndata), returndata_size)


                }


            } else {


                revert(errorMessage);


            }


        }


    }


}








// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;








/**


 * @title SafeERC20


 * @dev Wrappers around ERC20 operations that throw on failure (when the token


 * contract returns false). Tokens that return no value (and instead revert or


 * throw on failure) are also supported, non-reverting calls are assumed to be


 * successful.


 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,


 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.


 */


library SafeERC20 {


    using Address for address;





    function safeTransfer(


        IERC20 token,


        address to,


        uint256 value


    ) internal {


        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));


    }





    function safeTransferFrom(


        IERC20 token,


        address from,


        address to,


        uint256 value


    ) internal {


        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));


    }





    /**


     * @dev Deprecated. This function has issues similar to the ones found in


     * {IERC20-approve}, and its usage is discouraged.


     *


     * Whenever possible, use {safeIncreaseAllowance} and


     * {safeDecreaseAllowance} instead.


     */


    function safeApprove(


        IERC20 token,


        address spender,


        uint256 value


    ) internal {


        // safeApprove should only be called when setting an initial allowance,


        // or when resetting it to zero. To increase and decrease it, use


        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'


        require(


            (value == 0) || (token.allowance(address(this), spender) == 0),


            "SafeERC20: approve from non-zero to non-zero allowance"


        );


        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));


    }





    function safeIncreaseAllowance(


        IERC20 token,


        address spender,


        uint256 value


    ) internal {


        uint256 newAllowance = token.allowance(address(this), spender) + value;


        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));


    }





    function safeDecreaseAllowance(


        IERC20 token,


        address spender,


        uint256 value


    ) internal {


        unchecked {


            uint256 oldAllowance = token.allowance(address(this), spender);


            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");


            uint256 newAllowance = oldAllowance - value;


            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));


        }


    }





    /**


     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement


     * on the return value: the return value is optional (but if data is returned, it must not be false).


     * @param token The token targeted by the call.


     * @param data The call data (encoded using abi.encode or one of its variants).


     */


    function _callOptionalReturn(IERC20 token, bytes memory data) private {


        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since


        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that


        // the target address contains contract code and also asserts for success in the low-level call.





        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");


        if (returndata.length > 0) {


            // Return data is optional


            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");


        }


    }


}








// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Library for managing


 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive


 * types.


 *


 * Sets have the following properties:


 *


 * - Elements are added, removed, and checked for existence in constant time


 * (O(1)).


 * - Elements are enumerated in O(n). No guarantees are made on the ordering.


 *


 * ```


 * contract Example {


 *     // Add the library methods


 *     using EnumerableSet for EnumerableSet.AddressSet;


 *


 *     // Declare a set state variable


 *     EnumerableSet.AddressSet private mySet;


 * }


 * ```


 *


 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)


 * and `uint256` (`UintSet`) are supported.


 */


library EnumerableSet {


    // To implement this library for multiple types with as little code


    // repetition as possible, we write it in terms of a generic Set type with


    // bytes32 values.


    // The Set implementation uses private functions, and user-facing


    // implementations (such as AddressSet) are just wrappers around the


    // underlying Set.


    // This means that we can only create new EnumerableSets for types that fit


    // in bytes32.





    struct Set {


        // Storage of set values


        bytes32[] _values;


        // Position of the value in the `values` array, plus 1 because index 0


        // means a value is not in the set.


        mapping(bytes32 => uint256) _indexes;


    }





    /**


     * @dev Add a value to a set. O(1).


     *


     * Returns true if the value was added to the set, that is if it was not


     * already present.


     */


    function _add(Set storage set, bytes32 value) private returns (bool) {


        if (!_contains(set, value)) {


            set._values.push(value);


            // The value is stored at length-1, but we add 1 to all indexes


            // and use 0 as a sentinel value


            set._indexes[value] = set._values.length;


            return true;


        } else {


            return false;


        }


    }





    /**


     * @dev Removes a value from a set. O(1).


     *


     * Returns true if the value was removed from the set, that is if it was


     * present.


     */


    function _remove(Set storage set, bytes32 value) private returns (bool) {


        // We read and store the value's index to prevent multiple reads from the same storage slot


        uint256 valueIndex = set._indexes[value];





        if (valueIndex != 0) {


            // Equivalent to contains(set, value)


            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in


            // the array, and then remove the last element (sometimes called as 'swap and pop').


            // This modifies the order of the array, as noted in {at}.





            uint256 toDeleteIndex = valueIndex - 1;


            uint256 lastIndex = set._values.length - 1;





            if (lastIndex != toDeleteIndex) {


                bytes32 lastvalue = set._values[lastIndex];





                // Move the last value to the index where the value to delete is


                set._values[toDeleteIndex] = lastvalue;


                // Update the index for the moved value


                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex


            }





            // Delete the slot where the moved value was stored


            set._values.pop();





            // Delete the index for the deleted slot


            delete set._indexes[value];





            return true;


        } else {


            return false;


        }


    }





    /**


     * @dev Returns true if the value is in the set. O(1).


     */


    function _contains(Set storage set, bytes32 value) private view returns (bool) {


        return set._indexes[value] != 0;


    }





    /**


     * @dev Returns the number of values on the set. O(1).


     */


    function _length(Set storage set) private view returns (uint256) {


        return set._values.length;


    }





    /**


     * @dev Returns the value stored at position `index` in the set. O(1).


     *


     * Note that there are no guarantees on the ordering of values inside the


     * array, and it may change when more values are added or removed.


     *


     * Requirements:


     *


     * - `index` must be strictly less than {length}.


     */


    function _at(Set storage set, uint256 index) private view returns (bytes32) {


        return set._values[index];


    }





    /**


     * @dev Return the entire set in an array


     *


     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed


     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that


     * this function has an unbounded cost, and using it as part of a state-changing function may render the function


     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.


     */


    function _values(Set storage set) private view returns (bytes32[] memory) {


        return set._values;


    }





    // Bytes32Set





    struct Bytes32Set {


        Set _inner;


    }





    /**


     * @dev Add a value to a set. O(1).


     *


     * Returns true if the value was added to the set, that is if it was not


     * already present.


     */


    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {


        return _add(set._inner, value);


    }





    /**


     * @dev Removes a value from a set. O(1).


     *


     * Returns true if the value was removed from the set, that is if it was


     * present.


     */


    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {


        return _remove(set._inner, value);


    }





    /**


     * @dev Returns true if the value is in the set. O(1).


     */


    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {


        return _contains(set._inner, value);


    }





    /**


     * @dev Returns the number of values in the set. O(1).


     */


    function length(Bytes32Set storage set) internal view returns (uint256) {


        return _length(set._inner);


    }





    /**


     * @dev Returns the value stored at position `index` in the set. O(1).


     *


     * Note that there are no guarantees on the ordering of values inside the


     * array, and it may change when more values are added or removed.


     *


     * Requirements:


     *


     * - `index` must be strictly less than {length}.


     */


    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {


        return _at(set._inner, index);


    }





    /**


     * @dev Return the entire set in an array


     *


     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed


     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that


     * this function has an unbounded cost, and using it as part of a state-changing function may render the function


     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.


     */


    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {


        return _values(set._inner);


    }





    // AddressSet





    struct AddressSet {


        Set _inner;


    }





    /**


     * @dev Add a value to a set. O(1).


     *


     * Returns true if the value was added to the set, that is if it was not


     * already present.


     */


    function add(AddressSet storage set, address value) internal returns (bool) {


        return _add(set._inner, bytes32(uint256(uint160(value))));


    }





    /**


     * @dev Removes a value from a set. O(1).


     *


     * Returns true if the value was removed from the set, that is if it was


     * present.


     */


    function remove(AddressSet storage set, address value) internal returns (bool) {


        return _remove(set._inner, bytes32(uint256(uint160(value))));


    }





    /**


     * @dev Returns true if the value is in the set. O(1).


     */


    function contains(AddressSet storage set, address value) internal view returns (bool) {


        return _contains(set._inner, bytes32(uint256(uint160(value))));


    }





    /**


     * @dev Returns the number of values in the set. O(1).


     */


    function length(AddressSet storage set) internal view returns (uint256) {


        return _length(set._inner);


    }





    /**


     * @dev Returns the value stored at position `index` in the set. O(1).


     *


     * Note that there are no guarantees on the ordering of values inside the


     * array, and it may change when more values are added or removed.


     *


     * Requirements:


     *


     * - `index` must be strictly less than {length}.


     */


    function at(AddressSet storage set, uint256 index) internal view returns (address) {


        return address(uint160(uint256(_at(set._inner, index))));


    }





    /**


     * @dev Return the entire set in an array


     *


     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed


     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that


     * this function has an unbounded cost, and using it as part of a state-changing function may render the function


     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.


     */


    function values(AddressSet storage set) internal view returns (address[] memory) {


        bytes32[] memory store = _values(set._inner);


        address[] memory result;





        assembly {


            result := store


        }





        return result;


    }





    // UintSet





    struct UintSet {


        Set _inner;


    }





    /**


     * @dev Add a value to a set. O(1).


     *


     * Returns true if the value was added to the set, that is if it was not


     * already present.


     */


    function add(UintSet storage set, uint256 value) internal returns (bool) {


        return _add(set._inner, bytes32(value));


    }





    /**


     * @dev Removes a value from a set. O(1).


     *


     * Returns true if the value was removed from the set, that is if it was


     * present.


     */


    function remove(UintSet storage set, uint256 value) internal returns (bool) {


        return _remove(set._inner, bytes32(value));


    }





    /**


     * @dev Returns true if the value is in the set. O(1).


     */


    function contains(UintSet storage set, uint256 value) internal view returns (bool) {


        return _contains(set._inner, bytes32(value));


    }





    /**


     * @dev Returns the number of values on the set. O(1).


     */


    function length(UintSet storage set) internal view returns (uint256) {


        return _length(set._inner);


    }





    /**


     * @dev Returns the value stored at position `index` in the set. O(1).


     *


     * Note that there are no guarantees on the ordering of values inside the


     * array, and it may change when more values are added or removed.


     *


     * Requirements:


     *


     * - `index` must be strictly less than {length}.


     */


    function at(UintSet storage set, uint256 index) internal view returns (uint256) {


        return uint256(_at(set._inner, index));


    }





    /**


     * @dev Return the entire set in an array


     *


     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed


     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that


     * this function has an unbounded cost, and using it as part of a state-changing function may render the function


     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.


     */


    function values(UintSet storage set) internal view returns (uint256[] memory) {


        bytes32[] memory store = _values(set._inner);


        uint256[] memory result;





        assembly {


            result := store


        }





        return result;


    }


}








// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Contract module which provides a basic access control mechanism, where


 * there is an account (an owner) that can be granted exclusive access to


 * specific functions.


 *


 * By default, the owner account will be the one that deploys the contract. This


 * can later be changed with {transferOwnership}.


 *


 * This module is used through inheritance. It will make available the modifier


 * `onlyOwner`, which can be applied to your functions to restrict their use to


 * the owner.


 */


abstract contract Ownable is Context {


    address private _owner;





    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);





    /**


     * @dev Initializes the contract setting the deployer as the initial owner.


     */


    constructor() {


        _setOwner(_msgSender());


    }





    /**


     * @dev Returns the address of the current owner.


     */


    function owner() public view virtual returns (address) {


        return _owner;


    }





    /**


     * @dev Throws if called by any account other than the owner.


     */


    modifier onlyOwner() {


        require(owner() == _msgSender(), "Ownable: caller is not the owner");


        _;


    }





    /**


     * @dev Leaves the contract without owner. It will not be possible to call


     * `onlyOwner` functions anymore. Can only be called by the current owner.


     *


     * NOTE: Renouncing ownership will leave the contract without an owner,


     * thereby removing any functionality that is only available to the owner.


     */


    function renounceOwnership() public virtual onlyOwner {


        _setOwner(address(0));


    }





    /**


     * @dev Transfers ownership of the contract to a new account (`newOwner`).


     * Can only be called by the current owner.


     */


    function transferOwnership(address newOwner) public virtual onlyOwner {


        require(newOwner != address(0), "Ownable: new owner is the zero address");


        _setOwner(newOwner);


    }





    function _setOwner(address newOwner) private {


        address oldOwner = _owner;


        _owner = newOwner;


        emit OwnershipTransferred(oldOwner, newOwner);


    }


}








// File contracts/interface/IBoringToken.sol





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





interface IBoringToken is IERC20 {


    function mint(address to, uint256 amount) external;





    function burn(address from, uint256 amount) external;


}








// File contracts/twoway/struct.sol





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





struct SwapInParams {


    address to;


    uint amount1;


    uint feeAmountFix; 


    uint remainAmount;


    address feeToDev;


    uint chainID;


}








// File contracts/interface/ISwapPair.sol





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





interface ISwapPair {


    function mint(address to) external returns (uint256 liquidity);





    function burn(


        address from,


        address to,


        uint256 amount,


        address feeTo,


        uint256 feeAmount


    )


        external


        returns (


            uint256,


            uint256[] memory,


            uint256[] memory


        );





    function token0() external returns (address);





    function swapOut(


        address to,


        uint256 amount,


        uint256 chainid


    ) external; // direction: token0 -> token1 or token1 -> token0





    // function swapIn(


    //     address to,


    //     uint256 amount,


    //     uint256 feeAmountFix,


    //     uint256 remainAmount,


    //     address feeToDev,


    //     uint256 chainid


    // ) external;








    function swapIn(


        SwapInParams memory params


    ) external;





    function getReserves(uint256 chainid) external view returns (uint256, uint256);





    function update() external;





    function diff0() external returns (uint256);





    function addChainIDs(uint256[] memory chainids) external;





    function removeChainIDs(uint256[] memory chainids) external;


}








// File contracts/lib/SafeDecimalMath.sol





// sp-License-Identifier: MIT


pragma solidity ^0.8.0;





// Libraries





// https://docs.synthetix.io/contracts/SafeDecimalMath


library SafeDecimalMath {


    using SafeMath for uint;





    /* Number of decimal places in the representations. */


    uint8 public constant decimals = 18;


    uint8 public constant highPrecisionDecimals = 27;





    /* The number representing 1.0. */


    uint public constant UNIT = 10**uint(decimals);





    /* The number representing 1.0 for higher fidelity numbers. */


    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);


    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);





    /**


     * @return Provides an interface to UNIT.


     */


    function unit() external pure returns (uint) {


        return UNIT;


    }





    /**


     * @return Provides an interface to PRECISE_UNIT.


     */


    function preciseUnit() external pure returns (uint) {


        return PRECISE_UNIT;


    }





    /**


     * @return The result of multiplying x and y, interpreting the operands as fixed-point


     * decimals.


     *


     * @dev A unit factor is divided out after the product of x and y is evaluated,


     * so that product must be less than 2**256. As this is an integer division,


     * the internal division always rounds down. This helps save on gas. Rounding


     * is more expensive on gas.


     */


    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {


        /* Divide by UNIT to remove the extra factor introduced by the product. */


        return x.mul(y) / UNIT;


    }





    /**


     * @return The result of safely multiplying x and y, interpreting the operands


     * as fixed-point decimals of the specified precision unit.


     *


     * @dev The operands should be in the form of a the specified unit factor which will be


     * divided out after the product of x and y is evaluated, so that product must be


     * less than 2**256.


     *


     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.


     * Rounding is useful when you need to retain fidelity for small decimal numbers


     * (eg. small fractions or percentages).


     */


    function _multiplyDecimalRound(


        uint x,


        uint y,


        uint precisionUnit


    ) private pure returns (uint) {


        /* Divide by UNIT to remove the extra factor introduced by the product. */


        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);





        if (quotientTimesTen % 10 >= 5) {


            quotientTimesTen += 10;


        }





        return quotientTimesTen / 10;


    }





    /**


     * @return The result of safely multiplying x and y, interpreting the operands


     * as fixed-point decimals of a precise unit.


     *


     * @dev The operands should be in the precise unit factor which will be


     * divided out after the product of x and y is evaluated, so that product must be


     * less than 2**256.


     *


     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.


     * Rounding is useful when you need to retain fidelity for small decimal numbers


     * (eg. small fractions or percentages).


     */


    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {


        return _multiplyDecimalRound(x, y, PRECISE_UNIT);


    }





    /**


     * @return The result of safely multiplying x and y, interpreting the operands


     * as fixed-point decimals of a standard unit.


     *


     * @dev The operands should be in the standard unit factor which will be


     * divided out after the product of x and y is evaluated, so that product must be


     * less than 2**256.


     *


     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.


     * Rounding is useful when you need to retain fidelity for small decimal numbers


     * (eg. small fractions or percentages).


     */


    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {


        return _multiplyDecimalRound(x, y, UNIT);


    }





    /**


     * @return The result of safely dividing x and y. The return value is a high


     * precision decimal.


     *


     * @dev y is divided after the product of x and the standard precision unit


     * is evaluated, so the product of x and UNIT must be less than 2**256. As


     * this is an integer division, the result is always rounded down.


     * This helps save on gas. Rounding is more expensive on gas.


     */


    function divideDecimal(uint x, uint y) internal pure returns (uint) {


        /* Reintroduce the UNIT factor that will be divided out by y. */


        return x.mul(UNIT).div(y);


    }





    /**


     * @return The result of safely dividing x and y. The return value is as a rounded


     * decimal in the precision unit specified in the parameter.


     *


     * @dev y is divided after the product of x and the specified precision unit


     * is evaluated, so the product of x and the specified precision unit must


     * be less than 2**256. The result is rounded to the nearest increment.


     */


    function _divideDecimalRound(


        uint x,


        uint y,


        uint precisionUnit


    ) private pure returns (uint) {


        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);





        if (resultTimesTen % 10 >= 5) {


            resultTimesTen += 10;


        }





        return resultTimesTen / 10;


    }





    /**


     * @return The result of safely dividing x and y. The return value is as a rounded


     * standard precision decimal.


     *


     * @dev y is divided after the product of x and the standard precision unit


     * is evaluated, so the product of x and the standard precision unit must


     * be less than 2**256. The result is rounded to the nearest increment.


     */


    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {


        return _divideDecimalRound(x, y, UNIT);


    }





    /**


     * @return The result of safely dividing x and y. The return value is as a rounded


     * high precision decimal.


     *


     * @dev y is divided after the product of x and the high precision unit


     * is evaluated, so the product of x and the high precision unit must


     * be less than 2**256. The result is rounded to the nearest increment.


     */


    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {


        return _divideDecimalRound(x, y, PRECISE_UNIT);


    }





    /**


     * @dev Convert a standard decimal representation to a high precision one.


     */


    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {


        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);


    }





    /**


     * @dev Convert a high precision decimal to a standard decimal representation.


     */


    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {


        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);





        if (quotientTimesTen % 10 >= 5) {


            quotientTimesTen += 10;


        }





        return quotientTimesTen / 10;


    }


}








// File contracts/twoway/SwapPair.sol





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;



































contract SwapPair is ERC20, Ownable, ISwapPair {


    using SafeMath for uint256;


    using SafeERC20 for IERC20;


    using SafeDecimalMath for uint256;


    using EnumerableSet for EnumerableSet.UintSet;





    address public override token0; // origin erc20 token





    uint256 public reserve0;





    EnumerableSet.UintSet private supportChainids;


    mapping(uint256 => uint256) public reserve1s;


    uint256 public totalReserve1s;





    address public twoWay;





    uint256 public override diff0;





    event Mint(address indexed sender, uint256 amount);


    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);


    event Swap(address indexed sender, uint256 amountIn, uint256 amountOut, address indexed to);





    constructor(


        string memory _name,


        string memory _symbol,


        address _token0


    ) ERC20(_name, _symbol) {


        uint256 token0Decimals = IERC20Metadata(_token0).decimals();


        require(token0Decimals < 19, "token0 decimals too big");


        token0 = _token0;


        diff0 = 10**(18 - token0Decimals);


    }





    // ======view=====


    function getReserves(uint256 chainId) public view override returns (uint256, uint256) {


        return (reserve0, reserve1s[chainId]);


    }





    function getSupportChainIDs() external view returns(uint256[] memory) {


        uint[] memory chainids = new uint256[](supportChainids.length());


        for (uint i; i < supportChainids.length(); i++) {


            chainids[i] = supportChainids.at(i);


        }


        return chainids;


    }





    function setTwoWay(address _twoWay) external onlyOwner {


        twoWay = _twoWay;


    }





    function addChainIDs(uint256[] memory chainids) external override onlyTwoWay {


        for (uint256 i; i < chainids.length; i++) {


            supportChainids.add(chainids[i]);


        }


    }





    function removeChainIDs(uint256[] memory chainids) external override onlyTwoWay {


        for (uint256 i; i < chainids.length; i++) {


            supportChainids.remove(chainids[i]);


        }


    }





    function mint(address to) external override onlyTwoWay returns (uint256 lpAmount) {


        uint256 balance0 = IERC20(token0).balanceOf(address(this));


        uint256 amount0 = balance0.sub(reserve0);





        lpAmount = getLPAmount(amount0);





        require(lpAmount > 0, "SwapPair: insufficient liquidity minted");





        _mint(to, lpAmount);





        // update reserves


        reserve0 = balance0;





        emit Mint(msg.sender, lpAmount);


    }





    function getLPAmount(uint256 amount) public view returns (uint256 lpAmount) {


        uint256 amountAdjust = amount * diff0;


        uint256 _reserve0 = reserve0 * diff0;


        uint256 total = totalSupply();


        if (total == 0) {


            lpAmount = amountAdjust;


        } else {


            lpAmount = (amountAdjust * total) / (totalReserve1s + _reserve0);


        }


    }





    function burn(


        address from,


        address to,


        uint256 lpAmount,


        address feeTo,


        uint256 feeAmount


    )


        external


        override


        onlyTwoWay


        returns (


            uint256,


            uint256[] memory,


            uint256[] memory


        )


    {


        (uint256 amount0, uint256[] memory chainids, uint256[] memory amount1s) = calculateBurn(lpAmount);


        IERC20(token0).transfer(from, amount0 - feeAmount);


        if (feeAmount > 0) {


            IERC20(token0).transfer(feeTo, feeAmount);


        }


        uint256 totalRemove;


        for (uint256 i; i < chainids.length; i++) {


            if (amount1s[i] > 0) {


                reserve1s[chainids[i]] -= amount1s[i];


                totalRemove += amount1s[i];


            }


        }





        _burn(from, lpAmount);





        // current balance


        uint256 balance0 = IERC20(token0).balanceOf(address(this));


        // update reserves


        reserve0 = balance0;


        totalReserve1s -= totalRemove;





        emit Burn(msg.sender, amount0, totalRemove, to);


        return (amount0, chainids, amount1s);


    }





    function calculateBurn(uint256 lpAmount)


        public


        view


        returns (


            uint256,


            uint256[] memory,


            uint256[] memory


        )


    {


        uint256 _reserve0 = reserve0 * diff0;


        uint256 _totalSupply = totalSupply();


        uint256 value = (lpAmount * (_reserve0 + totalReserve1s)) / _totalSupply;





        if (value <= _reserve0) {


            uint256 amount0 = value / diff0;


            uint256[] memory chainids = new uint256[](0);


            uint256[] memory amounts = new uint256[](0);


            return (amount0, chainids, amounts);


        } else {


            uint256 amount = value - _reserve0;


            uint256 chainidLength = supportChainids.length();


            uint256[] memory chainids = new uint256[](chainidLength);


            uint256[] memory amounts = new uint256[](chainidLength);


            for (uint256 i; i < chainidLength; i++) {


                uint256 chainid = supportChainids.at(i);


                if (reserve1s[chainid] >= amount) {


                    chainids[i] = chainid;


                    amounts[i] = amount;


                    break;


                } else {


                    chainids[i] = chainid;


                    amounts[i] = reserve1s[chainid];


                    amount = amount - reserve1s[chainid];


                }


            }


            return (reserve0, chainids, amounts);


        }


    }





    function update() external override onlyTwoWay {


        uint256 balance0 = IERC20(token0).balanceOf(address(this));


        reserve0 = balance0;


    }





    function swapOut(


        address to,


        uint256 amount0,


        uint256 chainID


    ) external override onlyTwoWay onlySupportChainID(chainID) {


        (, uint256 _reserve1) = getReserves(chainID);





        require(_reserve1 >= amount0 * diff0, "SwapPair: insuffient liquidity");





        // IBoringToken(token1).burn(address(this), amount0 * diff0);


        reserve1s[chainID] -= amount0 * diff0;


        totalReserve1s -= amount0 * diff0;





        // current balance


        uint256 balance0 = IERC20(token0).balanceOf(address(this));





        reserve0 = balance0;





        emit Swap(msg.sender, amount0, amount0 * diff0, to);


    }





    function swapIn(SwapInParams memory params) external override onlyTwoWay onlySupportChainID(params.chainID) {


        uint256 _reserve0 = reserve0;





        require(_reserve0 >= params.amount1, "Insuffient liquidity");


        require(params.amount1 > 0, "Swap amount should be greater than 0");





        IERC20(token0).safeTransfer(params.to, params.remainAmount);


        if (params.feeAmountFix > 0) {


            IERC20(token0).safeTransfer(params.feeToDev, params.feeAmountFix);


        }


        // IBoringToken(token1).mint(address(this), amount1 * diff0);


        reserve1s[params.chainID] += params.amount1 * diff0;


        totalReserve1s += params.amount1 * diff0;





        // current balance


        uint256 balance0 = IERC20(token0).balanceOf(address(this));





        reserve0 = balance0;





        emit Swap(msg.sender, params.amount1 * diff0, params.amount1 * diff0, params.to);


    }





    modifier onlyTwoWay() {


        require(msg.sender == twoWay, "SwapPair: only twoWay can invoke it");


        _;


    }





    modifier onlySupportChainID(uint256 chainID) {


        require(supportChainids.contains(chainID), "not support chainID");


        _;


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\TetherToken.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2017-11-28


*/





pragma solidity ^0.4.17;





/**


 * @title SafeMath


 * @dev Math operations with safety checks that throw on error


 */


library SafeMath {


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {


        if (a == 0) {


            return 0;


        }


        uint256 c = a * b;


        assert(c / a == b);


        return c;


    }





    function div(uint256 a, uint256 b) internal pure returns (uint256) {


        // assert(b > 0); // Solidity automatically throws when dividing by 0


        uint256 c = a / b;


        // assert(a == b * c + a % b); // There is no case in which this doesn't hold


        return c;


    }





    function sub(uint256 a, uint256 b) internal pure returns (uint256) {


        assert(b <= a);


        return a - b;


    }





    function add(uint256 a, uint256 b) internal pure returns (uint256) {


        uint256 c = a + b;


        assert(c >= a);


        return c;


    }


}





/**


 * @title Ownable


 * @dev The Ownable contract has an owner address, and provides basic authorization control


 * functions, this simplifies the implementation of "user permissions".


 */


contract Ownable {


    address public owner;





    /**


      * @dev The Ownable constructor sets the original `owner` of the contract to the sender


      * account.


      */


    function Ownable() public {


        owner = msg.sender;


    }





    /**


      * @dev Throws if called by any account other than the owner.


      */


    modifier onlyOwner() {


        require(msg.sender == owner);


        _;


    }





    /**


    * @dev Allows the current owner to transfer control of the contract to a newOwner.


    * @param newOwner The address to transfer ownership to.


    */


    function transferOwnership(address newOwner) public onlyOwner {


        if (newOwner != address(0)) {


            owner = newOwner;


        }


    }





}





/**


 * @title ERC20Basic


 * @dev Simpler version of ERC20 interface


 * @dev see https://github.com/ethereum/EIPs/issues/20


 */


contract ERC20Basic {


    uint public _totalSupply;


    function totalSupply() public constant returns (uint);


    function balanceOf(address who) public constant returns (uint);


    function transfer(address to, uint value) public;


    event Transfer(address indexed from, address indexed to, uint value);


}





/**


 * @title ERC20 interface


 * @dev see https://github.com/ethereum/EIPs/issues/20


 */


contract ERC20 is ERC20Basic {


    function allowance(address owner, address spender) public constant returns (uint);


    function transferFrom(address from, address to, uint value) public;


    function approve(address spender, uint value) public;


    event Approval(address indexed owner, address indexed spender, uint value);


}





/**


 * @title Basic token


 * @dev Basic version of StandardToken, with no allowances.


 */


contract BasicToken is Ownable, ERC20Basic {


    using SafeMath for uint;





    mapping(address => uint) public balances;





    // additional variables for use if transaction fees ever became necessary


    uint public basisPointsRate = 0;


    uint public maximumFee = 0;





    /**


    * @dev Fix for the ERC20 short address attack.


    */


    modifier onlyPayloadSize(uint size) {


        require(!(msg.data.length < size + 4));


        _;


    }





    /**


    * @dev transfer token for a specified address


    * @param _to The address to transfer to.


    * @param _value The amount to be transferred.


    */


    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {


        uint fee = (_value.mul(basisPointsRate)).div(10000);


        if (fee > maximumFee) {


            fee = maximumFee;


        }


        uint sendAmount = _value.sub(fee);


        balances[msg.sender] = balances[msg.sender].sub(_value);


        balances[_to] = balances[_to].add(sendAmount);


        if (fee > 0) {


            balances[owner] = balances[owner].add(fee);


            Transfer(msg.sender, owner, fee);


        }


        Transfer(msg.sender, _to, sendAmount);


    }





    /**


    * @dev Gets the balance of the specified address.


    * @param _owner The address to query the the balance of.


    * @return An uint representing the amount owned by the passed address.


    */


    function balanceOf(address _owner) public constant returns (uint balance) {


        return balances[_owner];


    }





}





/**


 * @title Standard ERC20 token


 *


 * @dev Implementation of the basic standard token.


 * @dev https://github.com/ethereum/EIPs/issues/20


 * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol


 */


contract StandardToken is BasicToken, ERC20 {





    mapping (address => mapping (address => uint)) public allowed;





    uint public constant MAX_UINT = 2**256 - 1;





    /**


    * @dev Transfer tokens from one address to another


    * @param _from address The address which you want to send tokens from


    * @param _to address The address which you want to transfer to


    * @param _value uint the amount of tokens to be transferred


    */


    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {


        var _allowance = allowed[_from][msg.sender];





        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met


        // if (_value > _allowance) throw;





        uint fee = (_value.mul(basisPointsRate)).div(10000);


        if (fee > maximumFee) {


            fee = maximumFee;


        }


        if (_allowance < MAX_UINT) {


            allowed[_from][msg.sender] = _allowance.sub(_value);


        }


        uint sendAmount = _value.sub(fee);


        balances[_from] = balances[_from].sub(_value);


        balances[_to] = balances[_to].add(sendAmount);


        if (fee > 0) {


            balances[owner] = balances[owner].add(fee);


            Transfer(_from, owner, fee);


        }


        Transfer(_from, _to, sendAmount);


    }





    /**


    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.


    * @param _spender The address which will spend the funds.


    * @param _value The amount of tokens to be spent.


    */


    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {





        // To change the approve amount you first have to reduce the addresses`


        //  allowance to zero by calling `approve(_spender, 0)` if it is not


        //  already 0 to mitigate the race condition described here:


        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));





        allowed[msg.sender][_spender] = _value;


        Approval(msg.sender, _spender, _value);


    }





    /**


    * @dev Function to check the amount of tokens than an owner allowed to a spender.


    * @param _owner address The address which owns the funds.


    * @param _spender address The address which will spend the funds.


    * @return A uint specifying the amount of tokens still available for the spender.


    */


    function allowance(address _owner, address _spender) public constant returns (uint remaining) {


        return allowed[_owner][_spender];


    }





}








/**


 * @title Pausable


 * @dev Base contract which allows children to implement an emergency stop mechanism.


 */


contract Pausable is Ownable {


  event Pause();


  event Unpause();





  bool public paused = false;








  /**


   * @dev Modifier to make a function callable only when the contract is not paused.


   */


  modifier whenNotPaused() {


    require(!paused);


    _;


  }





  /**


   * @dev Modifier to make a function callable only when the contract is paused.


   */


  modifier whenPaused() {


    require(paused);


    _;


  }





  /**


   * @dev called by the owner to pause, triggers stopped state


   */


  function pause() onlyOwner whenNotPaused public {


    paused = true;


    Pause();


  }





  /**


   * @dev called by the owner to unpause, returns to normal state


   */


  function unpause() onlyOwner whenPaused public {


    paused = false;


    Unpause();


  }


}





contract BlackList is Ownable, BasicToken {





    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////


    function getBlackListStatus(address _maker) external constant returns (bool) {


        return isBlackListed[_maker];


    }





    function getOwner() external constant returns (address) {


        return owner;


    }





    mapping (address => bool) public isBlackListed;


    


    function addBlackList (address _evilUser) public onlyOwner {


        isBlackListed[_evilUser] = true;


        AddedBlackList(_evilUser);


    }





    function removeBlackList (address _clearedUser) public onlyOwner {


        isBlackListed[_clearedUser] = false;


        RemovedBlackList(_clearedUser);


    }





    function destroyBlackFunds (address _blackListedUser) public onlyOwner {


        require(isBlackListed[_blackListedUser]);


        uint dirtyFunds = balanceOf(_blackListedUser);


        balances[_blackListedUser] = 0;


        _totalSupply -= dirtyFunds;


        DestroyedBlackFunds(_blackListedUser, dirtyFunds);


    }





    event DestroyedBlackFunds(address _blackListedUser, uint _balance);





    event AddedBlackList(address _user);





    event RemovedBlackList(address _user);





}





contract UpgradedStandardToken is StandardToken{


    // those methods are called by the legacy contract


    // and they must ensure msg.sender to be the contract address


    function transferByLegacy(address from, address to, uint value) public;


    function transferFromByLegacy(address sender, address from, address spender, uint value) public;


    function approveByLegacy(address from, address spender, uint value) public;


}





contract TetherToken is Pausable, StandardToken, BlackList {





    string public name;


    string public symbol;


    uint public decimals;


    address public upgradedAddress;


    bool public deprecated;





    //  The contract can be initialized with a number of tokens


    //  All the tokens are deposited to the owner address


    //


    // @param _balance Initial supply of the contract


    // @param _name Token Name


    // @param _symbol Token symbol


    // @param _decimals Token decimals


    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {


        _totalSupply = _initialSupply;


        name = _name;


        symbol = _symbol;


        decimals = _decimals;


        balances[owner] = _initialSupply;


        deprecated = false;


    }





    // Forward ERC20 methods to upgraded contract if this one is deprecated


    function transfer(address _to, uint _value) public whenNotPaused {


        require(!isBlackListed[msg.sender]);


        if (deprecated) {


            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);


        } else {


            return super.transfer(_to, _value);


        }


    }





    // Forward ERC20 methods to upgraded contract if this one is deprecated


    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {


        require(!isBlackListed[_from]);


        if (deprecated) {


            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);


        } else {


            return super.transferFrom(_from, _to, _value);


        }


    }





    // Forward ERC20 methods to upgraded contract if this one is deprecated


    function balanceOf(address who) public constant returns (uint) {


        if (deprecated) {


            return UpgradedStandardToken(upgradedAddress).balanceOf(who);


        } else {


            return super.balanceOf(who);


        }


    }





    // Forward ERC20 methods to upgraded contract if this one is deprecated


    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {


        if (deprecated) {


            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);


        } else {


            return super.approve(_spender, _value);


        }


    }





    // Forward ERC20 methods to upgraded contract if this one is deprecated


    function allowance(address _owner, address _spender) public constant returns (uint remaining) {


        if (deprecated) {


            return StandardToken(upgradedAddress).allowance(_owner, _spender);


        } else {


            return super.allowance(_owner, _spender);


        }


    }





    // deprecate current contract in favour of a new one


    function deprecate(address _upgradedAddress) public onlyOwner {


        deprecated = true;


        upgradedAddress = _upgradedAddress;


        Deprecate(_upgradedAddress);


    }





    // deprecate current contract if favour of a new one


    function totalSupply() public constant returns (uint) {


        if (deprecated) {


            return StandardToken(upgradedAddress).totalSupply();


        } else {


            return _totalSupply;


        }


    }





    // Issue a new amount of tokens


    // these tokens are deposited into the owner address


    //


    // @param _amount Number of tokens to be issued


    function issue(uint amount) public onlyOwner {


        require(_totalSupply + amount > _totalSupply);


        require(balances[owner] + amount > balances[owner]);





        balances[owner] += amount;


        _totalSupply += amount;


        Issue(amount);


    }





    // Redeem tokens.


    // These tokens are withdrawn from the owner address


    // if the balance must be enough to cover the redeem


    // or the call will fail.


    // @param _amount Number of tokens to be issued


    function redeem(uint amount) public onlyOwner {


        require(_totalSupply >= amount);


        require(balances[owner] >= amount);





        _totalSupply -= amount;


        balances[owner] -= amount;


        Redeem(amount);


    }





    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {


        // Ensure transparency by hardcoding limit beyond which fees can never be added


        require(newBasisPoints < 20);


        require(newMaxFee < 50);





        basisPointsRate = newBasisPoints;


        maximumFee = newMaxFee.mul(10**decimals);





        Params(basisPointsRate, maximumFee);


    }





    // Called when new token are issued


    event Issue(uint amount);





    // Called when tokens are redeemed


    event Redeem(uint amount);





    // Called when contract is deprecated


    event Deprecate(address newAddress);





    // Called if contract ever adds fees


    event Params(uint feeBasisPoints, uint maxFee);


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\Token.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2021-12-17


*/





// Sources flattened with hardhat v2.6.7 https://hardhat.org





// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2





// SPDX-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Interface of the ERC20 standard as defined in the EIP.


 */


interface IERC20 {


    /**


     * @dev Returns the amount of tokens in existence.


     */


    function totalSupply() external view returns (uint256);





    /**


     * @dev Returns the amount of tokens owned by `account`.


     */


    function balanceOf(address account) external view returns (uint256);





    /**


     * @dev Moves `amount` tokens from the caller's account to `recipient`.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transfer(address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Returns the remaining number of tokens that `spender` will be


     * allowed to spend on behalf of `owner` through {transferFrom}. This is


     * zero by default.


     *


     * This value changes when {approve} or {transferFrom} are called.


     */


    function allowance(address owner, address spender) external view returns (uint256);





    /**


     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * IMPORTANT: Beware that changing an allowance with this method brings the risk


     * that someone may use both the old and the new allowance by unfortunate


     * transaction ordering. One possible solution to mitigate this race


     * condition is to first reduce the spender's allowance to 0 and set the


     * desired value afterwards:


     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


     *


     * Emits an {Approval} event.


     */


    function approve(address spender, uint256 amount) external returns (bool);





    /**


     * @dev Moves `amount` tokens from `sender` to `recipient` using the


     * allowance mechanism. `amount` is then deducted from the caller's


     * allowance.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transferFrom(


        address sender,


        address recipient,


        uint256 amount


    ) external returns (bool);





    /**


     * @dev Emitted when `value` tokens are moved from one account (`from`) to


     * another (`to`).


     *


     * Note that `value` may be zero.


     */


    event Transfer(address indexed from, address indexed to, uint256 value);





    /**


     * @dev Emitted when the allowance of a `spender` for an `owner` is set by


     * a call to {approve}. `value` is the new allowance.


     */


    event Approval(address indexed owner, address indexed spender, uint256 value);


}








// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Interface for the optional metadata functions from the ERC20 standard.


 *


 * _Available since v4.1._


 */


interface IERC20Metadata is IERC20 {


    /**


     * @dev Returns the name of the token.


     */


    function name() external view returns (string memory);





    /**


     * @dev Returns the symbol of the token.


     */


    function symbol() external view returns (string memory);





    /**


     * @dev Returns the decimals places of the token.


     */


    function decimals() external view returns (uint8);


}








// File @openzeppelin/contracts/utils/Context.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Provides information about the current execution context, including the


 * sender of the transaction and its data. While these are generally available


 * via msg.sender and msg.data, they should not be accessed in such a direct


 * manner, since when dealing with meta-transactions the account sending and


 * paying for execution may not be the actual sender (as far as an application


 * is concerned).


 *


 * This contract is only required for intermediate, library-like contracts.


 */


abstract contract Context {


    function _msgSender() internal view virtual returns (address) {


        return msg.sender;


    }





    function _msgData() internal view virtual returns (bytes calldata) {


        return msg.data;


    }


}








// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;











/**


 * @dev Implementation of the {IERC20} interface.


 *


 * This implementation is agnostic to the way tokens are created. This means


 * that a supply mechanism has to be added in a derived contract using {_mint}.


 * For a generic mechanism see {ERC20PresetMinterPauser}.


 *


 * TIP: For a detailed writeup see our guide


 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How


 * to implement supply mechanisms].


 *


 * We have followed general OpenZeppelin Contracts guidelines: functions revert


 * instead returning `false` on failure. This behavior is nonetheless


 * conventional and does not conflict with the expectations of ERC20


 * applications.


 *


 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.


 * This allows applications to reconstruct the allowance for all accounts just


 * by listening to said events. Other implementations of the EIP may not emit


 * these events, as it isn't required by the specification.


 *


 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}


 * functions have been added to mitigate the well-known issues around setting


 * allowances. See {IERC20-approve}.


 */


contract ERC20 is Context, IERC20, IERC20Metadata {


    mapping(address => uint256) private _balances;





    mapping(address => mapping(address => uint256)) private _allowances;





    uint256 private _totalSupply;





    string private _name;


    string private _symbol;





    /**


     * @dev Sets the values for {name} and {symbol}.


     *


     * The default value of {decimals} is 18. To select a different value for


     * {decimals} you should overload it.


     *


     * All two of these values are immutable: they can only be set once during


     * construction.


     */


    constructor(string memory name_, string memory symbol_) {


        _name = name_;


        _symbol = symbol_;


    }





    /**


     * @dev Returns the name of the token.


     */


    function name() public view virtual override returns (string memory) {


        return _name;


    }





    /**


     * @dev Returns the symbol of the token, usually a shorter version of the


     * name.


     */


    function symbol() public view virtual override returns (string memory) {


        return _symbol;


    }





    /**


     * @dev Returns the number of decimals used to get its user representation.


     * For example, if `decimals` equals `2`, a balance of `505` tokens should


     * be displayed to a user as `5.05` (`505 / 10 ** 2`).


     *


     * Tokens usually opt for a value of 18, imitating the relationship between


     * Ether and Wei. This is the value {ERC20} uses, unless this function is


     * overridden;


     *


     * NOTE: This information is only used for _display_ purposes: it in


     * no way affects any of the arithmetic of the contract, including


     * {IERC20-balanceOf} and {IERC20-transfer}.


     */


    function decimals() public view virtual override returns (uint8) {


        return 18;


    }





    /**


     * @dev See {IERC20-totalSupply}.


     */


    function totalSupply() public view virtual override returns (uint256) {


        return _totalSupply;


    }





    /**


     * @dev See {IERC20-balanceOf}.


     */


    function balanceOf(address account) public view virtual override returns (uint256) {


        return _balances[account];


    }





    /**


     * @dev See {IERC20-transfer}.


     *


     * Requirements:


     *


     * - `recipient` cannot be the zero address.


     * - the caller must have a balance of at least `amount`.


     */


    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(_msgSender(), recipient, amount);


        return true;


    }





    /**


     * @dev See {IERC20-allowance}.


     */


    function allowance(address owner, address spender) public view virtual override returns (uint256) {


        return _allowances[owner][spender];


    }





    /**


     * @dev See {IERC20-approve}.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function approve(address spender, uint256 amount) public virtual override returns (bool) {


        _approve(_msgSender(), spender, amount);


        return true;


    }





    /**


     * @dev See {IERC20-transferFrom}.


     *


     * Emits an {Approval} event indicating the updated allowance. This is not


     * required by the EIP. See the note at the beginning of {ERC20}.


     *


     * Requirements:


     *


     * - `sender` and `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     * - the caller must have allowance for ``sender``'s tokens of at least


     * `amount`.


     */


    function transferFrom(


        address sender,


        address recipient,


        uint256 amount


    ) public virtual override returns (bool) {


        _transfer(sender, recipient, amount);





        uint256 currentAllowance = _allowances[sender][_msgSender()];


        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");


        unchecked {


            _approve(sender, _msgSender(), currentAllowance - amount);


        }





        return true;


    }





    /**


     * @dev Atomically increases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);


        return true;


    }





    /**


     * @dev Atomically decreases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     * - `spender` must have allowance for the caller of at least


     * `subtractedValue`.


     */


    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {


        uint256 currentAllowance = _allowances[_msgSender()][spender];


        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");


        unchecked {


            _approve(_msgSender(), spender, currentAllowance - subtractedValue);


        }





        return true;


    }





    /**


     * @dev Moves `amount` of tokens from `sender` to `recipient`.


     *


     * This internal function is equivalent to {transfer}, and can be used to


     * e.g. implement automatic token fees, slashing mechanisms, etc.


     *


     * Emits a {Transfer} event.


     *


     * Requirements:


     *


     * - `sender` cannot be the zero address.


     * - `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     */


    function _transfer(


        address sender,


        address recipient,


        uint256 amount


    ) internal virtual {


        require(sender != address(0), "ERC20: transfer from the zero address");


        require(recipient != address(0), "ERC20: transfer to the zero address");





        _beforeTokenTransfer(sender, recipient, amount);





        uint256 senderBalance = _balances[sender];


        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");


        unchecked {


            _balances[sender] = senderBalance - amount;


        }


        _balances[recipient] += amount;





        emit Transfer(sender, recipient, amount);





        _afterTokenTransfer(sender, recipient, amount);


    }





    /** @dev Creates `amount` tokens and assigns them to `account`, increasing


     * the total supply.


     *


     * Emits a {Transfer} event with `from` set to the zero address.


     *


     * Requirements:


     *


     * - `account` cannot be the zero address.


     */


    function _mint(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: mint to the zero address");





        _beforeTokenTransfer(address(0), account, amount);





        _totalSupply += amount;


        _balances[account] += amount;


        emit Transfer(address(0), account, amount);





        _afterTokenTransfer(address(0), account, amount);


    }





    /**


     * @dev Destroys `amount` tokens from `account`, reducing the


     * total supply.


     *


     * Emits a {Transfer} event with `to` set to the zero address.


     *


     * Requirements:


     *


     * - `account` cannot be the zero address.


     * - `account` must have at least `amount` tokens.


     */


    function _burn(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: burn from the zero address");





        _beforeTokenTransfer(account, address(0), amount);





        uint256 accountBalance = _balances[account];


        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");


        unchecked {


            _balances[account] = accountBalance - amount;


        }


        _totalSupply -= amount;





        emit Transfer(account, address(0), amount);





        _afterTokenTransfer(account, address(0), amount);


    }





    /**


     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.


     *


     * This internal function is equivalent to `approve`, and can be used to


     * e.g. set automatic allowances for certain subsystems, etc.


     *


     * Emits an {Approval} event.


     *


     * Requirements:


     *


     * - `owner` cannot be the zero address.


     * - `spender` cannot be the zero address.


     */


    function _approve(


        address owner,


        address spender,


        uint256 amount


    ) internal virtual {


        require(owner != address(0), "ERC20: approve from the zero address");


        require(spender != address(0), "ERC20: approve to the zero address");





        _allowances[owner][spender] = amount;


        emit Approval(owner, spender, amount);


    }





    /**


     * @dev Hook that is called before any transfer of tokens. This includes


     * minting and burning.


     *


     * Calling conditions:


     *


     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens


     * will be transferred to `to`.


     * - when `from` is zero, `amount` tokens will be minted for `to`.


     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.


     * - `from` and `to` are never both zero.


     *


     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].


     */


    function _beforeTokenTransfer(


        address from,


        address to,


        uint256 amount


    ) internal virtual {}





    /**


     * @dev Hook that is called after any transfer of tokens. This includes


     * minting and burning.


     *


     * Calling conditions:


     *


     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens


     * has been transferred to `to`.


     * - when `from` is zero, `amount` tokens have been minted for `to`.


     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.


     * - `from` and `to` are never both zero.


     *


     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].


     */


    function _afterTokenTransfer(


        address from,


        address to,


        uint256 amount


    ) internal virtual {}


}








// File @openzeppelin/contracts/access/IAccessControl.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev External interface of AccessControl declared to support ERC165 detection.


 */


interface IAccessControl {


    /**


     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`


     *


     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite


     * {RoleAdminChanged} not being emitted signaling this.


     *


     * _Available since v3.1._


     */


    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);





    /**


     * @dev Emitted when `account` is granted `role`.


     *


     * `sender` is the account that originated the contract call, an admin role


     * bearer except when using {AccessControl-_setupRole}.


     */


    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);





    /**


     * @dev Emitted when `account` is revoked `role`.


     *


     * `sender` is the account that originated the contract call:


     *   - if using `revokeRole`, it is the admin role bearer


     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)


     */


    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);





    /**


     * @dev Returns `true` if `account` has been granted `role`.


     */


    function hasRole(bytes32 role, address account) external view returns (bool);





    /**


     * @dev Returns the admin role that controls `role`. See {grantRole} and


     * {revokeRole}.


     *


     * To change a role's admin, use {AccessControl-_setRoleAdmin}.


     */


    function getRoleAdmin(bytes32 role) external view returns (bytes32);





    /**


     * @dev Grants `role` to `account`.


     *


     * If `account` had not been already granted `role`, emits a {RoleGranted}


     * event.


     *


     * Requirements:


     *


     * - the caller must have ``role``'s admin role.


     */


    function grantRole(bytes32 role, address account) external;





    /**


     * @dev Revokes `role` from `account`.


     *


     * If `account` had been granted `role`, emits a {RoleRevoked} event.


     *


     * Requirements:


     *


     * - the caller must have ``role``'s admin role.


     */


    function revokeRole(bytes32 role, address account) external;





    /**


     * @dev Revokes `role` from the calling account.


     *


     * Roles are often managed via {grantRole} and {revokeRole}: this function's


     * purpose is to provide a mechanism for accounts to lose their privileges


     * if they are compromised (such as when a trusted device is misplaced).


     *


     * If the calling account had been granted `role`, emits a {RoleRevoked}


     * event.


     *


     * Requirements:


     *


     * - the caller must be `account`.


     */


    function renounceRole(bytes32 role, address account) external;


}








// File @openzeppelin/contracts/utils/Strings.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev String operations.


 */


library Strings {


    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";





    /**


     * @dev Converts a `uint256` to its ASCII `string` decimal representation.


     */


    function toString(uint256 value) internal pure returns (string memory) {


        // Inspired by OraclizeAPI's implementation - MIT licence


        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol





        if (value == 0) {


            return "0";


        }


        uint256 temp = value;


        uint256 digits;


        while (temp != 0) {


            digits++;


            temp /= 10;


        }


        bytes memory buffer = new bytes(digits);


        while (value != 0) {


            digits -= 1;


            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));


            value /= 10;


        }


        return string(buffer);


    }





    /**


     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.


     */


    function toHexString(uint256 value) internal pure returns (string memory) {


        if (value == 0) {


            return "0x00";


        }


        uint256 temp = value;


        uint256 length = 0;


        while (temp != 0) {


            length++;


            temp >>= 8;


        }


        return toHexString(value, length);


    }





    /**


     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.


     */


    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {


        bytes memory buffer = new bytes(2 * length + 2);


        buffer[0] = "0";


        buffer[1] = "x";


        for (uint256 i = 2 * length + 1; i > 1; --i) {


            buffer[i] = _HEX_SYMBOLS[value & 0xf];


            value >>= 4;


        }


        require(value == 0, "Strings: hex length insufficient");


        return string(buffer);


    }


}








// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Interface of the ERC165 standard, as defined in the


 * https://eips.ethereum.org/EIPS/eip-165[EIP].


 *


 * Implementers can declare support of contract interfaces, which can then be


 * queried by others ({ERC165Checker}).


 *


 * For an implementation, see {ERC165}.


 */


interface IERC165 {


    /**


     * @dev Returns true if this contract implements the interface defined by


     * `interfaceId`. See the corresponding


     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]


     * to learn more about how these ids are created.


     *


     * This function call must use less than 30 000 gas.


     */


    function supportsInterface(bytes4 interfaceId) external view returns (bool);


}








// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





/**


 * @dev Implementation of the {IERC165} interface.


 *


 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check


 * for the additional interface id that will be supported. For example:


 *


 * ```solidity


 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {


 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);


 * }


 * ```


 *


 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.


 */


abstract contract ERC165 is IERC165 {


    /**


     * @dev See {IERC165-supportsInterface}.


     */


    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {


        return interfaceId == type(IERC165).interfaceId;


    }


}








// File @openzeppelin/contracts/access/AccessControl.sol@v4.3.2





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;














/**


 * @dev Contract module that allows children to implement role-based access


 * control mechanisms. This is a lightweight version that doesn't allow enumerating role


 * members except through off-chain means by accessing the contract event logs. Some


 * applications may benefit from on-chain enumerability, for those cases see


 * {AccessControlEnumerable}.


 *


 * Roles are referred to by their `bytes32` identifier. These should be exposed


 * in the external API and be unique. The best way to achieve this is by


 * using `public constant` hash digests:


 *


 * ```


 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");


 * ```


 *


 * Roles can be used to represent a set of permissions. To restrict access to a


 * function call, use {hasRole}:


 *


 * ```


 * function foo() public {


 *     require(hasRole(MY_ROLE, msg.sender));


 *     ...


 * }


 * ```


 *


 * Roles can be granted and revoked dynamically via the {grantRole} and


 * {revokeRole} functions. Each role has an associated admin role, and only


 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.


 *


 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means


 * that only accounts with this role will be able to grant or revoke other


 * roles. More complex role relationships can be created by using


 * {_setRoleAdmin}.


 *


 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to


 * grant and revoke this role. Extra precautions should be taken to secure


 * accounts that have been granted it.


 */


abstract contract AccessControl is Context, IAccessControl, ERC165 {


    struct RoleData {


        mapping(address => bool) members;


        bytes32 adminRole;


    }





    mapping(bytes32 => RoleData) private _roles;





    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;





    /**


     * @dev Modifier that checks that an account has a specific role. Reverts


     * with a standardized message including the required role.


     *


     * The format of the revert reason is given by the following regular expression:


     *


     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/


     *


     * _Available since v4.1._


     */


    modifier onlyRole(bytes32 role) {


        _checkRole(role, _msgSender());


        _;


    }





    /**


     * @dev See {IERC165-supportsInterface}.


     */


    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {


        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);


    }





    /**


     * @dev Returns `true` if `account` has been granted `role`.


     */


    function hasRole(bytes32 role, address account) public view override returns (bool) {


        return _roles[role].members[account];


    }





    /**


     * @dev Revert with a standard message if `account` is missing `role`.


     *


     * The format of the revert reason is given by the following regular expression:


     *


     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/


     */


    function _checkRole(bytes32 role, address account) internal view {


        if (!hasRole(role, account)) {


            revert(


                string(


                    abi.encodePacked(


                        "AccessControl: account ",


                        Strings.toHexString(uint160(account), 20),


                        " is missing role ",


                        Strings.toHexString(uint256(role), 32)


                    )


                )


            );


        }


    }





    /**


     * @dev Returns the admin role that controls `role`. See {grantRole} and


     * {revokeRole}.


     *


     * To change a role's admin, use {_setRoleAdmin}.


     */


    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {


        return _roles[role].adminRole;


    }





    /**


     * @dev Grants `role` to `account`.


     *


     * If `account` had not been already granted `role`, emits a {RoleGranted}


     * event.


     *


     * Requirements:


     *


     * - the caller must have ``role``'s admin role.


     */


    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {


        _grantRole(role, account);


    }





    /**


     * @dev Revokes `role` from `account`.


     *


     * If `account` had been granted `role`, emits a {RoleRevoked} event.


     *


     * Requirements:


     *


     * - the caller must have ``role``'s admin role.


     */


    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {


        _revokeRole(role, account);


    }





    /**


     * @dev Revokes `role` from the calling account.


     *


     * Roles are often managed via {grantRole} and {revokeRole}: this function's


     * purpose is to provide a mechanism for accounts to lose their privileges


     * if they are compromised (such as when a trusted device is misplaced).


     *


     * If the calling account had been granted `role`, emits a {RoleRevoked}


     * event.


     *


     * Requirements:


     *


     * - the caller must be `account`.


     */


    function renounceRole(bytes32 role, address account) public virtual override {


        require(account == _msgSender(), "AccessControl: can only renounce roles for self");





        _revokeRole(role, account);


    }





    /**


     * @dev Grants `role` to `account`.


     *


     * If `account` had not been already granted `role`, emits a {RoleGranted}


     * event. Note that unlike {grantRole}, this function doesn't perform any


     * checks on the calling account.


     *


     * [WARNING]


     * ====


     * This function should only be called from the constructor when setting


     * up the initial roles for the system.


     *


     * Using this function in any other way is effectively circumventing the admin


     * system imposed by {AccessControl}.


     * ====


     */


    function _setupRole(bytes32 role, address account) internal virtual {


        _grantRole(role, account);


    }





    /**


     * @dev Sets `adminRole` as ``role``'s admin role.


     *


     * Emits a {RoleAdminChanged} event.


     */


    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {


        bytes32 previousAdminRole = getRoleAdmin(role);


        _roles[role].adminRole = adminRole;


        emit RoleAdminChanged(role, previousAdminRole, adminRole);


    }





    function _grantRole(bytes32 role, address account) private {


        if (!hasRole(role, account)) {


            _roles[role].members[account] = true;


            emit RoleGranted(role, account, _msgSender());


        }


    }





    function _revokeRole(bytes32 role, address account) private {


        if (hasRole(role, account)) {


            _roles[role].members[account] = false;


            emit RoleRevoked(role, account, _msgSender());


        }


    }


}








// File contracts/interface/IToken.sol





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;





interface IToken is IERC20 {


    function mint(address to, uint256 amount) external returns (bool);





    function burn(address from, uint256 amount) external returns (bool);


}





interface IMB {


    function mint(address to, uint256 amount) external returns (bool);





    function burn(address from, uint256 amount) external returns (bool);


}








// File contracts/Token.sol





// sp-License-Identifier: MIT





pragma solidity ^0.8.0;











contract Token is ERC20, IToken, AccessControl {


    bytes32 public constant MINTER_ROLE = "MINTER_ROLE";


    bytes32 public constant BURNER_ROLE = "BURNER_ROLE";





    constructor(


        string memory _name,


        string memory _symbol


    ) ERC20(_name, _symbol) {


        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);


    }





    function decimals() public view virtual override returns (uint8) {


        return 18;


    }





    function mint(address to, uint256 amount) public override onlyMinter returns (bool) {


        _mint(to, amount);


        return true;


    }





    function burn(address to, uint256 amount) public override onlyBurner returns (bool) {


        _burn(to, amount);


        return true;


    }





    function _beforeTokenTransfer(


        address from,


        address to,


        uint256 amount


    ) internal override {


        require(to != address(this), "Token::to should not be token contract");


        super._beforeTokenTransfer(from, to, amount);


    }





    modifier onlyMinter() {


        require(hasRole(MINTER_ROLE, msg.sender), "Token::caller is not minter");


        _;


    }





    modifier onlyBurner() {


        require(hasRole(BURNER_ROLE, msg.sender), "Token::caller is not burner");


        _;


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\UpgradeabilityProxy.sol
File type: .sol
pragma solidity ^0.6.0;





import './BaseUpgradeabilityProxy.sol';





/**


 * @title UpgradeabilityProxy


 * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing


 * implementation and init data.


 */


contract UpgradeabilityProxy is BaseUpgradeabilityProxy {


  /**


   * @dev Contract constructor.


   * @param _logic Address of the initial implementation.


   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.


   * It should include the signature and the parameters of the function to be called, as described in


   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.


   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.


   */


  constructor(address _logic, bytes memory _data) public payable {


    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));


    _setImplementation(_logic);


    if(_data.length > 0) {


      (bool success,) = _logic.delegatecall(_data);


      require(success);


    }


  }  


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\VersionedInitializable.sol
File type: .sol
// SPDX-License-Identifier: agpl-3.0


pragma solidity 0.6.10;





/**


 * @title VersionedInitializable


 *


 * @dev Helper contract to support initializer functions. To use it, replace


 * the constructor with a function that has the `initializer` modifier.


 * WARNING: Unlike constructors, initializer functions must be manually


 * invoked. This applies both to deploying an Initializable contract, as well


 * as extending an Initializable contract via inheritance.


 * WARNING: When used with inheritance, manual care must be taken to not invoke


 * a parent initializer twice, or ensure that all initializers are idempotent,


 * because this is not dealt with automatically as with constructors.


 *


 * @author Aave, inspired by the OpenZeppelin Initializable contract


 */


abstract contract VersionedInitializable {


    /**


   * @dev Indicates that the contract has been initialized.


   */


    uint256 internal lastInitializedRevision = 0;





   /**


   * @dev Modifier to use in the initializer function of a contract.


   */


    modifier initializer() {


        uint256 revision = getRevision();


        require(revision > lastInitializedRevision, "Contract instance has already been initialized");





        lastInitializedRevision = revision;





        _;





    }





    /// @dev returns the revision number of the contract.


    /// Needs to be defined in the inherited class as a constant.


    function getRevision() internal pure virtual returns(uint256);








    // Reserved storage space to allow for layout changes in the future.


    uint256[50] private ______gap;


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\Vyper_contract.sol
File type: .sol
# @version 0.2.4


"""


@title Curve DAO Token


@author Curve Finance


@license MIT


@notice ERC20 with piecewise-linear mining supply.


@dev Based on the ERC-20 token standard as defined at


     https://eips.ethereum.org/EIPS/eip-20


"""





from vyper.interfaces import ERC20





implements: ERC20








event Transfer:


    _from: indexed(address)


    _to: indexed(address)


    _value: uint256





event Approval:


    _owner: indexed(address)


    _spender: indexed(address)


    _value: uint256





event UpdateMiningParameters:


    time: uint256


    rate: uint256


    supply: uint256





event SetMinter:


    minter: address





event SetAdmin:


    admin: address








name: public(String[64])


symbol: public(String[32])


decimals: public(uint256)





balanceOf: public(HashMap[address, uint256])


allowances: HashMap[address, HashMap[address, uint256]]


total_supply: uint256





minter: public(address)


admin: public(address)





# General constants


YEAR: constant(uint256) = 86400 * 365





# Allocation:


# =========


# * shareholders - 30%


# * emplyees - 3%


# * DAO-controlled reserve - 5%


# * Early users - 5%


# == 43% ==


# left for inflation: 57%





# Supply parameters


INITIAL_SUPPLY: constant(uint256) = 1_303_030_303


INITIAL_RATE: constant(uint256) = 274_815_283 * 10 ** 18 / YEAR  # leading to 43% premine


RATE_REDUCTION_TIME: constant(uint256) = YEAR


RATE_REDUCTION_COEFFICIENT: constant(uint256) = 1189207115002721024  # 2 ** (1/4) * 1e18


RATE_DENOMINATOR: constant(uint256) = 10 ** 18


INFLATION_DELAY: constant(uint256) = 86400





# Supply variables


mining_epoch: public(int128)


start_epoch_time: public(uint256)


rate: public(uint256)





start_epoch_supply: uint256








@external


def __init__(_name: String[64], _symbol: String[32], _decimals: uint256):


    """


    @notice Contract constructor


    @param _name Token full name


    @param _symbol Token symbol


    @param _decimals Number of decimals for token


    """


    init_supply: uint256 = INITIAL_SUPPLY * 10 ** _decimals


    self.name = _name


    self.symbol = _symbol


    self.decimals = _decimals


    self.balanceOf[msg.sender] = init_supply


    self.total_supply = init_supply


    self.admin = msg.sender


    log Transfer(ZERO_ADDRESS, msg.sender, init_supply)





    self.start_epoch_time = block.timestamp + INFLATION_DELAY - RATE_REDUCTION_TIME


    self.mining_epoch = -1


    self.rate = 0


    self.start_epoch_supply = init_supply








@internal


def _update_mining_parameters():


    """


    @dev Update mining rate and supply at the start of the epoch


         Any modifying mining call must also call this


    """


    _rate: uint256 = self.rate


    _start_epoch_supply: uint256 = self.start_epoch_supply





    self.start_epoch_time += RATE_REDUCTION_TIME


    self.mining_epoch += 1





    if _rate == 0:


        _rate = INITIAL_RATE


    else:


        _start_epoch_supply += _rate * RATE_REDUCTION_TIME


        self.start_epoch_supply = _start_epoch_supply


        _rate = _rate * RATE_DENOMINATOR / RATE_REDUCTION_COEFFICIENT





    self.rate = _rate





    log UpdateMiningParameters(block.timestamp, _rate, _start_epoch_supply)








@external


def update_mining_parameters():


    """


    @notice Update mining rate and supply at the start of the epoch


    @dev Callable by any address, but only once per epoch


         Total supply becomes slightly larger if this function is called late


    """


    assert block.timestamp >= self.start_epoch_time + RATE_REDUCTION_TIME  # dev: too soon!


    self._update_mining_parameters()








@external


def start_epoch_time_write() -> uint256:


    """


    @notice Get timestamp of the current mining epoch start


            while simultaneously updating mining parameters


    @return Timestamp of the epoch


    """


    _start_epoch_time: uint256 = self.start_epoch_time


    if block.timestamp >= _start_epoch_time + RATE_REDUCTION_TIME:


        self._update_mining_parameters()


        return self.start_epoch_time


    else:


        return _start_epoch_time








@external


def future_epoch_time_write() -> uint256:


    """


    @notice Get timestamp of the next mining epoch start


            while simultaneously updating mining parameters


    @return Timestamp of the next epoch


    """


    _start_epoch_time: uint256 = self.start_epoch_time


    if block.timestamp >= _start_epoch_time + RATE_REDUCTION_TIME:


        self._update_mining_parameters()


        return self.start_epoch_time + RATE_REDUCTION_TIME


    else:


        return _start_epoch_time + RATE_REDUCTION_TIME








@internal


@view


def _available_supply() -> uint256:


    return self.start_epoch_supply + (block.timestamp - self.start_epoch_time) * self.rate








@external


@view


def available_supply() -> uint256:


    """


    @notice Current number of tokens in existence (claimed or unclaimed)


    """


    return self._available_supply()








@external


@view


def mintable_in_timeframe(start: uint256, end: uint256) -> uint256:


    """


    @notice How much supply is mintable from start timestamp till end timestamp


    @param start Start of the time interval (timestamp)


    @param end End of the time interval (timestamp)


    @return Tokens mintable from `start` till `end`


    """


    assert start <= end  # dev: start > end


    to_mint: uint256 = 0


    current_epoch_time: uint256 = self.start_epoch_time


    current_rate: uint256 = self.rate





    # Special case if end is in future (not yet minted) epoch


    if end > current_epoch_time + RATE_REDUCTION_TIME:


        current_epoch_time += RATE_REDUCTION_TIME


        current_rate = current_rate * RATE_DENOMINATOR / RATE_REDUCTION_COEFFICIENT





    assert end <= current_epoch_time + RATE_REDUCTION_TIME  # dev: too far in future





    for i in range(999):  # Curve will not work in 1000 years. Darn!


        if end >= current_epoch_time:


            current_end: uint256 = end


            if current_end > current_epoch_time + RATE_REDUCTION_TIME:


                current_end = current_epoch_time + RATE_REDUCTION_TIME





            current_start: uint256 = start


            if current_start >= current_epoch_time + RATE_REDUCTION_TIME:


                break  # We should never get here but what if...


            elif current_start < current_epoch_time:


                current_start = current_epoch_time





            to_mint += current_rate * (current_end - current_start)





            if start >= current_epoch_time:


                break





        current_epoch_time -= RATE_REDUCTION_TIME


        current_rate = current_rate * RATE_REDUCTION_COEFFICIENT / RATE_DENOMINATOR  # double-division with rounding made rate a bit less => good


        assert current_rate <= INITIAL_RATE  # This should never happen





    return to_mint








@external


def set_minter(_minter: address):


    """


    @notice Set the minter address


    @dev Only callable once, when minter has not yet been set


    @param _minter Address of the minter


    """


    assert msg.sender == self.admin  # dev: admin only


    assert self.minter == ZERO_ADDRESS  # dev: can set the minter only once, at creation


    self.minter = _minter


    log SetMinter(_minter)








@external


def set_admin(_admin: address):


    """


    @notice Set the new admin.


    @dev After all is set up, admin only can change the token name


    @param _admin New admin address


    """


    assert msg.sender == self.admin  # dev: admin only


    self.admin = _admin


    log SetAdmin(_admin)








@external


@view


def totalSupply() -> uint256:


    """


    @notice Total number of tokens in existence.


    """


    return self.total_supply








@external


@view


def allowance(_owner : address, _spender : address) -> uint256:


    """


    @notice Check the amount of tokens that an owner allowed to a spender


    @param _owner The address which owns the funds


    @param _spender The address which will spend the funds


    @return uint256 specifying the amount of tokens still available for the spender


    """


    return self.allowances[_owner][_spender]








@external


def transfer(_to : address, _value : uint256) -> bool:


    """


    @notice Transfer `_value` tokens from `msg.sender` to `_to`


    @dev Vyper does not allow underflows, so the subtraction in


         this function will revert on an insufficient balance


    @param _to The address to transfer to


    @param _value The amount to be transferred


    @return bool success


    """


    assert _to != ZERO_ADDRESS  # dev: transfers to 0x0 are not allowed


    self.balanceOf[msg.sender] -= _value


    self.balanceOf[_to] += _value


    log Transfer(msg.sender, _to, _value)


    return True








@external


def transferFrom(_from : address, _to : address, _value : uint256) -> bool:


    """


     @notice Transfer `_value` tokens from `_from` to `_to`


     @param _from address The address which you want to send tokens from


     @param _to address The address which you want to transfer to


     @param _value uint256 the amount of tokens to be transferred


     @return bool success


    """


    assert _to != ZERO_ADDRESS  # dev: transfers to 0x0 are not allowed


    # NOTE: vyper does not allow underflows


    #       so the following subtraction would revert on insufficient balance


    self.balanceOf[_from] -= _value


    self.balanceOf[_to] += _value


    self.allowances[_from][msg.sender] -= _value


    log Transfer(_from, _to, _value)


    return True








@external


def approve(_spender : address, _value : uint256) -> bool:


    """


    @notice Approve `_spender` to transfer `_value` tokens on behalf of `msg.sender`


    @dev Approval may only be from zero -> nonzero or from nonzero -> zero in order


        to mitigate the potential race condition described here:


        https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


    @param _spender The address which will spend the funds


    @param _value The amount of tokens to be spent


    @return bool success


    """


    assert _value == 0 or self.allowances[msg.sender][_spender] == 0


    self.allowances[msg.sender][_spender] = _value


    log Approval(msg.sender, _spender, _value)


    return True








@external


def mint(_to: address, _value: uint256) -> bool:


    """


    @notice Mint `_value` tokens and assign them to `_to`


    @dev Emits a Transfer event originating from 0x00


    @param _to The account that will receive the created tokens


    @param _value The amount that will be created


    @return bool success


    """


    assert msg.sender == self.minter  # dev: minter only


    assert _to != ZERO_ADDRESS  # dev: zero address





    if block.timestamp >= self.start_epoch_time + RATE_REDUCTION_TIME:


        self._update_mining_parameters()





    _total_supply: uint256 = self.total_supply + _value


    assert _total_supply <= self._available_supply()  # dev: exceeds allowable mint amount


    self.total_supply = _total_supply





    self.balanceOf[_to] += _value


    log Transfer(ZERO_ADDRESS, _to, _value)





    return True








@external


def burn(_value: uint256) -> bool:


    """


    @notice Burn `_value` tokens belonging to `msg.sender`


    @dev Emits a Transfer event with a destination of 0x00


    @param _value The amount that will be burned


    @return bool success


    """


    self.balanceOf[msg.sender] -= _value


    self.total_supply -= _value





    log Transfer(msg.sender, ZERO_ADDRESS, _value)


    return True








@external


def set_name(_name: String[64], _symbol: String[32]):


    """


    @notice Change the token name and symbol to `_name` and `_symbol`


    @dev Only callable by the admin account


    @param _name New token name


    @param _symbol New token symbol


    """


    assert msg.sender == self.admin, "Only admin is allowed to change name"


    self.name = _name


    self.symbol = _symbol

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\WBTC.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2018-11-24


*/





pragma solidity 0.4.24;





// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol





/**


 * @title ERC20Basic


 * @dev Simpler version of ERC20 interface


 * See https://github.com/ethereum/EIPs/issues/179


 */


contract ERC20Basic {


  function totalSupply() public view returns (uint256);


  function balanceOf(address _who) public view returns (uint256);


  function transfer(address _to, uint256 _value) public returns (bool);


  event Transfer(address indexed from, address indexed to, uint256 value);


}





// File: openzeppelin-solidity/contracts/math/SafeMath.sol





/**


 * @title SafeMath


 * @dev Math operations with safety checks that throw on error


 */


library SafeMath {





  /**


  * @dev Multiplies two numbers, throws on overflow.


  */


  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {


    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the


    // benefit is lost if 'b' is also tested.


    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522


    if (_a == 0) {


      return 0;


    }





    c = _a * _b;


    assert(c / _a == _b);


    return c;


  }





  /**


  * @dev Integer division of two numbers, truncating the quotient.


  */


  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {


    // assert(_b > 0); // Solidity automatically throws when dividing by 0


    // uint256 c = _a / _b;


    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold


    return _a / _b;


  }





  /**


  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).


  */


  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {


    assert(_b <= _a);


    return _a - _b;


  }





  /**


  * @dev Adds two numbers, throws on overflow.


  */


  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {


    c = _a + _b;


    assert(c >= _a);


    return c;


  }


}





// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol





/**


 * @title Basic token


 * @dev Basic version of StandardToken, with no allowances.


 */


contract BasicToken is ERC20Basic {


  using SafeMath for uint256;





  mapping(address => uint256) internal balances;





  uint256 internal totalSupply_;





  /**


  * @dev Total number of tokens in existence


  */


  function totalSupply() public view returns (uint256) {


    return totalSupply_;


  }





  /**


  * @dev Transfer token for a specified address


  * @param _to The address to transfer to.


  * @param _value The amount to be transferred.


  */


  function transfer(address _to, uint256 _value) public returns (bool) {


    require(_value <= balances[msg.sender]);


    require(_to != address(0));





    balances[msg.sender] = balances[msg.sender].sub(_value);


    balances[_to] = balances[_to].add(_value);


    emit Transfer(msg.sender, _to, _value);


    return true;


  }





  /**


  * @dev Gets the balance of the specified address.


  * @param _owner The address to query the the balance of.


  * @return An uint256 representing the amount owned by the passed address.


  */


  function balanceOf(address _owner) public view returns (uint256) {


    return balances[_owner];


  }





}





// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol





/**


 * @title ERC20 interface


 * @dev see https://github.com/ethereum/EIPs/issues/20


 */


contract ERC20 is ERC20Basic {


  function allowance(address _owner, address _spender)


    public view returns (uint256);





  function transferFrom(address _from, address _to, uint256 _value)


    public returns (bool);





  function approve(address _spender, uint256 _value) public returns (bool);


  event Approval(


    address indexed owner,


    address indexed spender,


    uint256 value


  );


}





// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol





/**


 * @title Standard ERC20 token


 *


 * @dev Implementation of the basic standard token.


 * https://github.com/ethereum/EIPs/issues/20


 * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol


 */


contract StandardToken is ERC20, BasicToken {





  mapping (address => mapping (address => uint256)) internal allowed;








  /**


   * @dev Transfer tokens from one address to another


   * @param _from address The address which you want to send tokens from


   * @param _to address The address which you want to transfer to


   * @param _value uint256 the amount of tokens to be transferred


   */


  function transferFrom(


    address _from,


    address _to,


    uint256 _value


  )


    public


    returns (bool)


  {


    require(_value <= balances[_from]);


    require(_value <= allowed[_from][msg.sender]);


    require(_to != address(0));





    balances[_from] = balances[_from].sub(_value);


    balances[_to] = balances[_to].add(_value);


    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);


    emit Transfer(_from, _to, _value);


    return true;


  }





  /**


   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.


   * Beware that changing an allowance with this method brings the risk that someone may use both the old


   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this


   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:


   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


   * @param _spender The address which will spend the funds.


   * @param _value The amount of tokens to be spent.


   */


  function approve(address _spender, uint256 _value) public returns (bool) {


    allowed[msg.sender][_spender] = _value;


    emit Approval(msg.sender, _spender, _value);


    return true;


  }





  /**


   * @dev Function to check the amount of tokens that an owner allowed to a spender.


   * @param _owner address The address which owns the funds.


   * @param _spender address The address which will spend the funds.


   * @return A uint256 specifying the amount of tokens still available for the spender.


   */


  function allowance(


    address _owner,


    address _spender


   )


    public


    view


    returns (uint256)


  {


    return allowed[_owner][_spender];


  }





  /**


   * @dev Increase the amount of tokens that an owner allowed to a spender.


   * approve should be called when allowed[_spender] == 0. To increment


   * allowed value is better to use this function to avoid 2 calls (and wait until


   * the first transaction is mined)


   * From MonolithDAO Token.sol


   * @param _spender The address which will spend the funds.


   * @param _addedValue The amount of tokens to increase the allowance by.


   */


  function increaseApproval(


    address _spender,


    uint256 _addedValue


  )


    public


    returns (bool)


  {


    allowed[msg.sender][_spender] = (


      allowed[msg.sender][_spender].add(_addedValue));


    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);


    return true;


  }





  /**


   * @dev Decrease the amount of tokens that an owner allowed to a spender.


   * approve should be called when allowed[_spender] == 0. To decrement


   * allowed value is better to use this function to avoid 2 calls (and wait until


   * the first transaction is mined)


   * From MonolithDAO Token.sol


   * @param _spender The address which will spend the funds.


   * @param _subtractedValue The amount of tokens to decrease the allowance by.


   */


  function decreaseApproval(


    address _spender,


    uint256 _subtractedValue


  )


    public


    returns (bool)


  {


    uint256 oldValue = allowed[msg.sender][_spender];


    if (_subtractedValue >= oldValue) {


      allowed[msg.sender][_spender] = 0;


    } else {


      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);


    }


    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);


    return true;


  }





}





// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol





/**


 * @title DetailedERC20 token


 * @dev The decimals are only for visualization purposes.


 * All the operations are done using the smallest and indivisible token unit,


 * just as on Ethereum all the operations are done in wei.


 */


contract DetailedERC20 is ERC20 {


  string public name;


  string public symbol;


  uint8 public decimals;





  constructor(string _name, string _symbol, uint8 _decimals) public {


    name = _name;


    symbol = _symbol;


    decimals = _decimals;


  }


}





// File: openzeppelin-solidity/contracts/ownership/Ownable.sol





/**


 * @title Ownable


 * @dev The Ownable contract has an owner address, and provides basic authorization control


 * functions, this simplifies the implementation of "user permissions".


 */


contract Ownable {


  address public owner;








  event OwnershipRenounced(address indexed previousOwner);


  event OwnershipTransferred(


    address indexed previousOwner,


    address indexed newOwner


  );








  /**


   * @dev The Ownable constructor sets the original `owner` of the contract to the sender


   * account.


   */


  constructor() public {


    owner = msg.sender;


  }





  /**


   * @dev Throws if called by any account other than the owner.


   */


  modifier onlyOwner() {


    require(msg.sender == owner);


    _;


  }





  /**


   * @dev Allows the current owner to relinquish control of the contract.


   * @notice Renouncing to ownership will leave the contract without an owner.


   * It will not be possible to call the functions with the `onlyOwner`


   * modifier anymore.


   */


  function renounceOwnership() public onlyOwner {


    emit OwnershipRenounced(owner);


    owner = address(0);


  }





  /**


   * @dev Allows the current owner to transfer control of the contract to a newOwner.


   * @param _newOwner The address to transfer ownership to.


   */


  function transferOwnership(address _newOwner) public onlyOwner {


    _transferOwnership(_newOwner);


  }





  /**


   * @dev Transfers control of the contract to a newOwner.


   * @param _newOwner The address to transfer ownership to.


   */


  function _transferOwnership(address _newOwner) internal {


    require(_newOwner != address(0));


    emit OwnershipTransferred(owner, _newOwner);


    owner = _newOwner;


  }


}





// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol





/**


 * @title Mintable token


 * @dev Simple ERC20 Token example, with mintable token creation


 * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol


 */


contract MintableToken is StandardToken, Ownable {


  event Mint(address indexed to, uint256 amount);


  event MintFinished();





  bool public mintingFinished = false;








  modifier canMint() {


    require(!mintingFinished);


    _;


  }





  modifier hasMintPermission() {


    require(msg.sender == owner);


    _;


  }





  /**


   * @dev Function to mint tokens


   * @param _to The address that will receive the minted tokens.


   * @param _amount The amount of tokens to mint.


   * @return A boolean that indicates if the operation was successful.


   */


  function mint(


    address _to,


    uint256 _amount


  )


    public


    hasMintPermission


    canMint


    returns (bool)


  {


    totalSupply_ = totalSupply_.add(_amount);


    balances[_to] = balances[_to].add(_amount);


    emit Mint(_to, _amount);


    emit Transfer(address(0), _to, _amount);


    return true;


  }





  /**


   * @dev Function to stop minting new tokens.


   * @return True if the operation was successful.


   */


  function finishMinting() public onlyOwner canMint returns (bool) {


    mintingFinished = true;


    emit MintFinished();


    return true;


  }


}





// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol





/**


 * @title Burnable Token


 * @dev Token that can be irreversibly burned (destroyed).


 */


contract BurnableToken is BasicToken {





  event Burn(address indexed burner, uint256 value);





  /**


   * @dev Burns a specific amount of tokens.


   * @param _value The amount of token to be burned.


   */


  function burn(uint256 _value) public {


    _burn(msg.sender, _value);


  }





  function _burn(address _who, uint256 _value) internal {


    require(_value <= balances[_who]);


    // no need to require value <= totalSupply, since that would imply the


    // sender's balance is greater than the totalSupply, which *should* be an assertion failure





    balances[_who] = balances[_who].sub(_value);


    totalSupply_ = totalSupply_.sub(_value);


    emit Burn(_who, _value);


    emit Transfer(_who, address(0), _value);


  }


}





// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol





/**


 * @title Pausable


 * @dev Base contract which allows children to implement an emergency stop mechanism.


 */


contract Pausable is Ownable {


  event Pause();


  event Unpause();





  bool public paused = false;








  /**


   * @dev Modifier to make a function callable only when the contract is not paused.


   */


  modifier whenNotPaused() {


    require(!paused);


    _;


  }





  /**


   * @dev Modifier to make a function callable only when the contract is paused.


   */


  modifier whenPaused() {


    require(paused);


    _;


  }





  /**


   * @dev called by the owner to pause, triggers stopped state


   */


  function pause() public onlyOwner whenNotPaused {


    paused = true;


    emit Pause();


  }





  /**


   * @dev called by the owner to unpause, returns to normal state


   */


  function unpause() public onlyOwner whenPaused {


    paused = false;


    emit Unpause();


  }


}





// File: openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol





/**


 * @title Pausable token


 * @dev StandardToken modified with pausable transfers.


 **/


contract PausableToken is StandardToken, Pausable {





  function transfer(


    address _to,


    uint256 _value


  )


    public


    whenNotPaused


    returns (bool)


  {


    return super.transfer(_to, _value);


  }





  function transferFrom(


    address _from,


    address _to,


    uint256 _value


  )


    public


    whenNotPaused


    returns (bool)


  {


    return super.transferFrom(_from, _to, _value);


  }





  function approve(


    address _spender,


    uint256 _value


  )


    public


    whenNotPaused


    returns (bool)


  {


    return super.approve(_spender, _value);


  }





  function increaseApproval(


    address _spender,


    uint _addedValue


  )


    public


    whenNotPaused


    returns (bool success)


  {


    return super.increaseApproval(_spender, _addedValue);


  }





  function decreaseApproval(


    address _spender,


    uint _subtractedValue


  )


    public


    whenNotPaused


    returns (bool success)


  {


    return super.decreaseApproval(_spender, _subtractedValue);


  }


}





// File: openzeppelin-solidity/contracts/ownership/Claimable.sol





/**


 * @title Claimable


 * @dev Extension for the Ownable contract, where the ownership needs to be claimed.


 * This allows the new owner to accept the transfer.


 */


contract Claimable is Ownable {


  address public pendingOwner;





  /**


   * @dev Modifier throws if called by any account other than the pendingOwner.


   */


  modifier onlyPendingOwner() {


    require(msg.sender == pendingOwner);


    _;


  }





  /**


   * @dev Allows the current owner to set the pendingOwner address.


   * @param newOwner The address to transfer ownership to.


   */


  function transferOwnership(address newOwner) public onlyOwner {


    pendingOwner = newOwner;


  }





  /**


   * @dev Allows the pendingOwner address to finalize the transfer.


   */


  function claimOwnership() public onlyPendingOwner {


    emit OwnershipTransferred(owner, pendingOwner);


    owner = pendingOwner;


    pendingOwner = address(0);


  }


}





// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol





/**


 * @title SafeERC20


 * @dev Wrappers around ERC20 operations that throw on failure.


 * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,


 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.


 */


library SafeERC20 {


  function safeTransfer(


    ERC20Basic _token,


    address _to,


    uint256 _value


  )


    internal


  {


    require(_token.transfer(_to, _value));


  }





  function safeTransferFrom(


    ERC20 _token,


    address _from,


    address _to,


    uint256 _value


  )


    internal


  {


    require(_token.transferFrom(_from, _to, _value));


  }





  function safeApprove(


    ERC20 _token,


    address _spender,


    uint256 _value


  )


    internal


  {


    require(_token.approve(_spender, _value));


  }


}





// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol





/**


 * @title Contracts that should be able to recover tokens


 * @author SylTi


 * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.


 * This will prevent any accidental loss of tokens.


 */


contract CanReclaimToken is Ownable {


  using SafeERC20 for ERC20Basic;





  /**


   * @dev Reclaim all ERC20Basic compatible tokens


   * @param _token ERC20Basic The address of the token contract


   */


  function reclaimToken(ERC20Basic _token) external onlyOwner {


    uint256 balance = _token.balanceOf(this);


    _token.safeTransfer(owner, balance);


  }





}





// File: contracts/utils/OwnableContract.sol





// empty block is used as this contract just inherits others.


contract OwnableContract is CanReclaimToken, Claimable { } /* solhint-disable-line no-empty-blocks */





// File: contracts/token/WBTC.sol





contract WBTC is StandardToken, DetailedERC20("Wrapped BTC", "WBTC", 8),


    MintableToken, BurnableToken, PausableToken, OwnableContract {





    function burn(uint value) public onlyOwner {


        super.burn(value);


    }





    function finishMinting() public onlyOwner returns (bool) {


        return false;


    }





    function renounceOwnership() public onlyOwner {


        revert("renouncing ownership is blocked");


    }


}

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\WETH9.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2017-12-12


*/





// Copyright (C) 2015, 2016, 2017 Dapphub





// This program is free software: you can redistribute it and/or modify


// it under the terms of the GNU General Public License as published by


// the Free Software Foundation, either version 3 of the License, or


// (at your option) any later version.





// This program is distributed in the hope that it will be useful,


// but WITHOUT ANY WARRANTY; without even the implied warranty of


// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the


// GNU General Public License for more details.





// You should have received a copy of the GNU General Public License


// along with this program.  If not, see <http://www.gnu.org/licenses/>.





pragma solidity ^0.4.18;





contract WETH9 {


    string public name     = "Wrapped Ether";


    string public symbol   = "WETH";


    uint8  public decimals = 18;





    event  Approval(address indexed src, address indexed guy, uint wad);


    event  Transfer(address indexed src, address indexed dst, uint wad);


    event  Deposit(address indexed dst, uint wad);


    event  Withdrawal(address indexed src, uint wad);





    mapping (address => uint)                       public  balanceOf;


    mapping (address => mapping (address => uint))  public  allowance;





    function() public payable {


        deposit();


    }


    function deposit() public payable {


        balanceOf[msg.sender] += msg.value;


        Deposit(msg.sender, msg.value);


    }


    function withdraw(uint wad) public {


        require(balanceOf[msg.sender] >= wad);


        balanceOf[msg.sender] -= wad;


        msg.sender.transfer(wad);


        Withdrawal(msg.sender, wad);


    }





    function totalSupply() public view returns (uint) {


        return this.balance;


    }





    function approve(address guy, uint wad) public returns (bool) {


        allowance[msg.sender][guy] = wad;


        Approval(msg.sender, guy, wad);


        return true;


    }





    function transfer(address dst, uint wad) public returns (bool) {


        return transferFrom(msg.sender, dst, wad);


    }





    function transferFrom(address src, address dst, uint wad)


        public


        returns (bool)


    {


        require(balanceOf[src] >= wad);





        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {


            require(allowance[src][msg.sender] >= wad);


            allowance[src][msg.sender] -= wad;


        }





        balanceOf[src] -= wad;


        balanceOf[dst] += wad;





        Transfer(src, dst, wad);





        return true;


    }


}








/*


                    GNU GENERAL PUBLIC LICENSE


                       Version 3, 29 June 2007





 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>


 Everyone is permitted to copy and distribute verbatim copies


 of this license document, but changing it is not allowed.





                            Preamble





  The GNU General Public License is a free, copyleft license for


software and other kinds of works.





  The licenses for most software and other practical works are designed


to take away your freedom to share and change the works.  By contrast,


the GNU General Public License is intended to guarantee your freedom to


share and change all versions of a program--to make sure it remains free


software for all its users.  We, the Free Software Foundation, use the


GNU General Public License for most of our software; it applies also to


any other work released this way by its authors.  You can apply it to


your programs, too.





  When we speak of free software, we are referring to freedom, not


price.  Our General Public Licenses are designed to make sure that you


have the freedom to distribute copies of free software (and charge for


them if you wish), that you receive source code or can get it if you


want it, that you can change the software or use pieces of it in new


free programs, and that you know you can do these things.





  To protect your rights, we need to prevent others from denying you


these rights or asking you to surrender the rights.  Therefore, you have


certain responsibilities if you distribute copies of the software, or if


you modify it: responsibilities to respect the freedom of others.





  For example, if you distribute copies of such a program, whether


gratis or for a fee, you must pass on to the recipients the same


freedoms that you received.  You must make sure that they, too, receive


or can get the source code.  And you must show them these terms so they


know their rights.





  Developers that use the GNU GPL protect your rights with two steps:


(1) assert copyright on the software, and (2) offer you this License


giving you legal permission to copy, distribute and/or modify it.





  For the developers' and authors' protection, the GPL clearly explains


that there is no warranty for this free software.  For both users' and


authors' sake, the GPL requires that modified versions be marked as


changed, so that their problems will not be attributed erroneously to


authors of previous versions.





  Some devices are designed to deny users access to install or run


modified versions of the software inside them, although the manufacturer


can do so.  This is fundamentally incompatible with the aim of


protecting users' freedom to change the software.  The systematic


pattern of such abuse occurs in the area of products for individuals to


use, which is precisely where it is most unacceptable.  Therefore, we


have designed this version of the GPL to prohibit the practice for those


products.  If such problems arise substantially in other domains, we


stand ready to extend this provision to those domains in future versions


of the GPL, as needed to protect the freedom of users.





  Finally, every program is threatened constantly by software patents.


States should not allow patents to restrict development and use of


software on general-purpose computers, but in those that do, we wish to


avoid the special danger that patents applied to a free program could


make it effectively proprietary.  To prevent this, the GPL assures that


patents cannot be used to render the program non-free.





  The precise terms and conditions for copying, distribution and


modification follow.





                       TERMS AND CONDITIONS





  0. Definitions.





  "This License" refers to version 3 of the GNU General Public License.





  "Copyright" also means copyright-like laws that apply to other kinds of


works, such as semiconductor masks.





  "The Program" refers to any copyrightable work licensed under this


License.  Each licensee is addressed as "you".  "Licensees" and


"recipients" may be individuals or organizations.





  To "modify" a work means to copy from or adapt all or part of the work


in a fashion requiring copyright permission, other than the making of an


exact copy.  The resulting work is called a "modified version" of the


earlier work or a work "based on" the earlier work.





  A "covered work" means either the unmodified Program or a work based


on the Program.





  To "propagate" a work means to do anything with it that, without


permission, would make you directly or secondarily liable for


infringement under applicable copyright law, except executing it on a


computer or modifying a private copy.  Propagation includes copying,


distribution (with or without modification), making available to the


public, and in some countries other activities as well.





  To "convey" a work means any kind of propagation that enables other


parties to make or receive copies.  Mere interaction with a user through


a computer network, with no transfer of a copy, is not conveying.





  An interactive user interface displays "Appropriate Legal Notices"


to the extent that it includes a convenient and prominently visible


feature that (1) displays an appropriate copyright notice, and (2)


tells the user that there is no warranty for the work (except to the


extent that warranties are provided), that licensees may convey the


work under this License, and how to view a copy of this License.  If


the interface presents a list of user commands or options, such as a


menu, a prominent item in the list meets this criterion.





  1. Source Code.





  The "source code" for a work means the preferred form of the work


for making modifications to it.  "Object code" means any non-source


form of a work.





  A "Standard Interface" means an interface that either is an official


standard defined by a recognized standards body, or, in the case of


interfaces specified for a particular programming language, one that


is widely used among developers working in that language.





  The "System Libraries" of an executable work include anything, other


than the work as a whole, that (a) is included in the normal form of


packaging a Major Component, but which is not part of that Major


Component, and (b) serves only to enable use of the work with that


Major Component, or to implement a Standard Interface for which an


implementation is available to the public in source code form.  A


"Major Component", in this context, means a major essential component


(kernel, window system, and so on) of the specific operating system


(if any) on which the executable work runs, or a compiler used to


produce the work, or an object code interpreter used to run it.





  The "Corresponding Source" for a work in object code form means all


the source code needed to generate, install, and (for an executable


work) run the object code and to modify the work, including scripts to


control those activities.  However, it does not include the work's


System Libraries, or general-purpose tools or generally available free


programs which are used unmodified in performing those activities but


which are not part of the work.  For example, Corresponding Source


includes interface definition files associated with source files for


the work, and the source code for shared libraries and dynamically


linked subprograms that the work is specifically designed to require,


such as by intimate data communication or control flow between those


subprograms and other parts of the work.





  The Corresponding Source need not include anything that users


can regenerate automatically from other parts of the Corresponding


Source.





  The Corresponding Source for a work in source code form is that


same work.





  2. Basic Permissions.





  All rights granted under this License are granted for the term of


copyright on the Program, and are irrevocable provided the stated


conditions are met.  This License explicitly affirms your unlimited


permission to run the unmodified Program.  The output from running a


covered work is covered by this License only if the output, given its


content, constitutes a covered work.  This License acknowledges your


rights of fair use or other equivalent, as provided by copyright law.





  You may make, run and propagate covered works that you do not


convey, without conditions so long as your license otherwise remains


in force.  You may convey covered works to others for the sole purpose


of having them make modifications exclusively for you, or provide you


with facilities for running those works, provided that you comply with


the terms of this License in conveying all material for which you do


not control copyright.  Those thus making or running the covered works


for you must do so exclusively on your behalf, under your direction


and control, on terms that prohibit them from making any copies of


your copyrighted material outside their relationship with you.





  Conveying under any other circumstances is permitted solely under


the conditions stated below.  Sublicensing is not allowed; section 10


makes it unnecessary.





  3. Protecting Users' Legal Rights From Anti-Circumvention Law.





  No covered work shall be deemed part of an effective technological


measure under any applicable law fulfilling obligations under article


11 of the WIPO copyright treaty adopted on 20 December 1996, or


similar laws prohibiting or restricting circumvention of such


measures.





  When you convey a covered work, you waive any legal power to forbid


circumvention of technological measures to the extent such circumvention


is effected by exercising rights under this License with respect to


the covered work, and you disclaim any intention to limit operation or


modification of the work as a means of enforcing, against the work's


users, your or third parties' legal rights to forbid circumvention of


technological measures.





  4. Conveying Verbatim Copies.





  You may convey verbatim copies of the Program's source code as you


receive it, in any medium, provided that you conspicuously and


appropriately publish on each copy an appropriate copyright notice;


keep intact all notices stating that this License and any


non-permissive terms added in accord with section 7 apply to the code;


keep intact all notices of the absence of any warranty; and give all


recipients a copy of this License along with the Program.





  You may charge any price or no price for each copy that you convey,


and you may offer support or warranty protection for a fee.





  5. Conveying Modified Source Versions.





  You may convey a work based on the Program, or the modifications to


produce it from the Program, in the form of source code under the


terms of section 4, provided that you also meet all of these conditions:





    a) The work must carry prominent notices stating that you modified


    it, and giving a relevant date.





    b) The work must carry prominent notices stating that it is


    released under this License and any conditions added under section


    7.  This requirement modifies the requirement in section 4 to


    "keep intact all notices".





    c) You must license the entire work, as a whole, under this


    License to anyone who comes into possession of a copy.  This


    License will therefore apply, along with any applicable section 7


    additional terms, to the whole of the work, and all its parts,


    regardless of how they are packaged.  This License gives no


    permission to license the work in any other way, but it does not


    invalidate such permission if you have separately received it.





    d) If the work has interactive user interfaces, each must display


    Appropriate Legal Notices; however, if the Program has interactive


    interfaces that do not display Appropriate Legal Notices, your


    work need not make them do so.





  A compilation of a covered work with other separate and independent


works, which are not by their nature extensions of the covered work,


and which are not combined with it such as to form a larger program,


in or on a volume of a storage or distribution medium, is called an


"aggregate" if the compilation and its resulting copyright are not


used to limit the access or legal rights of the compilation's users


beyond what the individual works permit.  Inclusion of a covered work


in an aggregate does not cause this License to apply to the other


parts of the aggregate.





  6. Conveying Non-Source Forms.





  You may convey a covered work in object code form under the terms


of sections 4 and 5, provided that you also convey the


machine-readable Corresponding Source under the terms of this License,


in one of these ways:





    a) Convey the object code in, or embodied in, a physical product


    (including a physical distribution medium), accompanied by the


    Corresponding Source fixed on a durable physical medium


    customarily used for software interchange.





    b) Convey the object code in, or embodied in, a physical product


    (including a physical distribution medium), accompanied by a


    written offer, valid for at least three years and valid for as


    long as you offer spare parts or customer support for that product


    model, to give anyone who possesses the object code either (1) a


    copy of the Corresponding Source for all the software in the


    product that is covered by this License, on a durable physical


    medium customarily used for software interchange, for a price no


    more than your reasonable cost of physically performing this


    conveying of source, or (2) access to copy the


    Corresponding Source from a network server at no charge.





    c) Convey individual copies of the object code with a copy of the


    written offer to provide the Corresponding Source.  This


    alternative is allowed only occasionally and noncommercially, and


    only if you received the object code with such an offer, in accord


    with subsection 6b.





    d) Convey the object code by offering access from a designated


    place (gratis or for a charge), and offer equivalent access to the


    Corresponding Source in the same way through the same place at no


    further charge.  You need not require recipients to copy the


    Corresponding Source along with the object code.  If the place to


    copy the object code is a network server, the Corresponding Source


    may be on a different server (operated by you or a third party)


    that supports equivalent copying facilities, provided you maintain


    clear directions next to the object code saying where to find the


    Corresponding Source.  Regardless of what server hosts the


    Corresponding Source, you remain obligated to ensure that it is


    available for as long as needed to satisfy these requirements.





    e) Convey the object code using peer-to-peer transmission, provided


    you inform other peers where the object code and Corresponding


    Source of the work are being offered to the general public at no


    charge under subsection 6d.





  A separable portion of the object code, whose source code is excluded


from the Corresponding Source as a System Library, need not be


included in conveying the object code work.





  A "User Product" is either (1) a "consumer product", which means any


tangible personal property which is normally used for personal, family,


or household purposes, or (2) anything designed or sold for incorporation


into a dwelling.  In determining whether a product is a consumer product,


doubtful cases shall be resolved in favor of coverage.  For a particular


product received by a particular user, "normally used" refers to a


typical or common use of that class of product, regardless of the status


of the particular user or of the way in which the particular user


actually uses, or expects or is expected to use, the product.  A product


is a consumer product regardless of whether the product has substantial


commercial, industrial or non-consumer uses, unless such uses represent


the only significant mode of use of the product.





  "Installation Information" for a User Product means any methods,


procedures, authorization keys, or other information required to install


and execute modified versions of a covered work in that User Product from


a modified version of its Corresponding Source.  The information must


suffice to ensure that the continued functioning of the modified object


code is in no case prevented or interfered with solely because


modification has been made.





  If you convey an object code work under this section in, or with, or


specifically for use in, a User Product, and the conveying occurs as


part of a transaction in which the right of possession and use of the


User Product is transferred to the recipient in perpetuity or for a


fixed term (regardless of how the transaction is characterized), the


Corresponding Source conveyed under this section must be accompanied


by the Installation Information.  But this requirement does not apply


if neither you nor any third party retains the ability to install


modified object code on the User Product (for example, the work has


been installed in ROM).





  The requirement to provide Installation Information does not include a


requirement to continue to provide support service, warranty, or updates


for a work that has been modified or installed by the recipient, or for


the User Product in which it has been modified or installed.  Access to a


network may be denied when the modification itself materially and


adversely affects the operation of the network or violates the rules and


protocols for communication across the network.





  Corresponding Source conveyed, and Installation Information provided,


in accord with this section must be in a format that is publicly


documented (and with an implementation available to the public in


source code form), and must require no special password or key for


unpacking, reading or copying.





  7. Additional Terms.





  "Additional permissions" are terms that supplement the terms of this


License by making exceptions from one or more of its conditions.


Additional permissions that are applicable to the entire Program shall


be treated as though they were included in this License, to the extent


that they are valid under applicable law.  If additional permissions


apply only to part of the Program, that part may be used separately


under those permissions, but the entire Program remains governed by


this License without regard to the additional permissions.





  When you convey a copy of a covered work, you may at your option


remove any additional permissions from that copy, or from any part of


it.  (Additional permissions may be written to require their own


removal in certain cases when you modify the work.)  You may place


additional permissions on material, added by you to a covered work,


for which you have or can give appropriate copyright permission.





  Notwithstanding any other provision of this License, for material you


add to a covered work, you may (if authorized by the copyright holders of


that material) supplement the terms of this License with terms:





    a) Disclaiming warranty or limiting liability differently from the


    terms of sections 15 and 16 of this License; or





    b) Requiring preservation of specified reasonable legal notices or


    author attributions in that material or in the Appropriate Legal


    Notices displayed by works containing it; or





    c) Prohibiting misrepresentation of the origin of that material, or


    requiring that modified versions of such material be marked in


    reasonable ways as different from the original version; or





    d) Limiting the use for publicity purposes of names of licensors or


    authors of the material; or





    e) Declining to grant rights under trademark law for use of some


    trade names, trademarks, or service marks; or





    f) Requiring indemnification of licensors and authors of that


    material by anyone who conveys the material (or modified versions of


    it) with contractual assumptions of liability to the recipient, for


    any liability that these contractual assumptions directly impose on


    those licensors and authors.





  All other non-permissive additional terms are considered "further


restrictions" within the meaning of section 10.  If the Program as you


received it, or any part of it, contains a notice stating that it is


governed by this License along with a term that is a further


restriction, you may remove that term.  If a license document contains


a further restriction but permits relicensing or conveying under this


License, you may add to a covered work material governed by the terms


of that license document, provided that the further restriction does


not survive such relicensing or conveying.





  If you add terms to a covered work in accord with this section, you


must place, in the relevant source files, a statement of the


additional terms that apply to those files, or a notice indicating


where to find the applicable terms.





  Additional terms, permissive or non-permissive, may be stated in the


form of a separately written license, or stated as exceptions;


the above requirements apply either way.





  8. Termination.





  You may not propagate or modify a covered work except as expressly


provided under this License.  Any attempt otherwise to propagate or


modify it is void, and will automatically terminate your rights under


this License (including any patent licenses granted under the third


paragraph of section 11).





  However, if you cease all violation of this License, then your


license from a particular copyright holder is reinstated (a)


provisionally, unless and until the copyright holder explicitly and


finally terminates your license, and (b) permanently, if the copyright


holder fails to notify you of the violation by some reasonable means


prior to 60 days after the cessation.





  Moreover, your license from a particular copyright holder is


reinstated permanently if the copyright holder notifies you of the


violation by some reasonable means, this is the first time you have


received notice of violation of this License (for any work) from that


copyright holder, and you cure the violation prior to 30 days after


your receipt of the notice.





  Termination of your rights under this section does not terminate the


licenses of parties who have received copies or rights from you under


this License.  If your rights have been terminated and not permanently


reinstated, you do not qualify to receive new licenses for the same


material under section 10.





  9. Acceptance Not Required for Having Copies.





  You are not required to accept this License in order to receive or


run a copy of the Program.  Ancillary propagation of a covered work


occurring solely as a consequence of using peer-to-peer transmission


to receive a copy likewise does not require acceptance.  However,


nothing other than this License grants you permission to propagate or


modify any covered work.  These actions infringe copyright if you do


not accept this License.  Therefore, by modifying or propagating a


covered work, you indicate your acceptance of this License to do so.





  10. Automatic Licensing of Downstream Recipients.





  Each time you convey a covered work, the recipient automatically


receives a license from the original licensors, to run, modify and


propagate that work, subject to this License.  You are not responsible


for enforcing compliance by third parties with this License.





  An "entity transaction" is a transaction transferring control of an


organization, or substantially all assets of one, or subdividing an


organization, or merging organizations.  If propagation of a covered


work results from an entity transaction, each party to that


transaction who receives a copy of the work also receives whatever


licenses to the work the party's predecessor in interest had or could


give under the previous paragraph, plus a right to possession of the


Corresponding Source of the work from the predecessor in interest, if


the predecessor has it or can get it with reasonable efforts.





  You may not impose any further restrictions on the exercise of the


rights granted or affirmed under this License.  For example, you may


not impose a license fee, royalty, or other charge for exercise of


rights granted under this License, and you may not initiate litigation


(including a cross-claim or counterclaim in a lawsuit) alleging that


any patent claim is infringed by making, using, selling, offering for


sale, or importing the Program or any portion of it.





  11. Patents.





  A "contributor" is a copyright holder who authorizes use under this


License of the Program or a work on which the Program is based.  The


work thus licensed is called the contributor's "contributor version".





  A contributor's "essential patent claims" are all patent claims


owned or controlled by the contributor, whether already acquired or


hereafter acquired, that would be infringed by some manner, permitted


by this License, of making, using, or selling its contributor version,


but do not include claims that would be infringed only as a


consequence of further modification of the contributor version.  For


purposes of this definition, "control" includes the right to grant


patent sublicenses in a manner consistent with the requirements of


this License.





  Each contributor grants you a non-exclusive, worldwide, royalty-free


patent license under the contributor's essential patent claims, to


make, use, sell, offer for sale, import and otherwise run, modify and


propagate the contents of its contributor version.





  In the following three paragraphs, a "patent license" is any express


agreement or commitment, however denominated, not to enforce a patent


(such as an express permission to practice a patent or covenant not to


sue for patent infringement).  To "grant" such a patent license to a


party means to make such an agreement or commitment not to enforce a


patent against the party.





  If you convey a covered work, knowingly relying on a patent license,


and the Corresponding Source of the work is not available for anyone


to copy, free of charge and under the terms of this License, through a


publicly available network server or other readily accessible means,


then you must either (1) cause the Corresponding Source to be so


available, or (2) arrange to deprive yourself of the benefit of the


patent license for this particular work, or (3) arrange, in a manner


consistent with the requirements of this License, to extend the patent


license to downstream recipients.  "Knowingly relying" means you have


actual knowledge that, but for the patent license, your conveying the


covered work in a country, or your recipient's use of the covered work


in a country, would infringe one or more identifiable patents in that


country that you have reason to believe are valid.





  If, pursuant to or in connection with a single transaction or


arrangement, you convey, or propagate by procuring conveyance of, a


covered work, and grant a patent license to some of the parties


receiving the covered work authorizing them to use, propagate, modify


or convey a specific copy of the covered work, then the patent license


you grant is automatically extended to all recipients of the covered


work and works based on it.





  A patent license is "discriminatory" if it does not include within


the scope of its coverage, prohibits the exercise of, or is


conditioned on the non-exercise of one or more of the rights that are


specifically granted under this License.  You may not convey a covered


work if you are a party to an arrangement with a third party that is


in the business of distributing software, under which you make payment


to the third party based on the extent of your activity of conveying


the work, and under which the third party grants, to any of the


parties who would receive the covered work from you, a discriminatory


patent license (a) in connection with copies of the covered work


conveyed by you (or copies made from those copies), or (b) primarily


for and in connection with specific products or compilations that


contain the covered work, unless you entered into that arrangement,


or that patent license was granted, prior to 28 March 2007.





  Nothing in this License shall be construed as excluding or limiting


any implied license or other defenses to infringement that may


otherwise be available to you under applicable patent law.





  12. No Surrender of Others' Freedom.





  If conditions are imposed on you (whether by court order, agreement or


otherwise) that contradict the conditions of this License, they do not


excuse you from the conditions of this License.  If you cannot convey a


covered work so as to satisfy simultaneously your obligations under this


License and any other pertinent obligations, then as a consequence you may


not convey it at all.  For example, if you agree to terms that obligate you


to collect a royalty for further conveying from those to whom you convey


the Program, the only way you could satisfy both those terms and this


License would be to refrain entirely from conveying the Program.





  13. Use with the GNU Affero General Public License.





  Notwithstanding any other provision of this License, you have


permission to link or combine any covered work with a work licensed


under version 3 of the GNU Affero General Public License into a single


combined work, and to convey the resulting work.  The terms of this


License will continue to apply to the part which is the covered work,


but the special requirements of the GNU Affero General Public License,


section 13, concerning interaction through a network will apply to the


combination as such.





  14. Revised Versions of this License.





  The Free Software Foundation may publish revised and/or new versions of


the GNU General Public License from time to time.  Such new versions will


be similar in spirit to the present version, but may differ in detail to


address new problems or concerns.





  Each version is given a distinguishing version number.  If the


Program specifies that a certain numbered version of the GNU General


Public License "or any later version" applies to it, you have the


option of following the terms and conditions either of that numbered


version or of any later version published by the Free Software


Foundation.  If the Program does not specify a version number of the


GNU General Public License, you may choose any version ever published


by the Free Software Foundation.





  If the Program specifies that a proxy can decide which future


versions of the GNU General Public License can be used, that proxy's


public statement of acceptance of a version permanently authorizes you


to choose that version for the Program.





  Later license versions may give you additional or different


permissions.  However, no additional obligations are imposed on any


author or copyright holder as a result of your choosing to follow a


later version.





  15. Disclaimer of Warranty.





  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY


APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT


HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY


OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,


THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR


PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM


IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF


ALL NECESSARY SERVICING, REPAIR OR CORRECTION.





  16. Limitation of Liability.





  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING


WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS


THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY


GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE


USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF


DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD


PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),


EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF


SUCH DAMAGES.





  17. Interpretation of Sections 15 and 16.





  If the disclaimer of warranty and limitation of liability provided


above cannot be given local legal effect according to their terms,


reviewing courts shall apply local law that most closely approximates


an absolute waiver of all civil liability in connection with the


Program, unless a warranty or assumption of liability accompanies a


copy of the Program in return for a fee.





                     END OF TERMS AND CONDITIONS





            How to Apply These Terms to Your New Programs





  If you develop a new program, and you want it to be of the greatest


possible use to the public, the best way to achieve this is to make it


free software which everyone can redistribute and change under these terms.





  To do so, attach the following notices to the program.  It is safest


to attach them to the start of each source file to most effectively


state the exclusion of warranty; and each file should have at least


the "copyright" line and a pointer to where the full notice is found.





    <one line to give the program's name and a brief idea of what it does.>


    Copyright (C) <year>  <name of author>





    This program is free software: you can redistribute it and/or modify


    it under the terms of the GNU General Public License as published by


    the Free Software Foundation, either version 3 of the License, or


    (at your option) any later version.





    This program is distributed in the hope that it will be useful,


    but WITHOUT ANY WARRANTY; without even the implied warranty of


    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the


    GNU General Public License for more details.





    You should have received a copy of the GNU General Public License


    along with this program.  If not, see <http://www.gnu.org/licenses/>.





Also add information on how to contact you by electronic and paper mail.





  If the program does terminal interaction, make it output a short


notice like this when it starts in an interactive mode:





    <program>  Copyright (C) <year>  <name of author>


    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.


    This is free software, and you are welcome to redistribute it


    under certain conditions; type `show c' for details.





The hypothetical commands `show w' and `show c' should show the appropriate


parts of the General Public License.  Of course, your program's commands


might be different; for a GUI interface, you would use an "about box".





  You should also get your employer (if you work as a programmer) or school,


if any, to sign a "copyright disclaimer" for the program, if necessary.


For more information on this, and how to apply and follow the GNU GPL, see


<http://www.gnu.org/licenses/>.





  The GNU General Public License does not permit incorporating your program


into proprietary programs.  If your program is a subroutine library, you


may consider it more useful to permit linking proprietary applications with


the library.  If this is what you want to do, use the GNU Lesser General


Public License instead of this License.  But first, please read


<http://www.gnu.org/philosophy/why-not-lgpl.html>.





*/

--------------------------------------------------
File End
--------------------------------------------------


F:\cross_chain_vul_det_based_llm\dedup_non_vul_bridges_output_aliyun_721\BoringDAO Bridge\contracts\xVEMPToken.sol
File type: .sol
/**


 *Submitted for verification at Etherscan.io on 2021-09-23


*/





// SPDX-License-Identifier: MIT





pragma solidity =0.6.12;


pragma experimental ABIEncoderV2;








// 


/*


 * @dev Provides information about the current execution context, including the


 * sender of the transaction and its data. While these are generally available


 * via msg.sender and msg.data, they should not be accessed in such a direct


 * manner, since when dealing with GSN meta-transactions the account sending and


 * paying for execution may not be the actual sender (as far as an application


 * is concerned).


 *


 * This contract is only required for intermediate, library-like contracts.


 */


abstract contract Context {


    function _msgSender() internal view virtual returns (address payable) {


        return msg.sender;


    }





    function _msgData() internal view virtual returns (bytes memory) {


        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691


        return msg.data;


    }


}





//





// 


/**


 * @dev Interface of the ERC20 standard as defined in the EIP.


 */


interface IERC20 {


    /**


     * @dev Returns the amount of tokens in existence.


     */


    function totalSupply() external view returns (uint256);





    /**


     * @dev Returns the amount of tokens owned by `account`.


     */


    function balanceOf(address account) external view returns (uint256);





    /**


     * @dev Moves `amount` tokens from the caller's account to `recipient`.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transfer(address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Returns the remaining number of tokens that `spender` will be


     * allowed to spend on behalf of `owner` through {transferFrom}. This is


     * zero by default.


     *


     * This value changes when {approve} or {transferFrom} are called.


     */


    function allowance(address owner, address spender) external view returns (uint256);





    /**


     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * IMPORTANT: Beware that changing an allowance with this method brings the risk


     * that someone may use both the old and the new allowance by unfortunate


     * transaction ordering. One possible solution to mitigate this race


     * condition is to first reduce the spender's allowance to 0 and set the


     * desired value afterwards:


     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729


     *


     * Emits an {Approval} event.


     */


    function approve(address spender, uint256 amount) external returns (bool);





    /**


     * @dev Moves `amount` tokens from `sender` to `recipient` using the


     * allowance mechanism. `amount` is then deducted from the caller's


     * allowance.


     *


     * Returns a boolean value indicating whether the operation succeeded.


     *


     * Emits a {Transfer} event.


     */


    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);





    /**


     * @dev Emitted when `value` tokens are moved from one account (`from`) to


     * another (`to`).


     *


     * Note that `value` may be zero.


     */


    event Transfer(address indexed from, address indexed to, uint256 value);





    /**


     * @dev Emitted when the allowance of a `spender` for an `owner` is set by


     * a call to {approve}. `value` is the new allowance.


     */


    event Approval(address indexed owner, address indexed spender, uint256 value);


}





// 


/**


 * @dev Wrappers over Solidity's arithmetic operations with added overflow


 * checks.


 *


 * Arithmetic operations in Solidity wrap on overflow. This can easily result


 * in bugs, because programmers usually assume that an overflow raises an


 * error, which is the standard behavior in high level programming languages.


 * `SafeMath` restores this intuition by reverting the transaction when an


 * operation overflows.


 *


 * Using this library instead of the unchecked operations eliminates an entire


 * class of bugs, so it's recommended to use it always.


 */


library SafeMath {


    /**


     * @dev Returns the addition of two unsigned integers, with an overflow flag.


     *


     * _Available since v3.4._


     */


    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        uint256 c = a + b;


        if (c < a) return (false, 0);


        return (true, c);


    }





    /**


     * @dev Returns the substraction of two unsigned integers, with an overflow flag.


     *


     * _Available since v3.4._


     */


    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        if (b > a) return (false, 0);


        return (true, a - b);


    }





    /**


     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.


     *


     * _Available since v3.4._


     */


    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the


        // benefit is lost if 'b' is also tested.


        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522


        if (a == 0) return (true, 0);


        uint256 c = a * b;


        if (c / a != b) return (false, 0);


        return (true, c);


    }





    /**


     * @dev Returns the division of two unsigned integers, with a division by zero flag.


     *


     * _Available since v3.4._


     */


    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        if (b == 0) return (false, 0);


        return (true, a / b);


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.


     *


     * _Available since v3.4._


     */


    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {


        if (b == 0) return (false, 0);


        return (true, a % b);


    }





    /**


     * @dev Returns the addition of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `+` operator.


     *


     * Requirements:


     *


     * - Addition cannot overflow.


     */


    function add(uint256 a, uint256 b) internal pure returns (uint256) {


        uint256 c = a + b;


        require(c >= a, "SafeMath: addition overflow");


        return c;


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting on


     * overflow (when the result is negative).


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {


        require(b <= a, "SafeMath: subtraction overflow");


        return a - b;


    }





    /**


     * @dev Returns the multiplication of two unsigned integers, reverting on


     * overflow.


     *


     * Counterpart to Solidity's `*` operator.


     *


     * Requirements:


     *


     * - Multiplication cannot overflow.


     */


    function mul(uint256 a, uint256 b) internal pure returns (uint256) {


        if (a == 0) return 0;


        uint256 c = a * b;


        require(c / a == b, "SafeMath: multiplication overflow");


        return c;


    }





    /**


     * @dev Returns the integer division of two unsigned integers, reverting on


     * division by zero. The result is rounded towards zero.


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b) internal pure returns (uint256) {


        require(b > 0, "SafeMath: division by zero");


        return a / b;


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * reverting when dividing by zero.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {


        require(b > 0, "SafeMath: modulo by zero");


        return a % b;


    }





    /**


     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on


     * overflow (when the result is negative).


     *


     * CAUTION: This function is deprecated because it requires allocating memory for the error


     * message unnecessarily. For custom revert reasons use {trySub}.


     *


     * Counterpart to Solidity's `-` operator.


     *


     * Requirements:


     *


     * - Subtraction cannot overflow.


     */


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b <= a, errorMessage);


        return a - b;


    }





    /**


     * @dev Returns the integer division of two unsigned integers, reverting with custom message on


     * division by zero. The result is rounded towards zero.


     *


     * CAUTION: This function is deprecated because it requires allocating memory for the error


     * message unnecessarily. For custom revert reasons use {tryDiv}.


     *


     * Counterpart to Solidity's `/` operator. Note: this function uses a


     * `revert` opcode (which leaves remaining gas untouched) while Solidity


     * uses an invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b > 0, errorMessage);


        return a / b;


    }





    /**


     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),


     * reverting with custom message when dividing by zero.


     *


     * CAUTION: This function is deprecated because it requires allocating memory for the error


     * message unnecessarily. For custom revert reasons use {tryMod}.


     *


     * Counterpart to Solidity's `%` operator. This function uses a `revert`


     * opcode (which leaves remaining gas untouched) while Solidity uses an


     * invalid opcode to revert (consuming all remaining gas).


     *


     * Requirements:


     *


     * - The divisor cannot be zero.


     */


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b > 0, errorMessage);


        return a % b;


    }


}





// 


/**


 * @dev Collection of functions related to the address type


 */


library Address {


    /**


     * @dev Returns true if `account` is a contract.


     *


     * [IMPORTANT]


     * ====


     * It is unsafe to assume that an address for which this function returns


     * false is an externally-owned account (EOA) and not a contract.


     *


     * Among others, `isContract` will return false for the following


     * types of addresses:


     *


     *  - an externally-owned account


     *  - a contract in construction


     *  - an address where a contract will be created


     *  - an address where a contract lived, but was destroyed


     * ====


     */


    function isContract(address account) internal view returns (bool) {


        // This method relies on extcodesize, which returns 0 for contracts in


        // construction, since the code is only stored at the end of the


        // constructor execution.





        uint256 size;


        // solhint-disable-next-line no-inline-assembly


        assembly { size := extcodesize(account) }


        return size > 0;


    }





    /**


     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to


     * `recipient`, forwarding all available gas and reverting on errors.


     *


     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost


     * of certain opcodes, possibly making contracts go over the 2300 gas limit


     * imposed by `transfer`, making them unable to receive funds via


     * `transfer`. {sendValue} removes this limitation.


     *


     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].


     *


     * IMPORTANT: because control is transferred to `recipient`, care must be


     * taken to not create reentrancy vulnerabilities. Consider using


     * {ReentrancyGuard} or the


     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].


     */


    function sendValue(address payable recipient, uint256 amount) internal {


        require(address(this).balance >= amount, "Address: insufficient balance");





        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value


        (bool success, ) = recipient.call{ value: amount }("");


        require(success, "Address: unable to send value, recipient may have reverted");


    }





    /**


     * @dev Performs a Solidity function call using a low level `call`. A


     * plain`call` is an unsafe replacement for a function call: use this


     * function instead.


     *


     * If `target` reverts with a revert reason, it is bubbled up by this


     * function (like regular Solidity function calls).


     *


     * Returns the raw returned data. To convert to the expected return value,


     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].


     *


     * Requirements:


     *


     * - `target` must be a contract.


     * - calling `target` with `data` must not revert.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data) internal returns (bytes memory) {


      return functionCall(target, data, "Address: low-level call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with


     * `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {


        return functionCallWithValue(target, data, 0, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but also transferring `value` wei to `target`.


     *


     * Requirements:


     *


     * - the calling contract must have an ETH balance of at least `value`.


     * - the called Solidity function must be `payable`.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {


        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");


    }





    /**


     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but


     * with `errorMessage` as a fallback revert reason when `target` reverts.


     *


     * _Available since v3.1._


     */


    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {


        require(address(this).balance >= value, "Address: insufficient balance for call");


        require(isContract(target), "Address: call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.call{ value: value }(data);


        return _verifyCallResult(success, returndata, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but performing a static call.


     *


     * _Available since v3.3._


     */


    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {


        return functionStaticCall(target, data, "Address: low-level static call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],


     * but performing a static call.


     *


     * _Available since v3.3._


     */


    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {


        require(isContract(target), "Address: static call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.staticcall(data);


        return _verifyCallResult(success, returndata, errorMessage);


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],


     * but performing a delegate call.


     *


     * _Available since v3.4._


     */


    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {


        return functionDelegateCall(target, data, "Address: low-level delegate call failed");


    }





    /**


     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],


     * but performing a delegate call.


     *


     * _Available since v3.4._


     */


    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {


        require(isContract(target), "Address: delegate call to non-contract");





        // solhint-disable-next-line avoid-low-level-calls


        (bool success, bytes memory returndata) = target.delegatecall(data);


        return _verifyCallResult(success, returndata, errorMessage);


    }





    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {


        if (success) {


            return returndata;


        } else {


            // Look for revert reason and bubble it up if present


            if (returndata.length > 0) {


                // The easiest way to bubble the revert reason is using memory via assembly





                // solhint-disable-next-line no-inline-assembly


                assembly {


                    let returndata_size := mload(returndata)


                    revert(add(32, returndata), returndata_size)


                }


            } else {


                revert(errorMessage);


            }


        }


    }


}





// 


/**


 * @dev Contract module which provides a basic access control mechanism, where


 * there is an account (an owner) that can be granted exclusive access to


 * specific functions.


 *


 * By default, the owner account will be the one that deploys the contract. This


 * can later be changed with {transferOwnership}.


 *


 * This module is used through inheritance. It will make available the modifier


 * `onlyOwner`, which can be applied to your functions to restrict their use to


 * the owner.


 */


abstract contract Ownable is Context {


    address private _owner;





    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);





    /**


     * @dev Initializes the contract setting the deployer as the initial owner.


     */


    constructor () internal {


        address msgSender = _msgSender();


        _owner = msgSender;


        emit OwnershipTransferred(address(0), msgSender);


    }





    /**


     * @dev Returns the address of the current owner.


     */


    function owner() public view virtual returns (address) {


        return _owner;


    }





    /**


     * @dev Throws if called by any account other than the owner.


     */


    modifier onlyOwner() {


        require(owner() == _msgSender(), "Ownable: caller is not the owner");


        _;


    }





    /**


     * @dev Leaves the contract without owner. It will not be possible to call


     * `onlyOwner` functions anymore. Can only be called by the current owner.


     *


     * NOTE: Renouncing ownership will leave the contract without an owner,


     * thereby removing any functionality that is only available to the owner.


     */


    function renounceOwnership() public virtual onlyOwner {


        emit OwnershipTransferred(_owner, address(0));


        _owner = address(0);


    }





    /**


     * @dev Transfers ownership of the contract to a new account (`newOwner`).


     * Can only be called by the current owner.


     */


    function transferOwnership(address newOwner) public virtual onlyOwner {


        require(newOwner != address(0), "Ownable: new owner is the zero address");


        emit OwnershipTransferred(_owner, newOwner);


        _owner = newOwner;


    }


}





/**


 * @dev Implementation of the {IERC20} interface.


 *


 * This implementation is agnostic to the way tokens are created. This means


 * that a supply mechanism has to be added in a derived contract using {_mint}.


 * For a generic mechanism see {ERC20PresetMinterPauser}.


 *


 * TIP: For a detailed writeup see our guide


 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How


 * to implement supply mechanisms].


 *


 * We have followed general OpenZeppelin guidelines: functions revert instead


 * of returning `false` on failure. This behavior is nonetheless conventional


 * and does not conflict with the expectations of ERC20 applications.


 *


 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.


 * This allows applications to reconstruct the allowance for all accounts just


 * by listening to said events. Other implementations of the EIP may not emit


 * these events, as it isn't required by the specification.


 *


 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}


 * functions have been added to mitigate the well-known issues around setting


 * allowances. See {IERC20-approve}.


 */


contract ERC20 is Context, IERC20 {


    using SafeMath for uint256;


    using Address for address;





    mapping (address => uint256) private _balances;





    mapping (address => mapping (address => uint256)) private _allowances;





    uint256 private _totalSupply;





    string private _name;


    string private _symbol;


    uint8 private _decimals;


    


    /// @notice A record of each accounts delegate


    mapping (address => address) public delegates;





    /// @notice A checkpoint for marking number of votes from a given block


    struct Checkpoint {


        uint32 fromBlock;


        uint256 votes;


    }





    /// @notice A record of votes checkpoints for each account, by index


    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;





    /// @notice The number of checkpoints for each account


    mapping (address => uint32) public numCheckpoints;





    /// @notice The EIP-712 typehash for the contract's domain


    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");





    /// @notice The EIP-712 typehash for the delegation struct used by the contract


    bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");





    /// @notice A record of states for signing / validating signatures


    mapping (address => uint) public nonces;





    /// @notice An event thats emitted when an account changes its delegate


    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);





    /// @notice An event thats emitted when a delegate account's vote balance changes


    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);





    /**


     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with


     * a default value of 18.


     *


     * To select a different value for {decimals}, use {_setupDecimals}.


     *


     * All three of these values are immutable: they can only be set once during


     * construction.


     */


    constructor (string memory name, string memory symbol) public {


        _name = name;


        _symbol = symbol;


        _decimals = 18;


    }





    /**


     * @dev Returns the name of the token.


     */


    function name() public view returns (string memory) {


        return _name;


    }





    /**


     * @dev Returns the symbol of the token, usually a shorter version of the


     * name.


     */


    function symbol() public view returns (string memory) {


        return _symbol;


    }





    /**


     * @dev Returns the number of decimals used to get its user representation.


     * For example, if `decimals` equals `2`, a balance of `505` tokens should


     * be displayed to a user as `5,05` (`505 / 10 ** 2`).


     *


     * Tokens usually opt for a value of 18, imitating the relationship between


     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is


     * called.


     *


     * NOTE: This information is only used for _display_ purposes: it in


     * no way affects any of the arithmetic of the contract, including


     * {IERC20-balanceOf} and {IERC20-transfer}.


     */


    function decimals() public view returns (uint8) {


        return _decimals;


    }





    /**


     * @dev See {IERC20-totalSupply}.


     */


    function totalSupply() public view override returns (uint256) {


        return _totalSupply;


    }





    /**


     * @dev See {IERC20-balanceOf}.


     */


    function balanceOf(address account) public view override returns (uint256) {


        return _balances[account];


    }





    /**


     * @dev See {IERC20-transfer}.


     *


     * Requirements:


     *


     * - `recipient` cannot be the zero address.


     * - the caller must have a balance of at least `amount`.


     */


    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(_msgSender(), recipient, amount);


        return true;


    }





    /**


     * @dev See {IERC20-allowance}.


     */


    function allowance(address owner, address spender) public view virtual override returns (uint256) {


        return _allowances[owner][spender];


    }





    /**


     * @dev See {IERC20-approve}.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function approve(address spender, uint256 amount) public virtual override returns (bool) {


        _approve(_msgSender(), spender, amount);


        return true;


    }





    /**


     * @dev See {IERC20-transferFrom}.


     *


     * Emits an {Approval} event indicating the updated allowance. This is not


     * required by the EIP. See the note at the beginning of {ERC20};


     *


     * Requirements:


     * - `sender` and `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     * - the caller must have allowance for ``sender``'s tokens of at least


     * `amount`.


     */


    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {


        _transfer(sender, recipient, amount);


        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));


        return true;


    }





    /**


     * @dev Atomically increases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     */


    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));


        return true;


    }





    /**


     * @dev Atomically decreases the allowance granted to `spender` by the caller.


     *


     * This is an alternative to {approve} that can be used as a mitigation for


     * problems described in {IERC20-approve}.


     *


     * Emits an {Approval} event indicating the updated allowance.


     *


     * Requirements:


     *


     * - `spender` cannot be the zero address.


     * - `spender` must have allowance for the caller of at least


     * `subtractedValue`.


     */


    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {


        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));


        return true;


    }





    /**


     * @dev Moves tokens `amount` from `sender` to `recipient`.


     *


     * This is internal function is equivalent to {transfer}, and can be used to


     * e.g. implement automatic token fees, slashing mechanisms, etc.


     *


     * Emits a {Transfer} event.


     *


     * Requirements:


     *


     * - `sender` cannot be the zero address.


     * - `recipient` cannot be the zero address.


     * - `sender` must have a balance of at least `amount`.


     */


    function _transfer(address sender, address recipient, uint256 amount) internal virtual {


        require(sender != address(0), "ERC20: transfer from the zero address");


        require(recipient != address(0), "ERC20: transfer to the zero address");





        _beforeTokenTransfer(sender, recipient, amount);





        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");


        _balances[recipient] = _balances[recipient].add(amount);


        emit Transfer(sender, recipient, amount);


        


        _moveDelegates(delegates[sender], delegates[recipient], amount);


    }





    /** @dev Creates `amount` tokens and assigns them to `account`, increasing


     * the total supply.


     *


     * Emits a {Transfer} event with `from` set to the zero address.


     *


     * Requirements


     *


     * - `to` cannot be the zero address.


     */


    function _mint(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: mint to the zero address");





        _beforeTokenTransfer(address(0), account, amount);





        _totalSupply = _totalSupply.add(amount);


        _balances[account] = _balances[account].add(amount);


        emit Transfer(address(0), account, amount);


        


        _moveDelegates(address(0), delegates[account], amount);


    }





    /**


     * @dev Destroys `amount` tokens from `account`, reducing the


     * total supply.


     *


     * Emits a {Transfer} event with `to` set to the zero address.


     *


     * Requirements


     *


     * - `account` cannot be the zero address.


     * - `account` must have at least `amount` tokens.


     */


    function _burn(address account, uint256 amount) internal virtual {


        require(account != address(0), "ERC20: burn from the zero address");





        _beforeTokenTransfer(account, address(0), amount);





        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");


        _totalSupply = _totalSupply.sub(amount);


        emit Transfer(account, address(0), amount);


    }





    /**


     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.


     *


     * This is internal function is equivalent to `approve`, and can be used to


     * e.g. set automatic allowances for certain subsystems, etc.


     *


     * Emits an {Approval} event.


     *


     * Requirements:


     *


     * - `owner` cannot be the zero address.


     * - `spender` cannot be the zero address.


     */


    function _approve(address owner, address spender, uint256 amount) internal virtual {


        require(owner != address(0), "ERC20: approve from the zero address");


        require(spender != address(0), "ERC20: approve to the zero address");





        _allowances[owner][spender] = amount;


        emit Approval(owner, spender, amount);


    }





    /**


     * @dev Sets {decimals} to a value other than the default one of 18.


     *


     * WARNING: This function should only be called from the constructor. Most


     * applications that interact with token contracts will not expect


     * {decimals} to ever change, and may work incorrectly if it does.


     */


    function _setupDecimals(uint8 decimals_) internal {


        _decimals = decimals_;


    }





    /**


     * @dev Hook that is called before any transfer of tokens. This includes


     * minting and burning.


     *


     * Calling conditions:


     *


     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens


     * will be to transferred to `to`.


     * - when `from` is zero, `amount` tokens will be minted for `to`.


     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.


     * - `from` and `to` are never both zero.


     *


     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].


     */


    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }





    /**


     * @notice Delegate votes from `msg.sender` to `delegatee`


     * @param delegatee The address to delegate votes to


     */


    function delegate(address delegatee) external {


        return _delegate(msg.sender, delegatee);


    }


    


    /**


     * @notice Delegates votes from signatory to `delegatee`


     * @param delegatee The address to delegate votes to


     * @param nonce The contract state required to match the signature


     * @param expiry The time at which to expire the signature


     * @param v The recovery byte of the signature


     * @param r Half of the ECDSA signature pair


     * @param s Half of the ECDSA signature pair


     */


    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {


        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));


        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));


        bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));


        address signatory = ecrecover(digest, v, r, s);


        require(signatory != address(0), "xVemp::delegateBySig: invalid signature");


        require(nonce == nonces[signatory]++, "xVemp::delegateBySig: invalid nonce");


        require(now <= expiry, "xVemp::delegateBySig: signature expired");


        return _delegate(signatory, delegatee);


    }





    /**


     * @notice Gets the current votes balance for `account`


     * @param account The address to get votes balance


     * @return The number of current votes for `account`


     */


    function getCurrentVotes(address account) external view returns (uint256) {


        uint32 nCheckpoints = numCheckpoints[account];


        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;


    }





    /**


     * @notice Determine the prior number of votes for an account as of a block number


     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.


     * @param account The address of the account to check


     * @param blockNumber The block number to get the vote balance at


     * @return The number of votes the account had as of the given block


     */


    function getPriorVotes(address account, uint blockNumber) public view returns (uint256) {


        require(blockNumber < block.number, "xVemp::getPriorVotes: not yet determined");





        uint32 nCheckpoints = numCheckpoints[account];


        if (nCheckpoints == 0) {


            return 0;


        }





        // First check most recent balance


        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {


            return checkpoints[account][nCheckpoints - 1].votes;


        }





        // Next check implicit zero balance


        if (checkpoints[account][0].fromBlock > blockNumber) {


            return 0;


        }





        uint32 lower = 0;


        uint32 upper = nCheckpoints - 1;


        while (upper > lower) {


            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow


            Checkpoint memory cp = checkpoints[account][center];


            if (cp.fromBlock == blockNumber) {


                return cp.votes;


            } else if (cp.fromBlock < blockNumber) {


                lower = center;


            } else {


                upper = center - 1;


            }


        }


        return checkpoints[account][lower].votes;


    }





    function _delegate(address delegator, address delegatee) internal {


        address currentDelegate = delegates[delegator];


        uint256 delegatorBalance = uint256(_balances[delegator]);


        delegates[delegator] = delegatee;





        emit DelegateChanged(delegator, currentDelegate, delegatee);





        _moveDelegates(currentDelegate, delegatee, delegatorBalance);


    }


    


    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {


        if (srcRep != dstRep && amount > 0) {


            if (srcRep != address(0)) {


                uint32 srcRepNum = numCheckpoints[srcRep];


                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;


                uint256 srcRepNew = sub96(srcRepOld, amount, "xVemp::_moveVotes: vote amount underflows");


                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);


            }





            if (dstRep != address(0)) {


                uint32 dstRepNum = numCheckpoints[dstRep];


                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;


                uint256 dstRepNew = add96(dstRepOld, amount, "xVemp::_moveVotes: vote amount overflows");


                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);


            }


        }


    }





    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {


      uint32 blockNumber = safe32(block.number, "xVemp::_writeCheckpoint: block number exceeds 32 bits");





      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {


          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;


      } else {


          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);


          numCheckpoints[delegatee] = nCheckpoints + 1;


      }





      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);


    }





    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {


        require(n < 2**32, errorMessage);


        return uint32(n);


    }





    function safe96(uint n, string memory errorMessage) internal pure returns (uint256) {


        require(n < 2**96, errorMessage);


        return uint256(n);


    }





    function add96(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        uint256 c = a + b;


        require(c >= a, errorMessage);


        return c;


    }





    function sub96(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {


        require(b <= a, errorMessage);


        return a - b;


    }





    function getChainId() internal pure returns (uint) {


        uint256 chainId;


        assembly { chainId := chainid() }


        return chainId;


    }


}





/**


 * @title Roles


 * @dev Library for managing addresses assigned to a Role.


 */


library Roles {


    struct Role {


        mapping (address => bool) bearer;


    }





    /**


     * @dev Give an account access to this role.


     */


    function add(Role storage role, address[] memory account) internal {


        for(uint256 i=0; i<account.length; i++) {


            require(!has(role, account[i]), "Roles: account already has role");


            role.bearer[account[i]] = true;


        }


    }





    /**


     * @dev Remove an account's access to this role.


     */


    function remove(Role storage role, address account) internal {


        require(has(role, account), "Roles: account does not have role");


        role.bearer[account] = false;


    }





    /**


     * @dev Check if an account has this role.


     * @return bool


     */


    function has(Role storage role, address account) internal view returns (bool) {


        require(account != address(0), "Roles: account is the zero address");


        return role.bearer[account];


    }


}





contract MinterRole is Context, Ownable {


    using Roles for Roles.Role;





    event MinterAdded(address[] account);


    event MinterRemoved(address indexed account);





    Roles.Role private _minters;





    constructor () internal {


        address[] memory admins = new address[](1);


        admins[0] = _msgSender();


        _addMinter(admins);


    }





    modifier onlyMinter() {


        require(isMinter(_msgSender()), "MinterRole: caller does not have the Minter role");


        _;


    }





    function isMinter(address account) public view returns (bool) {


        return _minters.has(account);


    }





    function addMinter(address[] memory account) public onlyMinter {


        _addMinter(account);


    }


    


    function removeMinter(address account) public onlyOwner {


        _removeMinter(account);


    }





    function renounceMinter() public {


        _removeMinter(_msgSender());


    }





    function _addMinter(address[] memory account) internal {


        _minters.add(account);


        emit MinterAdded(account);


    }





    function _removeMinter(address account) internal {


        _minters.remove(account);


        emit MinterRemoved(account);


    }


}





/**


 * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},


 * which have permission to mint (create) new tokens as they see fit.


 *


 * At construction, the deployer of the contract is the only minter.


 */


abstract contract ERC20Mintable is ERC20, MinterRole {


    /**


     * @dev See {ERC20-_mint}.


     *


     * Requirements:


     *


     * - the caller must have the {MinterRole}.


     */


    function mint(address account, uint256 amount) public onlyMinter returns (bool) {


        _mint(account, amount);


        return true;


    }


}





/**


 * @dev Extension of {ERC20} that allows token holders to destroy both their own


 * tokens and those that they have an allowance for, in a way that can be


 * recognized off-chain (via event analysis).


 */


abstract contract ERC20Burnable is Context, ERC20 {


    /**


     * @dev Destroys `amount` tokens from the caller.


     *


     * See {ERC20-_burn}.


     */


    function burn(uint256 amount) public virtual {


        _burn(_msgSender(), amount);


    }





    /**


     * @dev Destroys `amount` tokens from `account`, deducting from the caller's


     * allowance.


     *


     * See {ERC20-_burn} and {ERC20-allowance}.


     *


     * Requirements:


     *


     * - the caller must have allowance for ``accounts``'s tokens of at least


     * `amount`.


     */


    function burnFrom(address account, uint256 amount) public virtual {


        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");





        _approve(account, _msgSender(), decreasedAllowance);


        _burn(account, amount);


    }


}





// 


contract xVEMPToken is ERC20, ERC20Mintable, ERC20Burnable {


    


    constructor() public ERC20("xVEMP", "xVEMP"){


    }


}

--------------------------------------------------
File End
--------------------------------------------------

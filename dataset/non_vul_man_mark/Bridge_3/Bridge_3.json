{
  "contract": "Bridge_3",
  "source_code_path": "../contracts/",
  "type": "",
  "vulnerable_entry_function": {
    "file": "",
    "name": "",
    "signature": "",
    "lines": "",
    "attack_type": "",
    "vul_reason": "",
    "code_snippet": ""
  },
  "detail": "",
  "blg": {
    "Bridge_3": {
      "interoperability": "homogeneous",
      "roles": {
        "src_chain": [
          "Transfer1"
        ],
        "rel_chain": [
          "mint",
          "burn"
        ],
        "det_chain": [
          "Transfer1"
        ]
      },
      "src_chain": {
        "Bridge_3": "AVAX",
        "events": {
          "Transfer1": {
            "0": {
              "func_name": "Burn",
              "file_name": "BridgeContract.sol",
              "key_ops": [
                "transfers[msg.sender] = transfers[msg.sender] + 1",
                "token.burn(msg.sender, amount)"
              ],
              "child": {
                "0": {
                  "func_name": "burn",
                  "file_name": "BridgeToken.sol",
                  "key_ops": [
                    "require(msg.sender == bridge, \"Only admin\")",
                    "_burn(_owner, _amount)"
                  ],
                  "child": {}
                }
              }
            }
          }
        }
      },
      "rel_chain": {
        "chain_name": "RelayChain",
        "events": {
          "mint": {
            "0": {
              "func_name": "Mint",
              "file_name": "BridgeContract.sol",
              "key_ops": [
                "bytes32 messageHash = keccak256(abi.encodePacked(to, amount, nonce))",
                "bytes32 message = ECDSA.toEthSignedMessageHash(messageHash)",
                "address signer = ECDSA.recover(message, signature)",
                "require(signer == from, \"incorret Signature\")",
                "uint256 id = transfers[to]",
                "hasProcessed[to][id] = true",
                "token.mint(to, amount)"
              ],
              "child": {
                "0": {
                  "func_name": "mint",
                  "file_name": "BridgeToken.sol",
                  "key_ops": [
                    "require(msg.sender == bridge, \"Only admin\")",
                    "_mint(_to, _amount)"
                  ],
                  "child": {}
                }
              }
            }
          },
          "burn": {
            "0": {
              "func_name": "Burn",
              "file_name": "BridgeContract.sol",
              "key_ops": [
                "transfers[msg.sender] = transfers[msg.sender] + 1",
                "token.burn(msg.sender, amount)"
              ],
              "child": {
                "0": {
                  "func_name": "burn",
                  "file_name": "BridgeToken.sol",
                  "key_ops": [
                    "require(msg.sender == bridge, \"Only admin\")",
                    "_burn(_owner, _amount)"
                  ],
                  "child": {}
                }
              }
            }
          }
        }
      },
      "det_chain": {
        "chain_name": "BSC",
        "events": {
          "Transfer1": {
            "0": {
              "func_name": "Mint",
              "file_name": "BridgeContract.sol",
              "key_ops": [
                "bytes32 messageHash = keccak256(abi.encodePacked(to, amount, nonce))",
                "bytes32 message = ECDSA.toEthSignedMessageHash(messageHash)",
                "address signer = ECDSA.recover(message, signature)",
                "require(signer == from, \"incorret Signature\")",
                "uint256 id = transfers[to]",
                "hasProcessed[to][id] = true",
                "token.mint(to, amount)"
              ],
              "child": {
                "0": {
                  "func_name": "mint",
                  "file_name": "BridgeToken.sol",
                  "key_ops": [
                    "require(msg.sender == bridge, \"Only admin\")",
                    "_mint(_to, _amount)"
                  ],
                  "child": {}
                }
              }
            }
          }
        }
      }
    }
  },
  "cag": []
}